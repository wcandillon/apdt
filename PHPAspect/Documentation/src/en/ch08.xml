<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="intertype-declarations">
    <title>Inter-type declarations</title>
    <para>
    Aspects can declare attributes, methods, constants 
    and constructors that are owned by other types. 
    These are called inter-type declarations.
    </para>
    <example id="intertype-declarations.attribute">
        <title>Attribute introduction</title>
        <programlisting><![CDATA[<?php
    //Declare $pearLog and $debug attributes in all types prefixed by Bo.
    private Bo*::$pearLog, Bo*::$debug=false;
    //Declare $instance attribute in Foo and Bar types.
    private static Foo,Bar::$instance = null;
?>]]></programlisting>
    </example>
    <example id="intertype-declarations.constant">
        <title>Constant introduction</title>
        <programlisting><![CDATA[<?php
    //Declare PEAR_LOG_DEBUG and PEAR_LOG_ERR constants in class Log. 
    Log::PEAR_LOG_DEBUG=7, Log::PEAR_LOG_ERR=3;
?>]]></programlisting>
    </example>
    <example id="intertype-declarations.method">
        <title>Method introduction</title>
        <programlisting><![CDATA[<?php
    //Declare setLog method in all types prefixed by Bo.
    public function Bo*::setLog(Log $log){
        if($this->debug){
            $log->setMask(Log::PEAR_LOG_DEBUG);
        }else{
            $log->setMask(Log::PEAR_LOG_ERROR);
        }
        $this->pearLog = $log;
    }
?>]]></programlisting>
    </example>
</chapter>