<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="aop">
    <title>Aspect-Oriented Programming</title>
    <section id="aop.evolution-of-paradigms">
        <title>Programming evolutions</title>
        <para>
        In order to always improve the modularization and the reuse
        of programs source code, Programming paradigms never ceased
        to be more and more abstract models.
        Object-Oriented Programming have shown very powerful
        abilities to modularize vertical concerns into single entities.
        Packages, classes, and methods all help programmers to encapsulate
        concerns into single entities. But although these methodologies
        can't successfully encapsulate horizontal concerns, also called
        crosscutting concerns, because they exist in many parts of the program.
        </para>
        <figure id="evolution-of-paradigms">
            <title>Programming evolutions</title>
            <graphic fileref="figures/evolution-of-paradigms.png" />
        </figure>
        <para>
          So we can all ask ourselves: what will be the programming
          paradigm of tomorrow ?
        </para>
    </section>
    <section id="aop.technicals-aspects-in-oop">
        <title>Technical concerns in OOP</title>
        <para>
        In Object-Oriented Programming, classes are often polluted
        by cross-cutting concerns (also called technical concerns)
        tangled with basic functionalities (also called the business
        logic concern).
        These cross-cutting concerns can by various: transactions, security, logging, persistence,
        session, etc.
        </para>
        <figure id="concerns-in-oop">
          <title>In OOP, the business logic has strong dependencies with technicals technical modules addresses.</title>
          <graphic fileref="figures/concerns-in-oop.png" />
        </figure>
        <para>
          This pollution has many symptoms:
            <itemizedlist>
              <listitem>Code tangling</listitem>
              <listitem>Code scattering</listitem>
              <listitem>Code comprehension</listitem>
              <listitem>Code reusability</listitem>
              <listitem>Code evolution</listitem>
          </itemizedlist>
        </para>
    </section>
    <section id="aop.aspect-oriented-programming">
      <title>Aspect-Oriented Programming</title>
      <para>
        In software engineering, the programming paradigms of 
        aspect-oriented programming (AOP) attempt to aid programmers
        in the separation of these cross-cutting concerns.
        AOP is defining all mechanisms for:
        <itemizedlist>
          <listitem>Writing aspects as a new software entiy.</listitem>
          <listitem>Weaving technical concerns on business logic.</listitem>
        </itemizedlist>
      </para>
      <figure id="ioc-in-aop">
        <title>Inversion of control in AOP.</title>
        <graphic fileref="figures/ioc-in-aop.png" />
        </figure>
    </section>
    <para>
    An aspect has the following anatomy:
      <itemizedlist>
        <listitem>Joinpoints.</listitem>
        <listitem>Pointcuts.</listitem>
        <listitem>Advices.</listitem>
        <listitem>Inter-type declarations.</listitem>
        <listitem>Attributes.</listitem>
        <listitem>Methods.</listitem>
      </itemizedlist>
    </para>
    <para>
    The joinpoint notion provides all the mechanisms to identify
    patterns in the program flow.
    <figure id="joinpoints">
      <title>Examples of joinpoints.</title>
      <graphic fileref="figures/joinpoints.png" />
    </figure>
        <itemizedlist>
            <listitem>Method execution (1).</listitem>
            <listitem>Attribute writing/reading (2).</listitem>
            <listitem>Object construction (3).</listitem>
            <listitem>Method call (4).</listitem>
            <listitem>Object descrution (5).</listitem>
            <listitem>Exception throwing (6).</listitem>
        </itemizedlist>
    </para>
    <para>
    A pointcut is a logical composition of joinpoints.
    </para>
    <para>
    Advices represents the injected code into poincuts.
    There are three kinds of advices:
        <itemizedlist>
          <listitem>Before.</listitem>
          <listitem>Around (instead).</listitem>
          <listitem>After.</listitem>
        </itemizedlist>
    </para>
    <para>
    Aspects can declare attributes, methods, constants and constructors that are owned by other types. These are called inter-type declarations.
    </para>
</chapter>
