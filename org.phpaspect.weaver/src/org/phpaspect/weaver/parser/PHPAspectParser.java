
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 26 16:47:35 GMT+01:00 2007
//----------------------------------------------------

package org.phpaspect.weaver.parser;

import java.util.*;
import java_cup.runtime.*;
import org.eclipse.php.internal.core.ast.nodes.*;
import org.phpaspect.weaver.parser.nodes.*;
import org.eclipse.php.internal.core.phpModel.parser.PHPCodeDataFactory;
import org.eclipse.php.internal.core.phpModel.phpElementData.IPHPMarker;
import org.eclipse.php.internal.core.phpModel.phpElementData.PHPMarker;
import org.eclipse.php.internal.core.phpModel.phpElementData.UserData;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 26 16:47:35 GMT+01:00 2007
  */
public class PHPAspectParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PHPAspectParser() {super();}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\011\003" +
    "\000\002\012\013\000\002\031\003\000\002\031\002\000" +
    "\002\013\003\000\002\013\004\000\002\013\004\000\002" +
    "\014\004\000\002\014\002\000\002\015\003\000\002\015" +
    "\011\000\002\015\005\000\002\015\014\000\002\015\013" +
    "\000\002\015\013\000\002\015\013\000\002\015\013\000" +
    "\002\025\003\000\002\025\005\000\002\025\002\000\002" +
    "\026\004\000\002\126\005\000\002\126\005\000\002\126" +
    "\005\000\002\126\004\000\002\126\003\000\002\127\005" +
    "\000\002\127\011\000\002\020\003\000\002\020\003\000" +
    "\002\027\003\000\002\027\002\000\002\030\003\000\002" +
    "\030\005\000\002\016\007\000\002\016\011\000\002\016" +
    "\005\000\002\016\007\000\002\017\005\000\002\017\003" +
    "\000\002\021\004\000\002\022\003\000\002\022\005\000" +
    "\002\023\004\000\002\023\004\000\002\023\003\000\002" +
    "\023\003\000\002\024\003\000\002\024\002\000\002\006" +
    "\004\000\002\006\002\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\006\000\002\005\003\000" +
    "\002\010\005\000\002\010\011\000\002\010\014\000\002" +
    "\010\007\000\002\010\011\000\002\010\013\000\002\010" +
    "\007\000\002\010\004\000\002\010\005\000\002\010\004" +
    "\000\002\010\005\000\002\010\004\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\004\000\002\010" +
    "\005\000\002\010\007\000\002\010\012\000\002\010\012" +
    "\000\002\010\007\000\002\010\003\000\002\010\017\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\145\003\000\002\145\002\000\002\146\003\000\002\146" +
    "\004\000\002\147\012\000\002\032\003\000\002\032\005" +
    "\000\002\033\003\000\002\034\003\000\002\034\005\000" +
    "\002\142\003\000\002\143\003\000\002\065\002\000\002" +
    "\065\003\000\002\150\013\000\002\151\011\000\002\151" +
    "\010\000\002\152\003\000\002\152\004\000\002\152\004" +
    "\000\002\153\002\000\002\153\004\000\002\124\003\000" +
    "\002\125\002\000\002\125\004\000\002\154\002\000\002" +
    "\154\004\000\002\155\003\000\002\155\005\000\002\035" +
    "\002\000\002\035\004\000\002\036\003\000\002\036\004" +
    "\000\002\037\003\000\002\037\006\000\002\040\003\000" +
    "\002\040\006\000\002\041\003\000\002\041\006\000\002" +
    "\042\005\000\002\042\007\000\002\043\005\000\002\043" +
    "\006\000\002\043\006\000\002\043\007\000\002\044\002" +
    "\000\002\044\007\000\002\044\006\000\002\045\003\000" +
    "\002\045\003\000\002\046\003\000\002\046\006\000\002" +
    "\047\002\000\002\047\010\000\002\050\002\000\002\050" +
    "\011\000\002\051\002\000\002\051\004\000\002\052\002" +
    "\000\002\052\005\000\002\053\003\000\002\053\002\000" +
    "\002\054\003\000\002\054\005\000\002\055\004\000\002" +
    "\055\005\000\002\055\006\000\002\055\007\000\002\156" +
    "\002\000\002\156\003\000\002\156\003\000\002\056\003" +
    "\000\002\056\002\000\002\057\003\000\002\057\003\000" +
    "\002\057\004\000\002\057\005\000\002\057\005\000\002" +
    "\057\006\000\002\060\005\000\002\060\003\000\002\061" +
    "\003\000\002\061\004\000\002\061\006\000\002\062\005" +
    "\000\002\062\007\000\002\062\003\000\002\062\005\000" +
    "\002\063\004\000\002\063\002\000\002\064\005\000\002" +
    "\064\004\000\002\064\012\000\002\064\003\000\002\135" +
    "\003\000\002\135\005\000\002\160\003\000\002\160\003" +
    "\000\002\134\002\000\002\134\003\000\002\136\003\000" +
    "\002\136\004\000\002\137\003\000\002\137\003\000\002" +
    "\137\003\000\002\137\003\000\002\137\003\000\002\137" +
    "\003\000\002\132\005\000\002\132\007\000\002\132\003" +
    "\000\002\132\005\000\002\133\007\000\002\133\006\000" +
    "\002\066\005\000\002\066\003\000\002\067\002\000\002" +
    "\067\003\000\002\070\005\000\002\070\003\000\002\071" +
    "\010\000\002\071\005\000\002\071\006\000\002\071\010" +
    "\000\002\071\005\000\002\071\004\000\002\071\005\000" +
    "\002\071\005\000\002\071\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\071\005" +
    "\000\002\071\004\000\002\071\004\000\002\071\004\000" +
    "\002\071\004\000\002\071\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\071\005" +
    "\000\002\071\005\000\002\071\005\000\002\071\005\000" +
    "\002\071\005\000\002\071\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\004\000\002\071\004\000\002\071" +
    "\004\000\002\071\004\000\002\071\005\000\002\071\005" +
    "\000\002\071\005\000\002\071\005\000\002\071\005\000" +
    "\002\071\005\000\002\071\005\000\002\071\005\000\002" +
    "\071\005\000\002\071\005\000\002\071\007\000\002\071" +
    "\003\000\002\071\004\000\002\071\004\000\002\071\004" +
    "\000\002\071\004\000\002\071\004\000\002\071\004\000" +
    "\002\071\004\000\002\071\004\000\002\071\004\000\002" +
    "\071\003\000\002\071\006\000\002\071\005\000\002\071" +
    "\004\000\002\072\006\000\002\072\010\000\002\072\010" +
    "\000\002\072\006\000\002\131\003\000\002\167\003\000" +
    "\002\167\003\000\002\171\006\000\002\171\003\000\002" +
    "\173\004\000\002\173\002\000\002\174\004\000\002\073" +
    "\002\000\002\073\004\000\002\073\005\000\002\074\002" +
    "\000\002\074\005\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\004\000\002\076\004" +
    "\000\002\076\006\000\002\076\003\000\002\175\005\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\005\000\002\077\005\000\002\077" +
    "\005\000\002\100\002\000\002\100\004\000\002\101\002" +
    "\000\002\101\003\000\002\102\007\000\002\102\005\000" +
    "\002\102\005\000\002\102\003\000\002\103\003\000\002" +
    "\103\003\000\002\157\003\000\002\130\003\000\002\161" +
    "\003\000\002\144\007\000\002\144\003\000\002\141\004" +
    "\000\002\141\002\000\002\163\005\000\002\140\005\000" +
    "\002\140\002\000\002\162\003\000\002\162\004\000\002" +
    "\164\005\000\002\176\003\000\002\176\003\000\002\172" +
    "\003\000\002\172\004\000\002\172\003\000\002\104\006" +
    "\000\002\104\006\000\002\104\003\000\002\105\003\000" +
    "\002\105\006\000\002\106\002\000\002\106\003\000\002" +
    "\107\003\000\002\107\003\000\002\110\006\000\002\110" +
    "\006\000\002\110\003\000\002\111\003\000\002\111\005" +
    "\000\002\112\003\000\002\112\004\000\002\113\005\000" +
    "\002\113\003\000\002\114\003\000\002\114\006\000\002" +
    "\114\002\000\002\115\002\000\002\115\004\000\002\116" +
    "\007\000\002\116\005\000\002\116\005\000\002\116\003" +
    "\000\002\116\010\000\002\116\006\000\002\116\006\000" +
    "\002\116\004\000\002\117\004\000\002\117\004\000\002" +
    "\117\004\000\002\117\004\000\002\117\004\000\002\117" +
    "\004\000\002\117\004\000\002\117\004\000\002\117\004" +
    "\000\002\117\004\000\002\117\004\000\002\117\002\000" +
    "\002\120\003\000\002\120\006\000\002\120\005\000\002" +
    "\120\005\000\002\120\010\000\002\120\005\000\002\121" +
    "\003\000\002\121\003\000\002\121\003\000\002\122\006" +
    "\000\002\122\006\000\002\122\004\000\002\122\004\000" +
    "\002\122\006\000\002\122\004\000\002\122\004\000\002" +
    "\165\003\000\002\165\005\000\002\170\005\000\002\166" +
    "\003\000\002\123\003\000\002\123\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u034d\000\002\001\ufffe\000\004\002\u034f\001\002\000" +
    "\010\062\011\217\013\220\012\001\001\000\002\001\ufffd" +
    "\000\002\001\ufffc\000\004\010\017\001\002\000\002\001" +
    "\ufff8\000\004\062\016\001\002\000\004\062\015\001\002" +
    "\000\002\001\uffff\000\002\001\ufff7\000\002\001\ufff6\000" +
    "\004\073\020\001\uff93\000\004\010\026\001\002\000\004" +
    "\074\023\001\uff8e\000\004\063\032\001\ufff9\000\004\010" +
    "\026\001\002\000\004\124\027\001\uff8d\000\002\001\uff8c" +
    "\000\002\001\ufee9\000\004\010\026\001\002\000\002\001" +
    "\uff8b\000\004\112\033\001\002\000\002\001\ufffa\000\002" +
    "\001\ufff4\000\036\031\037\045\041\054\060\065\043\066" +
    "\051\067\044\113\053\115\052\216\056\217\040\220\042" +
    "\221\047\222\036\223\055\001\uff45\000\006\044\u0337\070" +
    "\u0338\001\002\000\002\001\uff40\000\004\071\u0331\001\002" +
    "\000\002\001\uff3d\000\004\010\u032e\001\002\000\002\001" +
    "\uff3c\000\004\224\u0326\001\002\000\004\224\u031e\001\002" +
    "\000\002\001\ufff3\000\022\044\uff44\070\uff44\216\056\217" +
    "\040\220\042\221\047\222\036\223\055\001\uff47\000\002" +
    "\001\uff3f\000\002\001\uff43\000\004\224\174\001\002\000" +
    "\002\001\uff4a\000\004\146\173\001\002\000\002\001\ufff5" +
    "\000\002\001\uff41\000\002\001\uff3e\000\012\010\137\012" +
    "\132\162\133\170\135\001\002\000\002\001\uff46\000\006" +
    "\124\062\146\063\001\002\000\004\010\064\001\002\000" +
    "\002\001\uff4c\000\004\131\065\001\002\000\034\006\076" +
    "\007\073\010\104\020\103\100\070\101\101\102\106\103" +
    "\102\104\075\105\077\116\100\166\066\167\105\001\002" +
    "\000\034\006\076\007\073\010\104\020\103\100\070\101" +
    "\101\102\106\103\102\104\075\105\077\116\100\166\066" +
    "\167\105\001\002\000\002\001\ufed3\000\004\224\112\001" +
    "\002\000\002\001\ufed4\000\002\001\uff37\000\002\001\ufedb" +
    "\000\002\001\ufecf\000\002\001\ufed9\000\002\001\ufedc\000" +
    "\002\001\ufed8\000\002\001\ufe6a\000\002\001\ufed7\000\002" +
    "\001\ufed5\000\002\001\ufeda\000\004\114\110\001\ufe6b\000" +
    "\034\006\076\007\073\010\104\020\103\100\070\101\101" +
    "\102\106\103\102\104\075\105\077\116\100\166\066\167" +
    "\105\001\002\000\002\001\ufed6\000\002\001\ufed1\000\004" +
    "\010\111\001\002\000\002\001\ufece\000\034\006\076\007" +
    "\073\010\104\020\103\100\070\101\101\102\106\103\102" +
    "\104\075\105\077\116\100\166\066\167\105\001\ufec6\000" +
    "\004\225\125\001\002\000\004\124\120\001\ufec4\000\004" +
    "\076\116\001\ufebf\000\034\006\076\007\073\010\104\020" +
    "\103\100\070\101\101\102\106\103\102\104\075\105\077" +
    "\116\100\166\066\167\105\001\002\000\002\001\ufec0\000" +
    "\034\006\076\007\073\010\104\020\103\100\070\101\101" +
    "\102\106\103\102\104\075\105\077\116\100\166\066\167" +
    "\105\001\ufec3\000\002\001\ufec5\000\004\076\123\001\ufec1" +
    "\000\034\006\076\007\073\010\104\020\103\100\070\101" +
    "\101\102\106\103\102\104\075\105\077\116\100\166\066" +
    "\167\105\001\002\000\002\001\ufec2\000\002\001\ufed0\000" +
    "\002\001\ufed2\000\002\001\uffd5\000\006\114\167\124\144" +
    "\001\002\000\006\124\162\146\163\001\002\000\004\131" +
    "\160\001\uff39\000\004\010\156\001\002\000\004\166\155" +
    "\001\uffcc\000\002\001\uffcf\000\006\010\153\170\152\001" +
    "\uffd3\000\002\001\uffce\000\006\124\141\146\142\001\002" +
    "\000\010\010\137\162\133\170\135\001\002\000\002\001" +
    "\ufff1\000\006\114\145\124\144\001\002\000\010\010\137" +
    "\162\133\170\135\001\002\000\004\012\146\001\002\000" +
    "\004\131\147\001\uffda\000\034\006\076\007\073\010\104" +
    "\020\103\100\070\101\101\102\106\103\102\104\075\105" +
    "\077\116\100\166\066\167\105\001\002\000\002\001\uffd9" +
    "\000\002\001\uffd6\000\002\001\uffd1\000\002\001\uffd0\000" +
    "\002\001\uffd4\000\002\001\uffcd\000\004\163\157\001\002" +
    "\000\002\001\uffd2\000\034\006\076\007\073\010\104\020" +
    "\103\100\070\101\101\102\106\103\102\104\075\105\077" +
    "\116\100\166\066\167\105\001\002\000\002\001\uff38\000" +
    "\004\012\164\001\002\000\002\001\uff4d\000\004\131\165" +
    "\001\uff3b\000\034\006\076\007\073\010\104\020\103\100" +
    "\070\101\101\102\106\103\102\104\075\105\077\116\100" +
    "\166\066\167\105\001\002\000\002\001\uff3a\000\004\012" +
    "\170\001\002\000\004\131\171\001\uffd8\000\034\006\076" +
    "\007\073\010\104\020\103\100\070\101\101\102\106\103" +
    "\102\104\075\105\077\116\100\166\066\167\105\001\002" +
    "\000\002\001\uffd7\000\002\001\ufffb\000\010\010\200\100" +
    "\175\225\uff6a\001\uff63\000\002\001\uff61\000\006\012\u0317" +
    "\153\u0316\001\002\000\004\225\205\001\002\000\002\001" +
    "\uff62\000\004\124\203\001\uff6b\000\002\001\uff69\000\006" +
    "\010\200\100\175\001\uff63\000\002\001\uff68\000\004\226" +
    "\206\001\002\000\012\010\213\173\210\212\207\224\212" +
    "\001\002\000\004\224\u030c\001\002\000\012\010\213\173" +
    "\210\212\207\224\212\001\002\000\002\001\uffe3\000\012" +
    "\010\213\173\210\212\207\224\212\001\002\000\004\224" +
    "\u0307\001\002\000\010\112\217\147\216\150\215\001\002" +
    "\000\012\010\213\173\210\212\207\224\212\001\002\000" +
    "\012\010\213\173\210\212\207\224\212\001\002\000\002" +
    "\001\uffca\000\226\003\324\004\345\005\356\006\076\007" +
    "\073\010\245\011\262\012\267\014\302\020\103\021\330" +
    "\022\326\023\254\025\244\027\310\031\355\034\312\036" +
    "\335\042\264\043\327\044\315\046\341\047\252\051\354" +
    "\052\236\053\223\055\305\056\347\057\241\060\265\061" +
    "\243\072\344\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\112\272\113\323\115\233\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\146\222\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\216\253\217\270\220\230\224" +
    "\351\227\307\230\320\231\266\232\304\001\002\000\004" +
    "\224\u0302\001\002\000\002\001\uffac\000\006\012\u02f7\227" +
    "\u02f8\001\002\000\004\224\u02e2\001\002\000\002\001\ufef1" +
    "\000\134\004\345\006\076\007\073\010\245\011\262\012" +
    "\267\020\103\034\312\056\347\057\241\077\352\100\224" +
    "\101\101\102\106\103\102\104\075\105\077\106\246\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\166\313\167\274\173\346\174\226\176\261\177\353\200" +
    "\237\201\337\202\251\203\334\204\300\205\340\206\277" +
    "\207\250\212\303\224\351\227\307\230\320\231\266\232" +
    "\304\001\002\000\002\001\uffcb\000\004\061\u02e0\001\002" +
    "\000\070\033\u0103\125\372\126\u010b\127\364\145\367\146" +
    "\u02df\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109" +
    "\155\375\156\361\157\373\160\u0108\161\u0107\162\370\163" +
    "\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377" +
    "\172\362\175\366\001\002\000\002\001\ufeab\000\002\001" +
    "\uffa8\000\036\131\u0190\132\u0193\133\u0191\134\u019a\135\u0194" +
    "\136\u0199\137\u0196\140\u0198\141\u0192\142\u018f\143\u0195\144" +
    "\u0197\176\ufeba\177\ufeba\001\ufebc\000\002\001\uff9c\000\006" +
    "\020\u02db\224\u02d9\001\002\000\134\004\345\006\076\007" +
    "\073\010\245\011\262\012\267\020\103\034\312\056\347" +
    "\057\241\077\352\100\224\101\101\102\106\103\102\104" +
    "\075\105\077\106\246\116\100\117\240\120\275\121\257" +
    "\122\332\123\314\130\271\166\313\167\274\173\346\174" +
    "\226\176\261\177\353\200\237\201\337\202\251\203\334" +
    "\204\300\205\340\206\277\207\250\212\303\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\134\004\345" +
    "\006\076\007\073\010\245\011\262\012\267\020\103\034" +
    "\312\056\347\057\241\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\116\100\117\240\120" +
    "\275\121\257\122\332\123\314\130\271\166\313\167\274" +
    "\173\346\174\226\176\261\177\353\200\237\201\337\202" +
    "\251\203\334\204\300\205\340\206\277\207\250\212\303" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\004\224\u02d4\001\002\000\004\114\u02d2\001\002\000\002" +
    "\001\uff96\000\004\224\u02c1\001\002\000\004\114\ufee9\001" +
    "\ufe6b\000\002\001\ufe80\000\002\001\ufeaf\000\134\004\345" +
    "\006\076\007\073\010\245\011\262\012\267\020\103\034" +
    "\312\056\347\057\241\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\116\100\117\240\120" +
    "\275\121\257\122\332\123\314\130\271\166\313\167\274" +
    "\173\346\174\226\176\261\177\353\200\237\201\337\202" +
    "\251\203\334\204\300\205\340\206\277\207\250\212\303" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\134\004\345\006\076\007\073\010\245\011\262\012\267" +
    "\020\103\034\312\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\002\000\004\112\u02a6\001\002\000\004\012\u029d\001" +
    "\002\000\004\224\u0294\001\002\000\002\001\ufeae\000\004" +
    "\010\u028e\001\002\000\004\224\u028b\001\002\000\004\075" +
    "\u0280\001\ufeb8\000\012\010\245\012\267\116\100\227\307" +
    "\001\002\000\002\001\ufecc\000\010\112\u011b\210\u011c\224" +
    "\ufeb2\001\ufead\000\136\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\146\u027c\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\002\000\004\224\u0279\001" +
    "\002\000\002\001\ufe80\000\002\001\ufe6c\000\004\061\u0276" +
    "\001\002\000\134\004\345\006\076\007\073\010\245\011" +
    "\262\012\267\020\103\034\312\056\347\057\241\077\352" +
    "\100\224\101\101\102\106\103\102\104\075\105\077\106" +
    "\246\116\100\117\240\120\275\121\257\122\332\123\314" +
    "\130\271\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\224\351\227\307\230\320\231" +
    "\266\232\304\001\002\000\002\001\uffca\000\002\001\ufefb" +
    "\000\134\004\345\006\076\007\073\010\245\011\262\012" +
    "\267\020\103\034\312\056\347\057\241\077\352\100\224" +
    "\101\101\102\106\103\102\104\075\105\077\106\246\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\166\313\167\274\173\346\174\226\176\261\177\353\200" +
    "\237\201\337\202\251\203\334\204\300\205\340\206\277" +
    "\207\250\212\303\224\351\227\307\230\320\231\266\232" +
    "\304\001\002\000\134\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\002\000\006\012\267\227\u0127\001" +
    "\002\000\134\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\224\351\227\307\230\320\231\266" +
    "\232\304\001\002\000\134\004\345\006\076\007\073\010" +
    "\245\011\262\012\267\020\103\034\312\056\347\057\241" +
    "\077\352\100\224\101\101\102\106\103\102\104\075\105" +
    "\077\106\246\116\100\117\240\120\275\121\257\122\332" +
    "\123\314\130\271\166\313\167\274\173\346\174\226\176" +
    "\261\177\353\200\237\201\337\202\251\203\334\204\300" +
    "\205\340\206\277\207\250\212\303\224\351\227\307\230" +
    "\320\231\266\232\304\001\002\000\002\001\ufecb\000\002" +
    "\001\uffb3\000\010\010\u0119\012\267\227\307\001\002\000" +
    "\002\001\ufe80\000\004\224\u0262\001\002\000\006\176\u0260" +
    "\177\u0261\001\002\000\004\112\u0128\001\ufe9c\000\004\224" +
    "\u0249\001\002\000\002\001\uffc8\000\134\004\345\006\076" +
    "\007\073\010\245\011\262\012\267\020\103\034\312\056" +
    "\347\057\241\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\116\100\117\240\120\275\121" +
    "\257\122\332\123\314\130\271\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\224\351" +
    "\227\307\230\320\231\266\232\304\001\002\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\134\004\345\006\076\007\073\010\245\011\262\012" +
    "\267\020\103\034\312\056\347\057\241\077\352\100\224" +
    "\101\101\102\106\103\102\104\075\105\077\106\246\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\166\313\167\274\173\346\174\226\176\261\177\353\200" +
    "\237\201\337\202\251\203\334\204\300\205\340\206\277" +
    "\207\250\212\303\224\351\227\307\230\320\231\266\232" +
    "\304\001\002\000\004\153\u0213\001\uff9b\000\002\001\ufeca" +
    "\000\002\001\uffc5\000\002\001\ufe80\000\002\001\ufea7\000" +
    "\004\010\u0207\001\002\000\002\001\uffed\000\002\001\uffa9" +
    "\000\002\001\ufea8\000\210\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\027\310\031\355\034" +
    "\312\036\335\042\264\043\327\046\341\047\252\051\354" +
    "\052\236\053\223\055\305\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\112\272\115\233\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\146\222\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\216\253" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\136\004\345\006\076\007\073\010\245\011\262\012\267" +
    "\020\103\034\312\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\146" +
    "\u01fe\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\224\351\227\307\230\320\231\266" +
    "\232\304\001\002\000\134\004\345\006\076\007\073\010" +
    "\245\011\262\012\267\020\103\034\312\056\347\057\241" +
    "\077\352\100\224\101\101\102\106\103\102\104\075\105" +
    "\077\106\246\116\100\117\240\120\275\121\257\122\332" +
    "\123\314\130\271\166\313\167\274\173\346\174\226\176" +
    "\261\177\353\200\237\201\337\202\251\203\334\204\300" +
    "\205\340\206\277\207\250\212\303\224\351\227\307\230" +
    "\320\231\266\232\304\001\002\000\002\001\uffc7\000\134" +
    "\004\345\006\076\007\073\010\245\011\262\012\267\020" +
    "\103\034\312\056\347\057\241\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\116\100\117" +
    "\240\120\275\121\257\122\332\123\314\130\271\166\313" +
    "\167\274\173\346\174\226\176\261\177\353\200\237\201" +
    "\337\202\251\203\334\204\300\205\340\206\277\207\250" +
    "\212\303\224\351\227\307\230\320\231\266\232\304\001" +
    "\002\000\004\224\u01b7\001\ufecd\000\134\004\345\006\076" +
    "\007\073\010\245\011\262\012\267\020\103\034\312\056" +
    "\347\057\241\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\116\100\117\240\120\275\121" +
    "\257\122\332\123\314\130\271\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\224\351" +
    "\227\307\230\320\231\266\232\304\001\002\000\004\224" +
    "\u01dc\001\002\000\002\001\uff9d\000\134\004\345\006\076" +
    "\007\073\010\245\011\262\012\267\020\103\034\312\056" +
    "\347\057\241\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\116\100\117\240\120\275\121" +
    "\257\122\332\123\314\130\271\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\224\351" +
    "\227\307\230\320\231\266\232\304\001\002\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\136\004\345\006\076\007\073\010\245\011\262\012" +
    "\267\020\103\034\312\056\347\057\241\077\352\100\224" +
    "\101\101\102\106\103\102\104\075\105\077\106\246\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\146\u01d5\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\224\351\227\307\230\320\231" +
    "\266\232\304\001\002\000\002\001\ufebd\000\002\001\ufebe" +
    "\000\002\001\uff91\000\004\224\u01d0\001\ufee1\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\004\224\u01c9\001\002\000\002\001\uffc9\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\004\224\u01ba\001\002\000\012\010\245\012\267\116" +
    "\100\227\307\001\002\000\134\004\345\006\076\007\073" +
    "\010\245\011\262\012\267\020\103\034\312\056\347\057" +
    "\241\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\002\000\004\224\u016c\001" +
    "\002\000\004\224\357\001\002\000\134\004\345\006\076" +
    "\007\073\010\245\011\262\012\267\020\103\034\312\056" +
    "\347\057\241\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\116\100\117\240\120\275\121" +
    "\257\122\332\123\314\130\271\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\224\351" +
    "\227\307\230\320\231\266\232\304\001\002\000\070\033" +
    "\u0103\125\372\126\u010b\127\364\145\367\147\363\150\u0105" +
    "\151\365\152\374\153\u0104\154\u0109\155\375\156\361\157" +
    "\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376" +
    "\166\u010a\167\371\170\u0101\171\377\172\362\175\366\225" +
    "\u0100\001\002\000\134\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\002\000\134\004\345\006\076\007" +
    "\073\010\245\011\262\012\267\020\103\034\312\056\347" +
    "\057\241\077\352\100\224\101\101\102\106\103\102\104" +
    "\075\105\077\106\246\116\100\117\240\120\275\121\257" +
    "\122\332\123\314\130\271\166\313\167\274\173\346\174" +
    "\226\176\261\177\353\200\237\201\337\202\251\203\334" +
    "\204\300\205\340\206\277\207\250\212\303\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\134\004\345" +
    "\006\076\007\073\010\245\011\262\012\267\020\103\034" +
    "\312\056\347\057\241\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\116\100\117\240\120" +
    "\275\121\257\122\332\123\314\130\271\166\313\167\274" +
    "\173\346\174\226\176\261\177\353\200\237\201\337\202" +
    "\251\203\334\204\300\205\340\206\277\207\250\212\303" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\134\004\345\006\076\007\073\010\245\011\262\012\267" +
    "\020\103\034\312\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\002\000\134\004\345\006\076\007\073\010\245\011" +
    "\262\012\267\020\103\034\312\056\347\057\241\077\352" +
    "\100\224\101\101\102\106\103\102\104\075\105\077\106" +
    "\246\116\100\117\240\120\275\121\257\122\332\123\314" +
    "\130\271\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\224\351\227\307\230\320\231" +
    "\266\232\304\001\002\000\134\004\345\006\076\007\073" +
    "\010\245\011\262\012\267\020\103\034\312\056\347\057" +
    "\241\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\002\000\134\004\345\006" +
    "\076\007\073\010\245\011\262\012\267\020\103\034\312" +
    "\056\347\057\241\077\352\100\224\101\101\102\106\103" +
    "\102\104\075\105\077\106\246\116\100\117\240\120\275" +
    "\121\257\122\332\123\314\130\271\166\313\167\274\173" +
    "\346\174\226\176\261\177\353\200\237\201\337\202\251" +
    "\203\334\204\300\205\340\206\277\207\250\212\303\224" +
    "\351\227\307\230\320\231\266\232\304\001\002\000\134" +
    "\004\345\006\076\007\073\010\245\011\262\012\267\020" +
    "\103\034\312\056\347\057\241\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\116\100\117" +
    "\240\120\275\121\257\122\332\123\314\130\271\166\313" +
    "\167\274\173\346\174\226\176\261\177\353\200\237\201" +
    "\337\202\251\203\334\204\300\205\340\206\277\207\250" +
    "\212\303\224\351\227\307\230\320\231\266\232\304\001" +
    "\002\000\134\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\224\351\227\307\230\320\231\266" +
    "\232\304\001\002\000\134\004\345\006\076\007\073\010" +
    "\245\011\262\012\267\020\103\034\312\056\347\057\241" +
    "\077\352\100\224\101\101\102\106\103\102\104\075\105" +
    "\077\106\246\116\100\117\240\120\275\121\257\122\332" +
    "\123\314\130\271\166\313\167\274\173\346\174\226\176" +
    "\261\177\353\200\237\201\337\202\251\203\334\204\300" +
    "\205\340\206\277\207\250\212\303\224\351\227\307\230" +
    "\320\231\266\232\304\001\002\000\134\004\345\006\076" +
    "\007\073\010\245\011\262\012\267\020\103\034\312\056" +
    "\347\057\241\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\116\100\117\240\120\275\121" +
    "\257\122\332\123\314\130\271\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\224\351" +
    "\227\307\230\320\231\266\232\304\001\002\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\134\004\345\006\076\007\073\010\245\011\262\012" +
    "\267\020\103\034\312\056\347\057\241\077\352\100\224" +
    "\101\101\102\106\103\102\104\075\105\077\106\246\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\166\313\167\274\173\346\174\226\176\261\177\353\200" +
    "\237\201\337\202\251\203\334\204\300\205\340\206\277" +
    "\207\250\212\303\224\351\227\307\230\320\231\266\232" +
    "\304\001\002\000\134\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\002\000\134\004\345\006\076\007" +
    "\073\010\245\011\262\012\267\020\103\034\312\056\347" +
    "\057\241\077\352\100\224\101\101\102\106\103\102\104" +
    "\075\105\077\106\246\116\100\117\240\120\275\121\257" +
    "\122\332\123\314\130\271\166\313\167\274\173\346\174" +
    "\226\176\261\177\353\200\237\201\337\202\251\203\334" +
    "\204\300\205\340\206\277\207\250\212\303\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\212\003\324" +
    "\004\345\005\356\006\076\007\073\010\245\011\262\012" +
    "\267\014\302\020\103\021\330\022\326\023\254\025\244" +
    "\027\310\031\355\034\312\036\335\042\264\043\327\046" +
    "\341\047\252\051\354\052\236\053\223\055\305\056\347" +
    "\057\241\077\352\100\224\101\101\102\106\103\102\104" +
    "\075\105\077\106\246\112\272\115\233\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\146\222\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\216\253\224\351\226\u0142\227\307\230\320" +
    "\231\266\232\304\001\002\000\134\004\345\006\076\007" +
    "\073\010\245\011\262\012\267\020\103\034\312\056\347" +
    "\057\241\077\352\100\224\101\101\102\106\103\102\104" +
    "\075\105\077\106\246\116\100\117\240\120\275\121\257" +
    "\122\332\123\314\130\271\166\313\167\274\173\346\174" +
    "\226\176\261\177\353\200\237\201\337\202\251\203\334" +
    "\204\300\205\340\206\277\207\250\212\303\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\134\004\345" +
    "\006\076\007\073\010\245\011\262\012\267\020\103\034" +
    "\312\056\347\057\241\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\116\100\117\240\120" +
    "\275\121\257\122\332\123\314\130\271\166\313\167\274" +
    "\173\346\174\226\176\261\177\353\200\237\201\337\202" +
    "\251\203\334\204\300\205\340\206\277\207\250\212\303" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\010\010\u0119\012\267\227\307\001\002\000\134\004\345" +
    "\006\076\007\073\010\245\011\262\012\267\020\103\034" +
    "\312\056\347\057\241\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\116\100\117\240\120" +
    "\275\121\257\122\332\123\314\130\271\166\313\167\274" +
    "\173\346\174\226\176\261\177\353\200\237\201\337\202" +
    "\251\203\334\204\300\205\340\206\277\207\250\212\303" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\134\004\345\006\076\007\073\010\245\011\262\012\267" +
    "\020\103\034\312\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\002\000\134\004\345\006\076\007\073\010\245\011" +
    "\262\012\267\020\103\034\312\056\347\057\241\077\352" +
    "\100\224\101\101\102\106\103\102\104\075\105\077\106" +
    "\246\116\100\117\240\120\275\121\257\122\332\123\314" +
    "\130\271\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\224\351\227\307\230\320\231" +
    "\266\232\304\001\002\000\134\004\345\006\076\007\073" +
    "\010\245\011\262\012\267\020\103\034\312\056\347\057" +
    "\241\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\002\000\134\004\345\006" +
    "\076\007\073\010\245\011\262\012\267\020\103\034\312" +
    "\056\347\057\241\077\352\100\224\101\101\102\106\103" +
    "\102\104\075\105\077\106\246\116\100\117\240\120\275" +
    "\121\257\122\332\123\314\130\271\166\313\167\274\173" +
    "\346\174\226\176\261\177\353\200\237\201\337\202\251" +
    "\203\334\204\300\205\340\206\277\207\250\212\303\224" +
    "\351\227\307\230\320\231\266\232\304\001\002\000\134" +
    "\004\345\006\076\007\073\010\245\011\262\012\267\020" +
    "\103\034\312\056\347\057\241\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\116\100\117" +
    "\240\120\275\121\257\122\332\123\314\130\271\166\313" +
    "\167\274\173\346\174\226\176\261\177\353\200\237\201" +
    "\337\202\251\203\334\204\300\205\340\206\277\207\250" +
    "\212\303\224\351\227\307\230\320\231\266\232\304\001" +
    "\002\000\134\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\224\351\227\307\230\320\231\266" +
    "\232\304\001\002\000\134\004\345\006\076\007\073\010" +
    "\245\011\262\012\267\020\103\034\312\056\347\057\241" +
    "\077\352\100\224\101\101\102\106\103\102\104\075\105" +
    "\077\106\246\116\100\117\240\120\275\121\257\122\332" +
    "\123\314\130\271\166\313\167\274\173\346\174\226\176" +
    "\261\177\353\200\237\201\337\202\251\203\334\204\300" +
    "\205\340\206\277\207\250\212\303\224\351\227\307\230" +
    "\320\231\266\232\304\001\002\000\062\033\u0103\127\364" +
    "\145\367\147\363\150\u0105\151\365\152\374\153\u0104\154" +
    "\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162\370" +
    "\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171" +
    "\377\172\362\175\366\001\uff16\000\012\033\u0103\170\u0101" +
    "\171\377\172\362\001\uff11\000\034\033\u0103\160\u0108\161" +
    "\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\001\uff04\000\024\033" +
    "\u0103\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377" +
    "\172\362\175\366\001\uff01\000\024\033\u0103\164\u0102\165" +
    "\376\166\u010a\167\371\170\u0101\171\377\172\362\175\366" +
    "\001\ufeff\000\024\033\u0103\164\u0102\165\376\166\u010a\167" +
    "\371\170\u0101\171\377\172\362\175\366\001\uff00\000\052" +
    "\033\u0103\151\365\152\374\153\u0104\154\u0109\155\375\156" +
    "\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102" +
    "\165\376\166\u010a\167\371\170\u0101\171\377\172\362\175" +
    "\366\001\uff19\000\044\033\u0103\154\u0109\155\375\156\361" +
    "\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165" +
    "\376\166\u010a\167\371\170\u0101\171\377\172\362\175\366" +
    "\001\uff14\000\002\001\ufefe\000\004\075\u012c\001\ufee5\000" +
    "\002\001\ufee7\000\006\012\267\227\u0127\001\002\000\004" +
    "\114\u0122\001\002\000\004\114\ufee9\001\ufee8\000\006\112" +
    "\u011b\210\u011c\001\ufead\000\134\004\345\006\076\007\073" +
    "\010\245\011\262\012\267\020\103\034\312\056\347\057" +
    "\241\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\002\000\134\004\345\006" +
    "\076\007\073\010\245\011\262\012\267\020\103\034\312" +
    "\056\347\057\241\077\352\100\224\101\101\102\106\103" +
    "\102\104\075\105\077\106\246\116\100\117\240\120\275" +
    "\121\257\122\332\123\314\130\271\166\313\167\274\173" +
    "\346\174\226\176\261\177\353\200\237\201\337\202\251" +
    "\203\334\204\300\205\340\206\277\207\250\212\303\224" +
    "\351\227\307\230\320\231\266\232\304\001\ufea5\000\004" +
    "\211\u011f\001\002\000\066\033\u0103\125\372\126\u010b\127" +
    "\364\145\367\147\363\150\u0105\151\365\152\374\153\u0104" +
    "\154\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162" +
    "\370\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101" +
    "\171\377\172\362\175\366\001\ufea4\000\002\001\ufeaa\000" +
    "\070\033\u0103\113\u0121\125\372\126\u010b\127\364\145\367" +
    "\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155" +
    "\375\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106" +
    "\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172" +
    "\362\175\366\001\002\000\002\001\ufea9\000\006\012\267" +
    "\227\307\001\002\000\002\001\ufeb0\000\006\012\267\227" +
    "\u0127\001\002\000\006\112\u011b\210\u011c\001\ufeb2\000\006" +
    "\112\u011b\210\u011c\001\ufeb1\000\004\112\u0128\001\ufe9b\000" +
    "\134\004\345\006\076\007\073\010\245\011\262\012\267" +
    "\020\103\034\312\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\002\000\070\033\u0103\113\u012a\125\372\126\u010b\127" +
    "\364\145\367\147\363\150\u0105\151\365\152\374\153\u0104" +
    "\154\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162" +
    "\370\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101" +
    "\171\377\172\362\175\366\001\002\000\002\001\ufea6\000" +
    "\006\112\u011b\210\u011c\001\ufeac\000\014\010\u0133\012\267" +
    "\112\u0132\116\100\227\307\001\002\000\002\001\ufe9e\000" +
    "\002\001\ufe9f\000\002\001\ufea2\000\002\001\ufee3\000\006" +
    "\112\u0136\210\u0137\001\ufea3\000\134\004\345\006\076\007" +
    "\073\010\245\011\262\012\267\020\103\034\312\056\347" +
    "\057\241\077\352\100\224\101\101\102\106\103\102\104" +
    "\075\105\077\106\246\116\100\117\240\120\275\121\257" +
    "\122\332\123\314\130\271\166\313\167\274\173\346\174" +
    "\226\176\261\177\353\200\237\201\337\202\251\203\334" +
    "\204\300\205\340\206\277\207\250\212\303\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\002\001\ufe6b" +
    "\000\070\033\u0103\113\u0135\125\372\126\u010b\127\364\145" +
    "\367\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109" +
    "\155\375\156\361\157\373\160\u0108\161\u0107\162\370\163" +
    "\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377" +
    "\172\362\175\366\001\002\000\002\001\ufe9d\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\134\004\345\006\076\007\073\010\245\011\262\012" +
    "\267\020\103\034\312\056\347\057\241\077\352\100\224" +
    "\101\101\102\106\103\102\104\075\105\077\106\246\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\166\313\167\274\173\346\174\226\176\261\177\353\200" +
    "\237\201\337\202\251\203\334\204\300\205\340\206\277" +
    "\207\250\212\303\224\351\227\307\230\320\231\266\232" +
    "\304\001\ufea5\000\004\211\u0139\001\002\000\002\001\ufea1" +
    "\000\070\033\u0103\113\u013b\125\372\126\u010b\127\364\145" +
    "\367\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109" +
    "\155\375\156\361\157\373\160\u0108\161\u0107\162\370\163" +
    "\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377" +
    "\172\362\175\366\001\002\000\002\001\ufea0\000\004\075" +
    "\u013e\001\ufee6\000\002\001\ufee4\000\014\010\u0133\012\267" +
    "\112\u0132\116\100\227\307\001\002\000\002\001\ufee2\000" +
    "\020\033\u0103\166\u010a\167\371\170\u0101\171\377\172\362" +
    "\175\366\001\uff0c\000\004\033\u0103\001\uff0f\000\002\001" +
    "\uffca\000\002\001\uff73\000\006\214\u0147\215\u0146\001\uff6f" +
    "\000\002\001\uffc3\000\210\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\027\310\031\355\034" +
    "\312\036\335\042\264\043\327\046\341\047\252\051\354" +
    "\052\236\053\223\055\305\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\112\272\115\233\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\146\222\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\216\253" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\004\224\u0148\001\002\000\134\004\345\006\076\007\073" +
    "\010\245\011\262\012\267\020\103\034\312\056\347\057" +
    "\241\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\002\000\070\033\u0103\125" +
    "\372\126\u010b\127\364\145\367\147\363\150\u0105\151\365" +
    "\152\374\153\u0104\154\u0109\155\375\156\361\157\373\160" +
    "\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a" +
    "\167\371\170\u0101\171\377\172\362\175\366\225\u014a\001" +
    "\002\000\210\003\324\004\345\005\356\006\076\007\073" +
    "\010\245\011\262\012\267\014\302\020\103\021\330\022" +
    "\326\023\254\025\244\027\310\031\355\034\312\036\335" +
    "\042\264\043\327\046\341\047\252\051\354\052\236\053" +
    "\223\055\305\056\347\057\241\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\112\272\115" +
    "\233\116\100\117\240\120\275\121\257\122\332\123\314" +
    "\130\271\146\222\166\313\167\274\173\346\174\226\176" +
    "\261\177\353\200\237\201\337\202\251\203\334\204\300" +
    "\205\340\206\277\207\250\212\303\216\253\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\002\001\uff72" +
    "\000\002\001\uff6e\000\224\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\027\310\031\355\034" +
    "\312\036\335\042\264\043\327\044\315\046\341\047\252" +
    "\051\354\052\236\053\223\055\305\056\347\057\241\060" +
    "\265\061\243\072\344\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\112\272\115\233\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\146\222\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\216\253\217\270\220\230\224" +
    "\351\227\307\230\320\231\266\232\304\001\uff71\000\006" +
    "\214\u0151\215\u0150\001\uff6d\000\004\213\u0159\001\002\000" +
    "\004\226\u0157\001\002\000\004\224\u0152\001\002\000\134" +
    "\004\345\006\076\007\073\010\245\011\262\012\267\020" +
    "\103\034\312\056\347\057\241\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\116\100\117" +
    "\240\120\275\121\257\122\332\123\314\130\271\166\313" +
    "\167\274\173\346\174\226\176\261\177\353\200\237\201" +
    "\337\202\251\203\334\204\300\205\340\206\277\207\250" +
    "\212\303\224\351\227\307\230\320\231\266\232\304\001" +
    "\002\000\070\033\u0103\125\372\126\u010b\127\364\145\367" +
    "\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155" +
    "\375\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106" +
    "\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172" +
    "\362\175\366\225\u0154\001\002\000\004\226\u0155\001\002" +
    "\000\002\001\uffca\000\224\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\027\310\031\355\034" +
    "\312\036\335\042\264\043\327\044\315\046\341\047\252" +
    "\051\354\052\236\053\223\055\305\056\347\057\241\060" +
    "\265\061\243\072\344\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\112\272\115\233\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\146\222\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\216\253\217\270\220\230\224" +
    "\351\227\307\230\320\231\266\232\304\001\uff70\000\002" +
    "\001\uffca\000\224\003\324\004\345\005\356\006\076\007" +
    "\073\010\245\011\262\012\267\014\302\020\103\021\330" +
    "\022\326\023\254\025\244\027\310\031\355\034\312\036" +
    "\335\042\264\043\327\044\315\046\341\047\252\051\354" +
    "\052\236\053\223\055\305\056\347\057\241\060\265\061" +
    "\243\072\344\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\112\272\115\233\116\100\117" +
    "\240\120\275\121\257\122\332\123\314\130\271\146\222" +
    "\166\313\167\274\173\346\174\226\176\261\177\353\200" +
    "\237\201\337\202\251\203\334\204\300\205\340\206\277" +
    "\207\250\212\303\216\253\217\270\220\230\224\351\227" +
    "\307\230\320\231\266\232\304\001\uff6c\000\004\146\u015a" +
    "\001\002\000\002\001\uffc2\000\004\033\u0103\001\uff0e\000" +
    "\020\033\u0103\166\u010a\167\371\170\u0101\171\377\172\362" +
    "\175\366\001\uff0b\000\034\033\u0103\160\u0108\161\u0107\162" +
    "\370\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101" +
    "\171\377\172\362\175\366\001\uff03\000\046\033\u0103\153" +
    "\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161\u0107" +
    "\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371\170" +
    "\u0101\171\377\172\362\175\366\001\uff13\000\034\033\u0103" +
    "\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376\166" +
    "\u010a\167\371\170\u0101\171\377\172\362\175\366\001\uff05" +
    "\000\064\033\u0103\126\u010b\127\364\145\367\147\363\150" +
    "\u0105\151\365\152\374\153\u0104\154\u0109\155\375\156\361" +
    "\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165" +
    "\376\166\u010a\167\371\170\u0101\171\377\172\362\175\366" +
    "\001\uff18\000\012\033\u0103\170\u0101\171\377\172\362\001" +
    "\uff10\000\024\033\u0103\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\001\uff02\000\070\033" +
    "\u0103\125\372\126\u010b\127\364\145\367\147\363\150\u0105" +
    "\151\365\152\374\153\u0104\154\u0109\155\375\156\361\157" +
    "\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376" +
    "\166\u010a\167\371\170\u0101\171\377\172\362\175\366\226" +
    "\u0164\001\002\000\134\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\002\000\066\033\u0103\125\372\126" +
    "\u010b\127\364\145\367\147\363\150\u0105\151\365\152\374" +
    "\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161" +
    "\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\001\ufefc\000\012\033" +
    "\u0103\170\u0101\171\377\172\362\001\uff12\000\050\033\u0103" +
    "\152\374\153\u0104\154\u0109\155\375\156\361\157\373\160" +
    "\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a" +
    "\167\371\170\u0101\171\377\172\362\175\366\001\uff15\000" +
    "\060\033\u0103\145\367\147\363\150\u0105\151\365\152\374" +
    "\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161" +
    "\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\001\uff17\000\054\033" +
    "\u0103\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375" +
    "\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164" +
    "\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172\362" +
    "\175\366\001\uff1a\000\004\033\u0103\001\uff0d\000\034\033" +
    "\u0103\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376" +
    "\166\u010a\167\371\170\u0101\171\377\172\362\175\366\001" +
    "\uff06\000\006\010\u0133\116\100\001\002\000\006\124\u0172" +
    "\225\u0171\001\002\000\004\131\u016f\001\002\000\034\006" +
    "\076\007\073\010\104\020\103\100\070\101\101\102\106" +
    "\103\102\104\075\105\077\116\100\166\066\167\105\001" +
    "\002\000\002\001\uff80\000\212\003\324\004\345\005\356" +
    "\006\076\007\073\010\245\011\262\012\267\014\302\020" +
    "\103\021\330\022\326\023\254\025\244\027\310\031\355" +
    "\034\312\036\335\042\264\043\327\046\341\047\252\051" +
    "\354\052\236\053\223\055\305\056\347\057\241\077\352" +
    "\100\224\101\101\102\106\103\102\104\075\105\077\106" +
    "\246\112\272\115\233\116\100\117\240\120\275\121\257" +
    "\122\332\123\314\130\271\146\222\166\313\167\274\173" +
    "\346\174\226\176\261\177\353\200\237\201\337\202\251" +
    "\203\334\204\300\205\340\206\277\207\250\212\303\216" +
    "\253\224\351\226\u0177\227\307\230\320\231\266\232\304" +
    "\001\002\000\006\010\u0133\116\100\001\002\000\004\131" +
    "\u0174\001\002\000\034\006\076\007\073\010\104\020\103" +
    "\100\070\101\101\102\106\103\102\104\075\105\077\116" +
    "\100\166\066\167\105\001\002\000\002\001\uff7f\000\002" +
    "\001\uffad\000\002\001\uffca\000\002\001\uff82\000\226\003" +
    "\324\004\345\005\356\006\076\007\073\010\245\011\262" +
    "\012\267\014\302\020\103\021\330\022\326\023\254\025" +
    "\244\027\310\031\355\032\u017a\034\312\036\335\042\264" +
    "\043\327\044\315\046\341\047\252\051\354\052\236\053" +
    "\223\055\305\056\347\057\241\060\265\061\243\072\344" +
    "\077\352\100\224\101\101\102\106\103\102\104\075\105" +
    "\077\106\246\112\272\115\233\116\100\117\240\120\275" +
    "\121\257\122\332\123\314\130\271\146\222\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\216\253\217\270\220\230\224\351\227\307\230\320" +
    "\231\266\232\304\001\002\000\004\146\u017b\001\002\000" +
    "\002\001\uff81\000\070\033\u0103\125\372\126\u010b\127\364" +
    "\145\367\146\u017d\147\363\150\u0105\151\365\152\374\153" +
    "\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161\u0107" +
    "\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371\170" +
    "\u0101\171\377\172\362\175\366\001\002\000\002\001\uffaa" +
    "\000\004\224\u01b7\001\002\000\002\001\ufeba\000\002\001" +
    "\uff1b\000\004\114\u0182\001\002\000\010\010\u0184\012\267" +
    "\227\307\001\002\000\004\224\u01b4\001\ufeb0\000\004\224" +
    "\u0185\001\002\000\136\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\153\u0189\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\uff5f\000\004\124\u01af\001" +
    "\uff60\000\042\124\uff5d\131\u0190\132\u0193\133\u0191\134\u019a" +
    "\135\u0194\136\u0199\137\u0196\140\u0198\141\u0192\142\u018f\143" +
    "\u0195\144\u0197\176\ufeba\177\ufeba\225\uff5d\001\ufebc\000\004" +
    "\225\u018e\001\002\000\012\010\245\012\267\116\100\227" +
    "\307\001\002\000\066\033\u0103\125\372\126\u010b\127\364" +
    "\145\367\147\363\150\u0105\151\365\152\374\153\u0104\154" +
    "\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162\370" +
    "\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171" +
    "\377\172\362\175\366\001\002\000\006\124\uff5e\225\uff5e" +
    "\001\ufebd\000\002\001\uff5c\000\002\001\ufebb\000\002\001" +
    "\ufeec\000\134\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\224\351\227\307\230\320\231\266" +
    "\232\304\001\002\000\136\004\345\006\076\007\073\010" +
    "\245\011\262\012\267\020\103\034\312\056\347\057\241" +
    "\077\352\100\224\101\101\102\106\103\102\104\075\105" +
    "\077\106\246\116\100\117\240\120\275\121\257\122\332" +
    "\123\314\130\271\153\u01a5\166\313\167\274\173\346\174" +
    "\226\176\261\177\353\200\237\201\337\202\251\203\334" +
    "\204\300\205\340\206\277\207\250\212\303\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\134\004\345" +
    "\006\076\007\073\010\245\011\262\012\267\020\103\034" +
    "\312\056\347\057\241\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\116\100\117\240\120" +
    "\275\121\257\122\332\123\314\130\271\166\313\167\274" +
    "\173\346\174\226\176\261\177\353\200\237\201\337\202" +
    "\251\203\334\204\300\205\340\206\277\207\250\212\303" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\134\004\345\006\076\007\073\010\245\011\262\012\267" +
    "\020\103\034\312\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\002\000\134\004\345\006\076\007\073\010\245\011" +
    "\262\012\267\020\103\034\312\056\347\057\241\077\352" +
    "\100\224\101\101\102\106\103\102\104\075\105\077\106" +
    "\246\116\100\117\240\120\275\121\257\122\332\123\314" +
    "\130\271\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\224\351\227\307\230\320\231" +
    "\266\232\304\001\002\000\134\004\345\006\076\007\073" +
    "\010\245\011\262\012\267\020\103\034\312\056\347\057" +
    "\241\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\002\000\134\004\345\006" +
    "\076\007\073\010\245\011\262\012\267\020\103\034\312" +
    "\056\347\057\241\077\352\100\224\101\101\102\106\103" +
    "\102\104\075\105\077\106\246\116\100\117\240\120\275" +
    "\121\257\122\332\123\314\130\271\166\313\167\274\173" +
    "\346\174\226\176\261\177\353\200\237\201\337\202\251" +
    "\203\334\204\300\205\340\206\277\207\250\212\303\224" +
    "\351\227\307\230\320\231\266\232\304\001\002\000\134" +
    "\004\345\006\076\007\073\010\245\011\262\012\267\020" +
    "\103\034\312\056\347\057\241\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\116\100\117" +
    "\240\120\275\121\257\122\332\123\314\130\271\166\313" +
    "\167\274\173\346\174\226\176\261\177\353\200\237\201" +
    "\337\202\251\203\334\204\300\205\340\206\277\207\250" +
    "\212\303\224\351\227\307\230\320\231\266\232\304\001" +
    "\002\000\134\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\224\351\227\307\230\320\231\266" +
    "\232\304\001\002\000\134\004\345\006\076\007\073\010" +
    "\245\011\262\012\267\020\103\034\312\056\347\057\241" +
    "\077\352\100\224\101\101\102\106\103\102\104\075\105" +
    "\077\106\246\116\100\117\240\120\275\121\257\122\332" +
    "\123\314\130\271\166\313\167\274\173\346\174\226\176" +
    "\261\177\353\200\237\201\337\202\251\203\334\204\300" +
    "\205\340\206\277\207\250\212\303\224\351\227\307\230" +
    "\320\231\266\232\304\001\002\000\134\004\345\006\076" +
    "\007\073\010\245\011\262\012\267\020\103\034\312\056" +
    "\347\057\241\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\116\100\117\240\120\275\121" +
    "\257\122\332\123\314\130\271\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\224\351" +
    "\227\307\230\320\231\266\232\304\001\002\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\060\033\u0103\145\367\147\363\150\u0105\151\365\152" +
    "\374\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108" +
    "\161\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167" +
    "\371\170\u0101\171\377\172\362\175\366\001\uff27\000\060" +
    "\033\u0103\145\367\147\363\150\u0105\151\365\152\374\153" +
    "\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161\u0107" +
    "\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371\170" +
    "\u0101\171\377\172\362\175\366\001\uff25\000\060\033\u0103" +
    "\145\367\147\363\150\u0105\151\365\152\374\153\u0104\154" +
    "\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162\370" +
    "\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171" +
    "\377\172\362\175\366\001\uff23\000\060\033\u0103\145\367" +
    "\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155" +
    "\375\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106" +
    "\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172" +
    "\362\175\366\001\uff1f\000\060\033\u0103\145\367\147\363" +
    "\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375\156" +
    "\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102" +
    "\165\376\166\u010a\167\371\170\u0101\171\377\172\362\175" +
    "\366\001\uff24\000\060\033\u0103\145\367\147\363\150\u0105" +
    "\151\365\152\374\153\u0104\154\u0109\155\375\156\361\157" +
    "\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376" +
    "\166\u010a\167\371\170\u0101\171\377\172\362\175\366\001" +
    "\uff20\000\060\033\u0103\145\367\147\363\150\u0105\151\365" +
    "\152\374\153\u0104\154\u0109\155\375\156\361\157\373\160" +
    "\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a" +
    "\167\371\170\u0101\171\377\172\362\175\366\001\uff26\000" +
    "\060\033\u0103\145\367\147\363\150\u0105\151\365\152\374" +
    "\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161" +
    "\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\001\uff29\000\060\033" +
    "\u0103\145\367\147\363\150\u0105\151\365\152\374\153\u0104" +
    "\154\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162" +
    "\370\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101" +
    "\171\377\172\362\175\366\001\uff22\000\060\033\u0103\145" +
    "\367\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109" +
    "\155\375\156\361\157\373\160\u0108\161\u0107\162\370\163" +
    "\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377" +
    "\172\362\175\366\001\uff28\000\014\010\245\012\267\116" +
    "\100\212\u01a7\227\307\001\002\000\060\033\u0103\145\367" +
    "\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155" +
    "\375\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106" +
    "\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172" +
    "\362\175\366\001\uff2e\000\010\010\u0119\012\267\227\307" +
    "\001\002\000\002\001\uff2d\000\004\224\u01ab\001\ufede\000" +
    "\002\001\uff2c\000\136\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\153\u0189\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\uff5f\000\004\225\u01ad\001" +
    "\002\000\002\001\ufedd\000\060\033\u0103\145\367\147\363" +
    "\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375\156" +
    "\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102" +
    "\165\376\166\u010a\167\371\170\u0101\171\377\172\362\175" +
    "\366\001\uff21\000\136\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\153\u01b1\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\002\000\042\124\uff5a\131" +
    "\u0190\132\u0193\133\u0191\134\u019a\135\u0194\136\u0199\137\u0196" +
    "\140\u0198\141\u0192\142\u018f\143\u0195\144\u0197\176\ufeba\177" +
    "\ufeba\225\uff5a\001\ufebc\000\012\010\245\012\267\116\100" +
    "\227\307\001\002\000\006\124\uff5b\225\uff5b\001\ufebd\000" +
    "\002\001\uff59\000\136\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\153\u0189\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\224\351\227\307" +
    "\230\320\231\266\232\304\001\uff5f\000\004\225\u01b6\001" +
    "\002\000\002\001\ufeeb\000\136\004\345\006\076\007\073" +
    "\010\245\011\262\012\267\020\103\034\312\056\347\057" +
    "\241\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\153\u0189\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\224\351" +
    "\227\307\230\320\231\266\232\304\001\uff5f\000\004\225" +
    "\u01b9\001\002\000\002\001\ufeed\000\014\010\245\012\267" +
    "\077\u01be\116\100\227\307\001\ufe96\000\006\124\u01c2\225" +
    "\u01c4\001\002\000\002\001\ufe99\000\002\001\ufe98\000\004" +
    "\224\u01bf\001\002\000\014\010\245\012\267\077\u01be\116" +
    "\100\227\307\001\ufe96\000\006\124\u01c2\225\u01c1\001\002" +
    "\000\002\001\ufe97\000\014\010\245\012\267\077\u01be\116" +
    "\100\227\307\001\ufe96\000\002\001\ufe9a\000\004\131\u01c5" +
    "\001\002\000\134\004\345\006\076\007\073\010\245\011" +
    "\262\012\267\020\103\034\312\056\347\057\241\077\352" +
    "\100\224\101\101\102\106\103\102\104\075\105\077\106" +
    "\246\116\100\117\240\120\275\121\257\122\332\123\314" +
    "\130\271\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\224\351\227\307\230\320\231" +
    "\266\232\304\001\002\000\060\033\u0103\145\367\147\363" +
    "\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375\156" +
    "\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102" +
    "\165\376\166\u010a\167\371\170\u0101\171\377\172\362\175" +
    "\366\001\uff2f\000\070\033\u0103\125\372\126\u010b\127\364" +
    "\145\367\147\363\150\u0105\151\365\152\374\153\u0104\154" +
    "\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162\370" +
    "\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171" +
    "\377\172\362\175\366\225\u01c8\001\002\000\002\001\ufefd" +
    "\000\012\010\245\012\267\116\100\227\307\001\002\000" +
    "\002\001\ufe6f\000\006\124\u01cd\225\u01cc\001\002\000\002" +
    "\001\ufe76\000\012\010\245\012\267\116\100\227\307\001" +
    "\002\000\002\001\ufe6e\000\004\033\u0103\001\uff08\000\136" +
    "\004\345\006\076\007\073\010\245\011\262\012\267\020" +
    "\103\034\312\056\347\057\241\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\116\100\117" +
    "\240\120\275\121\257\122\332\123\314\130\271\166\313" +
    "\167\274\173\346\174\226\176\261\177\353\200\237\201" +
    "\337\202\251\203\334\204\300\205\340\206\277\207\250" +
    "\212\303\224\351\225\u01d3\227\307\230\320\231\266\232" +
    "\304\001\002\000\002\001\ufef3\000\070\033\u0103\125\372" +
    "\126\u010b\127\364\145\367\147\363\150\u0105\151\365\152" +
    "\374\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108" +
    "\161\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167" +
    "\371\170\u0101\171\377\172\362\175\366\225\u01d4\001\002" +
    "\000\002\001\ufee0\000\002\001\ufedf\000\002\001\uffb9\000" +
    "\040\131\u0190\132\u0193\133\u0191\134\u019a\135\u0194\136\u0199" +
    "\137\u0196\140\u0198\141\u0192\142\u018f\143\u0195\144\u0197\146" +
    "\u01d9\176\ufeba\177\ufeba\001\ufebc\000\004\146\u01d8\001\ufebd" +
    "\000\002\001\uffb8\000\002\001\uffb7\000\002\001\ufef5\000" +
    "\002\001\ufef9\000\134\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\002\000\070\033\u0103\125\372\126" +
    "\u010b\127\364\145\367\147\363\150\u0105\151\365\152\374" +
    "\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161" +
    "\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\225\u01de\001\002\000" +
    "\006\112\u01df\226\u01e1\001\002\000\004\146\u01f3\001\uff7a" +
    "\000\002\001\uffbe\000\004\146\u01e3\001\uff7a\000\010\037" +
    "\u01f0\040\u01e6\041\u01e7\001\002\000\002\001\uff7a\000\010" +
    "\037\u01e5\040\u01e6\041\u01e7\001\002\000\004\146\u01ef\001" +
    "\002\000\134\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\224\351\227\307\230\320\231\266" +
    "\232\304\001\002\000\006\146\u01ea\226\u01e9\001\002\000" +
    "\002\001\uffca\000\002\001\uff77\000\002\001\uff76\000\224" +
    "\003\324\004\345\005\356\006\076\007\073\010\245\011" +
    "\262\012\267\014\302\020\103\021\330\022\326\023\254" +
    "\025\244\027\310\031\355\034\312\036\335\042\264\043" +
    "\327\044\315\046\341\047\252\051\354\052\236\053\223" +
    "\055\305\056\347\057\241\060\265\061\243\072\344\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\112\272\115\233\116\100\117\240\120\275\121" +
    "\257\122\332\123\314\130\271\146\222\166\313\167\274" +
    "\173\346\174\226\176\261\177\353\200\237\201\337\202" +
    "\251\203\334\204\300\205\340\206\277\207\250\212\303" +
    "\216\253\217\270\220\230\224\351\227\307\230\320\231" +
    "\266\232\304\001\uff78\000\072\033\u0103\125\372\126\u010b" +
    "\127\364\145\367\146\u01ea\147\363\150\u0105\151\365\152" +
    "\374\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108" +
    "\161\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167" +
    "\371\170\u0101\171\377\172\362\175\366\226\u01e9\001\002" +
    "\000\002\001\uffca\000\224\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\027\310\031\355\034" +
    "\312\036\335\042\264\043\327\044\315\046\341\047\252" +
    "\051\354\052\236\053\223\055\305\056\347\057\241\060" +
    "\265\061\243\072\344\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\112\272\115\233\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\146\222\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\216\253\217\270\220\230\224" +
    "\351\227\307\230\320\231\266\232\304\001\uff79\000\002" +
    "\001\uff7b\000\004\146\u01f1\001\002\000\002\001\uff7c\000" +
    "\010\040\u01e6\041\u01e7\113\u01f6\001\002\000\002\001\uff7a" +
    "\000\010\040\u01e6\041\u01e7\113\u01f5\001\002\000\002\001" +
    "\uff7d\000\002\001\uff7e\000\002\001\ufef7\000\066\033\u0103" +
    "\125\372\126\u010b\127\364\145\367\147\363\150\u0105\151" +
    "\365\152\374\153\u0104\154\u0109\155\375\156\361\157\373" +
    "\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376\166" +
    "\u010a\167\371\170\u0101\171\377\172\362\175\366\001\ufe71" +
    "\000\006\124\u01fb\146\u01fc\001\002\000\066\033\u0103\125" +
    "\372\126\u010b\127\364\145\367\147\363\150\u0105\151\365" +
    "\152\374\153\u0104\154\u0109\155\375\156\361\157\373\160" +
    "\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a" +
    "\167\371\170\u0101\171\377\172\362\175\366\001\uff34\000" +
    "\134\004\345\006\076\007\073\010\245\011\262\012\267" +
    "\020\103\034\312\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\002\000\002\001\uffb4\000\066\033\u0103\125\372\126" +
    "\u010b\127\364\145\367\147\363\150\u0105\151\365\152\374" +
    "\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161" +
    "\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\001\uff35\000\002\001" +
    "\uffbb\000\070\033\u0103\125\372\126\u010b\127\364\145\367" +
    "\146\u0200\147\363\150\u0105\151\365\152\374\153\u0104\154" +
    "\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162\370" +
    "\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171" +
    "\377\172\362\175\366\001\002\000\002\001\uffba\000\004" +
    "\023\u0202\001\002\000\004\224\u0203\001\002\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\070\033\u0103\125\372\126\u010b\127\364\145\367\147" +
    "\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375" +
    "\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164" +
    "\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172\362" +
    "\175\366\225\u0205\001\002\000\004\146\u0206\001\002\000" +
    "\002\001\uffc0\000\004\073\u0209\001\uff90\000\004\112\u020b" +
    "\001\002\000\004\010\026\001\002\000\004\124\027\001" +
    "\uff8f\000\002\001\uff4e\000\026\045\041\054\060\113\u020e" +
    "\115\052\216\056\217\040\220\042\221\047\222\036\223" +
    "\055\001\uff45\000\002\001\uff4f\000\002\001\uff97\000\004" +
    "\012\132\001\002\000\004\044\u0211\001\002\000\004\153" +
    "\u0213\001\uff9b\000\006\010\u0133\116\100\001\002\000\002" +
    "\001\uff9a\000\004\224\u0215\001\002\000\010\010\200\100" +
    "\175\225\uff6a\001\uff63\000\004\225\u0217\001\002\000\006" +
    "\112\u0219\146\u021a\001\002\000\002\001\uff4b\000\002\001" +
    "\uffca\000\002\001\uff49\000\226\003\324\004\345\005\356" +
    "\006\076\007\073\010\245\011\262\012\267\014\302\020" +
    "\103\021\330\022\326\023\254\025\244\027\310\031\355" +
    "\034\312\036\335\042\264\043\327\044\315\046\341\047" +
    "\252\051\354\052\236\053\223\055\305\056\347\057\241" +
    "\060\265\061\243\072\344\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\112\272\113\u021c" +
    "\115\233\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\146\222\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\216\253\217\270" +
    "\220\230\224\351\227\307\230\320\231\266\232\304\001" +
    "\002\000\002\001\uff48\000\040\010\u0133\012\267\013\u0224" +
    "\015\u022b\016\u0220\017\u0229\075\u022a\110\u0221\111\u0225\112" +
    "\u022c\113\u0227\116\100\210\u0226\211\u0222\230\u0223\001\002" +
    "\000\006\075\u0237\210\u0236\001\ufe7f\000\002\001\ufe8b\000" +
    "\002\001\ufe86\000\134\004\345\006\076\007\073\010\245" +
    "\011\u022f\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\002\000\002\001\ufe84\000\002\001" +
    "\ufec9\000\002\001\ufe89\000\012\010\245\012\267\116\100" +
    "\227\307\001\002\000\002\001\ufe85\000\002\001\ufe82\000" +
    "\002\001\ufe8a\000\002\001\ufe88\000\002\001\ufe81\000\002" +
    "\001\ufe87\000\002\001\ufe83\000\004\113\u022e\001\002\000" +
    "\002\001\ufe7a\000\004\210\u0232\001\ufecc\000\070\033\u0103" +
    "\113\u0231\125\372\126\u010b\127\364\145\367\147\363\150" +
    "\u0105\151\365\152\374\153\u0104\154\u0109\155\375\156\361" +
    "\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165" +
    "\376\166\u010a\167\371\170\u0101\171\377\172\362\175\366" +
    "\001\002\000\002\001\ufe7c\000\134\004\345\006\076\007" +
    "\073\010\245\011\262\012\267\020\103\034\312\056\347" +
    "\057\241\077\352\100\224\101\101\102\106\103\102\104" +
    "\075\105\077\106\246\116\100\117\240\120\275\121\257" +
    "\122\332\123\314\130\271\166\313\167\274\173\346\174" +
    "\226\176\261\177\353\200\237\201\337\202\251\203\334" +
    "\204\300\205\340\206\277\207\250\212\303\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\070\033\u0103" +
    "\125\372\126\u010b\127\364\145\367\147\363\150\u0105\151" +
    "\365\152\374\153\u0104\154\u0109\155\375\156\361\157\373" +
    "\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376\166" +
    "\u010a\167\371\170\u0101\171\377\172\362\175\366\211\u0234" +
    "\001\002\000\004\113\u0235\001\002\000\002\001\ufe7b\000" +
    "\012\010\u0133\012\267\013\u023c\116\100\001\002\000\006" +
    "\010\u0133\116\100\001\002\000\002\001\ufe7d\000\002\001" +
    "\ufe77\000\004\211\u023d\001\002\000\002\001\ufe79\000\002" +
    "\001\ufe78\000\002\001\ufe7e\000\006\010\u0133\116\100\001" +
    "\002\000\004\224\u0240\001\002\000\010\010\200\100\175" +
    "\225\uff6a\001\uff63\000\004\225\u0242\001\002\000\004\112" +
    "\u0243\001\002\000\002\001\uffca\000\226\003\324\004\345" +
    "\005\356\006\076\007\073\010\245\011\262\012\267\014" +
    "\302\020\103\021\330\022\326\023\254\025\244\027\310" +
    "\031\355\034\312\036\335\042\264\043\327\044\315\046" +
    "\341\047\252\051\354\052\236\053\223\055\305\056\347" +
    "\057\241\060\265\061\243\072\344\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\112\272" +
    "\113\u0245\115\233\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\146\222\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\216\253" +
    "\217\270\220\230\224\351\227\307\230\320\231\266\232" +
    "\304\001\002\000\002\001\uff99\000\066\033\u0103\125\372" +
    "\126\u010b\127\364\145\367\147\363\150\u0105\151\365\152" +
    "\374\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108" +
    "\161\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167" +
    "\371\170\u0101\171\377\172\362\175\366\001\ufe70\000\012" +
    "\033\u0103\170\u0101\171\377\172\362\001\uff0a\000\002\001" +
    "\uff2a\000\134\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\224\351\227\307\230\320\231\266" +
    "\232\304\001\002\000\040\035\u025b\131\u0190\132\u0193\133" +
    "\u0191\134\u019a\135\u0194\136\u0199\137\u0196\140\u0198\141\u0192" +
    "\142\u018f\143\u0195\144\u0197\176\ufeba\177\ufeba\001\ufebc\000" +
    "\004\035\u024c\001\ufebd\000\012\010\245\012\267\116\100" +
    "\227\307\001\002\000\004\076\u024f\001\uff8a\000\004\225" +
    "\u0254\001\002\000\014\010\245\012\267\116\100\153\u0252" +
    "\227\307\001\002\000\002\001\uff89\000\002\001\uff88\000" +
    "\012\010\245\012\267\116\100\227\307\001\002\000\002" +
    "\001\uff87\000\212\003\324\004\345\005\356\006\076\007" +
    "\073\010\245\011\262\012\267\014\302\020\103\021\330" +
    "\022\326\023\254\025\244\027\310\031\355\034\312\036" +
    "\335\042\264\043\327\046\341\047\252\051\354\052\236" +
    "\053\223\055\305\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\112\272" +
    "\115\233\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\146\222\166\313\167\274\173\346\174\226" +
    "\176\261\177\353\200\237\201\337\202\251\203\334\204" +
    "\300\205\340\206\277\207\250\212\303\216\253\224\351" +
    "\226\u0255\227\307\230\320\231\266\232\304\001\002\000" +
    "\002\001\uffca\000\002\001\uff84\000\002\001\uffae\000\226" +
    "\003\324\004\345\005\356\006\076\007\073\010\245\011" +
    "\262\012\267\014\302\020\103\021\330\022\326\023\254" +
    "\025\244\027\310\030\u0259\031\355\034\312\036\335\042" +
    "\264\043\327\044\315\046\341\047\252\051\354\052\236" +
    "\053\223\055\305\056\347\057\241\060\265\061\243\072" +
    "\344\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\112\272\115\233\116\100\117\240\120" +
    "\275\121\257\122\332\123\314\130\271\146\222\166\313" +
    "\167\274\173\346\174\226\176\261\177\353\200\237\201" +
    "\337\202\251\203\334\204\300\205\340\206\277\207\250" +
    "\212\303\216\253\217\270\220\230\224\351\227\307\230" +
    "\320\231\266\232\304\001\002\000\004\146\u025a\001\002" +
    "\000\002\001\uff83\000\014\010\245\012\267\116\100\153" +
    "\u0252\227\307\001\002\000\004\076\u024f\001\uff8a\000\004" +
    "\225\u025e\001\002\000\212\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\027\310\031\355\034" +
    "\312\036\335\042\264\043\327\046\341\047\252\051\354" +
    "\052\236\053\223\055\305\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\112\272\115\233\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\146\222\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\216\253" +
    "\224\351\226\u0255\227\307\230\320\231\266\232\304\001" +
    "\002\000\002\001\uffaf\000\002\001\uff1e\000\002\001\uff1c" +
    "\000\012\010\245\012\267\116\100\227\307\001\002\000" +
    "\002\001\uffa2\000\002\001\uffa0\000\006\124\u0267\225\u0266" +
    "\001\002\000\004\146\u0269\001\002\000\012\010\245\012" +
    "\267\116\100\227\307\001\002\000\002\001\uffa1\000\002" +
    "\001\uffb0\000\040\010\u0133\012\267\013\u0224\015\u022b\016" +
    "\u0220\017\u0229\075\u022a\110\u0221\111\u0225\112\u022c\113\u0227" +
    "\116\100\210\u0226\211\u0222\232\u026b\001\002\000\002\001" +
    "\ufec8\000\004\224\u01ab\001\ufede\000\002\001\uff2b\000\002" +
    "\001\ufef6\000\002\001\ufef4\000\010\112\u011b\210\u011c\224" +
    "\ufeb1\001\ufeac\000\066\033\u0103\125\372\126\u010b\127\364" +
    "\145\367\147\363\150\u0105\151\365\152\374\153\u0104\154" +
    "\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162\370" +
    "\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171" +
    "\377\172\362\175\366\001\ufe73\000\012\033\u0103\170\u0101" +
    "\171\377\172\362\001\uff09\000\226\003\324\004\345\005" +
    "\356\006\076\007\073\010\245\011\262\012\267\014\302" +
    "\020\103\021\330\022\326\023\254\025\244\027\310\031" +
    "\355\034\312\036\335\042\264\043\327\044\315\046\341" +
    "\047\252\051\354\052\236\053\223\055\305\056\347\057" +
    "\241\060\265\061\243\072\344\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\112\272\113" +
    "\u0274\115\233\116\100\117\240\120\275\121\257\122\332" +
    "\123\314\130\271\146\222\166\313\167\274\173\346\174" +
    "\226\176\261\177\353\200\237\201\337\202\251\203\334" +
    "\204\300\205\340\206\277\207\250\212\303\216\253\217" +
    "\270\220\230\224\351\227\307\230\320\231\266\232\304" +
    "\001\002\000\002\001\uffc4\000\060\033\u0103\145\367\147" +
    "\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375" +
    "\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164" +
    "\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172\362" +
    "\175\366\001\ufeee\000\002\001\uff95\000\040\010\u0133\012" +
    "\267\013\u0224\015\u022b\016\u0220\017\u0229\075\u022a\110\u0221" +
    "\111\u0225\112\u022c\113\u0227\116\100\210\u0226\211\u0222\231" +
    "\u0278\001\002\000\002\001\ufeef\000\004\225\u027a\001\002" +
    "\000\004\146\u027b\001\002\000\002\001\uffc6\000\002\001" +
    "\uffbd\000\070\033\u0103\125\372\126\u010b\127\364\145\367" +
    "\146\u027e\147\363\150\u0105\151\365\152\374\153\u0104\154" +
    "\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162\370" +
    "\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171" +
    "\377\172\362\175\366\001\002\000\002\001\uffbc\000\002" +
    "\001\uff1d\000\014\010\u0133\012\267\112\u0132\116\100\227" +
    "\307\001\002\000\004\224\u0283\001\ufeb3\000\002\001\ufeb6" +
    "\000\136\004\345\006\076\007\073\010\245\011\262\012" +
    "\267\020\103\034\312\056\347\057\241\077\352\100\224" +
    "\101\101\102\106\103\102\104\075\105\077\106\246\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\153\u0189\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\224\351\227\307\230\320\231" +
    "\266\232\304\001\uff5f\000\004\225\u0285\001\002\000\002" +
    "\001\ufeb4\000\004\075\u0288\001\ufeb9\000\002\001\ufeb7\000" +
    "\014\010\u0133\012\267\112\u0132\116\100\227\307\001\002" +
    "\000\004\224\u0283\001\ufeb3\000\002\001\ufeb5\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\070\033\u0103\125\372\126\u010b\127\364\145\367\147" +
    "\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375" +
    "\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164" +
    "\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172\362" +
    "\175\366\225\u028d\001\002\000\002\001\ufe72\000\004\073" +
    "\020\001\uff93\000\004\074\023\001\uff8e\000\004\112\u0291" +
    "\001\002\000\002\001\uff4e\000\026\045\041\054\060\113" +
    "\u0293\115\052\216\056\217\040\220\042\221\047\222\036" +
    "\223\055\001\uff45\000\002\001\uff98\000\134\004\345\006" +
    "\076\007\073\010\245\011\262\012\267\020\103\034\312" +
    "\056\347\057\241\077\352\100\224\101\101\102\106\103" +
    "\102\104\075\105\077\106\246\116\100\117\240\120\275" +
    "\121\257\122\332\123\314\130\271\166\313\167\274\173" +
    "\346\174\226\176\261\177\353\200\237\201\337\202\251" +
    "\203\334\204\300\205\340\206\277\207\250\212\303\224" +
    "\351\227\307\230\320\231\266\232\304\001\002\000\070" +
    "\033\u0103\125\372\126\u010b\127\364\145\367\147\363\150" +
    "\u0105\151\365\152\374\153\u0104\154\u0109\155\375\156\361" +
    "\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165" +
    "\376\166\u010a\167\371\170\u0101\171\377\172\362\175\366" +
    "\225\u0296\001\002\000\212\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\027\310\031\355\034" +
    "\312\036\335\042\264\043\327\046\341\047\252\051\354" +
    "\052\236\053\223\055\305\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\112\272\115\233\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\146\222\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\216\253" +
    "\224\351\226\u0297\227\307\230\320\231\266\232\304\001" +
    "\002\000\002\001\uffca\000\002\001\uffc1\000\002\001\uff75" +
    "\000\226\003\324\004\345\005\356\006\076\007\073\010" +
    "\245\011\262\012\267\014\302\020\103\021\330\022\326" +
    "\023\254\024\u029b\025\244\027\310\031\355\034\312\036" +
    "\335\042\264\043\327\044\315\046\341\047\252\051\354" +
    "\052\236\053\223\055\305\056\347\057\241\060\265\061" +
    "\243\072\344\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\112\272\115\233\116\100\117" +
    "\240\120\275\121\257\122\332\123\314\130\271\146\222" +
    "\166\313\167\274\173\346\174\226\176\261\177\353\200" +
    "\237\201\337\202\251\203\334\204\300\205\340\206\277" +
    "\207\250\212\303\216\253\217\270\220\230\224\351\227" +
    "\307\230\320\231\266\232\304\001\002\000\004\146\u029c" +
    "\001\002\000\002\001\uff74\000\004\131\u02a4\001\uff51\000" +
    "\006\124\u029f\146\u02a0\001\002\000\004\012\u02a1\001\002" +
    "\000\002\001\uffb5\000\004\131\u02a2\001\uff53\000\034\006" +
    "\076\007\073\010\104\020\103\100\070\101\101\102\106" +
    "\103\102\104\075\105\077\116\100\166\066\167\105\001" +
    "\002\000\002\001\uff52\000\034\006\076\007\073\010\104" +
    "\020\103\100\070\101\101\102\106\103\102\104\075\105" +
    "\077\116\100\166\066\167\105\001\002\000\002\001\uff50" +
    "\000\002\001\uffca\000\226\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\027\310\031\355\034" +
    "\312\036\335\042\264\043\327\044\315\046\341\047\252" +
    "\051\354\052\236\053\223\055\305\056\347\057\241\060" +
    "\265\061\243\072\344\077\352\100\224\101\101\102\106" +
    "\103\102\104\075\105\077\106\246\112\272\113\u02a8\115" +
    "\233\116\100\117\240\120\275\121\257\122\332\123\314" +
    "\130\271\146\222\166\313\167\274\173\346\174\226\176" +
    "\261\177\353\200\237\201\337\202\251\203\334\204\300" +
    "\205\340\206\277\207\250\212\303\216\253\217\270\220" +
    "\230\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\004\050\u02a9\001\002\000\004\224\u02aa\001\002\000" +
    "\004\010\026\001\002\000\004\012\267\001\002\000\004" +
    "\225\u02ad\001\002\000\004\112\u02ae\001\002\000\002\001" +
    "\uffca\000\226\003\324\004\345\005\356\006\076\007\073" +
    "\010\245\011\262\012\267\014\302\020\103\021\330\022" +
    "\326\023\254\025\244\027\310\031\355\034\312\036\335" +
    "\042\264\043\327\044\315\046\341\047\252\051\354\052" +
    "\236\053\223\055\305\056\347\057\241\060\265\061\243" +
    "\072\344\077\352\100\224\101\101\102\106\103\102\104" +
    "\075\105\077\106\246\112\272\113\u02b0\115\233\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\146" +
    "\222\166\313\167\274\173\346\174\226\176\261\177\353" +
    "\200\237\201\337\202\251\203\334\204\300\205\340\206" +
    "\277\207\250\212\303\216\253\217\270\220\230\224\351" +
    "\227\307\230\320\231\266\232\304\001\002\000\004\050" +
    "\u02b1\001\uffa6\000\004\224\u02b6\001\002\000\002\001\uffab" +
    "\000\002\001\uffa5\000\004\050\u02b1\001\uffa7\000\002\001" +
    "\uffa4\000\004\010\026\001\002\000\004\012\u02b8\001\002" +
    "\000\004\225\u02b9\001\002\000\004\112\u02ba\001\002\000" +
    "\002\001\uffca\000\226\003\324\004\345\005\356\006\076" +
    "\007\073\010\245\011\262\012\267\014\302\020\103\021" +
    "\330\022\326\023\254\025\244\027\310\031\355\034\312" +
    "\036\335\042\264\043\327\044\315\046\341\047\252\051" +
    "\354\052\236\053\223\055\305\056\347\057\241\060\265" +
    "\061\243\072\344\077\352\100\224\101\101\102\106\103" +
    "\102\104\075\105\077\106\246\112\272\113\u02bc\115\233" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\146\222\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\216\253\217\270\220\230" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\002\001\uffa3\000\002\001\ufef8\000\002\001\ufef2\000\040" +
    "\010\u0133\012\267\013\u0224\015\u022b\016\u0220\017\u0229\075" +
    "\u022a\107\u02c0\110\u0221\111\u0225\112\u022c\113\u0227\116\100" +
    "\210\u0226\211\u0222\001\002\000\002\001\ufec7\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\uff33" +
    "\000\004\124\u02d0\001\uff32\000\066\033\u0103\125\372\126" +
    "\u010b\127\364\145\367\147\363\150\u0105\151\365\152\374" +
    "\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161" +
    "\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\001\uff30\000\004\146" +
    "\u02c5\001\002\000\134\004\345\006\076\007\073\010\245" +
    "\011\262\012\267\020\103\034\312\056\347\057\241\077" +
    "\352\100\224\101\101\102\106\103\102\104\075\105\077" +
    "\106\246\116\100\117\240\120\275\121\257\122\332\123" +
    "\314\130\271\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\uff33\000\004\146\u02c7\001\002\000" +
    "\134\004\345\006\076\007\073\010\245\011\262\012\267" +
    "\020\103\034\312\056\347\057\241\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\116\100" +
    "\117\240\120\275\121\257\122\332\123\314\130\271\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\uff33\000\004\225\u02c9\001\002\000\212\003\324\004" +
    "\345\005\356\006\076\007\073\010\245\011\262\012\267" +
    "\014\302\020\103\021\330\022\326\023\254\025\244\027" +
    "\310\031\355\034\312\036\335\042\264\043\327\046\341" +
    "\047\252\051\354\052\236\053\223\055\305\056\347\057" +
    "\241\077\352\100\224\101\101\102\106\103\102\104\075" +
    "\105\077\106\246\112\272\115\233\116\100\117\240\120" +
    "\275\121\257\122\332\123\314\130\271\146\222\166\313" +
    "\167\274\173\346\174\226\176\261\177\353\200\237\201" +
    "\337\202\251\203\334\204\300\205\340\206\277\207\250" +
    "\212\303\216\253\224\351\226\u02cb\227\307\230\320\231" +
    "\266\232\304\001\002\000\002\001\uffbf\000\002\001\uffca" +
    "\000\002\001\uff86\000\226\003\324\004\345\005\356\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\020\103" +
    "\021\330\022\326\023\254\025\244\026\u02ce\027\310\031" +
    "\355\034\312\036\335\042\264\043\327\044\315\046\341" +
    "\047\252\051\354\052\236\053\223\055\305\056\347\057" +
    "\241\060\265\061\243\072\344\077\352\100\224\101\101" +
    "\102\106\103\102\104\075\105\077\106\246\112\272\115" +
    "\233\116\100\117\240\120\275\121\257\122\332\123\314" +
    "\130\271\146\222\166\313\167\274\173\346\174\226\176" +
    "\261\177\353\200\237\201\337\202\251\203\334\204\300" +
    "\205\340\206\277\207\250\212\303\216\253\217\270\220" +
    "\230\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\004\146\u02cf\001\002\000\002\001\uff85\000\134\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\166\313\167" +
    "\274\173\346\174\226\176\261\177\353\200\237\201\337" +
    "\202\251\203\334\204\300\205\340\206\277\207\250\212" +
    "\303\224\351\227\307\230\320\231\266\232\304\001\002" +
    "\000\066\033\u0103\125\372\126\u010b\127\364\145\367\147" +
    "\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375" +
    "\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164" +
    "\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172\362" +
    "\175\366\001\uff31\000\010\010\u02d3\012\267\227\307\001" +
    "\002\000\004\224\u0185\001\ufe6d\000\012\010\245\012\267" +
    "\116\100\227\307\001\002\000\004\225\u02d6\001\002\000" +
    "\002\001\ufe75\000\066\033\u0103\125\372\126\u010b\127\364" +
    "\145\367\147\363\150\u0105\151\365\152\374\153\u0104\154" +
    "\u0109\155\375\156\361\157\373\160\u0108\161\u0107\162\370" +
    "\163\u0106\164\u0102\165\376\166\u010a\167\371\170\u0101\171" +
    "\377\172\362\175\366\001\ufe74\000\002\001\ufefa\000\004" +
    "\020\u02dd\001\002\000\004\146\u02dc\001\002\000\002\001" +
    "\uff9f\000\002\001\uffb1\000\004\225\u02de\001\002\000\002" +
    "\001\uff9e\000\002\001\uffb2\000\002\001\uff94\000\002\001" +
    "\uff07\000\136\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\153\u02e5\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\ufe95\000\004\225\u02f5\001\002\000" +
    "\004\124\u02ec\001\ufec4\000\012\010\245\012\267\116\100" +
    "\227\307\001\002\000\070\033\u0103\076\u02e7\125\372\126" +
    "\u010b\127\364\145\367\147\363\150\u0105\151\365\152\374" +
    "\153\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161" +
    "\u0107\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371" +
    "\170\u0101\171\377\172\362\175\366\001\ufe90\000\136\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\153\u02e8\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\002\000\012\010\245\012\267\116\100\227\307\001" +
    "\002\000\066\033\u0103\125\372\126\u010b\127\364\145\367" +
    "\147\363\150\u0105\151\365\152\374\153\u0104\154\u0109\155" +
    "\375\156\361\157\373\160\u0108\161\u0107\162\370\163\u0106" +
    "\164\u0102\165\376\166\u010a\167\371\170\u0101\171\377\172" +
    "\362\175\366\001\ufe91\000\002\001\ufe8d\000\002\001\ufe8c" +
    "\000\136\004\345\006\076\007\073\010\245\011\262\012" +
    "\267\020\103\034\312\056\347\057\241\077\352\100\224" +
    "\101\101\102\106\103\102\104\075\105\077\106\246\116" +
    "\100\117\240\120\275\121\257\122\332\123\314\130\271" +
    "\153\u02ee\166\313\167\274\173\346\174\226\176\261\177" +
    "\353\200\237\201\337\202\251\203\334\204\300\205\340" +
    "\206\277\207\250\212\303\224\351\227\307\230\320\231" +
    "\266\232\304\001\ufec3\000\002\001\ufe94\000\012\010\245" +
    "\012\267\116\100\227\307\001\002\000\070\033\u0103\076" +
    "\u02f0\125\372\126\u010b\127\364\145\367\147\363\150\u0105" +
    "\151\365\152\374\153\u0104\154\u0109\155\375\156\361\157" +
    "\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102\165\376" +
    "\166\u010a\167\371\170\u0101\171\377\172\362\175\366\001" +
    "\ufe92\000\136\004\345\006\076\007\073\010\245\011\262" +
    "\012\267\020\103\034\312\056\347\057\241\077\352\100" +
    "\224\101\101\102\106\103\102\104\075\105\077\106\246" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\153\u02f1\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\224\351\227\307\230\320" +
    "\231\266\232\304\001\002\000\012\010\245\012\267\116" +
    "\100\227\307\001\002\000\066\033\u0103\125\372\126\u010b" +
    "\127\364\145\367\147\363\150\u0105\151\365\152\374\153" +
    "\u0104\154\u0109\155\375\156\361\157\373\160\u0108\161\u0107" +
    "\162\370\163\u0106\164\u0102\165\376\166\u010a\167\371\170" +
    "\u0101\171\377\172\362\175\366\001\ufe93\000\002\001\ufe8f" +
    "\000\002\001\ufe8e\000\002\001\ufef0\000\006\124\u02ff\146" +
    "\u0300\001\002\000\002\001\uff56\000\014\010\245\012\267" +
    "\112\u02fc\116\100\227\307\001\002\000\002\001\uff57\000" +
    "\002\001\uff55\000\002\001\ufebc\000\134\004\345\006\076" +
    "\007\073\010\245\011\262\012\267\020\103\034\312\056" +
    "\347\057\241\077\352\100\224\101\101\102\106\103\102" +
    "\104\075\105\077\106\246\116\100\117\240\120\275\121" +
    "\257\122\332\123\314\130\271\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\224\351" +
    "\227\307\230\320\231\266\232\304\001\002\000\070\033" +
    "\u0103\113\u02fe\125\372\126\u010b\127\364\145\367\147\363" +
    "\150\u0105\151\365\152\374\153\u0104\154\u0109\155\375\156" +
    "\361\157\373\160\u0108\161\u0107\162\370\163\u0106\164\u0102" +
    "\165\376\166\u010a\167\371\170\u0101\171\377\172\362\175" +
    "\366\001\002\000\002\001\uff54\000\006\012\u02f7\227\u02f8" +
    "\001\002\000\002\001\uffb6\000\002\001\uff58\000\136\004" +
    "\345\006\076\007\073\010\245\011\262\012\267\020\103" +
    "\034\312\056\347\057\241\077\352\100\224\101\101\102" +
    "\106\103\102\104\075\105\077\106\246\116\100\117\240" +
    "\120\275\121\257\122\332\123\314\130\271\153\u0189\166" +
    "\313\167\274\173\346\174\226\176\261\177\353\200\237" +
    "\201\337\202\251\203\334\204\300\205\340\206\277\207" +
    "\250\212\303\224\351\227\307\230\320\231\266\232\304" +
    "\001\uff5f\000\004\225\u0304\001\002\000\002\001\ufeea\000" +
    "\004\150\215\001\uffe7\000\002\001\uffe6\000\004\225\u0308" +
    "\001\002\000\002\001\uffe2\000\010\147\216\150\215\225" +
    "\u030a\001\002\000\002\001\uffe5\000\002\001\uffe4\000\010" +
    "\010\137\162\133\170\135\001\002\000\004\224\u030e\001" +
    "\002\000\010\010\137\162\133\170\135\001\uffdd\000\004" +
    "\225\u0314\001\002\000\004\124\u0312\001\uffde\000\002\001" +
    "\uffdc\000\010\010\137\162\133\170\135\001\002\000\002" +
    "\001\uffdb\000\004\225\u0315\001\002\000\002\001\uffe1\000" +
    "\004\012\u031a\001\002\000\004\131\u0318\001\uff67\000\034" +
    "\006\076\007\073\010\104\020\103\100\070\101\101\102" +
    "\106\103\102\104\075\105\077\116\100\166\066\167\105" +
    "\001\002\000\002\001\uff65\000\004\131\u031b\001\uff66\000" +
    "\034\006\076\007\073\010\104\020\103\100\070\101\101" +
    "\102\106\103\102\104\075\105\077\116\100\166\066\167" +
    "\105\001\002\000\002\001\uff64\000\002\001\uff42\000\010" +
    "\010\200\100\175\225\uff6a\001\uff63\000\004\225\u0320\001" +
    "\002\000\004\226\u0321\001\002\000\012\010\213\173\210" +
    "\212\207\224\212\001\002\000\010\112\u0323\147\216\150" +
    "\215\001\002\000\002\001\uffca\000\226\003\324\004\345" +
    "\005\356\006\076\007\073\010\245\011\262\012\267\014" +
    "\302\020\103\021\330\022\326\023\254\025\244\027\310" +
    "\031\355\034\312\036\335\042\264\043\327\044\315\046" +
    "\341\047\252\051\354\052\236\053\223\055\305\056\347" +
    "\057\241\060\265\061\243\072\344\077\352\100\224\101" +
    "\101\102\106\103\102\104\075\105\077\106\246\112\272" +
    "\113\u0325\115\233\116\100\117\240\120\275\121\257\122" +
    "\332\123\314\130\271\146\222\166\313\167\274\173\346" +
    "\174\226\176\261\177\353\200\237\201\337\202\251\203" +
    "\334\204\300\205\340\206\277\207\250\212\303\216\253" +
    "\217\270\220\230\224\351\227\307\230\320\231\266\232" +
    "\304\001\002\000\002\001\uffec\000\010\010\200\100\175" +
    "\225\uff6a\001\uff63\000\004\225\u0328\001\002\000\004\226" +
    "\u0329\001\002\000\012\010\213\173\210\212\207\224\212" +
    "\001\002\000\010\112\u032b\147\216\150\215\001\002\000" +
    "\002\001\uffca\000\226\003\324\004\345\005\356\006\076" +
    "\007\073\010\245\011\262\012\267\014\302\020\103\021" +
    "\330\022\326\023\254\025\244\027\310\031\355\034\312" +
    "\036\335\042\264\043\327\044\315\046\341\047\252\051" +
    "\354\052\236\053\223\055\305\056\347\057\241\060\265" +
    "\061\243\072\344\077\352\100\224\101\101\102\106\103" +
    "\102\104\075\105\077\106\246\112\272\113\u032d\115\233" +
    "\116\100\117\240\120\275\121\257\122\332\123\314\130" +
    "\271\146\222\166\313\167\274\173\346\174\226\176\261" +
    "\177\353\200\237\201\337\202\251\203\334\204\300\205" +
    "\340\206\277\207\250\212\303\216\253\217\270\220\230" +
    "\224\351\227\307\230\320\231\266\232\304\001\002\000" +
    "\002\001\uffee\000\004\131\u032f\001\002\000\034\006\076" +
    "\007\073\010\104\020\103\100\070\101\101\102\106\103" +
    "\102\104\075\105\077\116\100\166\066\167\105\001\002" +
    "\000\002\001\uff36\000\004\226\u0332\001\002\000\004\010" +
    "\026\001\002\000\004\073\020\001\uff93\000\004\074\023" +
    "\001\uff8e\000\004\146\u0336\001\002\000\002\001\ufff2\000" +
    "\004\153\u0213\001\uff9b\000\004\010\u0339\001\002\000\004" +
    "\224\u033a\001\002\000\010\010\137\162\133\170\135\001" +
    "\uffe9\000\002\001\uffeb\000\006\124\u0340\225\u033f\001\002" +
    "\000\004\012\u033e\001\002\000\002\001\uffe8\000\004\226" +
    "\u0342\001\002\000\010\010\137\162\133\170\135\001\002" +
    "\000\002\001\uffea\000\012\010\213\173\210\212\207\224" +
    "\212\001\002\000\010\146\u0344\147\216\150\215\001\002" +
    "\000\002\001\uffef\000\012\010\u0347\116\100\162\133\170" +
    "\135\001\002\000\006\114\u0348\124\144\001\002\000\004" +
    "\224\ufe6b\001\uffce\000\006\010\u0133\116\100\001\002\000" +
    "\004\224\u034a\001\002\000\010\010\200\100\175\225\uff6a" +
    "\001\uff63\000\004\225\u034c\001\002\000\006\112\u0219\146" +
    "\u021a\001\002\000\002\001\ufff0\000\002\001\uff92\000\002" +
    "\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u034d\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\013\011\005\012\006\013\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\153" +
    "\020\001\001\000\004\131\u034d\001\001\000\004\154\021" +
    "\001\001\000\004\031\030\001\001\000\006\131\024\155" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\033\001\001" +
    "\000\020\015\053\064\044\133\060\134\034\136\045\137" +
    "\047\160\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\u031c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\137\017\127\021\126\022\133\023\135" +
    "\132\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\075\070\076\071\123\066\175\073\001\001\000\012\075" +
    "\070\076\125\123\066\175\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\075\070\076\106\123\066\175\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\075\070\076\114\100\112\102\113\123" +
    "\066\175\073\001\001\000\002\001\001\000\004\101\120" +
    "\001\001\000\002\001\001\000\012\075\070\076\116\123" +
    "\066\175\073\001\001\000\002\001\001\000\012\075\070" +
    "\076\121\123\066\175\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\075\070\076\123\123\066\175\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\142\021\126\022\133\023" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\150\022\133\023\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\075\070\076\147\123\066\175\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\075\070\076" +
    "\160\123\066\175\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\075" +
    "\070\076\165\123\066\175\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\075\070\076" +
    "\171\123\066\175\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\176\054\200\055\201\156\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\055\203\156\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\126\213\127\210\001\001\000\002\001" +
    "\001\000\006\126\u030a\127\210\001\001\000\002\001\001" +
    "\000\006\126\u0308\127\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\126\u0305\127\210\001\001\000\006" +
    "\126\u0304\127\210\001\001\000\004\006\217\001\001\000" +
    "\074\005\347\007\226\010\316\071\341\072\254\075\315" +
    "\077\224\103\230\104\262\105\324\112\275\122\272\123" +
    "\332\124\321\131\241\142\310\143\330\144\233\150\335" +
    "\151\234\152\255\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\060\u02f5\061\u02f8\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u02e0\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\u02d9\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u02d7\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\052\071\341\072\254\075\315\077\224\103\u02d6\104\262" +
    "\105\324\112\275\122\272\123\332\131\241\144\233\157" +
    "\342\161\305\162\220\164\231\166\320\170\300\172\246" +
    "\176\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\117\u02be\001\001\000\002\001\001\000\052\071\341\072" +
    "\254\075\315\077\224\103\u02bd\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\052\071\341\072\254\075\315\077\224\103\u02bc\104" +
    "\262\105\324\112\275\122\272\123\332\131\241\144\233" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\002\001\001\000\004\062\u029d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\072\254" +
    "\104\262\105\324\112\275\123\u017d\131\u0180\144\u017e\161" +
    "\u027e\162\220\164\231\166\320\172\246\176\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\071\341\072" +
    "\254\075\315\077\224\103\u027c\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\002\001\001\000\004\117\u0276\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\071\341\072\254\075\315" +
    "\077\224\103\u0274\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\233\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\004\006" +
    "\u0272\001\001\000\002\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u0271\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\052\071\341\072\254\075\315\077\224\103\u0270\104\262" +
    "\105\324\112\275\122\272\123\332\131\241\144\233\157" +
    "\342\161\305\162\220\164\231\166\320\170\300\172\246" +
    "\176\257\001\001\000\010\104\u026f\105\324\166\320\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u026e" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\052\071\341\072\254\075" +
    "\315\077\224\103\u026d\104\262\105\324\112\275\122\272" +
    "\123\332\131\241\144\233\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\104\u0119\105\324\112" +
    "\u0116\131\u0117\164\231\166\320\167\u026b\171\u0115\172\u0114" +
    "\001\001\000\004\117\u0269\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\071\341\072\254\075\315\077\224\103" +
    "\u0247\104\262\105\324\112\275\122\272\123\332\131\241" +
    "\144\233\157\342\161\305\162\220\164\231\166\320\170" +
    "\300\172\246\176\257\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u0246\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\052\071\341\072\254\075\315\077\224\103\u0245\104\262" +
    "\105\324\112\275\122\272\123\332\131\241\144\233\157" +
    "\342\161\305\162\220\164\231\166\320\170\300\172\246" +
    "\176\257\001\001\000\004\065\u023d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\117\u021c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\005\u0200\010\316\071\341" +
    "\072\254\075\315\077\224\103\230\104\262\105\324\112" +
    "\275\122\272\123\332\131\241\144\233\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u01fe" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\054\066\u01f8\071\341\072" +
    "\254\075\315\077\224\103\u01f9\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\002\001\001\000\052\071\341\072\254\075\315\077" +
    "\224\103\u01f7\104\262\105\324\112\275\122\272\123\332" +
    "\131\241\144\233\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\002\001\001" +
    "\000\052\071\341\072\254\075\315\077\224\103\u01f6\104" +
    "\262\105\324\112\275\122\272\123\332\131\241\144\233" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\071\341\072\254\075\315\077\224\103\u01da\104" +
    "\262\105\324\112\275\122\272\123\332\131\241\144\233" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\052\071\341\072\254\075\315" +
    "\077\224\103\u01d9\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\233\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\052\071" +
    "\u01d6\072\254\075\315\077\224\103\u0189\104\262\105\324" +
    "\112\275\122\272\123\332\131\241\144\u01d5\157\342\161" +
    "\305\162\220\164\231\166\320\170\300\172\246\176\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\u01d0\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u01ce\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u01c6\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\002\001\001\000\034\072\254\104\262\105\324\112\275" +
    "\123\u017d\131\u0180\144\u017e\161\u017f\162\220\164\231\166" +
    "\320\172\246\176\257\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u017b\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\357\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\002\001\001\000\052\071\341\072\254\075\315\077\224" +
    "\103\u016a\104\262\105\324\112\275\122\272\123\332\131" +
    "\241\144\233\157\342\161\305\162\220\164\231\166\320" +
    "\170\300\172\246\176\257\001\001\000\052\071\341\072" +
    "\254\075\315\077\224\103\u0169\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\052\071\341\072\254\075\315\077\224\103\u0168\104" +
    "\262\105\324\112\275\122\272\123\332\131\241\144\233" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\052\071\341\072\254\075\315" +
    "\077\224\103\u0167\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\233\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\052\071" +
    "\341\072\254\075\315\077\224\103\u0166\104\262\105\324" +
    "\112\275\122\272\123\332\131\241\144\233\157\342\161" +
    "\305\162\220\164\231\166\320\170\300\172\246\176\257" +
    "\001\001\000\052\071\341\072\254\075\315\077\224\103" +
    "\u0165\104\262\105\324\112\275\122\272\123\332\131\241" +
    "\144\233\157\342\161\305\162\220\164\231\166\320\170" +
    "\300\172\246\176\257\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u0162\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\052\071\341\072\254\075\315\077\224\103\u0161\104\262" +
    "\105\324\112\275\122\272\123\332\131\241\144\233\157" +
    "\342\161\305\162\220\164\231\166\320\170\300\172\246" +
    "\176\257\001\001\000\052\071\341\072\254\075\315\077" +
    "\224\103\u0160\104\262\105\324\112\275\122\272\123\332" +
    "\131\241\144\233\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\052\071\341" +
    "\072\254\075\315\077\224\103\u015f\104\262\105\324\112" +
    "\275\122\272\123\332\131\241\144\233\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u015e" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\052\071\341\072\254\075" +
    "\315\077\224\103\u015d\104\262\105\324\112\275\122\272" +
    "\123\332\131\241\144\233\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\052" +
    "\071\341\072\254\075\315\077\224\103\u015c\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\052\071\341\072\254\075\315\077\224" +
    "\103\u015b\104\262\105\324\112\275\122\272\123\332\131" +
    "\241\144\233\157\342\161\305\162\220\164\231\166\320" +
    "\170\300\172\246\176\257\001\001\000\052\071\341\072" +
    "\254\075\315\077\224\103\u015a\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\056\005\u0142\010\316\071\341\072\254\075\315\077" +
    "\224\103\230\104\262\105\324\112\275\122\272\123\332" +
    "\131\241\144\233\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\052\071\341" +
    "\072\254\075\315\077\224\103\u0140\104\262\105\324\112" +
    "\275\122\272\123\332\131\241\144\233\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u013f" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\024\104\u0119\105\324\112" +
    "\u0116\131\u0117\164\231\166\320\167\u0113\171\u0115\172\u0114" +
    "\001\001\000\052\071\341\072\254\075\315\077\224\103" +
    "\u0112\104\262\105\324\112\275\122\272\123\332\131\241" +
    "\144\233\157\342\161\305\162\220\164\231\166\320\170" +
    "\300\172\246\176\257\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u0111\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\052\071\341\072\254\075\315\077\224\103\u0110\104\262" +
    "\105\324\112\275\122\272\123\332\131\241\144\233\157" +
    "\342\161\305\162\220\164\231\166\320\170\300\172\246" +
    "\176\257\001\001\000\052\071\341\072\254\075\315\077" +
    "\224\103\u010f\104\262\105\324\112\275\122\272\123\332" +
    "\131\241\144\233\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\052\071\341" +
    "\072\254\075\315\077\224\103\u010e\104\262\105\324\112" +
    "\275\122\272\123\332\131\241\144\233\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u010d" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\052\071\341\072\254\075" +
    "\315\077\224\103\u010c\104\262\105\324\112\275\122\272" +
    "\123\332\131\241\144\233\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\052" +
    "\071\341\072\254\075\315\077\224\103\u010b\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\104\u012a\105" +
    "\324\166\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\071\341\072\254\075\315\077" +
    "\224\103\u011f\104\262\105\324\112\275\122\272\123\332" +
    "\131\241\144\233\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\054\071\341" +
    "\072\254\075\315\077\224\103\u011d\104\262\105\324\106" +
    "\u011c\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\104" +
    "\u0124\105\324\112\u0123\162\u0122\166\320\001\001\000\002" +
    "\001\001\000\010\104\u0125\105\324\166\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\071\341\072\254\075\315\077\224\103\u0128\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\104\u0124\105\324\107\u012f\110\u0130\111" +
    "\u012d\112\u0123\123\u012c\162\u012e\166\320\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\173" +
    "\u013b\001\001\000\002\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u0133\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\071\341\072\254\075\315\077\224\103\u0139\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\054\071\341\072\254\075\315\077\224" +
    "\103\u011d\104\262\105\324\106\u0137\112\275\122\272\123" +
    "\332\131\241\144\233\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\174\u013c\001\001\000\002\001\001\000\024\104" +
    "\u0124\105\324\107\u013e\110\u0130\111\u012d\112\u0123\123\u012c" +
    "\162\u012e\166\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u014c\001\001\000\004" +
    "\047\u0143\001\001\000\004\051\u0144\001\001\000\002\001" +
    "\001\000\056\005\u014b\010\316\071\341\072\254\075\315" +
    "\077\224\103\230\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\233\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\002\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u0148" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\002\001\001\000\056\005" +
    "\u014a\010\316\071\341\072\254\075\315\077\224\103\230" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\005\347\007\226\010\316\050\u014d\071\341" +
    "\072\254\075\315\077\224\103\230\104\262\105\324\112" +
    "\275\122\272\123\332\124\321\131\241\142\310\143\330" +
    "\144\233\150\335\151\234\152\255\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\004\052\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\071\341\072\254\075\315" +
    "\077\224\103\u0152\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\233\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0155\001\001\000\074" +
    "\005\347\007\226\010\316\071\341\072\254\075\315\077" +
    "\224\103\230\104\262\105\324\112\275\122\272\123\332" +
    "\124\321\131\241\142\310\143\330\144\233\150\335\151" +
    "\234\152\255\157\342\161\305\162\220\164\231\166\320" +
    "\170\300\172\246\176\257\001\001\000\004\006\u0157\001" +
    "\001\000\074\005\347\007\226\010\316\071\341\072\254" +
    "\075\315\077\224\103\230\104\262\105\324\112\275\122" +
    "\272\123\332\124\321\131\241\142\310\143\330\144\233" +
    "\150\335\151\234\152\255\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\071\341\072\254\075\315\077\224" +
    "\103\u0164\104\262\105\324\112\275\122\272\123\332\131" +
    "\241\144\233\157\342\161\305\162\220\164\231\166\320" +
    "\170\300\172\246\176\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\u016c\123\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\075\070\076\u016f\123\066\175\073\001\001\000" +
    "\002\001\001\000\060\005\u0177\010\316\041\u0175\071\341" +
    "\072\254\075\315\077\224\103\230\104\262\105\324\112" +
    "\275\122\272\123\332\131\241\144\233\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\004\123\u0172\001\001\000\002\001\001\000\012" +
    "\075\070\076\u0174\123\066\175\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\u0178\001\001\000\002" +
    "\001\001\000\074\005\347\007\226\010\316\071\341\072" +
    "\254\075\315\077\224\103\230\104\262\105\324\112\275" +
    "\122\272\123\332\124\321\131\241\142\310\143\330\144" +
    "\233\150\335\151\234\152\255\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\104\u0124\105\324\112\u0123" +
    "\162\u0182\166\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\056\u0187\057\u0185\071\u018a\072\254\075\315" +
    "\077\224\103\u0189\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\u0186\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\072\254" +
    "\104\262\105\324\112\275\123\u017d\130\u018b\131\u0180\144" +
    "\u018c\162\220\164\231\166\320\172\246\176\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\071\341\072\254" +
    "\075\315\077\224\103\u01ad\104\262\105\324\112\275\122" +
    "\272\123\332\131\241\144\233\157\342\161\305\162\220" +
    "\164\231\166\320\170\300\172\246\176\257\001\001\000" +
    "\052\071\341\072\254\075\315\077\224\103\u01a5\104\262" +
    "\105\324\112\275\122\272\123\332\131\241\144\233\157" +
    "\342\161\305\162\220\164\231\166\320\170\300\172\246" +
    "\176\257\001\001\000\052\071\341\072\254\075\315\077" +
    "\224\103\u01a3\104\262\105\324\112\275\122\272\123\332" +
    "\131\241\144\233\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\052\071\341" +
    "\072\254\075\315\077\224\103\u01a2\104\262\105\324\112" +
    "\275\122\272\123\332\131\241\144\233\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u01a1" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\052\071\341\072\254\075" +
    "\315\077\224\103\u01a0\104\262\105\324\112\275\122\272" +
    "\123\332\131\241\144\233\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\052" +
    "\071\341\072\254\075\315\077\224\103\u019f\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\052\071\341\072\254\075\315\077\224" +
    "\103\u019e\104\262\105\324\112\275\122\272\123\332\131" +
    "\241\144\233\157\342\161\305\162\220\164\231\166\320" +
    "\170\300\172\246\176\257\001\001\000\052\071\341\072" +
    "\254\075\315\077\224\103\u019d\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\052\071\341\072\254\075\315\077\224\103\u019c\104" +
    "\262\105\324\112\275\122\272\123\332\131\241\144\233" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\052\071\341\072\254\075\315" +
    "\077\224\103\u019b\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\233\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\052\071" +
    "\341\072\254\075\315\077\224\103\u019a\104\262\105\324" +
    "\112\275\122\272\123\332\131\241\144\233\157\342\161" +
    "\305\162\220\164\231\166\320\170\300\172\246\176\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\072\254\104\262\105\324\112\275" +
    "\123\u017d\131\u0180\144\u01a7\162\220\164\231\166\320\172" +
    "\246\176\257\001\001\000\002\001\001\000\024\104\u0119" +
    "\105\324\112\u0116\131\u0117\164\231\166\320\167\u01a8\171" +
    "\u0115\172\u0114\001\001\000\002\001\001\000\004\074\u01a9" +
    "\001\001\000\002\001\001\000\056\056\u01ab\057\u0185\071" +
    "\u018a\072\254\075\315\077\224\103\u0189\104\262\105\324" +
    "\112\275\122\272\123\332\131\241\144\u0186\157\342\161" +
    "\305\162\220\164\231\166\320\170\300\172\246\176\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\071\u01b1\072\254\075\315\077\224\103\u0189" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\u01af\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\002\001\001\000\034\072" +
    "\254\104\262\105\324\112\275\123\u017d\130\u01b2\131\u0180" +
    "\144\u018c\162\220\164\231\166\320\172\246\176\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\056\u01b4" +
    "\057\u0185\071\u018a\072\254\075\315\077\224\103\u0189\104" +
    "\262\105\324\112\275\122\272\123\332\131\241\144\u0186" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\056\u01b7\057\u0185\071\u018a\072\254\075\315\077" +
    "\224\103\u0189\104\262\105\324\112\275\122\272\123\332" +
    "\131\241\144\u0186\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\072\254\104\262\105\324\112" +
    "\275\113\u01ba\114\u01bb\123\u017d\131\u0180\144\u01bc\162\220" +
    "\164\231\166\320\172\246\176\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\072\254\104\262\105\324\112\275\113\u01bf\114" +
    "\u01bb\123\u017d\131\u0180\144\u01bc\162\220\164\231\166\320" +
    "\172\246\176\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\072\254\104\262\105\324\112\275\114\u01c2" +
    "\123\u017d\131\u0180\144\u01bc\162\220\164\231\166\320\172" +
    "\246\176\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\071\341\072\254\075\315\077\224\103\u01c5\104" +
    "\262\105\324\112\275\122\272\123\332\131\241\144\233" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\072\254\104\262\105\324\112" +
    "\275\123\u017d\131\u0180\144\u01c9\162\220\164\231\165\u01ca" +
    "\166\320\172\246\176\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\072\254\104\262" +
    "\105\324\112\275\123\u017d\131\u0180\144\u01cd\162\220\164" +
    "\231\166\320\172\246\176\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\071\341\072\254\075\315\077" +
    "\224\103\u01d1\104\262\105\324\112\275\122\272\123\332" +
    "\131\241\144\233\157\342\161\305\162\220\164\231\166" +
    "\320\170\300\172\246\176\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u01dc" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\002\001\001\000\004\043" +
    "\u01df\001\001\000\004\044\u01f1\001\001\000\002\001\001" +
    "\000\004\044\u01e1\001\001\000\002\001\001\000\004\044" +
    "\u01e3\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\071\341\072\254\075\315\077\224\103\u01eb\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\004\045\u01e7\001\001\000\004\006\u01ea" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\005" +
    "\347\007\226\010\316\071\341\072\254\075\315\077\224" +
    "\103\230\104\262\105\324\112\275\122\272\123\332\124" +
    "\321\131\241\142\310\143\330\144\233\150\335\151\234" +
    "\152\255\157\342\161\305\162\220\164\231\166\320\170" +
    "\300\172\246\176\257\001\001\000\004\045\u01ec\001\001" +
    "\000\004\006\u01ed\001\001\000\074\005\347\007\226\010" +
    "\316\071\341\072\254\075\315\077\224\103\230\104\262" +
    "\105\324\112\275\122\272\123\332\124\321\131\241\142" +
    "\310\143\330\144\233\150\335\151\234\152\255\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\u01f3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\071\341\072\254\075\315\077\224\103\u01fc" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\233\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\071\341\072" +
    "\254\075\315\077\224\103\u0203\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\u0207\001\001\000\002\001\001\000\006\131\024" +
    "\155\u0209\001\001\000\002\001\001\000\004\063\u020b\001" +
    "\001\000\016\064\u020c\133\060\134\u020f\136\045\137\047" +
    "\160\u020e\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\132\130\001\001\000\002\001\001\000\004\065\u0211" +
    "\001\001\000\004\123\u0213\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\053\u0215\054\200\055\201\156\175" +
    "\001\001\000\002\001\001\000\004\135\u0217\001\001\000" +
    "\002\001\001\000\004\006\u021a\001\001\000\002\001\001" +
    "\000\074\005\347\007\226\010\316\071\341\072\254\075" +
    "\315\077\224\103\230\104\262\105\324\112\275\122\272" +
    "\123\332\124\321\131\241\142\310\143\330\144\233\150" +
    "\335\151\234\152\255\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\002\001" +
    "\001\000\010\120\u021e\123\u0227\166\u021d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\071" +
    "\341\072\254\075\315\077\224\103\u022f\104\262\105\324" +
    "\112\275\122\272\123\332\131\241\144\233\157\342\161" +
    "\305\162\220\164\231\166\320\170\300\172\246\176\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\072\254\104\262\105\324\112\275\123\u017d" +
    "\131\u0180\144\u022c\162\220\164\231\166\320\172\246\176" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\071\341\072\254\075\315\077\224\103\u0232\104\262" +
    "\105\324\112\275\122\272\123\332\131\241\144\233\157" +
    "\342\161\305\162\220\164\231\166\320\170\300\172\246" +
    "\176\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\121\u0239\123\u023a\166\u0238\001\001" +
    "\000\004\123\u0237\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\u023e\001\001\000\002\001" +
    "\001\000\012\053\u0240\054\200\055\201\156\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0243\001" +
    "\001\000\074\005\347\007\226\010\316\071\341\072\254" +
    "\075\315\077\224\103\230\104\262\105\324\112\275\122" +
    "\272\123\332\124\321\131\241\142\310\143\330\144\233" +
    "\150\335\151\234\152\255\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\071\u024a\072\254\075\315\077\224\103\u0189" +
    "\104\262\105\324\112\275\122\272\123\332\131\241\144" +
    "\u0249\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\072\254\104\262\105\324\112\275\123\u017d" +
    "\131\u0180\144\u024c\162\220\164\231\166\320\172\246\176" +
    "\257\001\001\000\004\035\u024d\001\001\000\002\001\001" +
    "\000\034\036\u024f\072\254\104\262\105\324\112\275\123" +
    "\u017d\131\u0180\144\u0250\162\220\164\231\166\320\172\246" +
    "\176\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\072\254\104\262\105\324\112\275\123\u017d\131\u0180" +
    "\144\u0252\162\220\164\231\166\320\172\246\176\257\001" +
    "\001\000\002\001\001\000\060\005\u0255\010\316\040\u0256" +
    "\071\341\072\254\075\315\077\224\103\230\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\004\006\u0257\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\005\347\007\226\010\316\071" +
    "\341\072\254\075\315\077\224\103\230\104\262\105\324" +
    "\112\275\122\272\123\332\124\321\131\241\142\310\143" +
    "\330\144\233\150\335\151\234\152\255\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\036\u025b" +
    "\072\254\104\262\105\324\112\275\123\u017d\131\u0180\144" +
    "\u0250\162\220\164\231\166\320\172\246\176\257\001\001" +
    "\000\004\035\u025c\001\001\000\002\001\001\000\060\005" +
    "\u0255\010\316\040\u025e\071\341\072\254\075\315\077\224" +
    "\103\230\104\262\105\324\112\275\122\272\123\332\131" +
    "\241\144\233\157\342\161\305\162\220\164\231\166\320" +
    "\170\300\172\246\176\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\032\u0264\033\u0262" +
    "\072\254\104\262\105\324\112\275\123\u017d\131\u0180\144" +
    "\u0263\162\220\164\231\166\320\172\246\176\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\033\u0267\072\254\104\262\105\324" +
    "\112\275\123\u017d\131\u0180\144\u0263\162\220\164\231\166" +
    "\320\172\246\176\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\120\u021e\123\u0227\166\u021d\001\001\000" +
    "\002\001\001\000\004\074\u026c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\005\347\007\226" +
    "\010\316\071\341\072\254\075\315\077\224\103\230\104" +
    "\262\105\324\112\275\122\272\123\332\124\321\131\241" +
    "\142\310\143\330\144\233\150\335\151\234\152\255\157" +
    "\342\161\305\162\220\164\231\166\320\170\300\172\246" +
    "\176\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\120\u021e\123\u0227\166\u021d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\104\u0124\105\324\107" +
    "\u0280\110\u0130\111\u012d\112\u0123\123\u012c\162\u012e\166\320" +
    "\001\001\000\004\140\u0281\001\001\000\004\141\u0285\001" +
    "\001\000\056\056\u0283\057\u0185\071\u018a\072\254\075\315" +
    "\077\224\103\u0189\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\u0186\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\163\u0286\001\001\000\002" +
    "\001\001\000\024\104\u0124\105\324\107\u0288\110\u0130\111" +
    "\u012d\112\u0123\123\u012c\162\u012e\166\320\001\001\000\004" +
    "\140\u0289\001\001\000\002\001\001\000\052\071\341\072" +
    "\254\075\315\077\224\103\u028b\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\153\u028e\001" +
    "\001\000\004\154\u028f\001\001\000\002\001\001\000\004" +
    "\063\u0291\001\001\000\016\064\u020c\133\060\134\u020f\136" +
    "\045\137\047\160\u020e\001\001\000\002\001\001\000\052" +
    "\071\341\072\254\075\315\077\224\103\u0294\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\002\001\001\000\060\005\u0298\010\316" +
    "\046\u0297\071\341\072\254\075\315\077\224\103\230\104" +
    "\262\105\324\112\275\122\272\123\332\131\241\144\233" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\004\006\u0299\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\005\347\007\226\010" +
    "\316\071\341\072\254\075\315\077\224\103\230\104\262" +
    "\105\324\112\275\122\272\123\332\124\321\131\241\142" +
    "\310\143\330\144\233\150\335\151\234\152\255\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\075\070\076\u02a2\123\066" +
    "\175\073\001\001\000\002\001\001\000\012\075\070\076" +
    "\u02a4\123\066\175\073\001\001\000\002\001\001\000\004" +
    "\006\u02a6\001\001\000\074\005\347\007\226\010\316\071" +
    "\341\072\254\075\315\077\224\103\230\104\262\105\324" +
    "\112\275\122\272\123\332\124\321\131\241\142\310\143" +
    "\330\144\233\150\335\151\234\152\255\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\131\u02aa" +
    "\001\001\000\004\166\u02ab\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u02ae\001\001\000\074\005\347" +
    "\007\226\010\316\071\341\072\254\075\315\077\224\103" +
    "\230\104\262\105\324\112\275\122\272\123\332\124\321" +
    "\131\241\142\310\143\330\144\233\150\335\151\234\152" +
    "\255\157\342\161\305\162\220\164\231\166\320\170\300" +
    "\172\246\176\257\001\001\000\010\145\u02b1\146\u02b3\147" +
    "\u02b2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\147\u02b4\001\001\000\002\001\001\000" +
    "\004\131\u02b6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u02ba\001\001\000\074\005" +
    "\347\007\226\010\316\071\341\072\254\075\315\077\224" +
    "\103\230\104\262\105\324\112\275\122\272\123\332\124" +
    "\321\131\241\142\310\143\330\144\233\150\335\151\234" +
    "\152\255\157\342\161\305\162\220\164\231\166\320\170" +
    "\300\172\246\176\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\120\u021e\123\u0227\166" +
    "\u021d\001\001\000\002\001\001\000\056\067\u02c3\070\u02c1" +
    "\071\341\072\254\075\315\077\224\103\u02c2\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\233\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\067\u02c5\070\u02c1\071\341\072\254\075" +
    "\315\077\224\103\u02c2\104\262\105\324\112\275\122\272" +
    "\123\332\131\241\144\233\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\002" +
    "\001\001\000\056\067\u02c7\070\u02c1\071\341\072\254\075" +
    "\315\077\224\103\u02c2\104\262\105\324\112\275\122\272" +
    "\123\332\131\241\144\233\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\002" +
    "\001\001\000\060\005\u02cb\010\316\037\u02c9\071\341\072" +
    "\254\075\315\077\224\103\230\104\262\105\324\112\275" +
    "\122\272\123\332\131\241\144\233\157\342\161\305\162" +
    "\220\164\231\166\320\170\300\172\246\176\257\001\001" +
    "\000\002\001\001\000\004\006\u02cc\001\001\000\002\001" +
    "\001\000\074\005\347\007\226\010\316\071\341\072\254" +
    "\075\315\077\224\103\230\104\262\105\324\112\275\122" +
    "\272\123\332\124\321\131\241\142\310\143\330\144\233" +
    "\150\335\151\234\152\255\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\071\341\072\254\075" +
    "\315\077\224\103\u02d0\104\262\105\324\112\275\122\272" +
    "\123\332\131\241\144\233\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\002" +
    "\001\001\000\014\104\u0124\105\324\112\u0123\162\u0182\166" +
    "\320\001\001\000\002\001\001\000\032\072\254\104\262" +
    "\105\324\112\275\123\u017d\131\u0180\144\u02d4\162\220\164" +
    "\231\166\320\172\246\176\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\071\341" +
    "\072\254\075\315\077\224\103\u02e5\104\262\105\324\112" +
    "\275\115\u02e2\116\u02e3\122\272\123\332\131\241\144\233" +
    "\157\342\161\305\162\220\164\231\166\320\170\300\172" +
    "\246\176\257\001\001\000\002\001\001\000\004\101\u02ec" +
    "\001\001\000\034\072\254\104\262\105\324\112\275\123" +
    "\u017d\130\u02ea\131\u0180\144\u018c\162\220\164\231\166\320" +
    "\172\246\176\257\001\001\000\002\001\001\000\052\071" +
    "\341\072\254\075\315\077\224\103\u02e8\104\262\105\324" +
    "\112\275\122\272\123\332\131\241\144\233\157\342\161" +
    "\305\162\220\164\231\166\320\170\300\172\246\176\257" +
    "\001\001\000\034\072\254\104\262\105\324\112\275\123" +
    "\u017d\130\u02e9\131\u0180\144\u018c\162\220\164\231\166\320" +
    "\172\246\176\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\071\341\072\254\075\315" +
    "\077\224\103\u02ee\104\262\105\324\112\275\122\272\123" +
    "\332\131\241\144\233\157\342\161\305\162\220\164\231" +
    "\166\320\170\300\172\246\176\257\001\001\000\002\001" +
    "\001\000\034\072\254\104\262\105\324\112\275\123\u017d" +
    "\130\u02f3\131\u0180\144\u018c\162\220\164\231\166\320\172" +
    "\246\176\257\001\001\000\002\001\001\000\052\071\341" +
    "\072\254\075\315\077\224\103\u02f1\104\262\105\324\112" +
    "\275\122\272\123\332\131\241\144\233\157\342\161\305" +
    "\162\220\164\231\166\320\170\300\172\246\176\257\001" +
    "\001\000\034\072\254\104\262\105\324\112\275\123\u017d" +
    "\130\u02f2\131\u0180\144\u018c\162\220\164\231\166\320\172" +
    "\246\176\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\072\254\104\262\105\324\112\275" +
    "\123\u017d\131\u0180\144\u02fa\157\u02f9\162\220\164\231\166" +
    "\320\172\246\176\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\071\341\072\254\075" +
    "\315\077\224\103\u02fc\104\262\105\324\112\275\122\272" +
    "\123\332\131\241\144\233\157\342\161\305\162\220\164" +
    "\231\166\320\170\300\172\246\176\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\u0300\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\056\u0302\057\u0185" +
    "\071\u018a\072\254\075\315\077\224\103\u0189\104\262\105" +
    "\324\112\275\122\272\123\332\131\241\144\u0186\157\342" +
    "\161\305\162\220\164\231\166\320\170\300\172\246\176" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\u030c\022\133\023\135\001\001\000\002\001" +
    "\001\000\014\021\u0310\022\133\023\135\027\u030e\030\u030f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\021\u0312\022\133\023\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\075\070\076\u0318\123\066" +
    "\175\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\075\070\076\u031b\123\066\175\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\053\u031e\054\200\055" +
    "\201\156\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\126\u0321\127\210\001\001\000\002\001\001\000" +
    "\004\006\u0323\001\001\000\074\005\347\007\226\010\316" +
    "\071\341\072\254\075\315\077\224\103\230\104\262\105" +
    "\324\112\275\122\272\123\332\124\321\131\241\142\310" +
    "\143\330\144\233\150\335\151\234\152\255\157\342\161" +
    "\305\162\220\164\231\166\320\170\300\172\246\176\257" +
    "\001\001\000\002\001\001\000\012\053\u0326\054\200\055" +
    "\201\156\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\126\u0329\127\210\001\001\000\002\001\001\000" +
    "\004\006\u032b\001\001\000\074\005\347\007\226\010\316" +
    "\071\341\072\254\075\315\077\224\103\230\104\262\105" +
    "\324\112\275\122\272\123\332\124\321\131\241\142\310" +
    "\143\330\144\233\150\335\151\234\152\255\157\342\161" +
    "\305\162\220\164\231\166\320\170\300\172\246\176\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\075" +
    "\070\076\u032f\123\066\175\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\131\u0332\001\001\000\004\153" +
    "\u0333\001\001\000\004\154\u0334\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\u0344\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\u033c\022\133\023\135" +
    "\025\u033b\026\u033a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\u033c\022\133\023\135\026\u0340\001\001\000" +
    "\002\001\001\000\006\126\u0342\127\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\u0345\021\126\022" +
    "\133\023\135\123\u0213\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\u0348\001\001\000\002\001\001\000" +
    "\012\053\u034a\054\200\055\201\156\175\001\001\000\002" +
    "\001\001\000\004\135\u034c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAspectParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAspectParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAspectParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = new Integer(BodyDeclaration.Modifier.PUBLIC);
	protected final static Integer PRIVATE = new Integer(BodyDeclaration.Modifier.PRIVATE);
	protected final static Integer PROTECTED = new Integer(BodyDeclaration.Modifier.PROTECTED);
	protected final static Integer ABSTRACT = new Integer(BodyDeclaration.Modifier.ABSTRACT);
	protected final static Integer FINAL = new Integer(BodyDeclaration.Modifier.FINAL);
	protected final static Integer STATIC = new Integer(BodyDeclaration.Modifier.STATIC);
	
	private List<PHPMarker> markers = new ArrayList<PHPMarker>();
		
	public List<PHPMarker> getPhpErrorMarkers(){
		return markers;
	}
	
	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd() ,dispatcher, (Variable)property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd() ,dispatcher, (FunctionInvocation)property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		// System.err.print(message);
  		// if (info instanceof Symbol)
		//	if (((Symbol)info).left != -1)
		//		System.err.println(" at character " + ((Symbol)info).left + " of input");
		//	else System.err.println("");
	    // else 
	   	//	System.err.println("");
    }
    
	/**
     * This method is called when a syntax error has been detected and recovery is about to be invoked.
     * The super class just emit a "Syntax error" error message.
     * @param cur_token the current lookahead Symbol.
     */
    public void syntax_error(Symbol cur_token){
        //System.out.println("syntax_error:"+cur_token);
        //super.syntax_error(cur_token,info);
        int state = ((Symbol) stack.peek()).parse_state;
        short[] rowOfProbe = action_tab[state];
        PHPMarker phpErrorMarker = handleSyntaxError(cur_token.sym, (String)cur_token.value, rowOfProbe, cur_token.left, cur_token.right, getCurrentLine());
    	markers.add(phpErrorMarker);
    }
    
    	
	public PHPMarker handleSyntaxError(int currToken, String currText, short[] rowOfProbe, int startPosition, int endPosition, int lineNumber) {
		String unexpectedString = "";
		boolean addUnexpected;

		if (currToken == PHPAspectSymbols.EOF) {
			addUnexpected = true;
			unexpectedString = "End of File";
			startPosition = --endPosition;
		} else if (currToken == PHPAspectSymbols.T_CONSTANT_ENCAPSED_STRING) {
			addUnexpected = true;
			endPosition = startPosition + currText.trim().length();
			unexpectedString = "String";
		} else {
			addUnexpected = currText != null && currText.trim().length() > 0;
			if (addUnexpected) {
				unexpectedString = currText.trim();
				endPosition = startPosition + unexpectedString.length();
				unexpectedString = '\'' + unexpectedString + '\'';
			}
		}

		//IntList list = new IntList();
		List list = new ArrayList();
		for (int probe = 0; probe < rowOfProbe.length; probe += 2) {
			int curr = rowOfProbe[probe];
			String value = getConstantValue(curr);
			if (value != null && !value.equals("")) {
				list.add(value);
			}
		}
		int listSize = list.size();
		if (listSize > 3) {
			listSize = 0;
		}

		String description = "";

		if (!addUnexpected) {
			switch (listSize) {
				case 0:
					description = "Syntax Error";
					break;
				case 1:
					description = "Syntax Error: expecting: " + list.get(0);
					break;
				case 2:
					description = "Syntax Error: expecting: " + list.get(0) + " or " + list.get(1);
					break;
				case 3:
					description = "Syntax Error: expecting: " + list.get(0) + " or " + list.get(1) + " or " + list.get(2);
					break;
			}
		} else {
			switch (listSize) {
				case 0:
					description = "Syntax Error: unexpected " + unexpectedString;
					break;
				case 1:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0);
					break;
				case 2:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0) + " or " + list.get(1);
					break;
				case 3:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0) + " or " + list.get(1) + " or " + list.get(2);
					break;
			}
		}
		UserData userData = PHPCodeDataFactory.createUserData(null, startPosition, endPosition, startPosition, lineNumber);
		return new PHPMarker(IPHPMarker.ERROR, description, userData);
	}
	
	private String getConstantValue(int tag) {
		String rv = PHPAspectSymbolsUtils.getTokenName(tag);
		if (rv != null) {
			return '\'' + rv + '\'';
		}
		if (tag == PHPAspectSymbols.T_STRING) {
			return "Identifier";
		}
		if (tag == PHPAspectSymbols.T_VARIABLE) {
			return "Variable";
		}

		return null;
	}
    
	
    
    public int getCurrentLine(){
        PHPAspectLexer lexer = (PHPAspectLexer)getScanner();
        //TODO: fix this bug
        return lexer.getCurrentLine()+1;
    }

    public int getLength() {
        PHPAspectLexer lexer = (PHPAspectLexer)getScanner();
        return lexer.getLength();
    }
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PHPAspectParser$actions {
  private final PHPAspectParser parser;

  /** Constructor */
  CUP$PHPAspectParser$actions(PHPAspectParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PHPAspectParser$do_action(
    int                        CUP$PHPAspectParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAspectParser$parser,
    java.util.Stack            CUP$PHPAspectParser$stack,
    int                        CUP$PHPAspectParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAspectParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAspectParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("string_st",81, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("string_st",81, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, varName); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",116, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier name = new Identifier(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name); 
	RESULT = constant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant",118, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("isset_variables",115, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // isset_variables ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("isset_variables",115, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, "eval");
	FunctionName name = new FunctionName(startleft, startright, id);
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, exprList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, "empty");
	FunctionName name = new FunctionName(startleft, startright, id);
	LinkedList varList = new LinkedList();
	varList.add(var);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, "isset");
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",79, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft,numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",79, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(stringleft, stringright, string);
	RESULT = id;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",79, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, endright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable var = new Variable(varNameleft, varNameright, varName);
	Variable indexedVar = new ArrayAccess(startleft, endright, var, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, expr);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable property = new Variable(stringleft, stringright, string);
	Dispatch dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",78, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // encaps_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // encaps_list ::= encaps_list T_OBJECT_OPERATOR 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "->", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // encaps_list ::= encaps_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "}", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // encaps_list ::= encaps_list T_CURLY_OPEN 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "{", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // encaps_list ::= encaps_list T_CLOSE_RECT 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "]", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // encaps_list ::= encaps_list T_OPEN_RECT 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "[", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // encaps_list ::= encaps_list T_BAD_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_UNKNOWN);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // encaps_list ::= encaps_list T_NUM_STRING 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // encaps_list ::= encaps_list string_st 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Reference ref = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Reference value = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Reference ref = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Reference value = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",75, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",75, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // assignment_list_element ::= 
            {
              VariableBase RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // assignment_list_element ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(1);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(startleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_name",71, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // variable_name ::= string_st 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, varName); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_name",71, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // object_dim_list ::= variable_name 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",70, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, var, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = varArray;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",70, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, var, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = varArray;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",70, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // object_property ::= variable_without_objects 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_property",69, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // object_property ::= object_dim_list 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_property",69, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = expr; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dim_offset",68, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // dim_offset ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dim_offset",68, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, expr);
	RESULT = var;	 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("compound_variable",67, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // compound_variable ::= tracked_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("compound_variable",67, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // reference_variable ::= compound_variable 
            {
              Variable RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",66, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, varName, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",66, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",66, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // base_variable ::= static_member 
            {
              VariableBase RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase staticFieldAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // base_variable ::= reference_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",124, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",124, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_member",114, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",112, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",112, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // method_or_not ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_or_not",94, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_or_not",94, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              VariableBase RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableBase result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, memberProperty);
		result = new FunctionInvocation(memberPropertyleft, paramsListright, functionName, paramsList);
	}
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_property",113, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_properties",95, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase variableProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_properties",95, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable",98, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// get the last property 
	VariableBase firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, memberProperty);
		firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, functionName, paramsList);
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	RESULT = dispatch;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable",98, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // rw_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("rw_variable",111, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // w_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("w_variable",86, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // r_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("r_variable",109, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr",65, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",64, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",64, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",64, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",64, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("possible_comma",63, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("possible_comma",63, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",62, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",62, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_SINGLE);
	RESULT = quote;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // scalar ::= string_st 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier vname = new Identifier(varNameleft, varNameright, varName);
	Identifier cname = new Identifier(classNameleft, classNameright, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, cname, vname); 
	RESULT = constant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",123, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // static_scalar ::= string_st 
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // common_scalar ::= T_FILE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // common_scalar ::= T_LINE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",58, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ctor_arguments ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",58, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = expr;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",122, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",121, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",121, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // dynamic_class_name_reference ::= base_variable 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	 ClassName name = new ClassName(varleft, varright, var);
	 RESULT = name;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",119, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	
	// create class name from the dispatch
	ClassName name = new ClassName(varleft, propertyListright, dispatch);
	RESULT = name;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",119, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",117, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // class_name_reference ::= T_STRING 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, className);
	RESULT = new ClassName(classNameleft, classNameright, name);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",117, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // fully_qualified_class_name ::= T_STRING 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, className);
	RESULT = name;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",87, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, reflectionName); 
	RESULT = new FunctionInvocation(reflectionNameleft, endright, functionName, parameters); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, reflectionName);
	FunctionInvocation functionInvocation = new FunctionInvocation(reflectionNameleft, endright, functionName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, name);
	FunctionInvocation functionInvocation = new FunctionInvocation(functionNameleft, endright, fName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, name);
	RESULT = new FunctionInvocation(functionNameleft, endright, fName, parameters); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, "print");
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, name, expList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = scalar; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, start);
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, name, expList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, expr);
	RESULT = parenthesisExpression; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Reference reference = new Reference(reftokenleft, ctorright, classInstanceCreation);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_EQUAL, reference);
	RESULT = assignment;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, refvar)); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",54, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",54, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_expr",53, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_expr",53, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",52, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",52, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",89, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",89, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // member_modifier ::= T_FINAL 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.FINAL;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.ABSTRACT;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // member_modifier ::= T_STATIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.STATIC;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.PRIVATE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.PROTECTED;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.PUBLIC;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",90, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // method_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",90, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.PUBLIC;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",110, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",110, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",91, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",91, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // class_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		


              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? PHPAspectParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, functionId, paramList, body, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassConstantDeclaration classConstantDeclaration = new ClassConstantDeclaration(listleft, endright, list);
	RESULT = classConstantDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, modifier.intValue(), decList);
	RESULT = fieldsDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // class_statement_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",49, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",49, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",48, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",48, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",48, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var); 
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",48, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, varName);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",47, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, varright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",47, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable variable = new Variable(varleft, varright, var);
	RESULT = variable;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",47, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var_list",46, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var_list",46, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression var_ref = new Reference(startleft, varright, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",45, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",45, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",45, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(startleft, varright, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",45, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",45, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",45, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // function_call_parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",44, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",44, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // optional_class_type ::= T_ARRAY 
            {
              Identifier RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier classId = new Identifier(arrayleft, arrayright, "array");
	RESULT = classId;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // optional_class_type ::= T_STRING 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, className);
	RESULT = classId;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // optional_class_type ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	Reference ref_var = new Reference (refleft, varright, v);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, ref_var, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	Reference ref_var = new Reference (refleft, varright, v);
	FormalParameter parameter = new FormalParameter(start, varright, classType, ref_var);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",42, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",42, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_else_single",40, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_else_single",40, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("else_single",39, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("else_single",39, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
			
	Block block = new Block(colonleft, statementListright, statementList, false);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",38, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",38, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("elseif_list",37, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("elseif_list",37, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("while_statement",36, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("while_statement",36, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_separator",35, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_separator",35, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",34, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",34, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",34, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList, false);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",33, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList, false);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",33, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",33, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",33, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(keyleft, keyright, key);
	lists[0].add(id);
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_list",32, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	Identifier id = new Identifier(keyleft, keyright, key);
	listKeys.add(id);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_list",32, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_statement",31, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_statement",31, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",30, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",30, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_statement",29, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Reference reference = new Reference (startleft, varright, var);
	RESULT = reference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",28, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",28, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",27, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",27, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",107, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",107, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("implements_list",106, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("implements_list",106, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",83, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",83, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_entry",82, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",105, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // extends_from ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",105, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_FINAL);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_NONE);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, className);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, classId, interfaces, block);
	RESULT = interfaceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",103, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, className);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, modifier.intValue(), classId, superClass, interfaces, block);
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",103, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, blockEndright, functionId, paramList, block, isReference.booleanValue());
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",102, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("is_reference",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("is_reference",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",97, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",96, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("use_filename",26, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("use_filename",26, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unset_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variable",25, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variables",24, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unset_variables ::= unset_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variables",24, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	Variable variable = new Variable(varleft, varright, var);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catch",101, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",100, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",100, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catches",99, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catches",99, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unticked_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// TODO: var comment should be added as ast node

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unticked_statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, "unset");
	FunctionName functionName = new FunctionName(startleft, startright, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, closeParright, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(expr);
	Identifier id = new Identifier(startleft, startright, "use");
	FunctionName functionName = new FunctionName(startleft, startright, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, exprright, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	InLineHtml inLineHtml = new InLineHtml(htmlleft, htmlright);
	RESULT = inLineHtml;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList, false);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(tokenleft, endright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inner_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // aspect_subtype_or_not ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_subtype_or_not",18, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // aspect_subtype_or_not ::= T_PLUS 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_subtype_or_not",18, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // aspect_signature ::= T_STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = str.toString();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",17, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aspect_signature ::= T_TIMES 
            {
              String RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = times.toString();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",17, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // aspect_signature ::= aspect_signature T_STRING 
            {
              String RESULT =null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",17, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aspect_signature ::= aspect_signature T_TIMES 
            {
              String RESULT =null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",17, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // aspect_inter_type_signature ::= T_RGREATER T_STRING T_LGREATER 
            {
              String RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_signature",16, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // aspect_inter_type_signature ::= aspect_signature 
            {
              String RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_signature",16, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aspect_inter_type_declaration_r ::= aspect_inter_type_signature aspect_subtype_or_not 
            {
              AspectInterTypeDeclaration RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int subtypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int subtyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Boolean subtype = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectInterTypeDeclaration(signleft, signright, sign, subtype);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_r",15, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aspect_inter_type_declaration ::= aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration dec = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(dec);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration",13, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aspect_inter_type_declaration ::= aspect_inter_type_declaration T_COMMA aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration dec = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(dec);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration",13, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aspect_inter_type_field_declaration ::= aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, exprright, interType, varId, expr));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",12, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aspect_inter_type_field_declaration ::= aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE 
            {
              List RESULT =null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, varright, interType, varId, null));
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",12, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aspect_inter_type_field_declaration ::= aspect_inter_type_field_declaration T_COMMA aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, var);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, exprright, interType, varId, expr));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",12, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aspect_inter_type_field_declaration ::= aspect_inter_type_field_declaration T_COMMA aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, var);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, varright, interType, varId, null));
	RESULT = list;		

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",12, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // non_empty_aspect_joinpoint_parameters_list ::= non_empty_aspect_joinpoint_parameters_list T_COMMA aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.add(interType);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_aspect_joinpoint_parameters_list",22, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // non_empty_aspect_joinpoint_parameters_list ::= aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(interType);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_aspect_joinpoint_parameters_list",22, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aspect_joinpoint_parameters ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint_parameters",21, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aspect_joinpoint_parameters ::= non_empty_aspect_joinpoint_parameters_list 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint_parameters",21, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aspect_inter_type_declaration_or_variable ::= T_VARIABLE 
            {
              AspectInterTypeDeclaration RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectInterTypeDeclaration(varleft, varright, var);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_or_variable",14, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aspect_inter_type_declaration_or_variable ::= aspect_inter_type_declaration_r 
            {
              AspectInterTypeDeclaration RESULT =null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = interType;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_or_variable",14, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aspect_joinpoint ::= T_NEW T_OPEN_PARENTHESE aspect_inter_type_declaration_r T_OPEN_PARENTHESE aspect_joinpoint_parameters T_CLOSE_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List params = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectConstructionJoinpoint(startleft, endright, interType, params);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint",85, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aspect_joinpoint ::= T_STRING T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int ptNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ptNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String ptName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	RESULT = new AspectPointcutReference(ptNameleft, ptNameright, ptName);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint",85, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aspect_pointcut ::= aspect_joinpoint 
            {
              Expression RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = pt;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aspect_pointcut ::= T_NOT aspect_pointcut 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, ptright, pt, UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aspect_pointcut ::= T_OPEN_PARENTHESE aspect_pointcut T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, pt);
	RESULT = parenthesisExpression; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_AND aspect_pointcut 
            {
              Expression RESULT =null;
		int pt1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression pt1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new InfixExpression(pt1left, pt2right, pt1 , InfixExpression.OP_BOOL_AND, pt2);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_OR aspect_pointcut 
            {
              Expression RESULT =null;
		int pt1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression pt1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new InfixExpression(pt1left, pt2right, pt1, InfixExpression.OP_BOOL_OR, pt2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aspect_pointcut_parameter ::= aspect_inter_type_declaration_r T_VARIABLE 
            {
              AspectPointcutParameter RESULT =null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var);
	AspectPointcutParameter aspectPointcutParameter = new AspectPointcutParameter(interTypeleft, varright, interType, v);
	RESULT = aspectPointcutParameter;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter",20, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aspect_pointcut_parameter_list ::= 
            {
              List RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",19, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aspect_pointcut_parameter_list ::= aspect_pointcut_parameter_list T_COMMA aspect_pointcut_parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptArgleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptArgright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectPointcutParameter ptArg = (AspectPointcutParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(ptArg);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",19, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aspect_pointcut_parameter_list ::= aspect_pointcut_parameter 
            {
              List RESULT =null;
		int ptArgleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptArgright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectPointcutParameter ptArg = (AspectPointcutParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(ptArg);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",19, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aspect_statement ::= T_AFTER T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.After, list, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aspect_statement ::= T_AROUND T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.Around, list, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aspect_statement ::= T_BEFORE T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.Before, list, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aspect_statement ::= method_modifiers T_POINTCUT T_STRING T_OPEN_PARENTHESE aspect_pointcut_parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int ptNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int ptNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String ptName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	AspectPointcutDeclaration aspectPointcutDeclaration = new AspectPointcutDeclaration(modifierleft, endright, ptName, args, expr);
	RESULT = aspectPointcutDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aspect_statement ::= method_modifiers T_FUNCTION is_reference aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? PHPAspectParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, functionId, paramList, body, isReference.booleanValue());
	AspectInterTypeMethodDeclaration interTypeMethodDeclaration = new AspectInterTypeMethodDeclaration(methodStart, bodyright, modifier.intValue(), interType, functionDeclaration, true);
	RESULT = interTypeMethodDeclaration;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aspect_statement ::= variable_modifiers aspect_inter_type_field_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	AspectInterTypeFieldsDeclaration aspectInterTypeFieldsDeclaration = new AspectInterTypeFieldsDeclaration(modifierleft, endright, modifier.intValue(), false, decList);
	RESULT = aspectInterTypeFieldsDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aspect_statement ::= T_DECLARE T_PARENTS T_NEKUDOTAIM fully_qualified_class_name extends_from implements_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectInterTypeParentDeclaration(startleft, endright, className, superClass, interfaces);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aspect_statement ::= class_statement 
            {
              Statement RESULT =null;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // aspect_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement_list",10, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // aspect_statement_list ::= aspect_statement_list aspect_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int aspectStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int aspectStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement aspectStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(aspectStatement);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement_list",10, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // aspect_entry_type ::= T_FINAL T_ASPECT 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(AspectDeclaration.MODIFIER_FINAL);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",9, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // aspect_entry_type ::= T_ABSTRACT T_ASPECT 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(AspectDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",9, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // aspect_entry_type ::= T_ASPECT 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(AspectDeclaration.MODIFIER_NONE);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",9, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // aspect_isPersistent ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_isPersistent",23, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // aspect_isPersistent ::= T_PERSESSION 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_isPersistent",23, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // unticked_aspect_declaration_statement ::= aspect_entry_type T_STRING extends_from implements_list aspect_isPersistent T_CURLY_OPEN aspect_statement_list T_CURLY_CLOSE T_SEMICOLON 
            {
              AspectDeclaration RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int aspectNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int aspectNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		String aspectName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int persistentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int persistentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Boolean persistent = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	Identifier classId = new Identifier(aspectNameleft, aspectNameright, aspectName);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	//ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, modifier.intValue(), classId, superClass, interfaces, block);
	AspectDeclaration aspectDeclaration = new AspectDeclaration(modifierleft ,blockEndright, modifier.intValue(), classId, superClass, interfaces, persistent, block);
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_aspect_declaration_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // aspect_declaration_statement ::= unticked_aspect_declaration_statement 
            {
              AspectDeclaration RESULT =null;
		int aspectDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int aspectDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectDeclaration aspectDeclaration = (AspectDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_declaration_statement",7, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= aspect_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectDeclaration statement = (AspectDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PHPAspectParser$parser.done_parsing();
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPAspectLexer PHPAspectLexer = (PHPAspectLexer) parser.getScanner();
	List commentList = PHPAspectLexer.getCommentList();
	Program program = new Program(statementListleft, statementListright, statementList, commentList);
	RESULT = program; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

