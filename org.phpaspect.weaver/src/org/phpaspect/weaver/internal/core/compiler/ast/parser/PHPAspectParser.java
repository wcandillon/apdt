
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jul 06 13:55:08 GMT+01:00 2008
//----------------------------------------------------

package org.phpaspect.weaver.internal.core.compiler.ast.parser;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.internal.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.phpaspect.weaver.internal.core.compiler.ast.nodes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jul 06 13:55:08 GMT+01:00 2008
  */
public class PHPAspectParser extends PHPAspectAbstractParser {

  /** Default constructor. */
  public PHPAspectParser() {super();}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(org.phpaspect.weaver.java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(org.phpaspect.weaver.java_cup.runtime.Scanner s, org.phpaspect.weaver.java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\002\025\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\013\000\002\022\003\000\002\022\002" +
    "\000\002\004\003\000\002\004\004\000\002\004\004\000" +
    "\002\005\004\000\002\005\002\000\002\006\003\000\002" +
    "\006\011\000\002\006\005\000\002\006\014\000\002\006" +
    "\013\000\002\006\013\000\002\006\013\000\002\006\013" +
    "\000\002\016\003\000\002\016\005\000\002\016\002\000" +
    "\002\017\004\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\004\000\002\023\003\000\002\024" +
    "\005\000\002\024\011\000\002\011\003\000\002\011\003" +
    "\000\002\020\003\000\002\020\002\000\002\021\003\000" +
    "\002\021\005\000\002\007\007\000\002\007\011\000\002" +
    "\007\005\000\002\007\007\000\002\010\005\000\002\010" +
    "\003\000\002\012\004\000\002\013\003\000\002\013\005" +
    "\000\002\014\004\000\002\014\004\000\002\014\003\000" +
    "\002\014\003\000\002\015\003\000\002\015\002\000\002" +
    "\031\004\000\002\031\002\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\006\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\202\002\000" +
    "\002\033\006\000\002\033\011\000\002\033\014\000\002" +
    "\033\007\000\002\033\011\000\002\033\013\000\002\033" +
    "\007\000\002\033\004\000\002\033\005\000\002\033\004" +
    "\000\002\033\005\000\002\033\004\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\003\000\002\033\004\000\002\033" +
    "\005\000\002\033\007\000\002\033\012\000\002\033\012" +
    "\000\002\033\007\000\002\033\003\000\002\033\017\000" +
    "\002\033\005\000\002\145\003\000\002\145\002\000\002" +
    "\146\003\000\002\146\004\000\002\147\012\000\002\034" +
    "\003\000\002\034\005\000\002\035\003\000\002\036\003" +
    "\000\002\036\005\000\002\142\003\000\002\143\003\000" +
    "\002\067\002\000\002\067\003\000\002\203\002\000\002" +
    "\204\002\000\002\150\013\000\002\200\005\000\002\200" +
    "\003\000\002\205\002\000\002\206\002\000\002\151\014" +
    "\000\002\207\002\000\002\151\011\000\002\201\003\000" +
    "\002\201\002\000\002\177\003\000\002\177\003\000\002" +
    "\177\003\000\002\152\003\000\002\152\004\000\002\152" +
    "\004\000\002\153\002\000\002\153\004\000\002\153\004" +
    "\000\002\126\003\000\002\127\002\000\002\127\004\000" +
    "\002\154\002\000\002\154\004\000\002\155\003\000\002" +
    "\155\005\000\002\155\005\000\002\155\003\000\002\037" +
    "\002\000\002\037\004\000\002\040\003\000\002\040\004" +
    "\000\002\041\003\000\002\041\006\000\002\042\003\000" +
    "\002\042\006\000\002\043\003\000\002\043\006\000\002" +
    "\044\005\000\002\044\007\000\002\045\005\000\002\045" +
    "\006\000\002\045\006\000\002\045\007\000\002\046\002" +
    "\000\002\046\007\000\002\046\006\000\002\047\003\000" +
    "\002\047\003\000\002\050\003\000\002\050\006\000\002" +
    "\051\002\000\002\051\010\000\002\052\002\000\002\052" +
    "\011\000\002\053\002\000\002\053\004\000\002\054\002" +
    "\000\002\054\005\000\002\055\003\000\002\055\002\000" +
    "\002\056\003\000\002\056\005\000\002\056\004\000\002" +
    "\057\004\000\002\057\005\000\002\057\006\000\002\057" +
    "\007\000\002\057\003\000\002\156\002\000\002\156\003" +
    "\000\002\156\003\000\002\060\003\000\002\060\002\000" +
    "\002\061\003\000\002\061\003\000\002\061\004\000\002" +
    "\061\005\000\002\061\005\000\002\061\006\000\002\062" +
    "\005\000\002\062\003\000\002\063\003\000\002\063\004" +
    "\000\002\063\006\000\002\064\005\000\002\064\007\000" +
    "\002\064\003\000\002\064\005\000\002\065\004\000\002" +
    "\065\002\000\002\066\005\000\002\066\004\000\002\210" +
    "\002\000\002\211\002\000\002\066\014\000\002\066\003" +
    "\000\002\066\003\000\002\135\003\000\002\135\005\000" +
    "\002\135\002\000\002\160\003\000\002\160\003\000\002" +
    "\134\002\000\002\134\003\000\002\136\003\000\002\136" +
    "\004\000\002\137\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\137\003\000" +
    "\002\132\005\000\002\132\007\000\002\132\003\000\002" +
    "\132\005\000\002\133\007\000\002\133\006\000\002\070" +
    "\005\000\002\070\003\000\002\071\002\000\002\071\003" +
    "\000\002\072\005\000\002\072\003\000\002\073\010\000" +
    "\002\073\005\000\002\073\006\000\002\073\010\000\002" +
    "\073\005\000\002\073\004\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\004\000\002\073\004\000\002\073\004\000\002\073" +
    "\004\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\004\000\002\073\004\000\002\073\004\000" +
    "\002\073\004\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\007\000\002\073\003\000" +
    "\002\073\004\000\002\073\004\000\002\073\004\000\002" +
    "\073\004\000\002\073\004\000\002\073\004\000\002\073" +
    "\004\000\002\073\004\000\002\073\004\000\002\073\003" +
    "\000\002\073\006\000\002\073\005\000\002\073\004\000" +
    "\002\074\006\000\002\074\010\000\002\074\010\000\002" +
    "\074\006\000\002\131\003\000\002\167\003\000\002\167" +
    "\003\000\002\171\006\000\002\171\003\000\002\173\004" +
    "\000\002\173\002\000\002\174\004\000\002\075\002\000" +
    "\002\075\004\000\002\075\005\000\002\076\002\000\002" +
    "\076\005\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\004\000\002\100\004\000\002" +
    "\100\006\000\002\100\003\000\002\175\005\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\101\005\000\002\101\005\000\002\102\002\000" +
    "\002\102\004\000\002\103\002\000\002\103\003\000\002" +
    "\104\007\000\002\104\005\000\002\104\005\000\002\104" +
    "\003\000\002\105\003\000\002\105\003\000\002\157\003" +
    "\000\002\130\003\000\002\161\003\000\002\144\007\000" +
    "\002\144\003\000\002\141\004\000\002\141\002\000\002" +
    "\163\005\000\002\140\005\000\002\140\002\000\002\162" +
    "\003\000\002\162\004\000\002\164\005\000\002\176\003" +
    "\000\002\176\003\000\002\172\003\000\002\172\004\000" +
    "\002\172\003\000\002\106\006\000\002\106\006\000\002" +
    "\106\003\000\002\107\003\000\002\107\006\000\002\110" +
    "\002\000\002\110\003\000\002\111\003\000\002\111\003" +
    "\000\002\112\006\000\002\112\006\000\002\112\003\000" +
    "\002\113\003\000\002\113\005\000\002\114\003\000\002" +
    "\114\004\000\002\115\005\000\002\115\003\000\002\116" +
    "\003\000\002\116\006\000\002\116\002\000\002\117\002" +
    "\000\002\117\004\000\002\120\007\000\002\120\005\000" +
    "\002\120\005\000\002\120\003\000\002\120\010\000\002" +
    "\120\006\000\002\120\006\000\002\120\004\000\002\121" +
    "\004\000\002\121\004\000\002\121\002\000\002\122\003" +
    "\000\002\122\006\000\002\122\005\000\002\122\005\000" +
    "\002\122\010\000\002\122\005\000\002\123\003\000\002" +
    "\123\003\000\002\123\003\000\002\124\006\000\002\124" +
    "\006\000\002\124\004\000\002\124\004\000\002\124\006" +
    "\000\002\124\004\000\002\124\004\000\002\165\003\000" +
    "\002\165\005\000\002\170\005\000\002\166\003\000\002" +
    "\125\003\000\002\125\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0356\000\010\060\007\215\011\216\012\001\002\000" +
    "\002\001\001\000\002\001\uffff\000\004\010\016\001\002" +
    "\000\002\001\ufffb\000\004\002\015\001\002\000\004\060" +
    "\014\001\002\000\004\060\013\001\002\000\002\001\ufff9" +
    "\000\002\001\ufffa\000\002\001\000\000\004\071\017\001" +
    "\uff89\000\006\003\u0357\010\026\001\002\000\004\072\022" +
    "\001\uff83\000\004\061\033\001\ufffc\000\006\003\023\010" +
    "\026\001\002\000\002\001\uff7e\000\004\122\027\001\uff82" +
    "\000\002\001\uff81\000\002\001\ufed6\000\006\003\030\010" +
    "\026\001\002\000\002\001\uff7f\000\002\001\uff80\000\004" +
    "\110\034\001\002\000\002\001\ufffd\000\002\001\ufff7\000" +
    "\040\003\056\027\040\043\042\052\062\064\044\065\051" +
    "\066\045\111\054\113\053\214\060\215\041\216\043\217" +
    "\050\220\037\221\057\001\uff32\000\006\042\u0340\067\u0341" +
    "\001\002\000\002\001\uff2d\000\004\063\u033a\001\002\000" +
    "\002\001\uff2a\000\004\010\u0337\001\002\000\002\001\uff29" +
    "\000\004\222\u032f\001\002\000\004\222\u0327\001\002\000" +
    "\002\001\ufff6\000\022\042\uff31\067\uff31\214\060\215\041" +
    "\216\043\217\050\220\037\221\057\001\uff34\000\002\001" +
    "\uff2c\000\004\222\176\001\002\000\002\001\uff30\000\002" +
    "\001\uff39\000\004\144\175\001\002\000\002\001\ufff8\000" +
    "\002\001\uff38\000\002\001\uff2e\000\002\001\uff2b\000\012" +
    "\010\141\012\134\160\136\166\137\001\002\000\002\001" +
    "\uff33\000\006\122\064\144\065\001\002\000\004\010\066" +
    "\001\002\000\002\001\uff3d\000\004\127\067\001\002\000" +
    "\034\006\100\007\075\010\106\016\105\076\072\077\103" +
    "\100\110\101\102\102\077\103\101\114\104\164\071\165" +
    "\107\001\002\000\002\001\ufec0\000\034\006\100\007\075" +
    "\010\106\016\105\076\072\077\103\100\110\101\102\102" +
    "\077\103\101\114\104\164\071\165\107\001\002\000\004" +
    "\222\114\001\002\000\002\001\uff24\000\002\001\ufec1\000" +
    "\002\001\ufec8\000\002\001\ufebc\000\002\001\ufec6\000\002" +
    "\001\ufec9\000\002\001\ufec5\000\002\001\ufec2\000\002\001" +
    "\ufec4\000\002\001\ufe61\000\002\001\ufec7\000\004\112\112" +
    "\001\ufe62\000\034\006\100\007\075\010\106\016\105\076" +
    "\072\077\103\100\110\101\102\102\077\103\101\114\104" +
    "\164\071\165\107\001\002\000\002\001\ufec3\000\002\001" +
    "\ufebe\000\004\010\113\001\002\000\002\001\ufebb\000\034" +
    "\006\100\007\075\010\106\016\105\076\072\077\103\100" +
    "\110\101\102\102\077\103\101\114\104\164\071\165\107" +
    "\001\ufeb4\000\004\223\127\001\002\000\004\122\122\001" +
    "\ufeb2\000\004\074\120\001\ufead\000\034\006\100\007\075" +
    "\010\106\016\105\076\072\077\103\100\110\101\102\102" +
    "\077\103\101\114\104\164\071\165\107\001\002\000\002" +
    "\001\ufeae\000\034\006\100\007\075\010\106\016\105\076" +
    "\072\077\103\100\110\101\102\102\077\103\101\114\104" +
    "\164\071\165\107\001\ufeb1\000\002\001\ufeb3\000\004\074" +
    "\125\001\ufeaf\000\034\006\100\007\075\010\106\016\105" +
    "\076\072\077\103\100\110\101\102\102\077\103\101\114" +
    "\104\164\071\165\107\001\002\000\002\001\ufeb0\000\002" +
    "\001\ufebd\000\002\001\ufebf\000\002\001\uffd8\000\006\112" +
    "\171\122\146\001\002\000\006\122\164\144\165\001\002" +
    "\000\004\127\162\001\uff26\000\004\164\161\001\uffcf\000" +
    "\004\010\156\001\002\000\002\001\uffd2\000\006\010\155" +
    "\166\154\001\uffd6\000\002\001\uffd1\000\006\122\143\144" +
    "\144\001\002\000\010\010\141\160\136\166\137\001\002" +
    "\000\002\001\ufff4\000\006\112\147\122\146\001\002\000" +
    "\010\010\141\160\136\166\137\001\002\000\004\012\150" +
    "\001\002\000\004\127\151\001\uffdd\000\034\006\100\007" +
    "\075\010\106\016\105\076\072\077\103\100\110\101\102" +
    "\102\077\103\101\114\104\164\071\165\107\001\002\000" +
    "\002\001\uffdc\000\002\001\uffd9\000\002\001\uffd4\000\002" +
    "\001\uffd3\000\004\161\157\001\002\000\002\001\uffd5\000" +
    "\002\001\uffd7\000\002\001\uffd0\000\034\006\100\007\075" +
    "\010\106\016\105\076\072\077\103\100\110\101\102\102" +
    "\077\103\101\114\104\164\071\165\107\001\002\000\002" +
    "\001\uff25\000\004\012\166\001\002\000\002\001\uff3e\000" +
    "\004\127\167\001\uff28\000\034\006\100\007\075\010\106" +
    "\016\105\076\072\077\103\100\110\101\102\102\077\103" +
    "\101\114\104\164\071\165\107\001\002\000\002\001\uff27" +
    "\000\004\012\172\001\002\000\004\127\173\001\uffdb\000" +
    "\034\006\100\007\075\010\106\016\105\076\072\077\103" +
    "\100\110\101\102\102\077\103\101\114\104\164\071\165" +
    "\107\001\002\000\002\001\uffda\000\002\001\ufffe\000\012" +
    "\003\201\010\203\076\200\223\uff5d\001\uff54\000\006\012" +
    "\u0320\151\u031f\001\002\000\002\001\uff52\000\002\001\uff55" +
    "\000\004\223\210\001\002\000\002\001\uff53\000\004\122" +
    "\206\001\uff5e\000\002\001\uff5c\000\014\003\201\010\203" +
    "\076\200\122\uff5a\223\uff5a\001\uff54\000\002\001\uff5b\000" +
    "\004\224\211\001\002\000\012\010\216\171\213\210\212" +
    "\222\215\001\002\000\004\222\u0315\001\002\000\012\010" +
    "\216\171\213\210\212\222\215\001\002\000\002\001\uffe6" +
    "\000\012\010\216\171\213\210\212\222\215\001\002\000" +
    "\004\222\u0310\001\002\000\010\110\222\145\221\146\220" +
    "\001\002\000\012\010\216\171\213\210\212\222\215\001" +
    "\002\000\012\010\216\171\213\210\212\222\215\001\002" +
    "\000\002\001\uffcd\000\224\003\326\004\347\005\360\006" +
    "\100\007\075\010\250\011\265\012\272\014\305\016\105" +
    "\017\332\020\330\021\257\023\247\025\312\027\357\032" +
    "\313\034\337\040\267\041\331\042\317\044\343\045\255" +
    "\047\356\050\241\051\226\053\307\054\351\055\244\056" +
    "\270\057\246\070\346\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\110\275\111\325\113" +
    "\237\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\144\225\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\214\256\215\273\216" +
    "\234\222\354\225\311\226\322\227\271\001\002\000\004" +
    "\222\u030b\001\002\000\002\001\uffac\000\006\012\u0300\225" +
    "\u0301\001\002\000\004\222\u02eb\001\002\000\002\001\uffce" +
    "\000\002\001\ufede\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\002\000\070\031\u0105\123\374\124\u010d" +
    "\125\366\143\371\144\u02e9\145\365\146\u0106\147\367\150" +
    "\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a" +
    "\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165" +
    "\373\166\u0103\167\u0101\170\364\173\370\001\002\000\004" +
    "\057\u0232\001\002\000\002\001\ufe99\000\036\127\u0192\130" +
    "\u0196\131\u0193\132\u019c\133\u0195\134\u019b\135\u0198\136\u019a" +
    "\137\u0194\140\u0191\141\u0197\142\u0199\174\ufea8\175\ufea8\001" +
    "\ufeaa\000\002\001\uffc7\000\002\001\uff9e\000\006\016\u02e5" +
    "\222\u02e4\001\002\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\002\000\132\004\347\006\100\007\075" +
    "\010\250\011\265\012\272\016\105\032\313\054\351\055" +
    "\244\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\114\104\115\243\116\301\117\262\120" +
    "\334\121\316\126\274\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\222\354\225\311" +
    "\226\322\227\271\001\002\000\004\222\u02de\001\002\000" +
    "\004\112\u02dc\001\002\000\002\001\uff8c\000\004\222\u02cb" +
    "\001\002\000\004\112\ufed6\001\ufe62\000\002\001\ufe77\000" +
    "\002\001\ufe9d\000\132\004\347\006\100\007\075\010\250" +
    "\011\265\012\272\016\105\032\313\054\351\055\244\075" +
    "\353\076\227\077\103\100\110\101\102\102\077\103\101" +
    "\104\251\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\222\354\225\311\226\322" +
    "\227\271\001\002\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\002\000\004\110\u02b0\001\002\000\004" +
    "\012\u0229\001\002\000\004\222\u02a7\001\002\000\002\001" +
    "\ufe9c\000\004\010\u029d\001\002\000\004\222\u029a\001\002" +
    "\000\004\073\u028f\001\ufea6\000\012\010\250\012\272\114" +
    "\104\225\311\001\002\000\002\001\ufeb9\000\010\110\u011d" +
    "\206\u011e\222\ufea0\001\ufe9b\000\134\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\144\u028b\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\002\000\004\222\u0288" +
    "\001\002\000\002\001\ufe77\000\002\001\ufe63\000\004\057" +
    "\u0228\001\002\000\132\004\347\006\100\007\075\010\250" +
    "\011\265\012\272\016\105\032\313\054\351\055\244\075" +
    "\353\076\227\077\103\100\110\101\102\102\077\103\101" +
    "\104\251\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\222\354\225\311\226\322" +
    "\227\271\001\002\000\002\001\uffc5\000\002\001\ufee8\000" +
    "\132\004\347\006\100\007\075\010\250\011\265\012\272" +
    "\016\105\032\313\054\351\055\244\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\222\354\225\311\226\322\227\271\001\002" +
    "\000\132\004\347\006\100\007\075\010\250\011\265\012" +
    "\272\016\105\032\313\054\351\055\244\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\222\354\225\311\226\322\227\271\001" +
    "\002\000\132\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\222\354\225\311\226\322\227\271" +
    "\001\002\000\006\012\272\225\u0129\001\002\000\132\004" +
    "\347\006\100\007\075\010\250\011\265\012\272\016\105" +
    "\032\313\054\351\055\244\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\222\354\225\311\226\322\227\271\001\002\000\002" +
    "\001\ufeb8\000\002\001\uffb3\000\010\010\u011b\012\272\225" +
    "\311\001\002\000\004\222\u0273\001\002\000\006\174\u0271" +
    "\175\u0272\001\002\000\004\110\u012a\001\ufe8a\000\004\222" +
    "\u025a\001\002\000\132\004\347\006\100\007\075\010\250" +
    "\011\265\012\272\016\105\032\313\054\351\055\244\075" +
    "\353\076\227\077\103\100\110\101\102\102\077\103\101" +
    "\104\251\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\222\354\225\311\226\322" +
    "\227\271\001\002\000\002\001\uffcb\000\132\004\347\006" +
    "\100\007\075\010\250\011\265\012\272\016\105\032\313" +
    "\054\351\055\244\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\114\104\115\243\116\301" +
    "\117\262\120\334\121\316\126\274\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\002\000\132\004\347" +
    "\006\100\007\075\010\250\011\265\012\272\016\105\032" +
    "\313\054\351\055\244\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\114\104\115\243\116" +
    "\301\117\262\120\334\121\316\126\274\164\315\165\277" +
    "\171\350\172\232\174\264\175\355\176\242\177\341\200" +
    "\254\201\336\202\303\203\342\204\300\205\253\210\306" +
    "\222\354\225\311\226\322\227\271\001\002\000\004\151" +
    "\u021c\001\uff9d\000\002\001\ufeb7\000\002\001\uffc8\000\002" +
    "\001\ufe77\000\002\001\ufe95\000\004\010\u0209\001\002\000" +
    "\002\001\ufff0\000\002\001\uffc6\000\002\001\ufe96\000\206" +
    "\003\326\004\347\005\360\006\100\007\075\010\250\011" +
    "\265\012\272\014\305\016\105\017\332\020\330\021\257" +
    "\023\247\025\312\027\357\032\313\034\337\040\267\041" +
    "\331\044\343\045\255\047\356\050\241\051\226\053\307" +
    "\054\351\055\244\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\110\275\113\237\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\144" +
    "\225\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\214\256\222\354\225\311\226\322" +
    "\227\271\001\002\000\134\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\144\u0200\164\315\165\277\171\350\172" +
    "\232\174\264\175\355\176\242\177\341\200\254\201\336" +
    "\202\303\203\342\204\300\205\253\210\306\222\354\225" +
    "\311\226\322\227\271\001\002\000\132\004\347\006\100" +
    "\007\075\010\250\011\265\012\272\016\105\032\313\054" +
    "\351\055\244\075\353\076\227\077\103\100\110\101\102" +
    "\102\077\103\101\104\251\114\104\115\243\116\301\117" +
    "\262\120\334\121\316\126\274\164\315\165\277\171\350" +
    "\172\232\174\264\175\355\176\242\177\341\200\254\201" +
    "\336\202\303\203\342\204\300\205\253\210\306\222\354" +
    "\225\311\226\322\227\271\001\002\000\002\001\uffca\000" +
    "\132\004\347\006\100\007\075\010\250\011\265\012\272" +
    "\016\105\032\313\054\351\055\244\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\222\354\225\311\226\322\227\271\001\002" +
    "\000\004\222\u01b9\001\ufeba\000\132\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\164\315\165\277\171\350\172" +
    "\232\174\264\175\355\176\242\177\341\200\254\201\336" +
    "\202\303\203\342\204\300\205\253\210\306\222\354\225" +
    "\311\226\322\227\271\001\002\000\004\222\u01de\001\002" +
    "\000\002\001\uff9f\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\002\000\132\004\347\006\100\007\075" +
    "\010\250\011\265\012\272\016\105\032\313\054\351\055" +
    "\244\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\114\104\115\243\116\301\117\262\120" +
    "\334\121\316\126\274\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\222\354\225\311" +
    "\226\322\227\271\001\002\000\134\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\144\u01d7\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\002\000\002\001\ufeab" +
    "\000\002\001\ufeac\000\002\001\uff86\000\004\222\u01d2\001" +
    "\ufece\000\132\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\222\354\225\311\226\322\227\271" +
    "\001\002\000\004\222\u01cb\001\002\000\002\001\uffcc\000" +
    "\004\222\u01be\001\002\000\132\004\347\006\100\007\075" +
    "\010\250\011\265\012\272\016\105\032\313\054\351\055" +
    "\244\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\114\104\115\243\116\301\117\262\120" +
    "\334\121\316\126\274\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\222\354\225\311" +
    "\226\322\227\271\001\002\000\012\010\250\012\272\114" +
    "\104\225\311\001\002\000\132\004\347\006\100\007\075" +
    "\010\250\011\265\012\272\016\105\032\313\054\351\055" +
    "\244\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\114\104\115\243\116\301\117\262\120" +
    "\334\121\316\126\274\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\222\354\225\311" +
    "\226\322\227\271\001\002\000\004\222\u016e\001\002\000" +
    "\004\222\361\001\002\000\132\004\347\006\100\007\075" +
    "\010\250\011\265\012\272\016\105\032\313\054\351\055" +
    "\244\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\114\104\115\243\116\301\117\262\120" +
    "\334\121\316\126\274\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\222\354\225\311" +
    "\226\322\227\271\001\002\000\070\031\u0105\123\374\124" +
    "\u010d\125\366\143\371\145\365\146\u0106\147\367\150\376" +
    "\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157" +
    "\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373" +
    "\166\u0103\167\u0101\170\364\173\370\223\u0102\001\002\000" +
    "\132\004\347\006\100\007\075\010\250\011\265\012\272" +
    "\016\105\032\313\054\351\055\244\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\222\354\225\311\226\322\227\271\001\002" +
    "\000\132\004\347\006\100\007\075\010\250\011\265\012" +
    "\272\016\105\032\313\054\351\055\244\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\222\354\225\311\226\322\227\271\001" +
    "\002\000\132\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\222\354\225\311\226\322\227\271" +
    "\001\002\000\132\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\222\354\225\311\226\322\227" +
    "\271\001\002\000\132\004\347\006\100\007\075\010\250" +
    "\011\265\012\272\016\105\032\313\054\351\055\244\075" +
    "\353\076\227\077\103\100\110\101\102\102\077\103\101" +
    "\104\251\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\222\354\225\311\226\322" +
    "\227\271\001\002\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\002\000\132\004\347\006\100\007\075" +
    "\010\250\011\265\012\272\016\105\032\313\054\351\055" +
    "\244\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\114\104\115\243\116\301\117\262\120" +
    "\334\121\316\126\274\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\222\354\225\311" +
    "\226\322\227\271\001\002\000\132\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\164\315\165\277\171\350\172" +
    "\232\174\264\175\355\176\242\177\341\200\254\201\336" +
    "\202\303\203\342\204\300\205\253\210\306\222\354\225" +
    "\311\226\322\227\271\001\002\000\132\004\347\006\100" +
    "\007\075\010\250\011\265\012\272\016\105\032\313\054" +
    "\351\055\244\075\353\076\227\077\103\100\110\101\102" +
    "\102\077\103\101\104\251\114\104\115\243\116\301\117" +
    "\262\120\334\121\316\126\274\164\315\165\277\171\350" +
    "\172\232\174\264\175\355\176\242\177\341\200\254\201" +
    "\336\202\303\203\342\204\300\205\253\210\306\222\354" +
    "\225\311\226\322\227\271\001\002\000\132\004\347\006" +
    "\100\007\075\010\250\011\265\012\272\016\105\032\313" +
    "\054\351\055\244\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\114\104\115\243\116\301" +
    "\117\262\120\334\121\316\126\274\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\002\000\132\004\347" +
    "\006\100\007\075\010\250\011\265\012\272\016\105\032" +
    "\313\054\351\055\244\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\114\104\115\243\116" +
    "\301\117\262\120\334\121\316\126\274\164\315\165\277" +
    "\171\350\172\232\174\264\175\355\176\242\177\341\200" +
    "\254\201\336\202\303\203\342\204\300\205\253\210\306" +
    "\222\354\225\311\226\322\227\271\001\002\000\132\004" +
    "\347\006\100\007\075\010\250\011\265\012\272\016\105" +
    "\032\313\054\351\055\244\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\222\354\225\311\226\322\227\271\001\002\000\132" +
    "\004\347\006\100\007\075\010\250\011\265\012\272\016" +
    "\105\032\313\054\351\055\244\075\353\076\227\077\103" +
    "\100\110\101\102\102\077\103\101\104\251\114\104\115" +
    "\243\116\301\117\262\120\334\121\316\126\274\164\315" +
    "\165\277\171\350\172\232\174\264\175\355\176\242\177" +
    "\341\200\254\201\336\202\303\203\342\204\300\205\253" +
    "\210\306\222\354\225\311\226\322\227\271\001\002\000" +
    "\132\004\347\006\100\007\075\010\250\011\265\012\272" +
    "\016\105\032\313\054\351\055\244\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\222\354\225\311\226\322\227\271\001\002" +
    "\000\132\004\347\006\100\007\075\010\250\011\265\012" +
    "\272\016\105\032\313\054\351\055\244\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\222\354\225\311\226\322\227\271\001" +
    "\002\000\210\003\326\004\347\005\360\006\100\007\075" +
    "\010\250\011\265\012\272\014\305\016\105\017\332\020" +
    "\330\021\257\023\247\025\312\027\357\032\313\034\337" +
    "\040\267\041\331\044\343\045\255\047\356\050\241\051" +
    "\226\053\307\054\351\055\244\075\353\076\227\077\103" +
    "\100\110\101\102\102\077\103\101\104\251\110\275\113" +
    "\237\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\144\225\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\214\256\222\354\224" +
    "\u0144\225\311\226\322\227\271\001\002\000\132\004\347" +
    "\006\100\007\075\010\250\011\265\012\272\016\105\032" +
    "\313\054\351\055\244\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\114\104\115\243\116" +
    "\301\117\262\120\334\121\316\126\274\164\315\165\277" +
    "\171\350\172\232\174\264\175\355\176\242\177\341\200" +
    "\254\201\336\202\303\203\342\204\300\205\253\210\306" +
    "\222\354\225\311\226\322\227\271\001\002\000\132\004" +
    "\347\006\100\007\075\010\250\011\265\012\272\016\105" +
    "\032\313\054\351\055\244\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\222\354\225\311\226\322\227\271\001\002\000\010" +
    "\010\u011b\012\272\225\311\001\002\000\132\004\347\006" +
    "\100\007\075\010\250\011\265\012\272\016\105\032\313" +
    "\054\351\055\244\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\114\104\115\243\116\301" +
    "\117\262\120\334\121\316\126\274\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\002\000\132\004\347" +
    "\006\100\007\075\010\250\011\265\012\272\016\105\032" +
    "\313\054\351\055\244\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\114\104\115\243\116" +
    "\301\117\262\120\334\121\316\126\274\164\315\165\277" +
    "\171\350\172\232\174\264\175\355\176\242\177\341\200" +
    "\254\201\336\202\303\203\342\204\300\205\253\210\306" +
    "\222\354\225\311\226\322\227\271\001\002\000\132\004" +
    "\347\006\100\007\075\010\250\011\265\012\272\016\105" +
    "\032\313\054\351\055\244\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\222\354\225\311\226\322\227\271\001\002\000\132" +
    "\004\347\006\100\007\075\010\250\011\265\012\272\016" +
    "\105\032\313\054\351\055\244\075\353\076\227\077\103" +
    "\100\110\101\102\102\077\103\101\104\251\114\104\115" +
    "\243\116\301\117\262\120\334\121\316\126\274\164\315" +
    "\165\277\171\350\172\232\174\264\175\355\176\242\177" +
    "\341\200\254\201\336\202\303\203\342\204\300\205\253" +
    "\210\306\222\354\225\311\226\322\227\271\001\002\000" +
    "\132\004\347\006\100\007\075\010\250\011\265\012\272" +
    "\016\105\032\313\054\351\055\244\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\222\354\225\311\226\322\227\271\001\002" +
    "\000\132\004\347\006\100\007\075\010\250\011\265\012" +
    "\272\016\105\032\313\054\351\055\244\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\222\354\225\311\226\322\227\271\001" +
    "\002\000\132\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\222\354\225\311\226\322\227\271" +
    "\001\002\000\132\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\222\354\225\311\226\322\227" +
    "\271\001\002\000\062\031\u0105\125\366\143\371\145\365" +
    "\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100\154" +
    "\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104" +
    "\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364\173" +
    "\370\001\uff03\000\012\031\u0105\166\u0103\167\u0101\170\364" +
    "\001\ufefe\000\034\031\u0105\156\u010a\157\u0108\160\372\161" +
    "\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101" +
    "\170\364\173\370\001\ufef1\000\024\031\u0105\162\u0104\163" +
    "\377\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370" +
    "\001\ufeee\000\024\031\u0105\162\u0104\163\377\164\u010c\165" +
    "\373\166\u0103\167\u0101\170\364\173\370\001\ufeed\000\024" +
    "\031\u0105\162\u0104\163\377\164\u010c\165\373\166\u0103\167" +
    "\u0101\170\364\173\370\001\ufeec\000\044\031\u0105\152\u010b" +
    "\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161" +
    "\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101" +
    "\170\364\173\370\001\uff01\000\052\031\u0105\147\367\150" +
    "\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a" +
    "\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165" +
    "\373\166\u0103\167\u0101\170\364\173\370\001\uff06\000\002" +
    "\001\ufeeb\000\004\073\u012e\001\ufed2\000\002\001\ufed4\000" +
    "\006\012\272\225\u0129\001\002\000\004\112\u0124\001\002" +
    "\000\004\112\ufed6\001\ufed5\000\006\110\u011d\206\u011e\001" +
    "\ufe9b\000\132\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\222\354\225\311\226\322\227\271" +
    "\001\002\000\132\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\222\354\225\311\226\322\227" +
    "\271\001\ufe93\000\004\207\u0121\001\002\000\066\031\u0105" +
    "\123\374\124\u010d\125\366\143\371\145\365\146\u0106\147" +
    "\367\150\376\151\u0107\152\u010b\153\u0100\154\363\155\375" +
    "\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377\164" +
    "\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001\ufe92" +
    "\000\002\001\ufe98\000\070\031\u0105\111\u0123\123\374\124" +
    "\u010d\125\366\143\371\145\365\146\u0106\147\367\150\376" +
    "\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157" +
    "\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373" +
    "\166\u0103\167\u0101\170\364\173\370\001\002\000\002\001" +
    "\ufe97\000\006\012\272\225\311\001\002\000\002\001\ufe9e" +
    "\000\006\012\272\225\u0129\001\002\000\006\110\u011d\206" +
    "\u011e\001\ufea0\000\006\110\u011d\206\u011e\001\ufe9f\000\004" +
    "\110\u012a\001\ufe89\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\002\000\070\031\u0105\111\u012c\123\374" +
    "\124\u010d\125\366\143\371\145\365\146\u0106\147\367\150" +
    "\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a" +
    "\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165" +
    "\373\166\u0103\167\u0101\170\364\173\370\001\002\000\002" +
    "\001\ufe94\000\006\110\u011d\206\u011e\001\ufe9a\000\014\010" +
    "\u0134\012\272\110\u0135\114\104\225\311\001\002\000\002" +
    "\001\ufe8c\000\002\001\ufe8d\000\002\001\ufe90\000\002\001" +
    "\ufed0\000\006\110\u0138\206\u0139\001\ufe91\000\002\001\ufe62" +
    "\000\132\004\347\006\100\007\075\010\250\011\265\012" +
    "\272\016\105\032\313\054\351\055\244\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\222\354\225\311\226\322\227\271\001" +
    "\002\000\070\031\u0105\111\u0137\123\374\124\u010d\125\366" +
    "\143\371\145\365\146\u0106\147\367\150\376\151\u0107\152" +
    "\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372" +
    "\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167" +
    "\u0101\170\364\173\370\001\002\000\002\001\ufe8b\000\132" +
    "\004\347\006\100\007\075\010\250\011\265\012\272\016" +
    "\105\032\313\054\351\055\244\075\353\076\227\077\103" +
    "\100\110\101\102\102\077\103\101\104\251\114\104\115" +
    "\243\116\301\117\262\120\334\121\316\126\274\164\315" +
    "\165\277\171\350\172\232\174\264\175\355\176\242\177" +
    "\341\200\254\201\336\202\303\203\342\204\300\205\253" +
    "\210\306\222\354\225\311\226\322\227\271\001\002\000" +
    "\132\004\347\006\100\007\075\010\250\011\265\012\272" +
    "\016\105\032\313\054\351\055\244\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\222\354\225\311\226\322\227\271\001\ufe93" +
    "\000\004\207\u013b\001\002\000\002\001\ufe8f\000\070\031" +
    "\u0105\111\u013d\123\374\124\u010d\125\366\143\371\145\365" +
    "\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100\154" +
    "\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104" +
    "\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364\173" +
    "\370\001\002\000\002\001\ufe8e\000\004\073\u0140\001\ufed3" +
    "\000\002\001\ufed1\000\014\010\u0134\012\272\110\u0135\114" +
    "\104\225\311\001\002\000\002\001\ufecf\000\020\031\u0105" +
    "\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001" +
    "\ufef9\000\004\031\u0105\001\ufefc\000\002\001\uffcd\000\002" +
    "\001\uff66\000\006\212\u0149\213\u0148\001\uff62\000\002\001" +
    "\uffc3\000\206\003\326\004\347\005\360\006\100\007\075" +
    "\010\250\011\265\012\272\014\305\016\105\017\332\020" +
    "\330\021\257\023\247\025\312\027\357\032\313\034\337" +
    "\040\267\041\331\044\343\045\255\047\356\050\241\051" +
    "\226\053\307\054\351\055\244\075\353\076\227\077\103" +
    "\100\110\101\102\102\077\103\101\104\251\110\275\113" +
    "\237\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\144\225\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\214\256\222\354\225" +
    "\311\226\322\227\271\001\002\000\004\222\u014a\001\002" +
    "\000\132\004\347\006\100\007\075\010\250\011\265\012" +
    "\272\016\105\032\313\054\351\055\244\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\222\354\225\311\226\322\227\271\001" +
    "\002\000\070\031\u0105\123\374\124\u010d\125\366\143\371" +
    "\145\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153" +
    "\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109" +
    "\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170" +
    "\364\173\370\223\u014c\001\002\000\206\003\326\004\347" +
    "\005\360\006\100\007\075\010\250\011\265\012\272\014" +
    "\305\016\105\017\332\020\330\021\257\023\247\025\312" +
    "\027\357\032\313\034\337\040\267\041\331\044\343\045" +
    "\255\047\356\050\241\051\226\053\307\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\110\275\113\237\114\104\115\243\116\301" +
    "\117\262\120\334\121\316\126\274\144\225\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\214\256\222\354\225\311\226\322\227\271\001\002" +
    "\000\002\001\uff65\000\002\001\uff61\000\222\003\326\004" +
    "\347\005\360\006\100\007\075\010\250\011\265\012\272" +
    "\014\305\016\105\017\332\020\330\021\257\023\247\025" +
    "\312\027\357\032\313\034\337\040\267\041\331\042\317" +
    "\044\343\045\255\047\356\050\241\051\226\053\307\054" +
    "\351\055\244\056\270\057\246\070\346\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\110" +
    "\275\113\237\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\144\225\164\315\165\277\171\350\172" +
    "\232\174\264\175\355\176\242\177\341\200\254\201\336" +
    "\202\303\203\342\204\300\205\253\210\306\214\256\215" +
    "\273\216\234\222\354\225\311\226\322\227\271\001\uff64" +
    "\000\006\212\u0153\213\u0152\001\uff60\000\004\211\u015b\001" +
    "\002\000\004\224\u0159\001\002\000\004\222\u0154\001\002" +
    "\000\132\004\347\006\100\007\075\010\250\011\265\012" +
    "\272\016\105\032\313\054\351\055\244\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\222\354\225\311\226\322\227\271\001" +
    "\002\000\070\031\u0105\123\374\124\u010d\125\366\143\371" +
    "\145\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153" +
    "\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109" +
    "\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170" +
    "\364\173\370\223\u0156\001\002\000\004\224\u0157\001\002" +
    "\000\002\001\uffcd\000\222\003\326\004\347\005\360\006" +
    "\100\007\075\010\250\011\265\012\272\014\305\016\105" +
    "\017\332\020\330\021\257\023\247\025\312\027\357\032" +
    "\313\034\337\040\267\041\331\042\317\044\343\045\255" +
    "\047\356\050\241\051\226\053\307\054\351\055\244\056" +
    "\270\057\246\070\346\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\110\275\113\237\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\144\225\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\214\256\215\273\216\234\222" +
    "\354\225\311\226\322\227\271\001\uff63\000\002\001\uffcd" +
    "\000\222\003\326\004\347\005\360\006\100\007\075\010" +
    "\250\011\265\012\272\014\305\016\105\017\332\020\330" +
    "\021\257\023\247\025\312\027\357\032\313\034\337\040" +
    "\267\041\331\042\317\044\343\045\255\047\356\050\241" +
    "\051\226\053\307\054\351\055\244\056\270\057\246\070" +
    "\346\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\110\275\113\237\114\104\115\243\116" +
    "\301\117\262\120\334\121\316\126\274\144\225\164\315" +
    "\165\277\171\350\172\232\174\264\175\355\176\242\177" +
    "\341\200\254\201\336\202\303\203\342\204\300\205\253" +
    "\210\306\214\256\215\273\216\234\222\354\225\311\226" +
    "\322\227\271\001\uff5f\000\004\144\u015c\001\002\000\002" +
    "\001\uffc2\000\004\031\u0105\001\ufefb\000\034\031\u0105\156" +
    "\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c" +
    "\165\373\166\u0103\167\u0101\170\364\173\370\001\ufef0\000" +
    "\020\031\u0105\164\u010c\165\373\166\u0103\167\u0101\170\364" +
    "\173\370\001\ufef8\000\046\031\u0105\151\u0107\152\u010b\153" +
    "\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109" +
    "\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170" +
    "\364\173\370\001\uff00\000\034\031\u0105\156\u010a\157\u0108" +
    "\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166" +
    "\u0103\167\u0101\170\364\173\370\001\ufef2\000\064\031\u0105" +
    "\124\u010d\125\366\143\371\145\365\146\u0106\147\367\150" +
    "\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a" +
    "\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165" +
    "\373\166\u0103\167\u0101\170\364\173\370\001\uff05\000\012" +
    "\031\u0105\166\u0103\167\u0101\170\364\001\ufefd\000\024\031" +
    "\u0105\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101" +
    "\170\364\173\370\001\ufeef\000\070\031\u0105\123\374\124" +
    "\u010d\125\366\143\371\145\365\146\u0106\147\367\150\376" +
    "\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157" +
    "\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373" +
    "\166\u0103\167\u0101\170\364\173\370\224\u0166\001\002\000" +
    "\132\004\347\006\100\007\075\010\250\011\265\012\272" +
    "\016\105\032\313\054\351\055\244\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\222\354\225\311\226\322\227\271\001\002" +
    "\000\066\031\u0105\123\374\124\u010d\125\366\143\371\145" +
    "\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100" +
    "\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162" +
    "\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364" +
    "\173\370\001\ufee9\000\012\031\u0105\166\u0103\167\u0101\170" +
    "\364\001\ufeff\000\050\031\u0105\150\376\151\u0107\152\u010b" +
    "\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161" +
    "\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101" +
    "\170\364\173\370\001\uff02\000\060\031\u0105\143\371\145" +
    "\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100" +
    "\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162" +
    "\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364" +
    "\173\370\001\uff04\000\054\031\u0105\146\u0106\147\367\150" +
    "\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a" +
    "\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165" +
    "\373\166\u0103\167\u0101\170\364\173\370\001\uff07\000\004" +
    "\031\u0105\001\ufefa\000\034\031\u0105\156\u010a\157\u0108\160" +
    "\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103" +
    "\167\u0101\170\364\173\370\001\ufef3\000\006\010\u0134\114" +
    "\104\001\002\000\006\122\u0174\223\u0173\001\002\000\004" +
    "\127\u0171\001\002\000\034\006\100\007\075\010\106\016" +
    "\105\076\072\077\103\100\110\101\102\102\077\103\101" +
    "\114\104\164\071\165\107\001\002\000\002\001\uff73\000" +
    "\210\003\326\004\347\005\360\006\100\007\075\010\250" +
    "\011\265\012\272\014\305\016\105\017\332\020\330\021" +
    "\257\023\247\025\312\027\357\032\313\034\337\040\267" +
    "\041\331\044\343\045\255\047\356\050\241\051\226\053" +
    "\307\054\351\055\244\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\110\275\113\237\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\144\225\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\214\256\222\354\224\u0179\225" +
    "\311\226\322\227\271\001\002\000\006\010\u0134\114\104" +
    "\001\002\000\004\127\u0176\001\002\000\034\006\100\007" +
    "\075\010\106\016\105\076\072\077\103\100\110\101\102" +
    "\102\077\103\101\114\104\164\071\165\107\001\002\000" +
    "\002\001\uff72\000\002\001\uffad\000\002\001\uffcd\000\002" +
    "\001\uff75\000\224\003\326\004\347\005\360\006\100\007" +
    "\075\010\250\011\265\012\272\014\305\016\105\017\332" +
    "\020\330\021\257\023\247\025\312\027\357\030\u017c\032" +
    "\313\034\337\040\267\041\331\042\317\044\343\045\255" +
    "\047\356\050\241\051\226\053\307\054\351\055\244\056" +
    "\270\057\246\070\346\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\110\275\113\237\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\144\225\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\214\256\215\273\216\234\222" +
    "\354\225\311\226\322\227\271\001\002\000\004\144\u017d" +
    "\001\002\000\002\001\uff74\000\070\031\u0105\123\374\124" +
    "\u010d\125\366\143\371\144\u017f\145\365\146\u0106\147\367" +
    "\150\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156" +
    "\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c" +
    "\165\373\166\u0103\167\u0101\170\364\173\370\001\002\000" +
    "\002\001\uffaa\000\004\222\u01b9\001\002\000\002\001\ufea8" +
    "\000\002\001\uff08\000\004\112\u0184\001\002\000\010\010" +
    "\u0186\012\272\225\311\001\002\000\004\222\u01b6\001\ufe9e" +
    "\000\004\222\u0187\001\002\000\134\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\151\u018b\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\uff50\000\004\122\u01b1" +
    "\001\uff51\000\042\122\uff4e\127\u0192\130\u0196\131\u0193\132" +
    "\u019c\133\u0195\134\u019b\135\u0198\136\u019a\137\u0194\140\u0191" +
    "\141\u0197\142\u0199\174\ufea8\175\ufea8\223\uff4e\001\ufeaa\000" +
    "\004\223\u0190\001\002\000\012\010\250\012\272\114\104" +
    "\225\311\001\002\000\066\031\u0105\123\374\124\u010d\125" +
    "\366\143\371\145\365\146\u0106\147\367\150\376\151\u0107" +
    "\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160" +
    "\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103" +
    "\167\u0101\170\364\173\370\001\002\000\006\122\uff4f\223" +
    "\uff4f\001\ufeab\000\002\001\uff4d\000\002\001\ufea9\000\002" +
    "\001\ufed9\000\132\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\222\354\225\311\226\322\227" +
    "\271\001\002\000\134\004\347\006\100\007\075\010\250" +
    "\011\265\012\272\016\105\032\313\054\351\055\244\075" +
    "\353\076\227\077\103\100\110\101\102\102\077\103\101" +
    "\104\251\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\151\u01a7\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\222\354\225\311" +
    "\226\322\227\271\001\002\000\132\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\164\315\165\277\171\350\172" +
    "\232\174\264\175\355\176\242\177\341\200\254\201\336" +
    "\202\303\203\342\204\300\205\253\210\306\222\354\225" +
    "\311\226\322\227\271\001\002\000\132\004\347\006\100" +
    "\007\075\010\250\011\265\012\272\016\105\032\313\054" +
    "\351\055\244\075\353\076\227\077\103\100\110\101\102" +
    "\102\077\103\101\104\251\114\104\115\243\116\301\117" +
    "\262\120\334\121\316\126\274\164\315\165\277\171\350" +
    "\172\232\174\264\175\355\176\242\177\341\200\254\201" +
    "\336\202\303\203\342\204\300\205\253\210\306\222\354" +
    "\225\311\226\322\227\271\001\002\000\132\004\347\006" +
    "\100\007\075\010\250\011\265\012\272\016\105\032\313" +
    "\054\351\055\244\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\114\104\115\243\116\301" +
    "\117\262\120\334\121\316\126\274\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\002\000\132\004\347" +
    "\006\100\007\075\010\250\011\265\012\272\016\105\032" +
    "\313\054\351\055\244\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\114\104\115\243\116" +
    "\301\117\262\120\334\121\316\126\274\164\315\165\277" +
    "\171\350\172\232\174\264\175\355\176\242\177\341\200" +
    "\254\201\336\202\303\203\342\204\300\205\253\210\306" +
    "\222\354\225\311\226\322\227\271\001\002\000\132\004" +
    "\347\006\100\007\075\010\250\011\265\012\272\016\105" +
    "\032\313\054\351\055\244\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\222\354\225\311\226\322\227\271\001\002\000\132" +
    "\004\347\006\100\007\075\010\250\011\265\012\272\016" +
    "\105\032\313\054\351\055\244\075\353\076\227\077\103" +
    "\100\110\101\102\102\077\103\101\104\251\114\104\115" +
    "\243\116\301\117\262\120\334\121\316\126\274\164\315" +
    "\165\277\171\350\172\232\174\264\175\355\176\242\177" +
    "\341\200\254\201\336\202\303\203\342\204\300\205\253" +
    "\210\306\222\354\225\311\226\322\227\271\001\002\000" +
    "\132\004\347\006\100\007\075\010\250\011\265\012\272" +
    "\016\105\032\313\054\351\055\244\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\222\354\225\311\226\322\227\271\001\002" +
    "\000\132\004\347\006\100\007\075\010\250\011\265\012" +
    "\272\016\105\032\313\054\351\055\244\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\114" +
    "\104\115\243\116\301\117\262\120\334\121\316\126\274" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\222\354\225\311\226\322\227\271\001" +
    "\002\000\132\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\222\354\225\311\226\322\227\271" +
    "\001\002\000\132\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\222\354\225\311\226\322\227" +
    "\271\001\002\000\060\031\u0105\143\371\145\365\146\u0106" +
    "\147\367\150\376\151\u0107\152\u010b\153\u0100\154\363\155" +
    "\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377" +
    "\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001" +
    "\uff14\000\060\031\u0105\143\371\145\365\146\u0106\147\367" +
    "\150\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156" +
    "\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c" +
    "\165\373\166\u0103\167\u0101\170\364\173\370\001\uff12\000" +
    "\060\031\u0105\143\371\145\365\146\u0106\147\367\150\376" +
    "\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157" +
    "\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373" +
    "\166\u0103\167\u0101\170\364\173\370\001\uff10\000\060\031" +
    "\u0105\143\371\145\365\146\u0106\147\367\150\376\151\u0107" +
    "\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160" +
    "\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103" +
    "\167\u0101\170\364\173\370\001\uff0c\000\060\031\u0105\143" +
    "\371\145\365\146\u0106\147\367\150\376\151\u0107\152\u010b" +
    "\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161" +
    "\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101" +
    "\170\364\173\370\001\uff11\000\060\031\u0105\143\371\145" +
    "\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100" +
    "\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162" +
    "\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364" +
    "\173\370\001\uff0d\000\060\031\u0105\143\371\145\365\146" +
    "\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100\154\363" +
    "\155\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163" +
    "\377\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370" +
    "\001\uff16\000\060\031\u0105\143\371\145\365\146\u0106\147" +
    "\367\150\376\151\u0107\152\u010b\153\u0100\154\363\155\375" +
    "\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377\164" +
    "\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001\uff13" +
    "\000\060\031\u0105\143\371\145\365\146\u0106\147\367\150" +
    "\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a" +
    "\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165" +
    "\373\166\u0103\167\u0101\170\364\173\370\001\uff0f\000\060" +
    "\031\u0105\143\371\145\365\146\u0106\147\367\150\376\151" +
    "\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108" +
    "\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166" +
    "\u0103\167\u0101\170\364\173\370\001\uff15\000\014\010\250" +
    "\012\272\114\104\210\u01a9\225\311\001\002\000\060\031" +
    "\u0105\143\371\145\365\146\u0106\147\367\150\376\151\u0107" +
    "\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160" +
    "\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103" +
    "\167\u0101\170\364\173\370\001\uff1b\000\010\010\u011b\012" +
    "\272\225\311\001\002\000\002\001\uff1a\000\004\222\u01ad" +
    "\001\ufecb\000\002\001\uff19\000\134\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\151\u018b\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\uff50\000\004\223\u01af" +
    "\001\002\000\002\001\ufeca\000\060\031\u0105\143\371\145" +
    "\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100" +
    "\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162" +
    "\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364" +
    "\173\370\001\uff0e\000\134\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\151\u01b3\164\315\165\277\171\350\172" +
    "\232\174\264\175\355\176\242\177\341\200\254\201\336" +
    "\202\303\203\342\204\300\205\253\210\306\222\354\225" +
    "\311\226\322\227\271\001\002\000\042\122\uff4b\127\u0192" +
    "\130\u0196\131\u0193\132\u019c\133\u0195\134\u019b\135\u0198\136" +
    "\u019a\137\u0194\140\u0191\141\u0197\142\u0199\174\ufea8\175\ufea8" +
    "\223\uff4b\001\ufeaa\000\012\010\250\012\272\114\104\225" +
    "\311\001\002\000\006\122\uff4c\223\uff4c\001\ufeab\000\002" +
    "\001\uff4a\000\134\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\151\u018b\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\uff50\000\004\223\u01b8\001\002\000\002" +
    "\001\ufed8\000\134\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\151\u018b\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\uff50\000\004\223\u01bb\001\002\000\002" +
    "\001\ufeda\000\070\031\u0105\123\374\124\u010d\125\366\143" +
    "\371\145\365\146\u0106\147\367\150\376\151\u0107\152\u010b" +
    "\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161" +
    "\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101" +
    "\170\364\173\370\223\u01bd\001\002\000\002\001\ufeea\000" +
    "\014\010\250\012\272\075\u01c2\114\104\225\311\001\ufe84" +
    "\000\006\122\u01c6\223\u01c8\001\002\000\002\001\ufe87\000" +
    "\002\001\ufe86\000\004\222\u01c3\001\002\000\014\010\250" +
    "\012\272\075\u01c2\114\104\225\311\001\ufe84\000\006\122" +
    "\u01c6\223\u01c5\001\002\000\002\001\ufe85\000\014\010\250" +
    "\012\272\075\u01c2\114\104\225\311\001\ufe84\000\002\001" +
    "\ufe88\000\004\127\u01c9\001\002\000\132\004\347\006\100" +
    "\007\075\010\250\011\265\012\272\016\105\032\313\054" +
    "\351\055\244\075\353\076\227\077\103\100\110\101\102" +
    "\102\077\103\101\104\251\114\104\115\243\116\301\117" +
    "\262\120\334\121\316\126\274\164\315\165\277\171\350" +
    "\172\232\174\264\175\355\176\242\177\341\200\254\201" +
    "\336\202\303\203\342\204\300\205\253\210\306\222\354" +
    "\225\311\226\322\227\271\001\002\000\060\031\u0105\143" +
    "\371\145\365\146\u0106\147\367\150\376\151\u0107\152\u010b" +
    "\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161" +
    "\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101" +
    "\170\364\173\370\001\uff1c\000\012\010\250\012\272\114" +
    "\104\225\311\001\002\000\002\001\ufe66\000\006\122\u01cf" +
    "\223\u01ce\001\002\000\002\001\ufe6d\000\012\010\250\012" +
    "\272\114\104\225\311\001\002\000\002\001\ufe65\000\004" +
    "\031\u0105\001\ufef5\000\134\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\223\u01d5\225" +
    "\311\226\322\227\271\001\002\000\002\001\ufee0\000\070" +
    "\031\u0105\123\374\124\u010d\125\366\143\371\145\365\146" +
    "\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100\154\363" +
    "\155\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163" +
    "\377\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370" +
    "\223\u01d6\001\002\000\002\001\ufecd\000\002\001\ufecc\000" +
    "\002\001\uffb9\000\040\127\u0192\130\u0196\131\u0193\132\u019c" +
    "\133\u0195\134\u019b\135\u0198\136\u019a\137\u0194\140\u0191\141" +
    "\u0197\142\u0199\144\u01db\174\ufea8\175\ufea8\001\ufeaa\000\004" +
    "\144\u01da\001\ufeab\000\002\001\uffb8\000\002\001\uffb7\000" +
    "\002\001\ufee2\000\002\001\ufee6\000\132\004\347\006\100" +
    "\007\075\010\250\011\265\012\272\016\105\032\313\054" +
    "\351\055\244\075\353\076\227\077\103\100\110\101\102" +
    "\102\077\103\101\104\251\114\104\115\243\116\301\117" +
    "\262\120\334\121\316\126\274\164\315\165\277\171\350" +
    "\172\232\174\264\175\355\176\242\177\341\200\254\201" +
    "\336\202\303\203\342\204\300\205\253\210\306\222\354" +
    "\225\311\226\322\227\271\001\002\000\070\031\u0105\123" +
    "\374\124\u010d\125\366\143\371\145\365\146\u0106\147\367" +
    "\150\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156" +
    "\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c" +
    "\165\373\166\u0103\167\u0101\170\364\173\370\223\u01e0\001" +
    "\002\000\006\110\u01e2\224\u01e3\001\002\000\002\001\uffbe" +
    "\000\004\144\u01f5\001\uff6d\000\004\144\u01e5\001\uff6d\000" +
    "\010\035\u01f2\036\u01e8\037\u01e9\001\002\000\002\001\uff6d" +
    "\000\010\035\u01e7\036\u01e8\037\u01e9\001\002\000\004\144" +
    "\u01f1\001\002\000\132\004\347\006\100\007\075\010\250" +
    "\011\265\012\272\016\105\032\313\054\351\055\244\075" +
    "\353\076\227\077\103\100\110\101\102\102\077\103\101" +
    "\104\251\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\222\354\225\311\226\322" +
    "\227\271\001\002\000\006\144\u01eb\224\u01ec\001\002\000" +
    "\002\001\uffcd\000\002\001\uff69\000\002\001\uff6a\000\222" +
    "\003\326\004\347\005\360\006\100\007\075\010\250\011" +
    "\265\012\272\014\305\016\105\017\332\020\330\021\257" +
    "\023\247\025\312\027\357\032\313\034\337\040\267\041" +
    "\331\042\317\044\343\045\255\047\356\050\241\051\226" +
    "\053\307\054\351\055\244\056\270\057\246\070\346\075" +
    "\353\076\227\077\103\100\110\101\102\102\077\103\101" +
    "\104\251\110\275\113\237\114\104\115\243\116\301\117" +
    "\262\120\334\121\316\126\274\144\225\164\315\165\277" +
    "\171\350\172\232\174\264\175\355\176\242\177\341\200" +
    "\254\201\336\202\303\203\342\204\300\205\253\210\306" +
    "\214\256\215\273\216\234\222\354\225\311\226\322\227" +
    "\271\001\uff6b\000\072\031\u0105\123\374\124\u010d\125\366" +
    "\143\371\144\u01eb\145\365\146\u0106\147\367\150\376\151" +
    "\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108" +
    "\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166" +
    "\u0103\167\u0101\170\364\173\370\224\u01ec\001\002\000\002" +
    "\001\uffcd\000\222\003\326\004\347\005\360\006\100\007" +
    "\075\010\250\011\265\012\272\014\305\016\105\017\332" +
    "\020\330\021\257\023\247\025\312\027\357\032\313\034" +
    "\337\040\267\041\331\042\317\044\343\045\255\047\356" +
    "\050\241\051\226\053\307\054\351\055\244\056\270\057" +
    "\246\070\346\075\353\076\227\077\103\100\110\101\102" +
    "\102\077\103\101\104\251\110\275\113\237\114\104\115" +
    "\243\116\301\117\262\120\334\121\316\126\274\144\225" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\214\256\215\273\216\234\222\354\225" +
    "\311\226\322\227\271\001\uff6c\000\002\001\uff6e\000\004" +
    "\144\u01f3\001\002\000\002\001\uff6f\000\010\036\u01e8\037" +
    "\u01e9\111\u01f8\001\002\000\002\001\uff6d\000\010\036\u01e8" +
    "\037\u01e9\111\u01f7\001\002\000\002\001\uff70\000\002\001" +
    "\uff71\000\002\001\ufee4\000\066\031\u0105\123\374\124\u010d" +
    "\125\366\143\371\145\365\146\u0106\147\367\150\376\151" +
    "\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108" +
    "\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166" +
    "\u0103\167\u0101\170\364\173\370\001\ufe68\000\006\122\u01fd" +
    "\144\u01fe\001\002\000\066\031\u0105\123\374\124\u010d\125" +
    "\366\143\371\145\365\146\u0106\147\367\150\376\151\u0107" +
    "\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160" +
    "\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103" +
    "\167\u0101\170\364\173\370\001\uff21\000\132\004\347\006" +
    "\100\007\075\010\250\011\265\012\272\016\105\032\313" +
    "\054\351\055\244\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\114\104\115\243\116\301" +
    "\117\262\120\334\121\316\126\274\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\002\000\002\001\uffb4" +
    "\000\066\031\u0105\123\374\124\u010d\125\366\143\371\145" +
    "\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100" +
    "\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162" +
    "\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364" +
    "\173\370\001\uff22\000\002\001\uffbb\000\070\031\u0105\123" +
    "\374\124\u010d\125\366\143\371\144\u0202\145\365\146\u0106" +
    "\147\367\150\376\151\u0107\152\u010b\153\u0100\154\363\155" +
    "\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377" +
    "\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001" +
    "\002\000\002\001\uffba\000\004\021\u0204\001\002\000\004" +
    "\222\u0205\001\002\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\002\000\070\031\u0105\123\374\124\u010d" +
    "\125\366\143\371\145\365\146\u0106\147\367\150\376\151" +
    "\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108" +
    "\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166" +
    "\u0103\167\u0101\170\364\173\370\223\u0207\001\002\000\004" +
    "\144\u0208\001\002\000\002\001\uffc0\000\004\071\u020b\001" +
    "\uff85\000\002\001\uff93\000\006\003\023\010\026\001\002" +
    "\000\004\122\027\001\uff84\000\004\110\u020e\001\002\000" +
    "\002\001\uff3f\000\232\003\056\004\347\005\360\006\100" +
    "\007\075\010\250\011\265\012\272\014\305\016\105\017" +
    "\332\020\330\021\257\023\247\025\312\027\357\032\313" +
    "\034\337\040\267\041\331\043\042\044\343\045\255\047" +
    "\356\050\241\051\226\052\062\053\307\054\351\055\244" +
    "\057\246\070\346\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\110\275\111\u0215\113\053" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\144\225\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\214\u0211\215\u0212\216\u0210" +
    "\217\050\220\037\221\057\222\354\225\311\226\322\227" +
    "\271\001\uff32\000\004\057\u0232\001\uff29\000\002\001\uff2b" +
    "\000\004\057\u0228\001\uff2a\000\004\012\134\001\002\000" +
    "\002\001\uff8e\000\002\001\uff8f\000\002\001\uff92\000\002" +
    "\001\uff40\000\002\001\uff8d\000\004\042\u021a\001\002\000" +
    "\004\151\u021c\001\uff9d\000\006\010\u0134\114\104\001\002" +
    "\000\002\001\uff9c\000\002\001\uff3c\000\004\222\u021f\001" +
    "\002\000\012\003\201\010\203\076\200\223\uff5d\001\uff54" +
    "\000\004\223\u0221\001\002\000\002\001\uff3b\000\006\110" +
    "\u0224\144\u0225\001\uff35\000\002\001\uff3a\000\002\001\uffcd" +
    "\000\002\001\uff37\000\224\003\326\004\347\005\360\006" +
    "\100\007\075\010\250\011\265\012\272\014\305\016\105" +
    "\017\332\020\330\021\257\023\247\025\312\027\357\032" +
    "\313\034\337\040\267\041\331\042\317\044\343\045\255" +
    "\047\356\050\241\051\226\053\307\054\351\055\244\056" +
    "\270\057\246\070\346\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\110\275\111\u0227\113" +
    "\237\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\144\225\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\214\256\215\273\216" +
    "\234\222\354\225\311\226\322\227\271\001\002\000\002" +
    "\001\uff36\000\002\001\uff8b\000\004\127\u0230\001\uff42\000" +
    "\006\122\u022b\144\u022c\001\002\000\004\012\u022d\001\002" +
    "\000\002\001\uffb5\000\004\127\u022e\001\uff44\000\034\006" +
    "\100\007\075\010\106\016\105\076\072\077\103\100\110" +
    "\101\102\102\077\103\101\114\104\164\071\165\107\001" +
    "\002\000\002\001\uff43\000\034\006\100\007\075\010\106" +
    "\016\105\076\072\077\103\100\110\101\102\102\077\103" +
    "\101\114\104\164\071\165\107\001\002\000\002\001\uff41" +
    "\000\002\001\uff8a\000\014\012\272\015\u0239\106\u0238\107" +
    "\u0236\226\u0237\001\002\000\006\073\u0244\206\u0243\001\ufe76" +
    "\000\002\001\ufe79\000\012\010\250\012\272\114\104\225" +
    "\311\001\002\000\002\001\ufeb6\000\132\004\347\006\100" +
    "\007\075\010\250\011\u023a\012\272\016\105\032\313\054" +
    "\351\055\244\075\353\076\227\077\103\100\110\101\102" +
    "\102\077\103\101\104\251\114\104\115\243\116\301\117" +
    "\262\120\334\121\316\126\274\164\315\165\277\171\350" +
    "\172\232\174\264\175\355\176\242\177\341\200\254\201" +
    "\336\202\303\203\342\204\300\205\253\210\306\222\354" +
    "\225\311\226\322\227\271\001\002\000\002\001\ufe78\000" +
    "\004\206\u023d\001\ufeb9\000\070\031\u0105\111\u023c\123\374" +
    "\124\u010d\125\366\143\371\145\365\146\u0106\147\367\150" +
    "\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a" +
    "\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c\165" +
    "\373\166\u0103\167\u0101\170\364\173\370\001\002\000\002" +
    "\001\ufe73\000\132\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\164\315\165\277\171\350\172\232\174\264\175" +
    "\355\176\242\177\341\200\254\201\336\202\303\203\342" +
    "\204\300\205\253\210\306\222\354\225\311\226\322\227" +
    "\271\001\002\000\070\031\u0105\123\374\124\u010d\125\366" +
    "\143\371\145\365\146\u0106\147\367\150\376\151\u0107\152" +
    "\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372" +
    "\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167" +
    "\u0101\170\364\173\370\207\u023f\001\002\000\004\111\u0240" +
    "\001\002\000\002\001\ufe72\000\004\111\u0242\001\002\000" +
    "\002\001\ufe71\000\012\010\u0134\012\272\013\u0249\114\104" +
    "\001\002\000\006\010\u0134\114\104\001\002\000\002\001" +
    "\ufe74\000\002\001\ufe6e\000\004\207\u024a\001\002\000\002" +
    "\001\ufe70\000\002\001\ufe6f\000\002\001\ufe75\000\006\010" +
    "\u0134\114\104\001\002\000\002\001\uff9b\000\004\222\u024e" +
    "\001\002\000\012\003\201\010\203\076\200\223\uff5d\001" +
    "\uff54\000\004\223\u0250\001\002\000\002\001\uff9a\000\006" +
    "\003\u0253\110\u0252\001\002\000\002\001\uffcd\000\002\001" +
    "\uff97\000\002\001\uff99\000\224\003\326\004\347\005\360" +
    "\006\100\007\075\010\250\011\265\012\272\014\305\016" +
    "\105\017\332\020\330\021\257\023\247\025\312\027\357" +
    "\032\313\034\337\040\267\041\331\042\317\044\343\045" +
    "\255\047\356\050\241\051\226\053\307\054\351\055\244" +
    "\056\270\057\246\070\346\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\110\275\111\u0256" +
    "\113\237\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\144\225\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\214\256\215\273" +
    "\216\234\222\354\225\311\226\322\227\271\001\002\000" +
    "\002\001\uff98\000\066\031\u0105\123\374\124\u010d\125\366" +
    "\143\371\145\365\146\u0106\147\367\150\376\151\u0107\152" +
    "\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372" +
    "\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167" +
    "\u0101\170\364\173\370\001\ufe67\000\012\031\u0105\166\u0103" +
    "\167\u0101\170\364\001\ufef7\000\002\001\uff17\000\132\004" +
    "\347\006\100\007\075\010\250\011\265\012\272\016\105" +
    "\032\313\054\351\055\244\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\222\354\225\311\226\322\227\271\001\002\000\040" +
    "\033\u026c\127\u0192\130\u0196\131\u0193\132\u019c\133\u0195\134" +
    "\u019b\135\u0198\136\u019a\137\u0194\140\u0191\141\u0197\142\u0199" +
    "\174\ufea8\175\ufea8\001\ufeaa\000\004\033\u025d\001\ufeab\000" +
    "\012\010\250\012\272\114\104\225\311\001\002\000\004" +
    "\074\u0260\001\uff7d\000\004\223\u0265\001\002\000\014\010" +
    "\250\012\272\114\104\151\u0263\225\311\001\002\000\002" +
    "\001\uff7c\000\002\001\uff7b\000\012\010\250\012\272\114" +
    "\104\225\311\001\002\000\002\001\uff7a\000\210\003\326" +
    "\004\347\005\360\006\100\007\075\010\250\011\265\012" +
    "\272\014\305\016\105\017\332\020\330\021\257\023\247" +
    "\025\312\027\357\032\313\034\337\040\267\041\331\044" +
    "\343\045\255\047\356\050\241\051\226\053\307\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\110\275\113\237\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\144\225\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\214\256\222\354\224\u0266\225\311\226\322" +
    "\227\271\001\002\000\002\001\uffcd\000\002\001\uff77\000" +
    "\002\001\uffae\000\224\003\326\004\347\005\360\006\100" +
    "\007\075\010\250\011\265\012\272\014\305\016\105\017" +
    "\332\020\330\021\257\023\247\025\312\026\u026a\027\357" +
    "\032\313\034\337\040\267\041\331\042\317\044\343\045" +
    "\255\047\356\050\241\051\226\053\307\054\351\055\244" +
    "\056\270\057\246\070\346\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\110\275\113\237" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\144\225\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\214\256\215\273\216\234" +
    "\222\354\225\311\226\322\227\271\001\002\000\004\144" +
    "\u026b\001\002\000\002\001\uff76\000\014\010\250\012\272" +
    "\114\104\151\u0263\225\311\001\002\000\004\074\u0260\001" +
    "\uff7d\000\004\223\u026f\001\002\000\210\003\326\004\347" +
    "\005\360\006\100\007\075\010\250\011\265\012\272\014" +
    "\305\016\105\017\332\020\330\021\257\023\247\025\312" +
    "\027\357\032\313\034\337\040\267\041\331\044\343\045" +
    "\255\047\356\050\241\051\226\053\307\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\110\275\113\237\114\104\115\243\116\301" +
    "\117\262\120\334\121\316\126\274\144\225\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\214\256\222\354\224\u0266\225\311\226\322\227\271" +
    "\001\002\000\002\001\uffaf\000\002\001\uff0b\000\002\001" +
    "\uff09\000\012\010\250\012\272\114\104\225\311\001\002" +
    "\000\002\001\uffa4\000\002\001\uffa2\000\006\122\u0278\223" +
    "\u0277\001\002\000\004\144\u027a\001\002\000\012\010\250" +
    "\012\272\114\104\225\311\001\002\000\002\001\uffa3\000" +
    "\002\001\uffb0\000\004\222\u01ad\001\ufecb\000\002\001\uff18" +
    "\000\002\001\ufee3\000\010\110\u011d\206\u011e\222\ufe9f\001" +
    "\ufe9a\000\066\031\u0105\123\374\124\u010d\125\366\143\371" +
    "\145\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153" +
    "\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109" +
    "\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170" +
    "\364\173\370\001\ufe6a\000\002\001\ufee1\000\012\031\u0105" +
    "\166\u0103\167\u0101\170\364\001\ufef6\000\002\001\uffcd\000" +
    "\224\003\326\004\347\005\360\006\100\007\075\010\250" +
    "\011\265\012\272\014\305\016\105\017\332\020\330\021" +
    "\257\023\247\025\312\027\357\032\313\034\337\040\267" +
    "\041\331\042\317\044\343\045\255\047\356\050\241\051" +
    "\226\053\307\054\351\055\244\056\270\057\246\070\346" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\110\275\111\u0284\113\237\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\144\225\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\214\256\215\273\216\234\222\354\225\311" +
    "\226\322\227\271\001\002\000\002\001\uffc4\000\060\031" +
    "\u0105\143\371\145\365\146\u0106\147\367\150\376\151\u0107" +
    "\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160" +
    "\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103" +
    "\167\u0101\170\364\173\370\001\ufedb\000\014\012\272\015" +
    "\u0239\106\u0238\107\u0236\227\u0287\001\002\000\002\001\ufedc" +
    "\000\004\223\u0289\001\002\000\004\144\u028a\001\002\000" +
    "\002\001\uffc9\000\002\001\uffbd\000\070\031\u0105\123\374" +
    "\124\u010d\125\366\143\371\144\u028d\145\365\146\u0106\147" +
    "\367\150\376\151\u0107\152\u010b\153\u0100\154\363\155\375" +
    "\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377\164" +
    "\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001\002" +
    "\000\002\001\uffbc\000\002\001\uff0a\000\014\010\u0134\012" +
    "\272\110\u0135\114\104\225\311\001\002\000\004\222\u0292" +
    "\001\ufea1\000\002\001\ufea4\000\134\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\151\u018b\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\uff50\000\004\223\u0294" +
    "\001\002\000\002\001\ufea2\000\004\073\u0297\001\ufea7\000" +
    "\002\001\ufea5\000\014\010\u0134\012\272\110\u0135\114\104" +
    "\225\311\001\002\000\004\222\u0292\001\ufea1\000\002\001" +
    "\ufea3\000\132\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\222\354\225\311\226\322\227\271" +
    "\001\002\000\070\031\u0105\123\374\124\u010d\125\366\143" +
    "\371\145\365\146\u0106\147\367\150\376\151\u0107\152\u010b" +
    "\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372\161" +
    "\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101" +
    "\170\364\173\370\223\u029c\001\002\000\002\001\ufe69\000" +
    "\002\001\uff96\000\004\071\017\001\uff89\000\004\003\u02a1" +
    "\001\uff90\000\004\072\022\001\uff83\000\002\001\uff91\000" +
    "\002\001\uff95\000\004\110\u02a4\001\002\000\002\001\uff3f" +
    "\000\232\003\056\004\347\005\360\006\100\007\075\010" +
    "\250\011\265\012\272\014\305\016\105\017\332\020\330" +
    "\021\257\023\247\025\312\027\357\032\313\034\337\040" +
    "\267\041\331\043\042\044\343\045\255\047\356\050\241" +
    "\051\226\052\062\053\307\054\351\055\244\057\246\070" +
    "\346\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\110\275\111\u0215\113\053\114\104\115" +
    "\243\116\301\117\262\120\334\121\316\126\274\144\225" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\214\u0211\215\u0212\216\u0210\217\050\220" +
    "\037\221\057\222\354\225\311\226\322\227\271\001\uff32" +
    "\000\002\001\uff94\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\002\000\070\031\u0105\123\374\124\u010d" +
    "\125\366\143\371\145\365\146\u0106\147\367\150\376\151" +
    "\u0107\152\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108" +
    "\160\372\161\u0109\162\u0104\163\377\164\u010c\165\373\166" +
    "\u0103\167\u0101\170\364\173\370\223\u02a9\001\002\000\210" +
    "\003\326\004\347\005\360\006\100\007\075\010\250\011" +
    "\265\012\272\014\305\016\105\017\332\020\330\021\257" +
    "\023\247\025\312\027\357\032\313\034\337\040\267\041" +
    "\331\044\343\045\255\047\356\050\241\051\226\053\307" +
    "\054\351\055\244\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\110\275\113\237\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\144" +
    "\225\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\214\256\222\354\224\u02aa\225\311" +
    "\226\322\227\271\001\002\000\002\001\uffcd\000\002\001" +
    "\uffc1\000\002\001\uff68\000\224\003\326\004\347\005\360" +
    "\006\100\007\075\010\250\011\265\012\272\014\305\016" +
    "\105\017\332\020\330\021\257\022\u02ae\023\247\025\312" +
    "\027\357\032\313\034\337\040\267\041\331\042\317\044" +
    "\343\045\255\047\356\050\241\051\226\053\307\054\351" +
    "\055\244\056\270\057\246\070\346\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\110\275" +
    "\113\237\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\144\225\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\214\256\215\273" +
    "\216\234\222\354\225\311\226\322\227\271\001\002\000" +
    "\004\144\u02af\001\002\000\002\001\uff67\000\002\001\uffcd" +
    "\000\224\003\326\004\347\005\360\006\100\007\075\010" +
    "\250\011\265\012\272\014\305\016\105\017\332\020\330" +
    "\021\257\023\247\025\312\027\357\032\313\034\337\040" +
    "\267\041\331\042\317\044\343\045\255\047\356\050\241" +
    "\051\226\053\307\054\351\055\244\056\270\057\246\070" +
    "\346\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\110\275\111\u02b2\113\237\114\104\115" +
    "\243\116\301\117\262\120\334\121\316\126\274\144\225" +
    "\164\315\165\277\171\350\172\232\174\264\175\355\176" +
    "\242\177\341\200\254\201\336\202\303\203\342\204\300" +
    "\205\253\210\306\214\256\215\273\216\234\222\354\225" +
    "\311\226\322\227\271\001\002\000\004\046\u02b3\001\002" +
    "\000\004\222\u02b4\001\002\000\004\010\026\001\002\000" +
    "\004\012\272\001\002\000\004\223\u02b7\001\002\000\004" +
    "\110\u02b8\001\002\000\002\001\uffcd\000\224\003\326\004" +
    "\347\005\360\006\100\007\075\010\250\011\265\012\272" +
    "\014\305\016\105\017\332\020\330\021\257\023\247\025" +
    "\312\027\357\032\313\034\337\040\267\041\331\042\317" +
    "\044\343\045\255\047\356\050\241\051\226\053\307\054" +
    "\351\055\244\056\270\057\246\070\346\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\110" +
    "\275\111\u02ba\113\237\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\144\225\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\214" +
    "\256\215\273\216\234\222\354\225\311\226\322\227\271" +
    "\001\002\000\004\046\u02bb\001\uffa8\000\004\222\u02c0\001" +
    "\002\000\002\001\uffab\000\002\001\uffa7\000\004\046\u02bb" +
    "\001\uffa9\000\002\001\uffa6\000\004\010\026\001\002\000" +
    "\004\012\u02c2\001\002\000\004\223\u02c3\001\002\000\004" +
    "\110\u02c4\001\002\000\002\001\uffcd\000\224\003\326\004" +
    "\347\005\360\006\100\007\075\010\250\011\265\012\272" +
    "\014\305\016\105\017\332\020\330\021\257\023\247\025" +
    "\312\027\357\032\313\034\337\040\267\041\331\042\317" +
    "\044\343\045\255\047\356\050\241\051\226\053\307\054" +
    "\351\055\244\056\270\057\246\070\346\075\353\076\227" +
    "\077\103\100\110\101\102\102\077\103\101\104\251\110" +
    "\275\111\u02c6\113\237\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\144\225\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\214" +
    "\256\215\273\216\234\222\354\225\311\226\322\227\271" +
    "\001\002\000\002\001\uffa5\000\002\001\ufee5\000\002\001" +
    "\ufedf\000\014\012\272\015\u0239\105\u02ca\106\u0238\107\u0236" +
    "\001\002\000\002\001\ufeb5\000\132\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\164\315\165\277\171\350\172" +
    "\232\174\264\175\355\176\242\177\341\200\254\201\336" +
    "\202\303\203\342\204\300\205\253\210\306\222\354\225" +
    "\311\226\322\227\271\001\uff20\000\004\122\u02da\001\uff1f" +
    "\000\066\031\u0105\123\374\124\u010d\125\366\143\371\145" +
    "\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100" +
    "\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162" +
    "\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364" +
    "\173\370\001\uff1d\000\004\144\u02cf\001\002\000\132\004" +
    "\347\006\100\007\075\010\250\011\265\012\272\016\105" +
    "\032\313\054\351\055\244\075\353\076\227\077\103\100" +
    "\110\101\102\102\077\103\101\104\251\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\164\315\165" +
    "\277\171\350\172\232\174\264\175\355\176\242\177\341" +
    "\200\254\201\336\202\303\203\342\204\300\205\253\210" +
    "\306\222\354\225\311\226\322\227\271\001\uff20\000\004" +
    "\144\u02d1\001\002\000\132\004\347\006\100\007\075\010" +
    "\250\011\265\012\272\016\105\032\313\054\351\055\244" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\114\104\115\243\116\301\117\262\120\334" +
    "\121\316\126\274\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\uff20\000\004\223\u02d3\001\002\000\210" +
    "\003\326\004\347\005\360\006\100\007\075\010\250\011" +
    "\265\012\272\014\305\016\105\017\332\020\330\021\257" +
    "\023\247\025\312\027\357\032\313\034\337\040\267\041" +
    "\331\044\343\045\255\047\356\050\241\051\226\053\307" +
    "\054\351\055\244\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\110\275\113\237\114\104" +
    "\115\243\116\301\117\262\120\334\121\316\126\274\144" +
    "\225\164\315\165\277\171\350\172\232\174\264\175\355" +
    "\176\242\177\341\200\254\201\336\202\303\203\342\204" +
    "\300\205\253\210\306\214\256\222\354\224\u02d5\225\311" +
    "\226\322\227\271\001\002\000\002\001\uffbf\000\002\001" +
    "\uffcd\000\002\001\uff79\000\224\003\326\004\347\005\360" +
    "\006\100\007\075\010\250\011\265\012\272\014\305\016" +
    "\105\017\332\020\330\021\257\023\247\024\u02d8\025\312" +
    "\027\357\032\313\034\337\040\267\041\331\042\317\044" +
    "\343\045\255\047\356\050\241\051\226\053\307\054\351" +
    "\055\244\056\270\057\246\070\346\075\353\076\227\077" +
    "\103\100\110\101\102\102\077\103\101\104\251\110\275" +
    "\113\237\114\104\115\243\116\301\117\262\120\334\121" +
    "\316\126\274\144\225\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\214\256\215\273" +
    "\216\234\222\354\225\311\226\322\227\271\001\002\000" +
    "\004\144\u02d9\001\002\000\002\001\uff78\000\132\004\347" +
    "\006\100\007\075\010\250\011\265\012\272\016\105\032" +
    "\313\054\351\055\244\075\353\076\227\077\103\100\110" +
    "\101\102\102\077\103\101\104\251\114\104\115\243\116" +
    "\301\117\262\120\334\121\316\126\274\164\315\165\277" +
    "\171\350\172\232\174\264\175\355\176\242\177\341\200" +
    "\254\201\336\202\303\203\342\204\300\205\253\210\306" +
    "\222\354\225\311\226\322\227\271\001\002\000\066\031" +
    "\u0105\123\374\124\u010d\125\366\143\371\145\365\146\u0106" +
    "\147\367\150\376\151\u0107\152\u010b\153\u0100\154\363\155" +
    "\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377" +
    "\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001" +
    "\uff1e\000\010\010\u02dd\012\272\225\311\001\002\000\004" +
    "\222\u0187\001\ufe64\000\012\010\250\012\272\114\104\225" +
    "\311\001\002\000\004\223\u02e0\001\002\000\002\001\ufe6c" +
    "\000\066\031\u0105\123\374\124\u010d\125\366\143\371\145" +
    "\365\146\u0106\147\367\150\376\151\u0107\152\u010b\153\u0100" +
    "\154\363\155\375\156\u010a\157\u0108\160\372\161\u0109\162" +
    "\u0104\163\377\164\u010c\165\373\166\u0103\167\u0101\170\364" +
    "\173\370\001\ufe6b\000\002\001\ufee7\000\004\144\u02e8\001" +
    "\002\000\004\016\u02e6\001\002\000\002\001\uffa1\000\004" +
    "\223\u02e7\001\002\000\002\001\uffa0\000\002\001\uffb1\000" +
    "\002\001\uffb2\000\002\001\ufef4\000\134\004\347\006\100" +
    "\007\075\010\250\011\265\012\272\016\105\032\313\054" +
    "\351\055\244\075\353\076\227\077\103\100\110\101\102" +
    "\102\077\103\101\104\251\114\104\115\243\116\301\117" +
    "\262\120\334\121\316\126\274\151\u02ee\164\315\165\277" +
    "\171\350\172\232\174\264\175\355\176\242\177\341\200" +
    "\254\201\336\202\303\203\342\204\300\205\253\210\306" +
    "\222\354\225\311\226\322\227\271\001\ufe83\000\004\223" +
    "\u02fe\001\002\000\004\122\u02f5\001\ufeb2\000\012\010\250" +
    "\012\272\114\104\225\311\001\002\000\070\031\u0105\074" +
    "\u02f0\123\374\124\u010d\125\366\143\371\145\365\146\u0106" +
    "\147\367\150\376\151\u0107\152\u010b\153\u0100\154\363\155" +
    "\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377" +
    "\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001" +
    "\ufe7e\000\134\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\151\u02f1\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\222\354\225\311\226\322" +
    "\227\271\001\002\000\012\010\250\012\272\114\104\225" +
    "\311\001\002\000\066\031\u0105\123\374\124\u010d\125\366" +
    "\143\371\145\365\146\u0106\147\367\150\376\151\u0107\152" +
    "\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372" +
    "\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167" +
    "\u0101\170\364\173\370\001\ufe7f\000\002\001\ufe7b\000\002" +
    "\001\ufe7a\000\134\004\347\006\100\007\075\010\250\011" +
    "\265\012\272\016\105\032\313\054\351\055\244\075\353" +
    "\076\227\077\103\100\110\101\102\102\077\103\101\104" +
    "\251\114\104\115\243\116\301\117\262\120\334\121\316" +
    "\126\274\151\u02f7\164\315\165\277\171\350\172\232\174" +
    "\264\175\355\176\242\177\341\200\254\201\336\202\303" +
    "\203\342\204\300\205\253\210\306\222\354\225\311\226" +
    "\322\227\271\001\ufeb1\000\002\001\ufe82\000\012\010\250" +
    "\012\272\114\104\225\311\001\002\000\070\031\u0105\074" +
    "\u02f9\123\374\124\u010d\125\366\143\371\145\365\146\u0106" +
    "\147\367\150\376\151\u0107\152\u010b\153\u0100\154\363\155" +
    "\375\156\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377" +
    "\164\u010c\165\373\166\u0103\167\u0101\170\364\173\370\001" +
    "\ufe80\000\134\004\347\006\100\007\075\010\250\011\265" +
    "\012\272\016\105\032\313\054\351\055\244\075\353\076" +
    "\227\077\103\100\110\101\102\102\077\103\101\104\251" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\151\u02fa\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\222\354\225\311\226\322" +
    "\227\271\001\002\000\012\010\250\012\272\114\104\225" +
    "\311\001\002\000\066\031\u0105\123\374\124\u010d\125\366" +
    "\143\371\145\365\146\u0106\147\367\150\376\151\u0107\152" +
    "\u010b\153\u0100\154\363\155\375\156\u010a\157\u0108\160\372" +
    "\161\u0109\162\u0104\163\377\164\u010c\165\373\166\u0103\167" +
    "\u0101\170\364\173\370\001\ufe81\000\002\001\ufe7d\000\002" +
    "\001\ufe7c\000\002\001\ufedd\000\006\122\u0308\144\u0309\001" +
    "\002\000\002\001\uff47\000\014\010\250\012\272\110\u0305" +
    "\114\104\225\311\001\002\000\002\001\uff48\000\002\001" +
    "\uff46\000\002\001\ufeaa\000\132\004\347\006\100\007\075" +
    "\010\250\011\265\012\272\016\105\032\313\054\351\055" +
    "\244\075\353\076\227\077\103\100\110\101\102\102\077" +
    "\103\101\104\251\114\104\115\243\116\301\117\262\120" +
    "\334\121\316\126\274\164\315\165\277\171\350\172\232" +
    "\174\264\175\355\176\242\177\341\200\254\201\336\202" +
    "\303\203\342\204\300\205\253\210\306\222\354\225\311" +
    "\226\322\227\271\001\002\000\070\031\u0105\111\u0307\123" +
    "\374\124\u010d\125\366\143\371\145\365\146\u0106\147\367" +
    "\150\376\151\u0107\152\u010b\153\u0100\154\363\155\375\156" +
    "\u010a\157\u0108\160\372\161\u0109\162\u0104\163\377\164\u010c" +
    "\165\373\166\u0103\167\u0101\170\364\173\370\001\002\000" +
    "\002\001\uff45\000\006\012\u0300\225\u0301\001\002\000\002" +
    "\001\uffb6\000\002\001\uff49\000\134\004\347\006\100\007" +
    "\075\010\250\011\265\012\272\016\105\032\313\054\351" +
    "\055\244\075\353\076\227\077\103\100\110\101\102\102" +
    "\077\103\101\104\251\114\104\115\243\116\301\117\262" +
    "\120\334\121\316\126\274\151\u018b\164\315\165\277\171" +
    "\350\172\232\174\264\175\355\176\242\177\341\200\254" +
    "\201\336\202\303\203\342\204\300\205\253\210\306\222" +
    "\354\225\311\226\322\227\271\001\uff50\000\004\223\u030d" +
    "\001\002\000\002\001\ufed7\000\004\146\220\001\uffea\000" +
    "\002\001\uffe9\000\004\223\u0311\001\002\000\002\001\uffe5" +
    "\000\010\145\221\146\220\223\u0313\001\002\000\002\001" +
    "\uffe8\000\002\001\uffe7\000\010\010\141\160\136\166\137" +
    "\001\002\000\004\222\u0317\001\002\000\010\010\141\160" +
    "\136\166\137\001\uffe0\000\004\223\u031d\001\002\000\004" +
    "\122\u031b\001\uffe1\000\002\001\uffdf\000\010\010\141\160" +
    "\136\166\137\001\002\000\002\001\uffde\000\004\223\u031e" +
    "\001\002\000\002\001\uffe4\000\004\012\u0323\001\002\000" +
    "\004\127\u0321\001\uff59\000\034\006\100\007\075\010\106" +
    "\016\105\076\072\077\103\100\110\101\102\102\077\103" +
    "\101\114\104\164\071\165\107\001\002\000\002\001\uff57" +
    "\000\004\127\u0324\001\uff58\000\034\006\100\007\075\010" +
    "\106\016\105\076\072\077\103\100\110\101\102\102\077" +
    "\103\101\114\104\164\071\165\107\001\002\000\002\001" +
    "\uff56\000\002\001\uff2f\000\012\003\201\010\203\076\200" +
    "\223\uff5d\001\uff54\000\004\223\u0329\001\002\000\004\224" +
    "\u032a\001\002\000\012\010\216\171\213\210\212\222\215" +
    "\001\002\000\010\110\u032c\145\221\146\220\001\002\000" +
    "\002\001\uffcd\000\224\003\326\004\347\005\360\006\100" +
    "\007\075\010\250\011\265\012\272\014\305\016\105\017" +
    "\332\020\330\021\257\023\247\025\312\027\357\032\313" +
    "\034\337\040\267\041\331\042\317\044\343\045\255\047" +
    "\356\050\241\051\226\053\307\054\351\055\244\056\270" +
    "\057\246\070\346\075\353\076\227\077\103\100\110\101" +
    "\102\102\077\103\101\104\251\110\275\111\u032e\113\237" +
    "\114\104\115\243\116\301\117\262\120\334\121\316\126" +
    "\274\144\225\164\315\165\277\171\350\172\232\174\264" +
    "\175\355\176\242\177\341\200\254\201\336\202\303\203" +
    "\342\204\300\205\253\210\306\214\256\215\273\216\234" +
    "\222\354\225\311\226\322\227\271\001\002\000\002\001" +
    "\uffef\000\012\003\201\010\203\076\200\223\uff5d\001\uff54" +
    "\000\004\223\u0331\001\002\000\004\224\u0332\001\002\000" +
    "\012\010\216\171\213\210\212\222\215\001\002\000\010" +
    "\110\u0334\145\221\146\220\001\002\000\002\001\uffcd\000" +
    "\224\003\326\004\347\005\360\006\100\007\075\010\250" +
    "\011\265\012\272\014\305\016\105\017\332\020\330\021" +
    "\257\023\247\025\312\027\357\032\313\034\337\040\267" +
    "\041\331\042\317\044\343\045\255\047\356\050\241\051" +
    "\226\053\307\054\351\055\244\056\270\057\246\070\346" +
    "\075\353\076\227\077\103\100\110\101\102\102\077\103" +
    "\101\104\251\110\275\111\u0336\113\237\114\104\115\243" +
    "\116\301\117\262\120\334\121\316\126\274\144\225\164" +
    "\315\165\277\171\350\172\232\174\264\175\355\176\242" +
    "\177\341\200\254\201\336\202\303\203\342\204\300\205" +
    "\253\210\306\214\256\215\273\216\234\222\354\225\311" +
    "\226\322\227\271\001\002\000\002\001\ufff1\000\004\127" +
    "\u0338\001\002\000\034\006\100\007\075\010\106\016\105" +
    "\076\072\077\103\100\110\101\102\102\077\103\101\114" +
    "\104\164\071\165\107\001\002\000\002\001\uff23\000\004" +
    "\224\u033b\001\002\000\004\010\026\001\002\000\004\071" +
    "\017\001\uff89\000\004\072\022\001\uff83\000\004\144\u033f" +
    "\001\002\000\002\001\ufff5\000\004\151\u021c\001\uff9d\000" +
    "\004\010\u0342\001\002\000\004\222\u0343\001\002\000\010" +
    "\010\141\160\136\166\137\001\uffec\000\002\001\uffee\000" +
    "\006\122\u0349\223\u0348\001\002\000\004\012\u0347\001\002" +
    "\000\002\001\uffeb\000\004\224\u034b\001\002\000\010\010" +
    "\141\160\136\166\137\001\002\000\002\001\uffed\000\012" +
    "\010\216\171\213\210\212\222\215\001\002\000\010\144" +
    "\u034d\145\221\146\220\001\002\000\002\001\ufff2\000\012" +
    "\010\u0350\114\104\160\136\166\137\001\002\000\006\112" +
    "\u0351\122\146\001\002\000\004\222\ufe62\001\uffd1\000\006" +
    "\010\u0134\114\104\001\002\000\004\222\u0353\001\002\000" +
    "\012\003\201\010\203\076\200\223\uff5d\001\uff54\000\004" +
    "\223\u0355\001\002\000\006\110\u0224\144\u0225\001\uff35\000" +
    "\002\001\ufff3\000\002\001\uff87\000\002\001\uff88" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0356\000\012\002\003\003\004\004\005\025\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\153\017\001\001\000\004\131\u0357\001" +
    "\001\000\004\154\020\001\001\000\004\022\031\001\001" +
    "\000\006\131\024\155\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\131\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\034\001\001" +
    "\000\020\006\054\066\045\133\062\134\035\136\046\137" +
    "\051\160\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\u0325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\141\010\131\012\130" +
    "\013\134\014\137\132\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\077\073\100\072\125\067\175\075\001" +
    "\001\000\002\001\001\000\012\077\073\100\127\125\067" +
    "\175\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\077\073\100\110\125\067\175" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\077\073\100\116\102" +
    "\114\104\115\125\067\175\075\001\001\000\002\001\001" +
    "\000\004\103\122\001\001\000\002\001\001\000\012\077" +
    "\073\100\120\125\067\175\075\001\001\000\002\001\001" +
    "\000\012\077\073\100\123\125\067\175\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\077\073\100\125" +
    "\125\067\175\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\144\012" +
    "\130\013\134\014\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\152\013\134\014\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\077\073\100\151" +
    "\125\067\175\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\077\073\100\162\125\067\175\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\077\073\100\167\125\067\175\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\077\073\100\173\125\067\175\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\055\201\056\203\057" +
    "\204\156\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\057\206\156\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\216\024\213\001\001\000\002\001\001\000\006\023\u0313" +
    "\024\213\001\001\000\002\001\001\000\006\023\u0311\024" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\u030e\024\213\001\001\000\006\023\u030d\024\213\001" +
    "\001\000\004\031\222\001\001\000\074\030\351\032\227" +
    "\033\320\073\343\074\257\077\317\101\230\105\232\106" +
    "\265\107\326\114\301\124\275\125\334\126\323\131\244" +
    "\142\313\143\332\144\235\150\337\151\237\152\260\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\062\u02fe\063\u0301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u02e9\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\u02e2" +
    "\001\001\000\052\073\343\074\257\077\317\101\230\105" +
    "\u02e1\106\265\107\326\114\301\124\275\125\334\131\244" +
    "\144\235\157\344\161\307\162\223\164\234\166\322\170" +
    "\303\172\251\176\262\001\001\000\052\073\343\074\257" +
    "\077\317\101\230\105\u02e0\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\121\u02c8\001\001\000" +
    "\002\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u02c7\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\052\073\343\074" +
    "\257\077\317\101\230\105\u02c6\106\265\107\326\114\301" +
    "\124\275\125\334\131\244\144\235\157\344\161\307\162" +
    "\223\164\234\166\322\170\303\172\251\176\262\001\001" +
    "\000\002\001\001\000\004\064\u0229\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\074\257\106\265\107\326\114" +
    "\301\125\u017f\131\u0182\144\u0180\161\u028d\162\223\164\234" +
    "\166\322\172\251\176\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u028b\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\004\121\u0285\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u0284\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\004\202\u0281\001\001\000\002" +
    "\001\001\000\052\073\343\074\257\077\317\101\230\105" +
    "\u0280\106\265\107\326\114\301\124\275\125\334\131\244" +
    "\144\235\157\344\161\307\162\223\164\234\166\322\170" +
    "\303\172\251\176\262\001\001\000\052\073\343\074\257" +
    "\077\317\101\230\105\u027f\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\052\073\343\074\257\077\317\101\230\105\u027e\106\265" +
    "\107\326\114\301\124\275\125\334\131\244\144\235\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\010\106\u027d\107\326\166\322\001" +
    "\001\000\052\073\343\074\257\077\317\101\230\105\u027c" +
    "\106\265\107\326\114\301\124\275\125\334\131\244\144" +
    "\235\157\344\161\307\162\223\164\234\166\322\170\303" +
    "\172\251\176\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\106\u011b\107\326\114\u0118\131\u0119\164\234" +
    "\166\322\167\u027a\171\u0117\172\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u0258\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\002\001\001\000\052\073\343" +
    "\074\257\077\317\101\230\105\u0257\106\265\107\326\114" +
    "\301\124\275\125\334\131\244\144\235\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\052\073\343\074\257\077\317\101\230\105\u0256" +
    "\106\265\107\326\114\301\124\275\125\334\131\244\144" +
    "\235\157\344\161\307\162\223\164\234\166\322\170\303" +
    "\172\251\176\262\001\001\000\004\067\u024a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\030\u0202\033\320" +
    "\073\343\074\257\077\317\101\230\105\232\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u0200\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\054\070\u01fa\073" +
    "\343\074\257\077\317\101\230\105\u01fb\106\265\107\326" +
    "\114\301\124\275\125\334\131\244\144\235\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\002\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u01f9\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\002" +
    "\001\001\000\052\073\343\074\257\077\317\101\230\105" +
    "\u01f8\106\265\107\326\114\301\124\275\125\334\131\244" +
    "\144\235\157\344\161\307\162\223\164\234\166\322\170" +
    "\303\172\251\176\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\073\343\074\257\077\317\101\230\105" +
    "\u01dc\106\265\107\326\114\301\124\275\125\334\131\244" +
    "\144\235\157\344\161\307\162\223\164\234\166\322\170" +
    "\303\172\251\176\262\001\001\000\052\073\343\074\257" +
    "\077\317\101\230\105\u01db\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\052\073\u01d8\074\257\077\317\101\230\105\u018b\106\265" +
    "\107\326\114\301\124\275\125\334\131\244\144\u01d7\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\u01d2\001\001\000\052\073\343" +
    "\074\257\077\317\101\230\105\u01d0\106\265\107\326\114" +
    "\301\124\275\125\334\131\244\144\235\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u01bb\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\034\074\257\106\265\107\326" +
    "\114\301\125\u017f\131\u0182\144\u0180\161\u0181\162\223\164" +
    "\234\166\322\172\251\176\262\001\001\000\052\073\343" +
    "\074\257\077\317\101\230\105\u017d\106\265\107\326\114" +
    "\301\124\275\125\334\131\244\144\235\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\073\343" +
    "\074\257\077\317\101\230\105\361\106\265\107\326\114" +
    "\301\124\275\125\334\131\244\144\235\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\002\001\001\000\052\073\343\074\257\077\317" +
    "\101\230\105\u016c\106\265\107\326\114\301\124\275\125" +
    "\334\131\244\144\235\157\344\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\001\001\000\052\073" +
    "\343\074\257\077\317\101\230\105\u016b\106\265\107\326" +
    "\114\301\124\275\125\334\131\244\144\235\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\052\073\343\074\257\077\317\101\230\105" +
    "\u016a\106\265\107\326\114\301\124\275\125\334\131\244" +
    "\144\235\157\344\161\307\162\223\164\234\166\322\170" +
    "\303\172\251\176\262\001\001\000\052\073\343\074\257" +
    "\077\317\101\230\105\u0169\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\052\073\343\074\257\077\317\101\230\105\u0168\106\265" +
    "\107\326\114\301\124\275\125\334\131\244\144\235\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\052\073\343\074\257\077\317\101" +
    "\230\105\u0167\106\265\107\326\114\301\124\275\125\334" +
    "\131\244\144\235\157\344\161\307\162\223\164\234\166" +
    "\322\170\303\172\251\176\262\001\001\000\052\073\343" +
    "\074\257\077\317\101\230\105\u0164\106\265\107\326\114" +
    "\301\124\275\125\334\131\244\144\235\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\052\073\343\074\257\077\317\101\230\105\u0163" +
    "\106\265\107\326\114\301\124\275\125\334\131\244\144" +
    "\235\157\344\161\307\162\223\164\234\166\322\170\303" +
    "\172\251\176\262\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u0162\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\052" +
    "\073\343\074\257\077\317\101\230\105\u0161\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u0160\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\052\073\343\074" +
    "\257\077\317\101\230\105\u015f\106\265\107\326\114\301" +
    "\124\275\125\334\131\244\144\235\157\344\161\307\162" +
    "\223\164\234\166\322\170\303\172\251\176\262\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u015e\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\052\073\343\074\257\077\317" +
    "\101\230\105\u015d\106\265\107\326\114\301\124\275\125" +
    "\334\131\244\144\235\157\344\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\001\001\000\052\073" +
    "\343\074\257\077\317\101\230\105\u015c\106\265\107\326" +
    "\114\301\124\275\125\334\131\244\144\235\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\056\030\u0144\033\320\073\343\074\257\077" +
    "\317\101\230\105\232\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\052" +
    "\073\343\074\257\077\317\101\230\105\u0142\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u0141\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\024\106\u011b\107" +
    "\326\114\u0118\131\u0119\164\234\166\322\167\u0115\171\u0117" +
    "\172\u0116\001\001\000\052\073\343\074\257\077\317\101" +
    "\230\105\u0114\106\265\107\326\114\301\124\275\125\334" +
    "\131\244\144\235\157\344\161\307\162\223\164\234\166" +
    "\322\170\303\172\251\176\262\001\001\000\052\073\343" +
    "\074\257\077\317\101\230\105\u0113\106\265\107\326\114" +
    "\301\124\275\125\334\131\244\144\235\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\052\073\343\074\257\077\317\101\230\105\u0112" +
    "\106\265\107\326\114\301\124\275\125\334\131\244\144" +
    "\235\157\344\161\307\162\223\164\234\166\322\170\303" +
    "\172\251\176\262\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u0111\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\052" +
    "\073\343\074\257\077\317\101\230\105\u0110\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u010f\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\052\073\343\074" +
    "\257\077\317\101\230\105\u010e\106\265\107\326\114\301" +
    "\124\275\125\334\131\244\144\235\157\344\161\307\162" +
    "\223\164\234\166\322\170\303\172\251\176\262\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u010d\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\106" +
    "\u012c\107\326\166\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u0121\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\054" +
    "\073\343\074\257\077\317\101\230\105\u011f\106\265\107" +
    "\326\110\u011e\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\106\u0126\107\326\114\u0125\162\u0124\166\322\001\001" +
    "\000\002\001\001\000\010\106\u0127\107\326\166\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u012a\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\106\u0126\107\326\111\u0131\112" +
    "\u0132\113\u012f\114\u0125\125\u012e\162\u0130\166\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\173\u013d\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u0135\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u013b\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\054\073\343\074\257\077\317" +
    "\101\230\105\u011f\106\265\107\326\110\u0139\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\174\u013e\001\001\000\002\001\001\000" +
    "\024\106\u0126\107\326\111\u0140\112\u0132\113\u012f\114\u0125" +
    "\125\u012e\162\u0130\166\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u014e\001\001" +
    "\000\004\051\u0145\001\001\000\004\053\u0146\001\001\000" +
    "\002\001\001\000\056\030\u014d\033\320\073\343\074\257" +
    "\077\317\101\230\105\232\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\002\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u014a\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\056\030\u014c\033\320\073\343\074\257\077\317\101\230" +
    "\105\232\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\030\351\032\227\033\320\052\u014f" +
    "\073\343\074\257\077\317\101\230\105\232\106\265\107" +
    "\326\114\301\124\275\125\334\126\323\131\244\142\313" +
    "\143\332\144\235\150\337\151\237\152\260\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\004\054\u0150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\073\343\074\257" +
    "\077\317\101\230\105\u0154\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u0157\001\001" +
    "\000\074\030\351\032\227\033\320\073\343\074\257\077" +
    "\317\101\230\105\232\106\265\107\326\114\301\124\275" +
    "\125\334\126\323\131\244\142\313\143\332\144\235\150" +
    "\337\151\237\152\260\157\344\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\001\001\000\004\031" +
    "\u0159\001\001\000\074\030\351\032\227\033\320\073\343" +
    "\074\257\077\317\101\230\105\232\106\265\107\326\114" +
    "\301\124\275\125\334\126\323\131\244\142\313\143\332" +
    "\144\235\150\337\151\237\152\260\157\344\161\307\162" +
    "\223\164\234\166\322\170\303\172\251\176\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\073\343\074\257\077\317" +
    "\101\230\105\u0166\106\265\107\326\114\301\124\275\125" +
    "\334\131\244\144\235\157\344\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\u016e\125\u016f\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\077\073\100\u0171\125\067\175\075\001" +
    "\001\000\002\001\001\000\060\030\u0179\033\320\043\u0177" +
    "\073\343\074\257\077\317\101\230\105\232\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\004\125\u0174\001\001\000\002\001\001" +
    "\000\012\077\073\100\u0176\125\067\175\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\u017a\001\001" +
    "\000\002\001\001\000\074\030\351\032\227\033\320\073" +
    "\343\074\257\077\317\101\230\105\232\106\265\107\326" +
    "\114\301\124\275\125\334\126\323\131\244\142\313\143" +
    "\332\144\235\150\337\151\237\152\260\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\106\u0126\107\326" +
    "\114\u0125\162\u0184\166\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\060\u0189\061\u0187\073\u018c\074\257" +
    "\077\317\101\230\105\u018b\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\u0188\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\074\257\106\265\107\326\114\301\125\u017f\130\u018d\131" +
    "\u0182\144\u018e\162\223\164\234\166\322\172\251\176\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\073\343" +
    "\074\257\077\317\101\230\105\u01af\106\265\107\326\114" +
    "\301\124\275\125\334\131\244\144\235\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\052\073\343\074\257\077\317\101\230\105\u01a7" +
    "\106\265\107\326\114\301\124\275\125\334\131\244\144" +
    "\235\157\344\161\307\162\223\164\234\166\322\170\303" +
    "\172\251\176\262\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u01a5\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\052" +
    "\073\343\074\257\077\317\101\230\105\u01a4\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u01a3\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\052\073\343\074" +
    "\257\077\317\101\230\105\u01a2\106\265\107\326\114\301" +
    "\124\275\125\334\131\244\144\235\157\344\161\307\162" +
    "\223\164\234\166\322\170\303\172\251\176\262\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u01a1\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\052\073\343\074\257\077\317" +
    "\101\230\105\u01a0\106\265\107\326\114\301\124\275\125" +
    "\334\131\244\144\235\157\344\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\001\001\000\052\073" +
    "\343\074\257\077\317\101\230\105\u019f\106\265\107\326" +
    "\114\301\124\275\125\334\131\244\144\235\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\052\073\343\074\257\077\317\101\230\105" +
    "\u019e\106\265\107\326\114\301\124\275\125\334\131\244" +
    "\144\235\157\344\161\307\162\223\164\234\166\322\170" +
    "\303\172\251\176\262\001\001\000\052\073\343\074\257" +
    "\077\317\101\230\105\u019d\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\052\073\343\074\257\077\317\101\230\105\u019c\106\265" +
    "\107\326\114\301\124\275\125\334\131\244\144\235\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\074\257\106\265\107\326" +
    "\114\301\125\u017f\131\u0182\144\u01a9\162\223\164\234\166" +
    "\322\172\251\176\262\001\001\000\002\001\001\000\024" +
    "\106\u011b\107\326\114\u0118\131\u0119\164\234\166\322\167" +
    "\u01aa\171\u0117\172\u0116\001\001\000\002\001\001\000\004" +
    "\076\u01ab\001\001\000\002\001\001\000\056\060\u01ad\061" +
    "\u0187\073\u018c\074\257\077\317\101\230\105\u018b\106\265" +
    "\107\326\114\301\124\275\125\334\131\244\144\u0188\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\073\u01b3\074\257\077\317\101\230" +
    "\105\u018b\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\u01b1\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\034\074\257\106\265\107\326\114\301\125\u017f\130\u01b4" +
    "\131\u0182\144\u018e\162\223\164\234\166\322\172\251\176" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\060\u01b6\061\u0187\073\u018c\074\257\077\317\101\230\105" +
    "\u018b\106\265\107\326\114\301\124\275\125\334\131\244" +
    "\144\u0188\157\344\161\307\162\223\164\234\166\322\170" +
    "\303\172\251\176\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\060\u01b9\061\u0187\073\u018c\074\257\077" +
    "\317\101\230\105\u018b\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\u0188\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\074\257\106\265\107\326\114\301\115\u01be" +
    "\116\u01bf\125\u017f\131\u0182\144\u01c0\162\223\164\234\166" +
    "\322\172\251\176\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\074" +
    "\257\106\265\107\326\114\301\115\u01c3\116\u01bf\125\u017f" +
    "\131\u0182\144\u01c0\162\223\164\234\166\322\172\251\176" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\074\257\106\265\107\326\114\301\116\u01c6\125\u017f\131" +
    "\u0182\144\u01c0\162\223\164\234\166\322\172\251\176\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\073" +
    "\343\074\257\077\317\101\230\105\u01c9\106\265\107\326" +
    "\114\301\124\275\125\334\131\244\144\235\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\002\001\001\000\034\074\257\106\265\107" +
    "\326\114\301\125\u017f\131\u0182\144\u01cb\162\223\164\234" +
    "\165\u01cc\166\322\172\251\176\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\074\257" +
    "\106\265\107\326\114\301\125\u017f\131\u0182\144\u01cf\162" +
    "\223\164\234\166\322\172\251\176\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u01d3\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u01de\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\004\045\u01e0\001\001\000\002\001\001\000\004\046\u01f3" +
    "\001\001\000\004\046\u01e3\001\001\000\002\001\001\000" +
    "\004\046\u01e5\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\073\343\074\257\077\317\101\230\105\u01ed\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\004\047\u01e9\001\001\000\004" +
    "\031\u01ec\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\030\351\032\227\033\320\073\343\074\257\077\317" +
    "\101\230\105\232\106\265\107\326\114\301\124\275\125" +
    "\334\126\323\131\244\142\313\143\332\144\235\150\337" +
    "\151\237\152\260\157\344\161\307\162\223\164\234\166" +
    "\322\170\303\172\251\176\262\001\001\000\004\047\u01ee" +
    "\001\001\000\004\031\u01ef\001\001\000\074\030\351\032" +
    "\227\033\320\073\343\074\257\077\317\101\230\105\232" +
    "\106\265\107\326\114\301\124\275\125\334\126\323\131" +
    "\244\142\313\143\332\144\235\150\337\151\237\152\260" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u01f5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\073\343\074\257\077\317\101\230" +
    "\105\u01fe\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\073" +
    "\343\074\257\077\317\101\230\105\u0205\106\265\107\326" +
    "\114\301\124\275\125\334\131\244\144\235\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\127\u0209\001\001\000\004\207\u020c\001\001" +
    "\000\006\131\024\155\u020b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\u020e\001\001\000\102\033\u0213" +
    "\066\u0216\073\343\074\257\077\317\101\230\105\232\106" +
    "\265\107\326\114\301\124\275\125\334\126\323\131\244" +
    "\133\062\134\u0218\136\046\137\051\143\u0217\144\235\151" +
    "\237\152\260\157\344\160\u0212\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\177\u0215\001\001\000" +
    "\002\001\001\000\004\064\u0229\001\001\000\002\001\001" +
    "\000\004\132\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\u021a\001\001\000\004\125" +
    "\u021c\001\001\000\002\001\001\000\004\210\u021d\001\001" +
    "\000\002\001\001\000\012\055\u021f\056\203\057\204\156" +
    "\176\001\001\000\002\001\001\000\004\211\u0221\001\001" +
    "\000\004\135\u0222\001\001\000\002\001\001\000\004\031" +
    "\u0225\001\001\000\002\001\001\000\074\030\351\032\227" +
    "\033\320\073\343\074\257\077\317\101\230\105\232\106" +
    "\265\107\326\114\301\124\275\125\334\126\323\131\244" +
    "\142\313\143\332\144\235\150\337\151\237\152\260\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\077\073\100\u022e\125" +
    "\067\175\075\001\001\000\002\001\001\000\012\077\073" +
    "\100\u0230\125\067\175\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\122\u0234\166\u0233\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\074\257\106\265\107" +
    "\326\114\301\125\u017f\131\u0182\144\u0240\162\223\164\234" +
    "\166\322\172\251\176\262\001\001\000\002\001\001\000" +
    "\052\073\343\074\257\077\317\101\230\105\u023a\106\265" +
    "\107\326\114\301\124\275\125\334\131\244\144\235\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\073\343\074\257" +
    "\077\317\101\230\105\u023d\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\123\u0246\125\u0247\166" +
    "\u0245\001\001\000\004\125\u0244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\125\u024b\001\001" +
    "\000\004\203\u024c\001\001\000\002\001\001\000\012\055" +
    "\u024e\056\203\057\204\156\176\001\001\000\002\001\001" +
    "\000\004\204\u0250\001\001\000\004\200\u0253\001\001\000" +
    "\004\031\u0254\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\030\351\032\227\033\320\073\343\074\257\077" +
    "\317\101\230\105\232\106\265\107\326\114\301\124\275" +
    "\125\334\126\323\131\244\142\313\143\332\144\235\150" +
    "\337\151\237\152\260\157\344\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\073\u025b\074\257\077\317\101\230\105\u018b\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\u025a" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\074\257\106\265\107\326\114\301\125\u017f\131" +
    "\u0182\144\u025d\162\223\164\234\166\322\172\251\176\262" +
    "\001\001\000\004\037\u025e\001\001\000\002\001\001\000" +
    "\034\040\u0260\074\257\106\265\107\326\114\301\125\u017f" +
    "\131\u0182\144\u0261\162\223\164\234\166\322\172\251\176" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\074\257\106\265\107\326\114\301\125\u017f\131\u0182\144" +
    "\u0263\162\223\164\234\166\322\172\251\176\262\001\001" +
    "\000\002\001\001\000\060\030\u0266\033\320\042\u0267\073" +
    "\343\074\257\077\317\101\230\105\232\106\265\107\326" +
    "\114\301\124\275\125\334\131\244\144\235\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\004\031\u0268\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\030\351\032\227\033\320\073\343" +
    "\074\257\077\317\101\230\105\232\106\265\107\326\114" +
    "\301\124\275\125\334\126\323\131\244\142\313\143\332" +
    "\144\235\150\337\151\237\152\260\157\344\161\307\162" +
    "\223\164\234\166\322\170\303\172\251\176\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\040\u026c\074" +
    "\257\106\265\107\326\114\301\125\u017f\131\u0182\144\u0261" +
    "\162\223\164\234\166\322\172\251\176\262\001\001\000" +
    "\004\037\u026d\001\001\000\002\001\001\000\060\030\u0266" +
    "\033\320\042\u026f\073\343\074\257\077\317\101\230\105" +
    "\232\106\265\107\326\114\301\124\275\125\334\131\244" +
    "\144\235\157\344\161\307\162\223\164\234\166\322\170" +
    "\303\172\251\176\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\034\u0275\035\u0273\074" +
    "\257\106\265\107\326\114\301\125\u017f\131\u0182\144\u0274" +
    "\162\223\164\234\166\322\172\251\176\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\035\u0278\074\257\106\265\107\326\114" +
    "\301\125\u017f\131\u0182\144\u0274\162\223\164\234\166\322" +
    "\172\251\176\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\u027b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u0282\001\001\000\074" +
    "\030\351\032\227\033\320\073\343\074\257\077\317\101" +
    "\230\105\232\106\265\107\326\114\301\124\275\125\334" +
    "\126\323\131\244\142\313\143\332\144\235\150\337\151" +
    "\237\152\260\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\122\u0234\166\u0233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\106\u0126\107\326\111\u028f\112" +
    "\u0132\113\u012f\114\u0125\125\u012e\162\u0130\166\322\001\001" +
    "\000\004\140\u0290\001\001\000\004\141\u0294\001\001\000" +
    "\056\060\u0292\061\u0187\073\u018c\074\257\077\317\101\230" +
    "\105\u018b\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\u0188\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\163\u0295\001\001\000\002\001\001" +
    "\000\024\106\u0126\107\326\111\u0297\112\u0132\113\u012f\114" +
    "\u0125\125\u012e\162\u0130\166\322\001\001\000\004\140\u0298" +
    "\001\001\000\002\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u029a\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\205\u029d\001\001\000" +
    "\004\153\u029e\001\001\000\004\201\u029f\001\001\000\004" +
    "\154\u02a1\001\001\000\002\001\001\000\004\206\u02a2\001" +
    "\001\000\002\001\001\000\004\065\u02a4\001\001\000\102" +
    "\033\u0213\066\u0216\073\343\074\257\077\317\101\230\105" +
    "\232\106\265\107\326\114\301\124\275\125\334\126\323" +
    "\131\244\133\062\134\u0218\136\046\137\051\143\u0217\144" +
    "\235\151\237\152\260\157\344\160\u0212\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\177\u02a5\001" +
    "\001\000\002\001\001\000\052\073\343\074\257\077\317" +
    "\101\230\105\u02a7\106\265\107\326\114\301\124\275\125" +
    "\334\131\244\144\235\157\344\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\001\001\000\002\001" +
    "\001\000\060\030\u02ab\033\320\050\u02aa\073\343\074\257" +
    "\077\317\101\230\105\232\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\004\031\u02ac\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\030\351\032\227\033\320\073\343\074\257\077" +
    "\317\101\230\105\232\106\265\107\326\114\301\124\275" +
    "\125\334\126\323\131\244\142\313\143\332\144\235\150" +
    "\337\151\237\152\260\157\344\161\307\162\223\164\234" +
    "\166\322\170\303\172\251\176\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u02b0\001\001\000\074" +
    "\030\351\032\227\033\320\073\343\074\257\077\317\101" +
    "\230\105\232\106\265\107\326\114\301\124\275\125\334" +
    "\126\323\131\244\142\313\143\332\144\235\150\337\151" +
    "\237\152\260\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\131\u02b4\001\001\000\004\166\u02b5" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u02b8\001\001\000\074\030\351\032\227\033\320\073\343" +
    "\074\257\077\317\101\230\105\232\106\265\107\326\114" +
    "\301\124\275\125\334\126\323\131\244\142\313\143\332" +
    "\144\235\150\337\151\237\152\260\157\344\161\307\162" +
    "\223\164\234\166\322\170\303\172\251\176\262\001\001" +
    "\000\010\145\u02bb\146\u02bd\147\u02bc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\147\u02be" +
    "\001\001\000\002\001\001\000\004\131\u02c0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u02c4\001\001\000\074\030\351\032\227\033\320\073" +
    "\343\074\257\077\317\101\230\105\232\106\265\107\326" +
    "\114\301\124\275\125\334\126\323\131\244\142\313\143" +
    "\332\144\235\150\337\151\237\152\260\157\344\161\307" +
    "\162\223\164\234\166\322\170\303\172\251\176\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\122\u0234\166\u0233\001\001\000\002\001\001\000" +
    "\056\071\u02cd\072\u02cb\073\343\074\257\077\317\101\230" +
    "\105\u02cc\106\265\107\326\114\301\124\275\125\334\131" +
    "\244\144\235\157\344\161\307\162\223\164\234\166\322" +
    "\170\303\172\251\176\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\071\u02cf\072\u02cb" +
    "\073\343\074\257\077\317\101\230\105\u02cc\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\002\001\001\000\056\071\u02d1\072\u02cb" +
    "\073\343\074\257\077\317\101\230\105\u02cc\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\002\001\001\000\060\030\u02d5\033\320" +
    "\041\u02d3\073\343\074\257\077\317\101\230\105\232\106" +
    "\265\107\326\114\301\124\275\125\334\131\244\144\235" +
    "\157\344\161\307\162\223\164\234\166\322\170\303\172" +
    "\251\176\262\001\001\000\002\001\001\000\004\031\u02d6" +
    "\001\001\000\002\001\001\000\074\030\351\032\227\033" +
    "\320\073\343\074\257\077\317\101\230\105\232\106\265" +
    "\107\326\114\301\124\275\125\334\126\323\131\244\142" +
    "\313\143\332\144\235\150\337\151\237\152\260\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\073\343\074\257\077\317\101\230\105\u02da\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\002\001\001\000\014\106\u0126\107\326" +
    "\114\u0125\162\u0184\166\322\001\001\000\002\001\001\000" +
    "\032\074\257\106\265\107\326\114\301\125\u017f\131\u0182" +
    "\144\u02de\162\223\164\234\166\322\172\251\176\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\073" +
    "\343\074\257\077\317\101\230\105\u02ee\106\265\107\326" +
    "\114\301\117\u02eb\120\u02ec\124\275\125\334\131\244\144" +
    "\235\157\344\161\307\162\223\164\234\166\322\170\303" +
    "\172\251\176\262\001\001\000\002\001\001\000\004\103" +
    "\u02f5\001\001\000\034\074\257\106\265\107\326\114\301" +
    "\125\u017f\130\u02f3\131\u0182\144\u018e\162\223\164\234\166" +
    "\322\172\251\176\262\001\001\000\002\001\001\000\052" +
    "\073\343\074\257\077\317\101\230\105\u02f1\106\265\107" +
    "\326\114\301\124\275\125\334\131\244\144\235\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\034\074\257\106\265\107\326\114\301" +
    "\125\u017f\130\u02f2\131\u0182\144\u018e\162\223\164\234\166" +
    "\322\172\251\176\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\073\343\074\257\077" +
    "\317\101\230\105\u02f7\106\265\107\326\114\301\124\275" +
    "\125\334\131\244\144\235\157\344\161\307\162\223\164" +
    "\234\166\322\170\303\172\251\176\262\001\001\000\002" +
    "\001\001\000\034\074\257\106\265\107\326\114\301\125" +
    "\u017f\130\u02fc\131\u0182\144\u018e\162\223\164\234\166\322" +
    "\172\251\176\262\001\001\000\002\001\001\000\052\073" +
    "\343\074\257\077\317\101\230\105\u02fa\106\265\107\326" +
    "\114\301\124\275\125\334\131\244\144\235\157\344\161" +
    "\307\162\223\164\234\166\322\170\303\172\251\176\262" +
    "\001\001\000\034\074\257\106\265\107\326\114\301\125" +
    "\u017f\130\u02fb\131\u0182\144\u018e\162\223\164\234\166\322" +
    "\172\251\176\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\074\257\106\265\107\326\114" +
    "\301\125\u017f\131\u0182\144\u0303\157\u0302\162\223\164\234" +
    "\166\322\172\251\176\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\073\343\074\257" +
    "\077\317\101\230\105\u0305\106\265\107\326\114\301\124" +
    "\275\125\334\131\244\144\235\157\344\161\307\162\223" +
    "\164\234\166\322\170\303\172\251\176\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u0309\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\060\u030b\061" +
    "\u0187\073\u018c\074\257\077\317\101\230\105\u018b\106\265" +
    "\107\326\114\301\124\275\125\334\131\244\144\u0188\157" +
    "\344\161\307\162\223\164\234\166\322\170\303\172\251" +
    "\176\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\u0315\013\134\014\137\001\001\000\002" +
    "\001\001\000\014\012\u0319\013\134\014\137\020\u0317\021" +
    "\u0318\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\u031b\013\134\014\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\077\073\100\u0321\125" +
    "\067\175\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\077\073\100\u0324\125\067\175\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\055\u0327\056\203" +
    "\057\204\156\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\u032a\024\213\001\001\000\002\001\001" +
    "\000\004\031\u032c\001\001\000\074\030\351\032\227\033" +
    "\320\073\343\074\257\077\317\101\230\105\232\106\265" +
    "\107\326\114\301\124\275\125\334\126\323\131\244\142" +
    "\313\143\332\144\235\150\337\151\237\152\260\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\002\001\001\000\012\055\u032f\056\203" +
    "\057\204\156\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\u0332\024\213\001\001\000\002\001\001" +
    "\000\004\031\u0334\001\001\000\074\030\351\032\227\033" +
    "\320\073\343\074\257\077\317\101\230\105\232\106\265" +
    "\107\326\114\301\124\275\125\334\126\323\131\244\142" +
    "\313\143\332\144\235\150\337\151\237\152\260\157\344" +
    "\161\307\162\223\164\234\166\322\170\303\172\251\176" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\077\073\100\u0338\125\067\175\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\131\u033b\001\001\000\004" +
    "\153\u033c\001\001\000\004\154\u033d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\u034d\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\012\u0345\013\134\014" +
    "\137\016\u0344\017\u0343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\u0345\013\134\014\137\017\u0349\001\001" +
    "\000\002\001\001\000\006\023\u034b\024\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\u034e\012\130" +
    "\013\134\014\137\125\u021c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\125\u0351\001\001\000\002\001\001" +
    "\000\012\055\u0353\056\203\057\204\156\176\001\001\000" +
    "\002\001\001\000\004\135\u0355\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAspectParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAspectParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public org.phpaspect.weaver.java_cup.runtime.Symbol do_action(
    int                        act_num,
    org.phpaspect.weaver.java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAspectParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;
		
		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}
	
	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
			((ReflectionCallExpression) property).setReceiver (dispatcher);
			dispatcher = property;
		} else if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher =  new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

	protected String getTokenName(int token) {
		return PHPAspectSymbolsUtils.getTokenName(token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PHPAspectParser$actions {
  private final PHPAspectParser parser;

  /** Constructor */
  CUP$PHPAspectParser$actions(PHPAspectParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final org.phpaspect.weaver.java_cup.runtime.Symbol CUP$PHPAspectParser$do_action(
    int                        CUP$PHPAspectParser$act_num,
    org.phpaspect.weaver.java_cup.runtime.lr_parser CUP$PHPAspectParser$parser,
    java.util.Stack            CUP$PHPAspectParser$stack,
    int                        CUP$PHPAspectParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      org.phpaspect.weaver.java_cup.runtime.Symbol CUP$PHPAspectParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAspectParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String value = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("string_st",83, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String value = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("string_st",83, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",116, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name); 
	RESULT = constant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant",118, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("isset_variables",115, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("isset_variables",115, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList();
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList();
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",81, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int numright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String num = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft,numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",81, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft,stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",81, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference indexedVar = new ArrayVariableReference(startleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int stringleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableReference varName = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // encaps_var ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // encaps_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",79, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",79, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",79, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",77, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",77, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // assignment_list_element ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",76, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",76, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // assignment_list_element ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",76, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list",75, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listElementsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List listElements = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int elementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression element = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list",75, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref = (Integer)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",74, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(1);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",74, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_name",73, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // variable_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_name",73, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // object_dim_list ::= variable_name 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",72, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = varArray;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",72, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = varArray;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",72, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // object_property ::= variable_without_objects 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_property",71, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // object_property ::= object_dim_list 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_property",71, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = expr; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dim_offset",70, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // dim_offset ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dim_offset",70, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;	 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("compound_variable",69, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // compound_variable ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("compound_variable",69, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // reference_variable ::= compound_variable 
            {
              Expression RESULT =null;
		int comp_varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int comp_varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression comp_var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",68, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression varName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",68, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression varName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",68, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // base_variable ::= static_member 
            {
              Expression RESULT =null;
		int staticFieldAccessleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int staticFieldAccessright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticFieldAccess staticFieldAccess = (StaticFieldAccess)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // base_variable ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",124, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",124, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              StaticFieldAccess RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_member",114, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",112, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",112, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // method_or_not ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_or_not",94, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_or_not",94, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              Expression RESULT =null;
		int memberPropertyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int memberPropertyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression memberProperty = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			result = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			result = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_property",113, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_properties",95, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT =null;
		int variablesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int variablePropertyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int variablePropertyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression variableProperty = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_properties",95, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable",98, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int memberPropertyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int memberPropertyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression memberProperty = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int propertyListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List propertyList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// get the last property 
	Expression firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			firstVarProperty = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			firstVarProperty = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;
	
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}

	RESULT = dispatcher;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable",98, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // rw_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("rw_variable",111, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // w_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("w_variable",86, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // r_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("r_variable",109, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ewvright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression ewv = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr",67, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr",67, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",66, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",66, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",66, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",66, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("possible_comma",65, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("possible_comma",65, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",64, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",64, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Scalar scalar = (Scalar)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classConstantright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // scalar ::= string_st 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	TypeReference cname = new TypeReference(classNameleft, classNameright, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, cname, vname); 
	RESULT = constant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",123, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classConstantright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // static_scalar ::= string_st 
            {
              Expression RESULT =null;
		int strleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int strright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String str = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Scalar scalar = (Scalar)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // common_scalar ::= T_FILE 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // common_scalar ::= T_LINE 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",60, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",60, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = expr;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",122, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",121, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT =null;
		int variablesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",121, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // dynamic_class_name_reference ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	 RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",119, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int firstVarPropertyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int firstVarPropertyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression firstVarProperty = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int propertyListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List propertyList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;

	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}	
	
	RESULT = dispatcher;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",119, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression className = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",117, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // class_name_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	TypeReference classReference = new TypeReference(classNameleft, classNameright, className);
	RESULT = classReference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",117, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // fully_qualified_class_name ::= T_STRING 
            {
              TypeReference RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	TypeReference name = new TypeReference(classNameleft, classNameright, className);
	RESULT = name;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",87, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression reflectionName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reflectionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression reflectionName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters); 
	RESULT = functionInvocation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, name, parameters); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = scalar; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int ifTrueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ifTrueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression ifTrue = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ifFalseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ifFalseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression ifFalse = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = expr; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression className = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression className = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ctorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int reftokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reftokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object reftoken = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression className = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ctorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation, varComment);
	RESULT = assignment;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int reftokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int reftokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object reftoken = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int refvarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int refvarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression refvar = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar, varComment); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr, varComment); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List varList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object close = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",56, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",56, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List exprList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_expr",55, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_expr",55, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",54, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",54, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int constNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",89, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int constNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",89, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // member_modifier ::= T_FINAL 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // member_modifier ::= T_ABSTRACT 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // member_modifier ::= T_STATIC 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // member_modifier ::= T_PRIVATE 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // member_modifier ::= T_PROTECTED 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // member_modifier ::= T_PUBLIC 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // method_modifiers ::= non_empty_member_modifiers 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",90, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // method_modifiers ::= 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",90, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // variable_modifiers ::= T_VAR 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock var = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",110, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // variable_modifiers ::= non_empty_member_modifiers 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",110, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // method_body ::= 
            {
              Statement RESULT =null;
		
	parser.reportError();
	RESULT = new ASTError(0,0);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",91, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",91, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",91, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // class_statement ::= error 
            {
              Object RESULT =null;
		int theErrorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT =null;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varComment = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		


              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st NT$6 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$7 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int paramListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List paramList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeParentheseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeParentheseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object closeParenthese = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement body = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	if(body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()));
	}
	TypeDeclaration type = (TypeDeclaration)parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$7 ::= 
            {
              Object RESULT =(Object) ((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int closeParentheseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int closeParentheseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object closeParenthese = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("NT$7",135, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // NT$6 ::= 
            {
              Object RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("NT$6",134, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int decListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference)decl[0];
		Expression initializer = (Expression)decl[1];
		
		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock)decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ClassConstantDeclaration(constant, initializer, start, end, docBlock));
	}

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // class_statement_list ::= 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",51, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object list = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int classStatementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classStatementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object classStatement = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if(!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",51, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",50, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",50, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment); 
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",50, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",50, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression varName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",49, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",49, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // global_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",49, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var_list",48, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var_list",48, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",46, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",46, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int arrayright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object array = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	TypeReference reference = new TypeReference(arrayleft, arrayright, "array");
	RESULT = reference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // optional_class_type ::= T_STRING 
            {
              TypeReference RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	TypeReference reference = new TypeReference(classNameleft, classNameright, className);
	RESULT = reference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // parameter ::= error 
            {
              FormalParameter RESULT =null;
		int theErrorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		TypeReference classType = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int refleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int refright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object ref = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		TypeReference classType = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference classType = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int refleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object ref = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		TypeReference classType = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int commaleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int commaright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object comma = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	parser.reportError(new ASTError(commaleft, commaright));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",44, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int parameterleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int parameterright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",44, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int parameterright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",44, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter_list",43, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter_list",43, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_else_single",42, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_else_single",42, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("else_single",41, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("else_single",41, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int elseifListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List[] elseifList = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int colonleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
			
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",40, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",40, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int elseifListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List[] elseifList = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int iftrueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int iftrueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement iftrue = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("elseif_list",39, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("elseif_list",39, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int colonright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object colon = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("while_statement",38, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("while_statement",38, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_separator",37, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_separator",37, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statements = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",36, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statements = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",36, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",36, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",35, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",35, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",35, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",35, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List[] lists = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_list",34, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_list",34, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_statement",33, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_statement",33, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",32, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",32, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_statement",31, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_statement",31, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",30, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",30, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",29, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",29, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // interface_list ::= error 
            {
              List RESULT =null;
		int theErrorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",107, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int commaleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int commaright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object comma = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int theErrorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",107, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",107, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	if(className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",107, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("implements_list",106, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("implements_list",106, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",85, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",85, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = value;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_entry",84, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT =null;
		int theErrorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",105, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",105, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",105, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // class_entry_type ::= T_FINAL T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // class_entry_type ::= T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_closure",125, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // class_closure ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_closure",125, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_closure",125, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // errorOrNot ::= 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",127, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // errorOrNot ::= error 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",127, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list NT$5 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Statement) ((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object statementList = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement blockEnd = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright));
		parser.pendingStatement = blockEnd;
	}

	InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration)parser.declarations.pop();
	interfaceDeclaration.setEnd(blockEndright);
	interfaceDeclaration.getBody().setStart(blockStartleft);
	interfaceDeclaration.getBody().setEnd(blockEndright);
	RESULT = interfaceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",103, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$5 ::= 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;

	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,interfacesright, classNameleft, classNameright, className, interfaces, new Block(interfacesright,interfacesright,null), start);
	parser.declarations.push(interfaceDeclaration);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("NT$5",133, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unticked_class_declaration_statement ::= class_entry_type T_STRING NT$3 extends_from errorOrNot implements_list NT$4 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Statement) ((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int superClassleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int superClassright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		TypeReference superClass = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object statementList = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement blockEnd = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright));
		parser.pendingStatement = blockEnd;
	}

	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.pop();
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",103, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$4 ::= 
            {
              Statement RESULT =(Statement) ((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int superClassleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int superClassright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference superClass = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;

	ClassDeclaration classDeclaration = (ClassDeclaration)parser.declarations.peek();
	if (superClass != null) {
		classDeclaration.setSuperClass(superClass);
	}
	if (interfaces != null) {
		classDeclaration.setInterfaceList(interfaces);
	}
	classDeclaration.setEnd(interfacesright);
	classDeclaration.getBody().setStart(interfacesright);
	classDeclaration.getBody().setEnd(interfacesright);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("NT$4",132, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$3 ::= 
            {
              Statement RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;

	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,classNameright, classNameleft, classNameright, modifier.modifier, className, null, null, new Block(classNameright,classNameright,null), modifier.doc);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("NT$3",131, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT =null;
		int theErrorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = (PHPMethodDeclaration)parser.declarations.pop();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_body",126, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_body",126, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$1 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$2 function_body 
            {
              PHPMethodDeclaration RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (PHPMethodDeclaration) ((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int paramListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List paramList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeParentheseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeParentheseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object closeParenthese = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
RESULT = body;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",102, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$2 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int closeParentheseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int closeParentheseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object closeParenthese = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("NT$2",130, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$1 ::= 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, Modifiers.AccDefault, null, new Block(functionNameright,functionNameright,null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("NT$1",129, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("is_reference",53, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("is_reference",53, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classDeclarationright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",97, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int functionDeclarationright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",96, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("use_filename",28, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("use_filename",28, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variable",27, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variables",26, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variables",26, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int catch_wordright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object catch_word = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int catchBlockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchBlockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object catchBlockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List catchList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchBlockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catchBlockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catch",101, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catch_statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catch_statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",100, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catch_statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",100, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catches",99, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catches",99, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).value;
		int tryBlockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).left;
		int tryBlockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).right;
		Object tryBlockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).value;
		int tryListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left;
		int tryListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).right;
		List tryList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).value;
		int tryBlockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tryBlockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object tryBlockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int catch_wordleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int catch_wordright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object catch_word = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int catchBlockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int catchBlockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object catchBlockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int catchListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List catchList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchBlockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchBlockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object catchBlockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchesListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catchesListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List catchesList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List[] lists = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int closeParleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeParright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object closePar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List exprList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseBlockleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int caseBlockright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block caseBlock = (Block)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int initializationsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int initializationsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List initializations = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List conditions = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int increasementsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int increasementsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List increasements = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int colonleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int colonright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object colon = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int ifTrueStatementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int ifTrueStatementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List ifTrueStatementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int elseifleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int elseifright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List[] elseif = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int iffalseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iffalseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iffalse = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int iftrueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iftrueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iftrue = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elseifleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int elseifright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List[] elseif = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int iffalseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int iffalseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement iffalse = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_CURLY_OPEN NT$0 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = (Block)parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$0 ::= 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);
	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("NT$0",128, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varComment = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// TODO: var comment should be added as ast node

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int haltright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object halt = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object close = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",24, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",24, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",24, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",24, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inner_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",23, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
		if(statement.getKind() == ASTNodeKinds.AST_ERROR){
			if(!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if(node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}		
		}
	}
	RESULT = statementList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",23, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aspect_subtype_or_not ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_subtype_or_not",11, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // aspect_subtype_or_not ::= T_PLUS 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_subtype_or_not",11, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aspect_signature ::= T_STRING 
            {
              String RESULT =null;
		int strleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int strright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String str = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = str.toString();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",10, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // aspect_signature ::= T_TIMES 
            {
              String RESULT =null;
		int timesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int timesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object times = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = times.toString();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",10, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // aspect_signature ::= aspect_signature T_STRING 
            {
              String RESULT =null;
		int beginleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String end = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",10, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aspect_signature ::= aspect_signature T_TIMES 
            {
              String RESULT =null;
		int beginleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",10, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aspect_inter_type_signature ::= T_RGREATER T_STRING T_LGREATER 
            {
              String RESULT =null;
		int signleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_signature",9, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aspect_inter_type_signature ::= aspect_signature 
            {
              String RESULT =null;
		int signleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int signright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String sign = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_signature",9, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aspect_inter_type_declaration_r ::= aspect_inter_type_signature aspect_subtype_or_not 
            {
              AspectInterTypeDeclaration RESULT =null;
		int signleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int subtypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int subtyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Boolean subtype = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectInterTypeDeclaration(signleft, signright, sign, subtype);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_r",8, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aspect_inter_type_declaration ::= aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int decleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int decright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration dec = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(dec);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration",6, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aspect_inter_type_declaration ::= aspect_inter_type_declaration T_COMMA aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int decright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration dec = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(dec);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration",6, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aspect_inter_type_field_declaration ::= aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, exprright, interType, varId, expr));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",5, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aspect_inter_type_field_declaration ::= aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE 
            {
              List RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, varright, interType, varId, null));
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",5, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aspect_inter_type_field_declaration ::= aspect_inter_type_field_declaration T_COMMA aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, exprright, interType, varId, expr));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",5, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aspect_inter_type_field_declaration ::= aspect_inter_type_field_declaration T_COMMA aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, varright, interType, varId, null));
	RESULT = list;		

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",5, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // non_empty_aspect_joinpoint_parameters_list ::= non_empty_aspect_joinpoint_parameters_list T_COMMA aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.add(interType);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_aspect_joinpoint_parameters_list",15, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_empty_aspect_joinpoint_parameters_list ::= aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(interType);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_aspect_joinpoint_parameters_list",15, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aspect_joinpoint_parameters ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint_parameters",14, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aspect_joinpoint_parameters ::= non_empty_aspect_joinpoint_parameters_list 
            {
              List RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List paramsList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint_parameters",14, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aspect_inter_type_declaration_or_variable ::= T_VARIABLE 
            {
              AspectInterTypeDeclaration RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectInterTypeDeclaration(varleft, varright, var);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_or_variable",7, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aspect_inter_type_declaration_or_variable ::= aspect_inter_type_declaration_r 
            {
              AspectInterTypeDeclaration RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = interType;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_or_variable",7, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aspect_joinpoint ::= T_NEW T_OPEN_PARENTHESE aspect_inter_type_declaration_r T_OPEN_PARENTHESE aspect_joinpoint_parameters T_CLOSE_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List params = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectConstructionJoinpoint(startleft, endright, interType, params);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint",18, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aspect_joinpoint ::= T_STRING T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int ptNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ptNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String ptName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	RESULT = new AspectPointcutReference(ptNameleft, ptNameright, ptName);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint",18, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aspect_pointcut ::= aspect_joinpoint 
            {
              Expression RESULT =null;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = pt;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aspect_pointcut ::= T_NOT aspect_pointcut 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, ptright, pt, UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aspect_pointcut ::= T_OPEN_PARENTHESE aspect_pointcut T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	//ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, pt);
	RESULT = pt; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_AND aspect_pointcut 
            {
              Expression RESULT =null;
		int pt1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression pt1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int pt2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new InfixExpression(pt1left, pt2right, pt1 , InfixExpression.OP_BOOL_AND, pt2);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_OR aspect_pointcut 
            {
              Expression RESULT =null;
		int pt1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression pt1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int pt2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new InfixExpression(pt1left, pt2right, pt1, InfixExpression.OP_BOOL_OR, pt2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aspect_pointcut_parameter ::= aspect_inter_type_declaration_r T_VARIABLE 
            {
              AspectPointcutParameter RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	AspectPointcutParameter aspectPointcutParameter = new AspectPointcutParameter(interTypeleft, varright, interType, v);
	RESULT = aspectPointcutParameter;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter",13, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aspect_pointcut_parameter_list ::= 
            {
              List RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",12, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aspect_pointcut_parameter_list ::= aspect_pointcut_parameter_list T_COMMA aspect_pointcut_parameter 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptArgleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptArgright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectPointcutParameter ptArg = (AspectPointcutParameter)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(ptArg);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",12, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aspect_pointcut_parameter_list ::= aspect_pointcut_parameter 
            {
              List RESULT =null;
		int ptArgleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptArgright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectPointcutParameter ptArg = (AspectPointcutParameter)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(ptArg);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",12, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aspect_statement ::= T_AFTER T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.After, list, pt, block);
	List s = new LinkedList();
	s.add(aspectCodeAdviceDeclaration);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aspect_statement ::= T_AROUND T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.Around, list, pt, block);
	List s = new LinkedList();
	s.add(aspectCodeAdviceDeclaration);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aspect_statement ::= T_BEFORE T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.Before, list, pt, block);
	List s = new LinkedList();
	s.add(aspectCodeAdviceDeclaration);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aspect_statement ::= method_modifiers T_POINTCUT T_STRING T_OPEN_PARENTHESE aspect_pointcut_parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_SEMICOLON 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int ptNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int ptNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String ptName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int argsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int argsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List args = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	AspectPointcutDeclaration aspectPointcutDeclaration = new AspectPointcutDeclaration(modifierleft, endright, ptName, args, expr);
	List s = new LinkedList();
	s.add(aspectPointcutDeclaration);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aspect_statement ::= method_modifiers T_FUNCTION is_reference aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement body = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}

	AspectInterTypeMethodDeclaration interTypeMethodDeclaration =
		new AspectInterTypeMethodDeclaration(startleft, bodyright, functionNameleft, functionNameright, interType, functionName, modifierValue, paramList, (Block)body, isReference, docBlock);
	List methodDeclaration = new LinkedList();
	methodDeclaration.add(methodDeclaration);
	RESULT = methodDeclaration;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // aspect_statement ::= variable_modifiers aspect_inter_type_field_declaration T_SEMICOLON 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	//List s = new LinkedList();
	//AspectInterTypeFieldsDeclaration aspectInterTypeFieldsDeclaration = new AspectInterTypeFieldsDeclaration(modifierleft, endright, modifier.intValue(), false, decList);
	//s.add(aspectInterTypeFieldsDeclaration);
	//RESULT = s;
	List constList = new LinkedList();
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int lstart = variable.sourceStart();
		int lend = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		constList.add (new PHPFieldDeclaration(variable, initializer, lstart, lend, modifier.modifier, lend, modifier.doc));

	}
	RESULT = constList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // aspect_statement ::= T_DECLARE T_PARENTS T_NEKUDOTAIM fully_qualified_class_name extends_from implements_list T_SEMICOLON 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int superClassleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int superClassright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference superClass = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List s = new LinkedList();
	s.add(new AspectInterTypeParentDeclaration(startleft, endright, className, superClass, interfaces));
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // aspect_statement ::= class_statement 
            {
              List RESULT =null;
		int classStatementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classStatementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object classStatement = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List s = new LinkedList();
	s.add(classStatement);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // aspect_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement_list",3, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // aspect_statement_list ::= aspect_statement_list aspect_statement 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int aspectStatementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int aspectStatementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List aspectStatement = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(aspectStatement);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement_list",3, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // aspect_entry_type ::= T_FINAL T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",2, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // aspect_entry_type ::= T_ABSTRACT T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",2, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // aspect_entry_type ::= T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",2, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // aspect_isPersistent ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_isPersistent",16, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // aspect_isPersistent ::= T_PERSESSION 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_isPersistent",16, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unticked_aspect_declaration_statement ::= aspect_entry_type T_STRING extends_from implements_list aspect_isPersistent T_CURLY_OPEN aspect_statement_list T_CURLY_CLOSE T_SEMICOLON 
            {
              AspectDeclaration RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int aspectNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int aspectNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		String aspectName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int superClassleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int superClassright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		TypeReference superClass = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int persistentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int persistentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Boolean persistent = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int blockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int blockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object blockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	Iterator statementIt = statementList.iterator();
	while (statementIt.hasNext()) {
		Statement statement = (Statement)statementIt.next();
		if (statement.getKind() == Declaration.D_METHOD) {
			MethodDeclaration methodDeclaration = (MethodDeclaration)statement;
			methodDeclaration.setDeclaringTypeName(aspectName);
		}
	}

	Block block = new Block(blockStartleft, blockEndright, statementList);
	AspectDeclaration aspectDeclaration = new AspectDeclaration(
		modifierleft, blockEndright, aspectNameleft, aspectNameright, modifier.modifier,
		aspectName, superClass, interfaces, persistent, block, modifier.doc);
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_aspect_declaration_statement",1, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // aspect_declaration_statement ::= unticked_aspect_declaration_statement 
            {
              AspectDeclaration RESULT =null;
		int aspectDeclarationleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int aspectDeclarationright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectDeclaration aspectDeclaration = (AspectDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_declaration_statement",0, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int start_valright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PHPAspectParser$parser.done_parsing();
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= aspect_declaration_statement 
            {
              ModuleDeclaration RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectDeclaration statement = (AspectDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	PHPModuleDeclaration program = parser.getModuleDeclaration();
	program.setStart(statementleft);
	program.setEnd(statementright);
	RESULT = program; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("thestart",19, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

