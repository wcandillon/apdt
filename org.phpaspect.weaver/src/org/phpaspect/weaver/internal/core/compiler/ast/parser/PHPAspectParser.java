
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 19 11:50:33 GMT+01:00 2008
//----------------------------------------------------

package org.phpaspect.weaver.internal.core.compiler.ast.parser;

import java.util.*;
import org.phpaspect.weaver.java_cup.runtime.Symbol;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.internal.core.compiler.ast.nodes.*;
import org.phpaspect.weaver.internal.core.compiler.ast.nodes.*;
import org.phpaspect.weaver.internal.core.ast.scanner.PHPAspectLexer;
import org.eclipse.php.internal.core.phpModel.parser.PHPCodeDataFactory;
import org.eclipse.php.internal.core.phpModel.phpElementData.IPHPMarker;
import org.eclipse.php.internal.core.phpModel.phpElementData.PHPMarker;
import org.eclipse.php.internal.core.phpModel.phpElementData.UserData;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 19 11:50:33 GMT+01:00 2008
  */
public class PHPAspectParser extends org.phpaspect.weaver.java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PHPAspectParser() {super();}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(org.phpaspect.weaver.java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(org.phpaspect.weaver.java_cup.runtime.Scanner s, org.phpaspect.weaver.java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\002\025\003\000\002\002\004\000\002\026" +
    "\004\000\002\026\002\000\002\027\003\000\002\002\003" +
    "\000\002\003\013\000\002\022\003\000\002\022\002\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\005\004\000\002\005\002\000\002\006\003\000\002\006" +
    "\011\000\002\006\005\000\002\006\014\000\002\006\013" +
    "\000\002\006\013\000\002\006\013\000\002\006\013\000" +
    "\002\016\003\000\002\016\005\000\002\016\002\000\002" +
    "\017\004\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\004\000\002\023\003\000\002\024\005" +
    "\000\002\024\011\000\002\011\003\000\002\011\003\000" +
    "\002\020\003\000\002\020\002\000\002\021\003\000\002" +
    "\021\005\000\002\007\007\000\002\007\011\000\002\007" +
    "\005\000\002\007\007\000\002\010\005\000\002\010\003" +
    "\000\002\012\004\000\002\013\003\000\002\013\005\000" +
    "\002\014\004\000\002\014\004\000\002\014\003\000\002" +
    "\014\003\000\002\015\003\000\002\015\002\000\002\031" +
    "\004\000\002\031\002\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\006\000\002\030\003\000" +
    "\002\033\005\000\002\033\011\000\002\033\014\000\002" +
    "\033\007\000\002\033\011\000\002\033\013\000\002\033" +
    "\007\000\002\033\004\000\002\033\005\000\002\033\004" +
    "\000\002\033\005\000\002\033\004\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\003\000\002\033\004\000\002\033" +
    "\005\000\002\033\007\000\002\033\012\000\002\033\012" +
    "\000\002\033\007\000\002\033\003\000\002\033\017\000" +
    "\002\033\005\000\002\033\003\000\002\033\003\000\002" +
    "\145\003\000\002\145\002\000\002\146\003\000\002\146" +
    "\004\000\002\147\012\000\002\034\003\000\002\034\005" +
    "\000\002\035\003\000\002\036\003\000\002\036\005\000" +
    "\002\142\003\000\002\143\003\000\002\067\002\000\002" +
    "\067\003\000\002\150\013\000\002\151\011\000\002\151" +
    "\010\000\002\152\003\000\002\152\004\000\002\152\004" +
    "\000\002\153\002\000\002\153\004\000\002\126\003\000" +
    "\002\127\002\000\002\127\004\000\002\154\002\000\002" +
    "\154\004\000\002\155\003\000\002\155\005\000\002\037" +
    "\002\000\002\037\004\000\002\040\003\000\002\040\004" +
    "\000\002\041\003\000\002\041\006\000\002\042\003\000" +
    "\002\042\006\000\002\043\003\000\002\043\006\000\002" +
    "\044\005\000\002\044\007\000\002\045\005\000\002\045" +
    "\006\000\002\045\006\000\002\045\007\000\002\046\002" +
    "\000\002\046\007\000\002\046\006\000\002\047\003\000" +
    "\002\047\003\000\002\050\003\000\002\050\006\000\002" +
    "\051\002\000\002\051\010\000\002\052\002\000\002\052" +
    "\011\000\002\053\002\000\002\053\004\000\002\054\002" +
    "\000\002\054\005\000\002\055\003\000\002\055\002\000" +
    "\002\056\003\000\002\056\005\000\002\057\004\000\002" +
    "\057\005\000\002\057\006\000\002\057\007\000\002\156" +
    "\002\000\002\156\003\000\002\156\003\000\002\060\003" +
    "\000\002\060\002\000\002\061\003\000\002\061\003\000" +
    "\002\061\004\000\002\061\005\000\002\061\005\000\002" +
    "\061\006\000\002\062\005\000\002\062\003\000\002\063" +
    "\003\000\002\063\004\000\002\063\006\000\002\064\005" +
    "\000\002\064\007\000\002\064\003\000\002\064\005\000" +
    "\002\065\004\000\002\065\002\000\002\066\005\000\002" +
    "\066\004\000\002\066\012\000\002\066\003\000\002\135" +
    "\003\000\002\135\005\000\002\160\003\000\002\160\003" +
    "\000\002\134\002\000\002\134\003\000\002\136\003\000" +
    "\002\136\004\000\002\137\003\000\002\137\003\000\002" +
    "\137\003\000\002\137\003\000\002\137\003\000\002\137" +
    "\003\000\002\132\005\000\002\132\007\000\002\132\003" +
    "\000\002\132\005\000\002\133\007\000\002\133\006\000" +
    "\002\070\005\000\002\070\003\000\002\071\002\000\002" +
    "\071\003\000\002\072\005\000\002\072\003\000\002\073" +
    "\010\000\002\073\005\000\002\073\006\000\002\073\010" +
    "\000\002\073\005\000\002\073\004\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\004\000\002\073\004\000\002\073\004\000" +
    "\002\073\004\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\004\000\002\073\004\000\002\073" +
    "\004\000\002\073\004\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\007\000\002\073" +
    "\003\000\002\073\004\000\002\073\004\000\002\073\004" +
    "\000\002\073\004\000\002\073\004\000\002\073\004\000" +
    "\002\073\004\000\002\073\004\000\002\073\004\000\002" +
    "\073\003\000\002\073\006\000\002\073\005\000\002\073" +
    "\004\000\002\074\006\000\002\074\010\000\002\074\010" +
    "\000\002\074\006\000\002\131\003\000\002\167\003\000" +
    "\002\167\003\000\002\171\006\000\002\171\003\000\002" +
    "\173\004\000\002\173\002\000\002\174\004\000\002\075" +
    "\002\000\002\075\004\000\002\075\005\000\002\076\002" +
    "\000\002\076\005\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\004\000\002\100\004" +
    "\000\002\100\006\000\002\100\003\000\002\175\005\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\005\000\002\101\005\000\002\102" +
    "\002\000\002\102\004\000\002\103\002\000\002\103\003" +
    "\000\002\104\007\000\002\104\005\000\002\104\005\000" +
    "\002\104\003\000\002\105\003\000\002\105\003\000\002" +
    "\157\003\000\002\130\003\000\002\161\003\000\002\144" +
    "\007\000\002\144\003\000\002\141\004\000\002\141\002" +
    "\000\002\163\005\000\002\140\005\000\002\140\002\000" +
    "\002\162\003\000\002\162\004\000\002\164\005\000\002" +
    "\176\003\000\002\176\003\000\002\172\003\000\002\172" +
    "\004\000\002\172\003\000\002\106\006\000\002\106\006" +
    "\000\002\106\003\000\002\107\003\000\002\107\006\000" +
    "\002\110\002\000\002\110\003\000\002\111\003\000\002" +
    "\111\003\000\002\112\006\000\002\112\006\000\002\112" +
    "\003\000\002\113\003\000\002\113\005\000\002\114\003" +
    "\000\002\114\004\000\002\115\005\000\002\115\003\000" +
    "\002\116\003\000\002\116\006\000\002\116\002\000\002" +
    "\117\002\000\002\117\004\000\002\120\007\000\002\120" +
    "\005\000\002\120\005\000\002\120\003\000\002\120\010" +
    "\000\002\120\006\000\002\120\006\000\002\120\004\000" +
    "\002\121\004\000\002\121\004\000\002\121\002\000\002" +
    "\122\003\000\002\122\006\000\002\122\005\000\002\122" +
    "\005\000\002\122\010\000\002\122\005\000\002\123\003" +
    "\000\002\123\003\000\002\123\003\000\002\124\006\000" +
    "\002\124\006\000\002\124\004\000\002\124\004\000\002" +
    "\124\006\000\002\124\004\000\002\124\004\000\002\165" +
    "\003\000\002\165\005\000\002\170\005\000\002\166\003" +
    "\000\002\125\003\000\002\125\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0341\000\002\001\ufffe\000\004\002\u0343\001\002\000" +
    "\010\060\011\215\013\216\012\001\001\000\002\001\ufffd" +
    "\000\002\001\ufffc\000\004\010\017\001\002\000\002\001" +
    "\ufff8\000\004\060\016\001\002\000\004\060\015\001\002" +
    "\000\002\001\uffff\000\002\001\ufff7\000\002\001\ufff6\000" +
    "\004\071\020\001\uff93\000\004\010\026\001\002\000\004" +
    "\072\023\001\uff8e\000\004\061\032\001\ufff9\000\004\010" +
    "\026\001\002\000\004\122\027\001\uff8d\000\002\001\uff8c" +
    "\000\002\001\ufee9\000\004\010\026\001\002\000\002\001" +
    "\uff8b\000\004\110\033\001\002\000\002\001\ufffa\000\002" +
    "\001\ufff4\000\036\027\037\043\041\052\060\064\043\065" +
    "\051\066\044\111\053\113\052\214\056\215\040\216\042" +
    "\217\047\220\036\221\055\001\uff45\000\006\042\u032b\067" +
    "\u032c\001\002\000\002\001\uff40\000\004\063\u0325\001\002" +
    "\000\002\001\uff3d\000\004\010\u0322\001\002\000\002\001" +
    "\uff3c\000\004\222\u031a\001\002\000\004\222\u0312\001\002" +
    "\000\002\001\ufff3\000\022\042\uff44\067\uff44\214\056\215" +
    "\040\216\042\217\047\220\036\221\055\001\uff47\000\002" +
    "\001\uff3f\000\002\001\uff43\000\004\222\174\001\002\000" +
    "\002\001\uff4a\000\004\144\173\001\002\000\002\001\ufff5" +
    "\000\002\001\uff41\000\002\001\uff3e\000\012\010\137\012" +
    "\132\160\133\166\135\001\002\000\002\001\uff46\000\006" +
    "\122\062\144\063\001\002\000\004\010\064\001\002\000" +
    "\002\001\uff4c\000\004\127\065\001\002\000\034\006\076" +
    "\007\073\010\104\016\103\076\070\077\101\100\106\101" +
    "\102\102\075\103\077\114\100\164\066\165\105\001\002" +
    "\000\034\006\076\007\073\010\104\016\103\076\070\077" +
    "\101\100\106\101\102\102\075\103\077\114\100\164\066" +
    "\165\105\001\002\000\002\001\ufed3\000\004\222\112\001" +
    "\002\000\002\001\ufed4\000\002\001\uff37\000\002\001\ufedb" +
    "\000\002\001\ufecf\000\002\001\ufed9\000\002\001\ufedc\000" +
    "\002\001\ufed8\000\002\001\ufe74\000\002\001\ufed7\000\002" +
    "\001\ufed5\000\002\001\ufeda\000\004\112\110\001\ufe75\000" +
    "\034\006\076\007\073\010\104\016\103\076\070\077\101" +
    "\100\106\101\102\102\075\103\077\114\100\164\066\165" +
    "\105\001\002\000\002\001\ufed6\000\002\001\ufed1\000\004" +
    "\010\111\001\002\000\002\001\ufece\000\034\006\076\007" +
    "\073\010\104\016\103\076\070\077\101\100\106\101\102" +
    "\102\075\103\077\114\100\164\066\165\105\001\ufec7\000" +
    "\004\223\125\001\002\000\004\122\120\001\ufec5\000\004" +
    "\074\116\001\ufec0\000\034\006\076\007\073\010\104\016" +
    "\103\076\070\077\101\100\106\101\102\102\075\103\077" +
    "\114\100\164\066\165\105\001\002\000\002\001\ufec1\000" +
    "\034\006\076\007\073\010\104\016\103\076\070\077\101" +
    "\100\106\101\102\102\075\103\077\114\100\164\066\165" +
    "\105\001\ufec4\000\002\001\ufec6\000\004\074\123\001\ufec2" +
    "\000\034\006\076\007\073\010\104\016\103\076\070\077" +
    "\101\100\106\101\102\102\075\103\077\114\100\164\066" +
    "\165\105\001\002\000\002\001\ufec3\000\002\001\ufed0\000" +
    "\002\001\ufed2\000\002\001\uffd5\000\006\112\167\122\144" +
    "\001\002\000\006\122\162\144\163\001\002\000\004\127" +
    "\160\001\uff39\000\004\010\156\001\002\000\004\164\155" +
    "\001\uffcc\000\002\001\uffcf\000\006\010\153\166\152\001" +
    "\uffd3\000\002\001\uffce\000\006\122\141\144\142\001\002" +
    "\000\010\010\137\160\133\166\135\001\002\000\002\001" +
    "\ufff1\000\006\112\145\122\144\001\002\000\010\010\137" +
    "\160\133\166\135\001\002\000\004\012\146\001\002\000" +
    "\004\127\147\001\uffda\000\034\006\076\007\073\010\104" +
    "\016\103\076\070\077\101\100\106\101\102\102\075\103" +
    "\077\114\100\164\066\165\105\001\002\000\002\001\uffd9" +
    "\000\002\001\uffd6\000\002\001\uffd1\000\002\001\uffd0\000" +
    "\002\001\uffd4\000\002\001\uffcd\000\004\161\157\001\002" +
    "\000\002\001\uffd2\000\034\006\076\007\073\010\104\016" +
    "\103\076\070\077\101\100\106\101\102\102\075\103\077" +
    "\114\100\164\066\165\105\001\002\000\002\001\uff38\000" +
    "\004\012\164\001\002\000\002\001\uff4d\000\004\127\165" +
    "\001\uff3b\000\034\006\076\007\073\010\104\016\103\076" +
    "\070\077\101\100\106\101\102\102\075\103\077\114\100" +
    "\164\066\165\105\001\002\000\002\001\uff3a\000\004\012" +
    "\170\001\002\000\004\127\171\001\uffd8\000\034\006\076" +
    "\007\073\010\104\016\103\076\070\077\101\100\106\101" +
    "\102\102\075\103\077\114\100\164\066\165\105\001\002" +
    "\000\002\001\uffd7\000\002\001\ufffb\000\010\010\200\076" +
    "\175\223\uff6a\001\uff63\000\002\001\uff61\000\006\012\u030b" +
    "\151\u030a\001\002\000\004\223\205\001\002\000\002\001" +
    "\uff62\000\004\122\203\001\uff6b\000\002\001\uff69\000\006" +
    "\010\200\076\175\001\uff63\000\002\001\uff68\000\004\224" +
    "\206\001\002\000\012\010\213\171\210\210\207\222\212" +
    "\001\002\000\004\222\u0300\001\002\000\012\010\213\171" +
    "\210\210\207\222\212\001\002\000\002\001\uffe3\000\012" +
    "\010\213\171\210\210\207\222\212\001\002\000\004\222" +
    "\u02fb\001\002\000\010\110\217\145\216\146\215\001\002" +
    "\000\012\010\213\171\210\210\207\222\212\001\002\000" +
    "\012\010\213\171\210\210\207\222\212\001\002\000\002" +
    "\001\uffca\000\224\003\323\004\344\005\355\006\076\007" +
    "\073\010\245\011\262\012\267\014\302\016\103\017\327" +
    "\020\325\021\255\023\244\025\307\027\354\032\311\034" +
    "\334\040\264\041\326\042\314\044\340\045\252\047\353" +
    "\050\236\051\223\053\304\054\347\055\241\056\265\057" +
    "\243\070\343\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\110\272\111\322\113\233\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\144\222\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\214\253\215\270\216\230\222" +
    "\350\225\306\226\317\227\266\001\002\000\004\222\u02f6" +
    "\001\002\000\002\001\uffac\000\006\012\u02eb\225\u02ec\001" +
    "\002\000\004\222\u02d6\001\002\000\002\001\ufef1\000\132" +
    "\004\344\006\076\007\073\010\245\011\262\012\267\016" +
    "\103\032\311\054\347\055\241\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\222\350\225\306\226\317\227\266\001\002\000" +
    "\002\001\uffcb\000\004\057\u02d4\001\002\000\070\031\u0102" +
    "\123\371\124\u010a\125\363\143\366\144\u02d3\145\362\146" +
    "\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154\360" +
    "\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163" +
    "\375\164\u0109\165\370\166\u0100\167\376\170\361\173\365" +
    "\001\002\000\002\001\ufeac\000\002\001\uffa8\000\036\127" +
    "\u018f\130\u0192\131\u0190\132\u0199\133\u0193\134\u0198\135\u0195" +
    "\136\u0197\137\u0191\140\u018e\141\u0194\142\u0196\174\ufebb\175" +
    "\ufebb\001\ufebd\000\002\001\uff9c\000\006\016\u02cf\222\u02cd" +
    "\001\002\000\132\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\002\000\132\004\344\006\076\007\073\010\245" +
    "\011\262\012\267\016\103\032\311\054\347\055\241\075" +
    "\351\076\224\077\101\100\106\101\102\102\075\103\077" +
    "\104\246\114\100\115\240\116\275\117\260\120\331\121" +
    "\313\126\271\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\222\350\225\306\226\317" +
    "\227\266\001\002\000\004\222\u02c8\001\002\000\004\112" +
    "\u02c6\001\002\000\002\001\uff96\000\004\222\u02b5\001\002" +
    "\000\004\112\ufee9\001\ufe75\000\002\001\ufe8a\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\002" +
    "\001\ufeb0\000\132\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\002\000\004\110\u029a\001\002\000\004\012\u0291" +
    "\001\002\000\002\001\ufeaf\000\004\222\u0288\001\002\000" +
    "\004\010\u0282\001\002\000\004\073\u0277\001\ufeb9\000\004" +
    "\222\u0274\001\002\000\012\010\245\012\267\114\100\225" +
    "\306\001\002\000\002\001\ufecc\000\010\110\u011a\206\u011b" +
    "\222\ufeb3\001\ufeae\000\134\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\144\u0270\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\002\000\004\222\u026d\001\002" +
    "\000\002\001\ufe8a\000\002\001\ufe76\000\004\057\u026a\001" +
    "\002\000\132\004\344\006\076\007\073\010\245\011\262" +
    "\012\267\016\103\032\311\054\347\055\241\075\351\076" +
    "\224\077\101\100\106\101\102\102\075\103\077\104\246" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\164\312\165\274\171\345\172\226\174\261\175\352" +
    "\176\237\177\336\200\251\201\333\202\300\203\337\204" +
    "\277\205\247\210\303\222\350\225\306\226\317\227\266" +
    "\001\002\000\002\001\uffca\000\002\001\ufefb\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\132" +
    "\004\344\006\076\007\073\010\245\011\262\012\267\016" +
    "\103\032\311\054\347\055\241\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\222\350\225\306\226\317\227\266\001\002\000" +
    "\006\012\267\225\u0126\001\002\000\132\004\344\006\076" +
    "\007\073\010\245\011\262\012\267\016\103\032\311\054" +
    "\347\055\241\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\222\350" +
    "\225\306\226\317\227\266\001\002\000\132\004\344\006" +
    "\076\007\073\010\245\011\262\012\267\016\103\032\311" +
    "\054\347\055\241\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\114\100\115\240\116\275" +
    "\117\260\120\331\121\313\126\271\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\222" +
    "\350\225\306\226\317\227\266\001\002\000\002\001\ufecb" +
    "\000\002\001\uffb3\000\010\010\u0118\012\267\225\306\001" +
    "\002\000\004\222\u0258\001\002\000\006\174\u0256\175\u0257" +
    "\001\002\000\004\110\u0127\001\ufe9d\000\004\222\u023f\001" +
    "\002\000\002\001\uffc8\000\132\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\222\350\225\306" +
    "\226\317\227\266\001\002\000\132\004\344\006\076\007" +
    "\073\010\245\011\262\012\267\016\103\032\311\054\347" +
    "\055\241\075\351\076\224\077\101\100\106\101\102\102" +
    "\075\103\077\104\246\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\002\000\132\004\344\006\076" +
    "\007\073\010\245\011\262\012\267\016\103\032\311\054" +
    "\347\055\241\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\222\350" +
    "\225\306\226\317\227\266\001\002\000\004\151\u0212\001" +
    "\uff9b\000\002\001\ufeca\000\002\001\uffc5\000\002\001\ufe8a" +
    "\000\002\001\ufea8\000\004\010\u0206\001\002\000\002\001" +
    "\uffed\000\002\001\uffa9\000\002\001\ufea9\000\206\003\323" +
    "\004\344\005\355\006\076\007\073\010\245\011\262\012" +
    "\267\014\302\016\103\017\327\020\325\021\255\023\244" +
    "\025\307\027\354\032\311\034\334\040\264\041\326\044" +
    "\340\045\252\047\353\050\236\051\223\053\304\054\347" +
    "\055\241\075\351\076\224\077\101\100\106\101\102\102" +
    "\075\103\077\104\246\110\272\113\233\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\144\222\164" +
    "\312\165\274\171\345\172\226\174\261\175\352\176\237" +
    "\177\336\200\251\201\333\202\300\203\337\204\277\205" +
    "\247\210\303\214\253\222\350\225\306\226\317\227\266" +
    "\001\002\000\134\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\144\u01fd\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\222\350\225\306\226" +
    "\317\227\266\001\002\000\132\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\222\350\225\306" +
    "\226\317\227\266\001\002\000\002\001\uffc7\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\004" +
    "\222\u01b6\001\ufecd\000\132\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\222\350\225\306\226" +
    "\317\227\266\001\002\000\004\222\u01db\001\002\000\002" +
    "\001\uff9d\000\132\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\002\000\132\004\344\006\076\007\073\010\245" +
    "\011\262\012\267\016\103\032\311\054\347\055\241\075" +
    "\351\076\224\077\101\100\106\101\102\102\075\103\077" +
    "\104\246\114\100\115\240\116\275\117\260\120\331\121" +
    "\313\126\271\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\222\350\225\306\226\317" +
    "\227\266\001\002\000\134\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\144\u01d4\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\002\000\002\001\ufebe\000\002" +
    "\001\ufebf\000\002\001\uff91\000\004\222\u01cf\001\ufee1\000" +
    "\132\004\344\006\076\007\073\010\245\011\262\012\267" +
    "\016\103\032\311\054\347\055\241\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\114\100" +
    "\115\240\116\275\117\260\120\331\121\313\126\271\164" +
    "\312\165\274\171\345\172\226\174\261\175\352\176\237" +
    "\177\336\200\251\201\333\202\300\203\337\204\277\205" +
    "\247\210\303\222\350\225\306\226\317\227\266\001\002" +
    "\000\002\001\uffc9\000\004\222\u01c8\001\002\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\004" +
    "\222\u01b9\001\002\000\012\010\245\012\267\114\100\225" +
    "\306\001\002\000\132\004\344\006\076\007\073\010\245" +
    "\011\262\012\267\016\103\032\311\054\347\055\241\075" +
    "\351\076\224\077\101\100\106\101\102\102\075\103\077" +
    "\104\246\114\100\115\240\116\275\117\260\120\331\121" +
    "\313\126\271\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\222\350\225\306\226\317" +
    "\227\266\001\002\000\004\222\u016b\001\002\000\004\222" +
    "\356\001\002\000\132\004\344\006\076\007\073\010\245" +
    "\011\262\012\267\016\103\032\311\054\347\055\241\075" +
    "\351\076\224\077\101\100\106\101\102\102\075\103\077" +
    "\104\246\114\100\115\240\116\275\117\260\120\331\121" +
    "\313\126\271\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\222\350\225\306\226\317" +
    "\227\266\001\002\000\070\031\u0102\123\371\124\u010a\125" +
    "\363\143\366\145\362\146\u0104\147\364\150\373\151\u0103" +
    "\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160" +
    "\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100" +
    "\167\376\170\361\173\365\223\377\001\002\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\132" +
    "\004\344\006\076\007\073\010\245\011\262\012\267\016" +
    "\103\032\311\054\347\055\241\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\222\350\225\306\226\317\227\266\001\002\000" +
    "\132\004\344\006\076\007\073\010\245\011\262\012\267" +
    "\016\103\032\311\054\347\055\241\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\114\100" +
    "\115\240\116\275\117\260\120\331\121\313\126\271\164" +
    "\312\165\274\171\345\172\226\174\261\175\352\176\237" +
    "\177\336\200\251\201\333\202\300\203\337\204\277\205" +
    "\247\210\303\222\350\225\306\226\317\227\266\001\002" +
    "\000\132\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\222\350\225\306\226\317\227\266\001" +
    "\002\000\132\004\344\006\076\007\073\010\245\011\262" +
    "\012\267\016\103\032\311\054\347\055\241\075\351\076" +
    "\224\077\101\100\106\101\102\102\075\103\077\104\246" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\164\312\165\274\171\345\172\226\174\261\175\352" +
    "\176\237\177\336\200\251\201\333\202\300\203\337\204" +
    "\277\205\247\210\303\222\350\225\306\226\317\227\266" +
    "\001\002\000\132\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\002\000\132\004\344\006\076\007\073\010\245" +
    "\011\262\012\267\016\103\032\311\054\347\055\241\075" +
    "\351\076\224\077\101\100\106\101\102\102\075\103\077" +
    "\104\246\114\100\115\240\116\275\117\260\120\331\121" +
    "\313\126\271\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\222\350\225\306\226\317" +
    "\227\266\001\002\000\132\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\222\350\225\306\226" +
    "\317\227\266\001\002\000\132\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\222\350\225\306" +
    "\226\317\227\266\001\002\000\132\004\344\006\076\007" +
    "\073\010\245\011\262\012\267\016\103\032\311\054\347" +
    "\055\241\075\351\076\224\077\101\100\106\101\102\102" +
    "\075\103\077\104\246\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\002\000\132\004\344\006\076" +
    "\007\073\010\245\011\262\012\267\016\103\032\311\054" +
    "\347\055\241\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\222\350" +
    "\225\306\226\317\227\266\001\002\000\132\004\344\006" +
    "\076\007\073\010\245\011\262\012\267\016\103\032\311" +
    "\054\347\055\241\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\114\100\115\240\116\275" +
    "\117\260\120\331\121\313\126\271\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\222" +
    "\350\225\306\226\317\227\266\001\002\000\132\004\344" +
    "\006\076\007\073\010\245\011\262\012\267\016\103\032" +
    "\311\054\347\055\241\075\351\076\224\077\101\100\106" +
    "\101\102\102\075\103\077\104\246\114\100\115\240\116" +
    "\275\117\260\120\331\121\313\126\271\164\312\165\274" +
    "\171\345\172\226\174\261\175\352\176\237\177\336\200" +
    "\251\201\333\202\300\203\337\204\277\205\247\210\303" +
    "\222\350\225\306\226\317\227\266\001\002\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\132" +
    "\004\344\006\076\007\073\010\245\011\262\012\267\016" +
    "\103\032\311\054\347\055\241\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\222\350\225\306\226\317\227\266\001\002\000" +
    "\210\003\323\004\344\005\355\006\076\007\073\010\245" +
    "\011\262\012\267\014\302\016\103\017\327\020\325\021" +
    "\255\023\244\025\307\027\354\032\311\034\334\040\264" +
    "\041\326\044\340\045\252\047\353\050\236\051\223\053" +
    "\304\054\347\055\241\075\351\076\224\077\101\100\106" +
    "\101\102\102\075\103\077\104\246\110\272\113\233\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\144\222\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\214\253\222\350\224\u0141\225" +
    "\306\226\317\227\266\001\002\000\132\004\344\006\076" +
    "\007\073\010\245\011\262\012\267\016\103\032\311\054" +
    "\347\055\241\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\222\350" +
    "\225\306\226\317\227\266\001\002\000\132\004\344\006" +
    "\076\007\073\010\245\011\262\012\267\016\103\032\311" +
    "\054\347\055\241\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\114\100\115\240\116\275" +
    "\117\260\120\331\121\313\126\271\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\222" +
    "\350\225\306\226\317\227\266\001\002\000\010\010\u0118" +
    "\012\267\225\306\001\002\000\132\004\344\006\076\007" +
    "\073\010\245\011\262\012\267\016\103\032\311\054\347" +
    "\055\241\075\351\076\224\077\101\100\106\101\102\102" +
    "\075\103\077\104\246\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\002\000\132\004\344\006\076" +
    "\007\073\010\245\011\262\012\267\016\103\032\311\054" +
    "\347\055\241\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\222\350" +
    "\225\306\226\317\227\266\001\002\000\132\004\344\006" +
    "\076\007\073\010\245\011\262\012\267\016\103\032\311" +
    "\054\347\055\241\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\114\100\115\240\116\275" +
    "\117\260\120\331\121\313\126\271\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\222" +
    "\350\225\306\226\317\227\266\001\002\000\132\004\344" +
    "\006\076\007\073\010\245\011\262\012\267\016\103\032" +
    "\311\054\347\055\241\075\351\076\224\077\101\100\106" +
    "\101\102\102\075\103\077\104\246\114\100\115\240\116" +
    "\275\117\260\120\331\121\313\126\271\164\312\165\274" +
    "\171\345\172\226\174\261\175\352\176\237\177\336\200" +
    "\251\201\333\202\300\203\337\204\277\205\247\210\303" +
    "\222\350\225\306\226\317\227\266\001\002\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\132" +
    "\004\344\006\076\007\073\010\245\011\262\012\267\016" +
    "\103\032\311\054\347\055\241\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\222\350\225\306\226\317\227\266\001\002\000" +
    "\132\004\344\006\076\007\073\010\245\011\262\012\267" +
    "\016\103\032\311\054\347\055\241\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\114\100" +
    "\115\240\116\275\117\260\120\331\121\313\126\271\164" +
    "\312\165\274\171\345\172\226\174\261\175\352\176\237" +
    "\177\336\200\251\201\333\202\300\203\337\204\277\205" +
    "\247\210\303\222\350\225\306\226\317\227\266\001\002" +
    "\000\132\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\222\350\225\306\226\317\227\266\001" +
    "\002\000\062\031\u0102\125\363\143\366\145\362\146\u0104" +
    "\147\364\150\373\151\u0103\152\u0108\153\374\154\360\155" +
    "\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375" +
    "\164\u0109\165\370\166\u0100\167\376\170\361\173\365\001" +
    "\uff16\000\012\031\u0102\166\u0100\167\376\170\361\001\uff11" +
    "\000\034\031\u0102\156\u0107\157\u0106\160\367\161\u0105\162" +
    "\u0101\163\375\164\u0109\165\370\166\u0100\167\376\170\361" +
    "\173\365\001\uff04\000\024\031\u0102\162\u0101\163\375\164" +
    "\u0109\165\370\166\u0100\167\376\170\361\173\365\001\uff01" +
    "\000\024\031\u0102\162\u0101\163\375\164\u0109\165\370\166" +
    "\u0100\167\376\170\361\173\365\001\ufeff\000\024\031\u0102" +
    "\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376\170" +
    "\361\173\365\001\uff00\000\052\031\u0102\147\364\150\373" +
    "\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157" +
    "\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370" +
    "\166\u0100\167\376\170\361\173\365\001\uff19\000\044\031" +
    "\u0102\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106" +
    "\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166" +
    "\u0100\167\376\170\361\173\365\001\uff14\000\002\001\ufefe" +
    "\000\004\073\u012b\001\ufee5\000\002\001\ufee7\000\006\012" +
    "\267\225\u0126\001\002\000\004\112\u0121\001\002\000\004" +
    "\112\ufee9\001\ufee8\000\006\110\u011a\206\u011b\001\ufeae\000" +
    "\132\004\344\006\076\007\073\010\245\011\262\012\267" +
    "\016\103\032\311\054\347\055\241\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\114\100" +
    "\115\240\116\275\117\260\120\331\121\313\126\271\164" +
    "\312\165\274\171\345\172\226\174\261\175\352\176\237" +
    "\177\336\200\251\201\333\202\300\203\337\204\277\205" +
    "\247\210\303\222\350\225\306\226\317\227\266\001\002" +
    "\000\132\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\222\350\225\306\226\317\227\266\001" +
    "\ufea6\000\004\207\u011e\001\002\000\066\031\u0102\123\371" +
    "\124\u010a\125\363\143\366\145\362\146\u0104\147\364\150" +
    "\373\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107" +
    "\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165" +
    "\370\166\u0100\167\376\170\361\173\365\001\ufea5\000\002" +
    "\001\ufeab\000\070\031\u0102\111\u0120\123\371\124\u010a\125" +
    "\363\143\366\145\362\146\u0104\147\364\150\373\151\u0103" +
    "\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160" +
    "\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100" +
    "\167\376\170\361\173\365\001\002\000\002\001\ufeaa\000" +
    "\006\012\267\225\306\001\002\000\002\001\ufeb1\000\006" +
    "\012\267\225\u0126\001\002\000\006\110\u011a\206\u011b\001" +
    "\ufeb3\000\006\110\u011a\206\u011b\001\ufeb2\000\004\110\u0127" +
    "\001\ufe9c\000\132\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\002\000\070\031\u0102\111\u0129\123\371\124\u010a" +
    "\125\363\143\366\145\362\146\u0104\147\364\150\373\151" +
    "\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106" +
    "\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166" +
    "\u0100\167\376\170\361\173\365\001\002\000\002\001\ufea7" +
    "\000\006\110\u011a\206\u011b\001\ufead\000\014\010\u0132\012" +
    "\267\110\u0131\114\100\225\306\001\002\000\002\001\ufe9f" +
    "\000\002\001\ufea0\000\002\001\ufea3\000\002\001\ufee3\000" +
    "\006\110\u0135\206\u0136\001\ufea4\000\132\004\344\006\076" +
    "\007\073\010\245\011\262\012\267\016\103\032\311\054" +
    "\347\055\241\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\222\350" +
    "\225\306\226\317\227\266\001\002\000\002\001\ufe75\000" +
    "\070\031\u0102\111\u0134\123\371\124\u010a\125\363\143\366" +
    "\145\362\146\u0104\147\364\150\373\151\u0103\152\u0108\153" +
    "\374\154\360\155\372\156\u0107\157\u0106\160\367\161\u0105" +
    "\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376\170" +
    "\361\173\365\001\002\000\002\001\ufe9e\000\132\004\344" +
    "\006\076\007\073\010\245\011\262\012\267\016\103\032" +
    "\311\054\347\055\241\075\351\076\224\077\101\100\106" +
    "\101\102\102\075\103\077\104\246\114\100\115\240\116" +
    "\275\117\260\120\331\121\313\126\271\164\312\165\274" +
    "\171\345\172\226\174\261\175\352\176\237\177\336\200" +
    "\251\201\333\202\300\203\337\204\277\205\247\210\303" +
    "\222\350\225\306\226\317\227\266\001\002\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\ufea6\000\004" +
    "\207\u0138\001\002\000\002\001\ufea2\000\070\031\u0102\111" +
    "\u013a\123\371\124\u010a\125\363\143\366\145\362\146\u0104" +
    "\147\364\150\373\151\u0103\152\u0108\153\374\154\360\155" +
    "\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375" +
    "\164\u0109\165\370\166\u0100\167\376\170\361\173\365\001" +
    "\002\000\002\001\ufea1\000\004\073\u013d\001\ufee6\000\002" +
    "\001\ufee4\000\014\010\u0132\012\267\110\u0131\114\100\225" +
    "\306\001\002\000\002\001\ufee2\000\020\031\u0102\164\u0109" +
    "\165\370\166\u0100\167\376\170\361\173\365\001\uff0c\000" +
    "\004\031\u0102\001\uff0f\000\002\001\uffca\000\002\001\uff73" +
    "\000\006\212\u0146\213\u0145\001\uff6f\000\002\001\uffc3\000" +
    "\206\003\323\004\344\005\355\006\076\007\073\010\245" +
    "\011\262\012\267\014\302\016\103\017\327\020\325\021" +
    "\255\023\244\025\307\027\354\032\311\034\334\040\264" +
    "\041\326\044\340\045\252\047\353\050\236\051\223\053" +
    "\304\054\347\055\241\075\351\076\224\077\101\100\106" +
    "\101\102\102\075\103\077\104\246\110\272\113\233\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\144\222\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\214\253\222\350\225\306\226" +
    "\317\227\266\001\002\000\004\222\u0147\001\002\000\132" +
    "\004\344\006\076\007\073\010\245\011\262\012\267\016" +
    "\103\032\311\054\347\055\241\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\222\350\225\306\226\317\227\266\001\002\000" +
    "\070\031\u0102\123\371\124\u010a\125\363\143\366\145\362" +
    "\146\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154" +
    "\360\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101" +
    "\163\375\164\u0109\165\370\166\u0100\167\376\170\361\173" +
    "\365\223\u0149\001\002\000\206\003\323\004\344\005\355" +
    "\006\076\007\073\010\245\011\262\012\267\014\302\016" +
    "\103\017\327\020\325\021\255\023\244\025\307\027\354" +
    "\032\311\034\334\040\264\041\326\044\340\045\252\047" +
    "\353\050\236\051\223\053\304\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\110\272\113\233\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\144\222\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\214" +
    "\253\222\350\225\306\226\317\227\266\001\002\000\002" +
    "\001\uff72\000\002\001\uff6e\000\222\003\323\004\344\005" +
    "\355\006\076\007\073\010\245\011\262\012\267\014\302" +
    "\016\103\017\327\020\325\021\255\023\244\025\307\027" +
    "\354\032\311\034\334\040\264\041\326\042\314\044\340" +
    "\045\252\047\353\050\236\051\223\053\304\054\347\055" +
    "\241\056\265\057\243\070\343\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\110\272\113" +
    "\233\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\144\222\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\214\253\215\270\216" +
    "\230\222\350\225\306\226\317\227\266\001\uff71\000\006" +
    "\212\u0150\213\u014f\001\uff6d\000\004\211\u0158\001\002\000" +
    "\004\224\u0156\001\002\000\004\222\u0151\001\002\000\132" +
    "\004\344\006\076\007\073\010\245\011\262\012\267\016" +
    "\103\032\311\054\347\055\241\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\222\350\225\306\226\317\227\266\001\002\000" +
    "\070\031\u0102\123\371\124\u010a\125\363\143\366\145\362" +
    "\146\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154" +
    "\360\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101" +
    "\163\375\164\u0109\165\370\166\u0100\167\376\170\361\173" +
    "\365\223\u0153\001\002\000\004\224\u0154\001\002\000\002" +
    "\001\uffca\000\222\003\323\004\344\005\355\006\076\007" +
    "\073\010\245\011\262\012\267\014\302\016\103\017\327" +
    "\020\325\021\255\023\244\025\307\027\354\032\311\034" +
    "\334\040\264\041\326\042\314\044\340\045\252\047\353" +
    "\050\236\051\223\053\304\054\347\055\241\056\265\057" +
    "\243\070\343\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\110\272\113\233\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\144\222" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\214\253\215\270\216\230\222\350\225" +
    "\306\226\317\227\266\001\uff70\000\002\001\uffca\000\222" +
    "\003\323\004\344\005\355\006\076\007\073\010\245\011" +
    "\262\012\267\014\302\016\103\017\327\020\325\021\255" +
    "\023\244\025\307\027\354\032\311\034\334\040\264\041" +
    "\326\042\314\044\340\045\252\047\353\050\236\051\223" +
    "\053\304\054\347\055\241\056\265\057\243\070\343\075" +
    "\351\076\224\077\101\100\106\101\102\102\075\103\077" +
    "\104\246\110\272\113\233\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\144\222\164\312\165\274" +
    "\171\345\172\226\174\261\175\352\176\237\177\336\200" +
    "\251\201\333\202\300\203\337\204\277\205\247\210\303" +
    "\214\253\215\270\216\230\222\350\225\306\226\317\227" +
    "\266\001\uff6c\000\004\144\u0159\001\002\000\002\001\uffc2" +
    "\000\004\031\u0102\001\uff0e\000\020\031\u0102\164\u0109\165" +
    "\370\166\u0100\167\376\170\361\173\365\001\uff0b\000\034" +
    "\031\u0102\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163" +
    "\375\164\u0109\165\370\166\u0100\167\376\170\361\173\365" +
    "\001\uff03\000\046\031\u0102\151\u0103\152\u0108\153\374\154" +
    "\360\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101" +
    "\163\375\164\u0109\165\370\166\u0100\167\376\170\361\173" +
    "\365\001\uff13\000\034\031\u0102\156\u0107\157\u0106\160\367" +
    "\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167" +
    "\376\170\361\173\365\001\uff05\000\064\031\u0102\124\u010a" +
    "\125\363\143\366\145\362\146\u0104\147\364\150\373\151" +
    "\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106" +
    "\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166" +
    "\u0100\167\376\170\361\173\365\001\uff18\000\012\031\u0102" +
    "\166\u0100\167\376\170\361\001\uff10\000\024\031\u0102\162" +
    "\u0101\163\375\164\u0109\165\370\166\u0100\167\376\170\361" +
    "\173\365\001\uff02\000\070\031\u0102\123\371\124\u010a\125" +
    "\363\143\366\145\362\146\u0104\147\364\150\373\151\u0103" +
    "\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160" +
    "\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100" +
    "\167\376\170\361\173\365\224\u0163\001\002\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\066" +
    "\031\u0102\123\371\124\u010a\125\363\143\366\145\362\146" +
    "\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154\360" +
    "\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163" +
    "\375\164\u0109\165\370\166\u0100\167\376\170\361\173\365" +
    "\001\ufefc\000\012\031\u0102\166\u0100\167\376\170\361\001" +
    "\uff12\000\050\031\u0102\150\373\151\u0103\152\u0108\153\374" +
    "\154\360\155\372\156\u0107\157\u0106\160\367\161\u0105\162" +
    "\u0101\163\375\164\u0109\165\370\166\u0100\167\376\170\361" +
    "\173\365\001\uff15\000\060\031\u0102\143\366\145\362\146" +
    "\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154\360" +
    "\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163" +
    "\375\164\u0109\165\370\166\u0100\167\376\170\361\173\365" +
    "\001\uff17\000\054\031\u0102\146\u0104\147\364\150\373\151" +
    "\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106" +
    "\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166" +
    "\u0100\167\376\170\361\173\365\001\uff1a\000\004\031\u0102" +
    "\001\uff0d\000\034\031\u0102\156\u0107\157\u0106\160\367\161" +
    "\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376" +
    "\170\361\173\365\001\uff06\000\006\010\u0132\114\100\001" +
    "\002\000\006\122\u0171\223\u0170\001\002\000\004\127\u016e" +
    "\001\002\000\034\006\076\007\073\010\104\016\103\076" +
    "\070\077\101\100\106\101\102\102\075\103\077\114\100" +
    "\164\066\165\105\001\002\000\002\001\uff80\000\210\003" +
    "\323\004\344\005\355\006\076\007\073\010\245\011\262" +
    "\012\267\014\302\016\103\017\327\020\325\021\255\023" +
    "\244\025\307\027\354\032\311\034\334\040\264\041\326" +
    "\044\340\045\252\047\353\050\236\051\223\053\304\054" +
    "\347\055\241\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\110\272\113\233\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\144\222" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\214\253\222\350\224\u0176\225\306\226" +
    "\317\227\266\001\002\000\006\010\u0132\114\100\001\002" +
    "\000\004\127\u0173\001\002\000\034\006\076\007\073\010" +
    "\104\016\103\076\070\077\101\100\106\101\102\102\075" +
    "\103\077\114\100\164\066\165\105\001\002\000\002\001" +
    "\uff7f\000\002\001\uffad\000\002\001\uffca\000\002\001\uff82" +
    "\000\224\003\323\004\344\005\355\006\076\007\073\010" +
    "\245\011\262\012\267\014\302\016\103\017\327\020\325" +
    "\021\255\023\244\025\307\027\354\030\u0179\032\311\034" +
    "\334\040\264\041\326\042\314\044\340\045\252\047\353" +
    "\050\236\051\223\053\304\054\347\055\241\056\265\057" +
    "\243\070\343\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\110\272\113\233\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\144\222" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\214\253\215\270\216\230\222\350\225" +
    "\306\226\317\227\266\001\002\000\004\144\u017a\001\002" +
    "\000\002\001\uff81\000\070\031\u0102\123\371\124\u010a\125" +
    "\363\143\366\144\u017c\145\362\146\u0104\147\364\150\373" +
    "\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157" +
    "\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370" +
    "\166\u0100\167\376\170\361\173\365\001\002\000\002\001" +
    "\uffaa\000\004\222\u01b6\001\002\000\002\001\ufebb\000\002" +
    "\001\uff1b\000\004\112\u0181\001\002\000\010\010\u0183\012" +
    "\267\225\306\001\002\000\004\222\u01b3\001\ufeb1\000\004" +
    "\222\u0184\001\002\000\134\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\151\u0188\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\uff5f\000\004\122\u01ae\001\uff60" +
    "\000\042\122\uff5d\127\u018f\130\u0192\131\u0190\132\u0199\133" +
    "\u0193\134\u0198\135\u0195\136\u0197\137\u0191\140\u018e\141\u0194" +
    "\142\u0196\174\ufebb\175\ufebb\223\uff5d\001\ufebd\000\004\223" +
    "\u018d\001\002\000\012\010\245\012\267\114\100\225\306" +
    "\001\002\000\066\031\u0102\123\371\124\u010a\125\363\143" +
    "\366\145\362\146\u0104\147\364\150\373\151\u0103\152\u0108" +
    "\153\374\154\360\155\372\156\u0107\157\u0106\160\367\161" +
    "\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376" +
    "\170\361\173\365\001\002\000\006\122\uff5e\223\uff5e\001" +
    "\ufebe\000\002\001\uff5c\000\002\001\ufebc\000\002\001\ufeec" +
    "\000\132\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\222\350\225\306\226\317\227\266\001" +
    "\002\000\134\004\344\006\076\007\073\010\245\011\262" +
    "\012\267\016\103\032\311\054\347\055\241\075\351\076" +
    "\224\077\101\100\106\101\102\102\075\103\077\104\246" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\151\u01a4\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\222\350\225\306\226\317" +
    "\227\266\001\002\000\132\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\222\350\225\306\226" +
    "\317\227\266\001\002\000\132\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\222\350\225\306" +
    "\226\317\227\266\001\002\000\132\004\344\006\076\007" +
    "\073\010\245\011\262\012\267\016\103\032\311\054\347" +
    "\055\241\075\351\076\224\077\101\100\106\101\102\102" +
    "\075\103\077\104\246\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\002\000\132\004\344\006\076" +
    "\007\073\010\245\011\262\012\267\016\103\032\311\054" +
    "\347\055\241\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\222\350" +
    "\225\306\226\317\227\266\001\002\000\132\004\344\006" +
    "\076\007\073\010\245\011\262\012\267\016\103\032\311" +
    "\054\347\055\241\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\114\100\115\240\116\275" +
    "\117\260\120\331\121\313\126\271\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\222" +
    "\350\225\306\226\317\227\266\001\002\000\132\004\344" +
    "\006\076\007\073\010\245\011\262\012\267\016\103\032" +
    "\311\054\347\055\241\075\351\076\224\077\101\100\106" +
    "\101\102\102\075\103\077\104\246\114\100\115\240\116" +
    "\275\117\260\120\331\121\313\126\271\164\312\165\274" +
    "\171\345\172\226\174\261\175\352\176\237\177\336\200" +
    "\251\201\333\202\300\203\337\204\277\205\247\210\303" +
    "\222\350\225\306\226\317\227\266\001\002\000\132\004" +
    "\344\006\076\007\073\010\245\011\262\012\267\016\103" +
    "\032\311\054\347\055\241\075\351\076\224\077\101\100" +
    "\106\101\102\102\075\103\077\104\246\114\100\115\240" +
    "\116\275\117\260\120\331\121\313\126\271\164\312\165" +
    "\274\171\345\172\226\174\261\175\352\176\237\177\336" +
    "\200\251\201\333\202\300\203\337\204\277\205\247\210" +
    "\303\222\350\225\306\226\317\227\266\001\002\000\132" +
    "\004\344\006\076\007\073\010\245\011\262\012\267\016" +
    "\103\032\311\054\347\055\241\075\351\076\224\077\101" +
    "\100\106\101\102\102\075\103\077\104\246\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\222\350\225\306\226\317\227\266\001\002\000" +
    "\132\004\344\006\076\007\073\010\245\011\262\012\267" +
    "\016\103\032\311\054\347\055\241\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\114\100" +
    "\115\240\116\275\117\260\120\331\121\313\126\271\164" +
    "\312\165\274\171\345\172\226\174\261\175\352\176\237" +
    "\177\336\200\251\201\333\202\300\203\337\204\277\205" +
    "\247\210\303\222\350\225\306\226\317\227\266\001\002" +
    "\000\132\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\222\350\225\306\226\317\227\266\001" +
    "\002\000\060\031\u0102\143\366\145\362\146\u0104\147\364" +
    "\150\373\151\u0103\152\u0108\153\374\154\360\155\372\156" +
    "\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109" +
    "\165\370\166\u0100\167\376\170\361\173\365\001\uff27\000" +
    "\060\031\u0102\143\366\145\362\146\u0104\147\364\150\373" +
    "\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157" +
    "\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370" +
    "\166\u0100\167\376\170\361\173\365\001\uff25\000\060\031" +
    "\u0102\143\366\145\362\146\u0104\147\364\150\373\151\u0103" +
    "\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160" +
    "\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100" +
    "\167\376\170\361\173\365\001\uff23\000\060\031\u0102\143" +
    "\366\145\362\146\u0104\147\364\150\373\151\u0103\152\u0108" +
    "\153\374\154\360\155\372\156\u0107\157\u0106\160\367\161" +
    "\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376" +
    "\170\361\173\365\001\uff1f\000\060\031\u0102\143\366\145" +
    "\362\146\u0104\147\364\150\373\151\u0103\152\u0108\153\374" +
    "\154\360\155\372\156\u0107\157\u0106\160\367\161\u0105\162" +
    "\u0101\163\375\164\u0109\165\370\166\u0100\167\376\170\361" +
    "\173\365\001\uff24\000\060\031\u0102\143\366\145\362\146" +
    "\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154\360" +
    "\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163" +
    "\375\164\u0109\165\370\166\u0100\167\376\170\361\173\365" +
    "\001\uff20\000\060\031\u0102\143\366\145\362\146\u0104\147" +
    "\364\150\373\151\u0103\152\u0108\153\374\154\360\155\372" +
    "\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164" +
    "\u0109\165\370\166\u0100\167\376\170\361\173\365\001\uff26" +
    "\000\060\031\u0102\143\366\145\362\146\u0104\147\364\150" +
    "\373\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107" +
    "\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165" +
    "\370\166\u0100\167\376\170\361\173\365\001\uff29\000\060" +
    "\031\u0102\143\366\145\362\146\u0104\147\364\150\373\151" +
    "\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106" +
    "\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166" +
    "\u0100\167\376\170\361\173\365\001\uff22\000\060\031\u0102" +
    "\143\366\145\362\146\u0104\147\364\150\373\151\u0103\152" +
    "\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160\367" +
    "\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167" +
    "\376\170\361\173\365\001\uff28\000\014\010\245\012\267" +
    "\114\100\210\u01a6\225\306\001\002\000\060\031\u0102\143" +
    "\366\145\362\146\u0104\147\364\150\373\151\u0103\152\u0108" +
    "\153\374\154\360\155\372\156\u0107\157\u0106\160\367\161" +
    "\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376" +
    "\170\361\173\365\001\uff2e\000\010\010\u0118\012\267\225" +
    "\306\001\002\000\002\001\uff2d\000\004\222\u01aa\001\ufede" +
    "\000\002\001\uff2c\000\134\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\151\u0188\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\uff5f\000\004\223\u01ac\001\002" +
    "\000\002\001\ufedd\000\060\031\u0102\143\366\145\362\146" +
    "\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154\360" +
    "\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163" +
    "\375\164\u0109\165\370\166\u0100\167\376\170\361\173\365" +
    "\001\uff21\000\134\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\151\u01b0\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\222\350\225\306\226" +
    "\317\227\266\001\002\000\042\122\uff5a\127\u018f\130\u0192" +
    "\131\u0190\132\u0199\133\u0193\134\u0198\135\u0195\136\u0197\137" +
    "\u0191\140\u018e\141\u0194\142\u0196\174\ufebb\175\ufebb\223\uff5a" +
    "\001\ufebd\000\012\010\245\012\267\114\100\225\306\001" +
    "\002\000\006\122\uff5b\223\uff5b\001\ufebe\000\002\001\uff59" +
    "\000\134\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\151\u0188\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\uff5f\000\004\223\u01b5\001\002\000\002\001\ufeeb" +
    "\000\134\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\151\u0188\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\uff5f\000\004\223\u01b8\001\002\000\002\001\ufeed" +
    "\000\014\010\245\012\267\075\u01bd\114\100\225\306\001" +
    "\ufe97\000\006\122\u01c1\223\u01c3\001\002\000\002\001\ufe9a" +
    "\000\002\001\ufe99\000\004\222\u01be\001\002\000\014\010" +
    "\245\012\267\075\u01bd\114\100\225\306\001\ufe97\000\006" +
    "\122\u01c1\223\u01c0\001\002\000\002\001\ufe98\000\014\010" +
    "\245\012\267\075\u01bd\114\100\225\306\001\ufe97\000\002" +
    "\001\ufe9b\000\004\127\u01c4\001\002\000\132\004\344\006" +
    "\076\007\073\010\245\011\262\012\267\016\103\032\311" +
    "\054\347\055\241\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\114\100\115\240\116\275" +
    "\117\260\120\331\121\313\126\271\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\222" +
    "\350\225\306\226\317\227\266\001\002\000\060\031\u0102" +
    "\143\366\145\362\146\u0104\147\364\150\373\151\u0103\152" +
    "\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160\367" +
    "\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167" +
    "\376\170\361\173\365\001\uff2f\000\070\031\u0102\123\371" +
    "\124\u010a\125\363\143\366\145\362\146\u0104\147\364\150" +
    "\373\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107" +
    "\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165" +
    "\370\166\u0100\167\376\170\361\173\365\223\u01c7\001\002" +
    "\000\002\001\ufefd\000\012\010\245\012\267\114\100\225" +
    "\306\001\002\000\002\001\ufe79\000\006\122\u01cc\223\u01cb" +
    "\001\002\000\002\001\ufe80\000\012\010\245\012\267\114" +
    "\100\225\306\001\002\000\002\001\ufe78\000\004\031\u0102" +
    "\001\uff08\000\134\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\223\u01d2\225\306\226" +
    "\317\227\266\001\002\000\002\001\ufef3\000\070\031\u0102" +
    "\123\371\124\u010a\125\363\143\366\145\362\146\u0104\147" +
    "\364\150\373\151\u0103\152\u0108\153\374\154\360\155\372" +
    "\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164" +
    "\u0109\165\370\166\u0100\167\376\170\361\173\365\223\u01d3" +
    "\001\002\000\002\001\ufee0\000\002\001\ufedf\000\002\001" +
    "\uffb9\000\040\127\u018f\130\u0192\131\u0190\132\u0199\133\u0193" +
    "\134\u0198\135\u0195\136\u0197\137\u0191\140\u018e\141\u0194\142" +
    "\u0196\144\u01d8\174\ufebb\175\ufebb\001\ufebd\000\004\144\u01d7" +
    "\001\ufebe\000\002\001\uffb8\000\002\001\uffb7\000\002\001" +
    "\ufef5\000\002\001\ufef9\000\132\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\222\350\225\306" +
    "\226\317\227\266\001\002\000\070\031\u0102\123\371\124" +
    "\u010a\125\363\143\366\145\362\146\u0104\147\364\150\373" +
    "\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157" +
    "\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370" +
    "\166\u0100\167\376\170\361\173\365\223\u01dd\001\002\000" +
    "\006\110\u01de\224\u01e0\001\002\000\004\144\u01f2\001\uff7a" +
    "\000\002\001\uffbe\000\004\144\u01e2\001\uff7a\000\010\035" +
    "\u01ef\036\u01e5\037\u01e6\001\002\000\002\001\uff7a\000\010" +
    "\035\u01e4\036\u01e5\037\u01e6\001\002\000\004\144\u01ee\001" +
    "\002\000\132\004\344\006\076\007\073\010\245\011\262" +
    "\012\267\016\103\032\311\054\347\055\241\075\351\076" +
    "\224\077\101\100\106\101\102\102\075\103\077\104\246" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\164\312\165\274\171\345\172\226\174\261\175\352" +
    "\176\237\177\336\200\251\201\333\202\300\203\337\204" +
    "\277\205\247\210\303\222\350\225\306\226\317\227\266" +
    "\001\002\000\006\144\u01e9\224\u01e8\001\002\000\002\001" +
    "\uffca\000\002\001\uff77\000\002\001\uff76\000\222\003\323" +
    "\004\344\005\355\006\076\007\073\010\245\011\262\012" +
    "\267\014\302\016\103\017\327\020\325\021\255\023\244" +
    "\025\307\027\354\032\311\034\334\040\264\041\326\042" +
    "\314\044\340\045\252\047\353\050\236\051\223\053\304" +
    "\054\347\055\241\056\265\057\243\070\343\075\351\076" +
    "\224\077\101\100\106\101\102\102\075\103\077\104\246" +
    "\110\272\113\233\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\144\222\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\214\253" +
    "\215\270\216\230\222\350\225\306\226\317\227\266\001" +
    "\uff78\000\072\031\u0102\123\371\124\u010a\125\363\143\366" +
    "\144\u01e9\145\362\146\u0104\147\364\150\373\151\u0103\152" +
    "\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160\367" +
    "\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167" +
    "\376\170\361\173\365\224\u01e8\001\002\000\002\001\uffca" +
    "\000\222\003\323\004\344\005\355\006\076\007\073\010" +
    "\245\011\262\012\267\014\302\016\103\017\327\020\325" +
    "\021\255\023\244\025\307\027\354\032\311\034\334\040" +
    "\264\041\326\042\314\044\340\045\252\047\353\050\236" +
    "\051\223\053\304\054\347\055\241\056\265\057\243\070" +
    "\343\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\110\272\113\233\114\100\115\240\116" +
    "\275\117\260\120\331\121\313\126\271\144\222\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\214\253\215\270\216\230\222\350\225\306\226" +
    "\317\227\266\001\uff79\000\002\001\uff7b\000\004\144\u01f0" +
    "\001\002\000\002\001\uff7c\000\010\036\u01e5\037\u01e6\111" +
    "\u01f5\001\002\000\002\001\uff7a\000\010\036\u01e5\037\u01e6" +
    "\111\u01f4\001\002\000\002\001\uff7d\000\002\001\uff7e\000" +
    "\002\001\ufef7\000\066\031\u0102\123\371\124\u010a\125\363" +
    "\143\366\145\362\146\u0104\147\364\150\373\151\u0103\152" +
    "\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160\367" +
    "\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167" +
    "\376\170\361\173\365\001\ufe7b\000\006\122\u01fa\144\u01fb" +
    "\001\002\000\066\031\u0102\123\371\124\u010a\125\363\143" +
    "\366\145\362\146\u0104\147\364\150\373\151\u0103\152\u0108" +
    "\153\374\154\360\155\372\156\u0107\157\u0106\160\367\161" +
    "\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376" +
    "\170\361\173\365\001\uff34\000\132\004\344\006\076\007" +
    "\073\010\245\011\262\012\267\016\103\032\311\054\347" +
    "\055\241\075\351\076\224\077\101\100\106\101\102\102" +
    "\075\103\077\104\246\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\222\350\225" +
    "\306\226\317\227\266\001\002\000\002\001\uffb4\000\066" +
    "\031\u0102\123\371\124\u010a\125\363\143\366\145\362\146" +
    "\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154\360" +
    "\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163" +
    "\375\164\u0109\165\370\166\u0100\167\376\170\361\173\365" +
    "\001\uff35\000\002\001\uffbb\000\070\031\u0102\123\371\124" +
    "\u010a\125\363\143\366\144\u01ff\145\362\146\u0104\147\364" +
    "\150\373\151\u0103\152\u0108\153\374\154\360\155\372\156" +
    "\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109" +
    "\165\370\166\u0100\167\376\170\361\173\365\001\002\000" +
    "\002\001\uffba\000\004\021\u0201\001\002\000\004\222\u0202" +
    "\001\002\000\132\004\344\006\076\007\073\010\245\011" +
    "\262\012\267\016\103\032\311\054\347\055\241\075\351" +
    "\076\224\077\101\100\106\101\102\102\075\103\077\104" +
    "\246\114\100\115\240\116\275\117\260\120\331\121\313" +
    "\126\271\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\002\000\070\031\u0102\123\371\124\u010a\125\363" +
    "\143\366\145\362\146\u0104\147\364\150\373\151\u0103\152" +
    "\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160\367" +
    "\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167" +
    "\376\170\361\173\365\223\u0204\001\002\000\004\144\u0205" +
    "\001\002\000\002\001\uffc0\000\004\071\u0208\001\uff90\000" +
    "\004\110\u020a\001\002\000\004\010\026\001\002\000\004" +
    "\122\027\001\uff8f\000\002\001\uff4e\000\026\043\041\052" +
    "\060\111\u020d\113\052\214\056\215\040\216\042\217\047" +
    "\220\036\221\055\001\uff45\000\002\001\uff4f\000\002\001" +
    "\uff97\000\004\012\132\001\002\000\004\042\u0210\001\002" +
    "\000\004\151\u0212\001\uff9b\000\006\010\u0132\114\100\001" +
    "\002\000\002\001\uff9a\000\004\222\u0214\001\002\000\010" +
    "\010\200\076\175\223\uff6a\001\uff63\000\004\223\u0216\001" +
    "\002\000\006\110\u0218\144\u0219\001\002\000\002\001\uff4b" +
    "\000\002\001\uffca\000\002\001\uff49\000\224\003\323\004" +
    "\344\005\355\006\076\007\073\010\245\011\262\012\267" +
    "\014\302\016\103\017\327\020\325\021\255\023\244\025" +
    "\307\027\354\032\311\034\334\040\264\041\326\042\314" +
    "\044\340\045\252\047\353\050\236\051\223\053\304\054" +
    "\347\055\241\056\265\057\243\070\343\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\110" +
    "\272\111\u021b\113\233\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\144\222\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\214" +
    "\253\215\270\216\230\222\350\225\306\226\317\227\266" +
    "\001\002\000\002\001\uff48\000\014\012\267\015\u0222\106" +
    "\u0221\107\u021f\226\u0220\001\002\000\006\073\u022d\206\u022c" +
    "\001\ufe89\000\002\001\ufe8c\000\012\010\245\012\267\114" +
    "\100\225\306\001\002\000\002\001\ufec9\000\132\004\344" +
    "\006\076\007\073\010\245\011\u0223\012\267\016\103\032" +
    "\311\054\347\055\241\075\351\076\224\077\101\100\106" +
    "\101\102\102\075\103\077\104\246\114\100\115\240\116" +
    "\275\117\260\120\331\121\313\126\271\164\312\165\274" +
    "\171\345\172\226\174\261\175\352\176\237\177\336\200" +
    "\251\201\333\202\300\203\337\204\277\205\247\210\303" +
    "\222\350\225\306\226\317\227\266\001\002\000\002\001" +
    "\ufe8b\000\004\206\u0226\001\ufecc\000\070\031\u0102\111\u0225" +
    "\123\371\124\u010a\125\363\143\366\145\362\146\u0104\147" +
    "\364\150\373\151\u0103\152\u0108\153\374\154\360\155\372" +
    "\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164" +
    "\u0109\165\370\166\u0100\167\376\170\361\173\365\001\002" +
    "\000\002\001\ufe86\000\132\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\222\350\225\306\226" +
    "\317\227\266\001\002\000\070\031\u0102\123\371\124\u010a" +
    "\125\363\143\366\145\362\146\u0104\147\364\150\373\151" +
    "\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106" +
    "\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166" +
    "\u0100\167\376\170\361\173\365\207\u0228\001\002\000\004" +
    "\111\u0229\001\002\000\002\001\ufe85\000\004\111\u022b\001" +
    "\002\000\002\001\ufe84\000\012\010\u0132\012\267\013\u0232" +
    "\114\100\001\002\000\006\010\u0132\114\100\001\002\000" +
    "\002\001\ufe87\000\002\001\ufe81\000\004\207\u0233\001\002" +
    "\000\002\001\ufe83\000\002\001\ufe82\000\002\001\ufe88\000" +
    "\006\010\u0132\114\100\001\002\000\004\222\u0236\001\002" +
    "\000\010\010\200\076\175\223\uff6a\001\uff63\000\004\223" +
    "\u0238\001\002\000\004\110\u0239\001\002\000\002\001\uffca" +
    "\000\224\003\323\004\344\005\355\006\076\007\073\010" +
    "\245\011\262\012\267\014\302\016\103\017\327\020\325" +
    "\021\255\023\244\025\307\027\354\032\311\034\334\040" +
    "\264\041\326\042\314\044\340\045\252\047\353\050\236" +
    "\051\223\053\304\054\347\055\241\056\265\057\243\070" +
    "\343\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\110\272\111\u023b\113\233\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\144\222" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\214\253\215\270\216\230\222\350\225" +
    "\306\226\317\227\266\001\002\000\002\001\uff99\000\066" +
    "\031\u0102\123\371\124\u010a\125\363\143\366\145\362\146" +
    "\u0104\147\364\150\373\151\u0103\152\u0108\153\374\154\360" +
    "\155\372\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163" +
    "\375\164\u0109\165\370\166\u0100\167\376\170\361\173\365" +
    "\001\ufe7a\000\012\031\u0102\166\u0100\167\376\170\361\001" +
    "\uff0a\000\002\001\uff2a\000\132\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\222\350\225\306" +
    "\226\317\227\266\001\002\000\040\033\u0251\127\u018f\130" +
    "\u0192\131\u0190\132\u0199\133\u0193\134\u0198\135\u0195\136\u0197" +
    "\137\u0191\140\u018e\141\u0194\142\u0196\174\ufebb\175\ufebb\001" +
    "\ufebd\000\004\033\u0242\001\ufebe\000\012\010\245\012\267" +
    "\114\100\225\306\001\002\000\004\074\u0245\001\uff8a\000" +
    "\004\223\u024a\001\002\000\014\010\245\012\267\114\100" +
    "\151\u0248\225\306\001\002\000\002\001\uff89\000\002\001" +
    "\uff88\000\012\010\245\012\267\114\100\225\306\001\002" +
    "\000\002\001\uff87\000\210\003\323\004\344\005\355\006" +
    "\076\007\073\010\245\011\262\012\267\014\302\016\103" +
    "\017\327\020\325\021\255\023\244\025\307\027\354\032" +
    "\311\034\334\040\264\041\326\044\340\045\252\047\353" +
    "\050\236\051\223\053\304\054\347\055\241\075\351\076" +
    "\224\077\101\100\106\101\102\102\075\103\077\104\246" +
    "\110\272\113\233\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\144\222\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\214\253" +
    "\222\350\224\u024b\225\306\226\317\227\266\001\002\000" +
    "\002\001\uffca\000\002\001\uff84\000\002\001\uffae\000\224" +
    "\003\323\004\344\005\355\006\076\007\073\010\245\011" +
    "\262\012\267\014\302\016\103\017\327\020\325\021\255" +
    "\023\244\025\307\026\u024f\027\354\032\311\034\334\040" +
    "\264\041\326\042\314\044\340\045\252\047\353\050\236" +
    "\051\223\053\304\054\347\055\241\056\265\057\243\070" +
    "\343\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\110\272\113\233\114\100\115\240\116" +
    "\275\117\260\120\331\121\313\126\271\144\222\164\312" +
    "\165\274\171\345\172\226\174\261\175\352\176\237\177" +
    "\336\200\251\201\333\202\300\203\337\204\277\205\247" +
    "\210\303\214\253\215\270\216\230\222\350\225\306\226" +
    "\317\227\266\001\002\000\004\144\u0250\001\002\000\002" +
    "\001\uff83\000\014\010\245\012\267\114\100\151\u0248\225" +
    "\306\001\002\000\004\074\u0245\001\uff8a\000\004\223\u0254" +
    "\001\002\000\210\003\323\004\344\005\355\006\076\007" +
    "\073\010\245\011\262\012\267\014\302\016\103\017\327" +
    "\020\325\021\255\023\244\025\307\027\354\032\311\034" +
    "\334\040\264\041\326\044\340\045\252\047\353\050\236" +
    "\051\223\053\304\054\347\055\241\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\110\272" +
    "\113\233\114\100\115\240\116\275\117\260\120\331\121" +
    "\313\126\271\144\222\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\214\253\222\350" +
    "\224\u024b\225\306\226\317\227\266\001\002\000\002\001" +
    "\uffaf\000\002\001\uff1e\000\002\001\uff1c\000\012\010\245" +
    "\012\267\114\100\225\306\001\002\000\002\001\uffa2\000" +
    "\002\001\uffa0\000\006\122\u025d\223\u025c\001\002\000\004" +
    "\144\u025f\001\002\000\012\010\245\012\267\114\100\225" +
    "\306\001\002\000\002\001\uffa1\000\002\001\uffb0\000\004" +
    "\222\u01aa\001\ufede\000\002\001\uff2b\000\002\001\ufef6\000" +
    "\002\001\ufef4\000\010\110\u011a\206\u011b\222\ufeb2\001\ufead" +
    "\000\066\031\u0102\123\371\124\u010a\125\363\143\366\145" +
    "\362\146\u0104\147\364\150\373\151\u0103\152\u0108\153\374" +
    "\154\360\155\372\156\u0107\157\u0106\160\367\161\u0105\162" +
    "\u0101\163\375\164\u0109\165\370\166\u0100\167\376\170\361" +
    "\173\365\001\ufe7d\000\012\031\u0102\166\u0100\167\376\170" +
    "\361\001\uff09\000\224\003\323\004\344\005\355\006\076" +
    "\007\073\010\245\011\262\012\267\014\302\016\103\017" +
    "\327\020\325\021\255\023\244\025\307\027\354\032\311" +
    "\034\334\040\264\041\326\042\314\044\340\045\252\047" +
    "\353\050\236\051\223\053\304\054\347\055\241\056\265" +
    "\057\243\070\343\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\110\272\111\u0268\113\233" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\144\222\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\214\253\215\270\216\230" +
    "\222\350\225\306\226\317\227\266\001\002\000\002\001" +
    "\uffc4\000\060\031\u0102\143\366\145\362\146\u0104\147\364" +
    "\150\373\151\u0103\152\u0108\153\374\154\360\155\372\156" +
    "\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109" +
    "\165\370\166\u0100\167\376\170\361\173\365\001\ufeee\000" +
    "\002\001\uff95\000\014\012\267\015\u0222\106\u0221\107\u021f" +
    "\227\u026c\001\002\000\002\001\ufeef\000\004\223\u026e\001" +
    "\002\000\004\144\u026f\001\002\000\002\001\uffc6\000\002" +
    "\001\uffbd\000\070\031\u0102\123\371\124\u010a\125\363\143" +
    "\366\144\u0272\145\362\146\u0104\147\364\150\373\151\u0103" +
    "\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160" +
    "\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100" +
    "\167\376\170\361\173\365\001\002\000\002\001\uffbc\000" +
    "\002\001\uff1d\000\132\004\344\006\076\007\073\010\245" +
    "\011\262\012\267\016\103\032\311\054\347\055\241\075" +
    "\351\076\224\077\101\100\106\101\102\102\075\103\077" +
    "\104\246\114\100\115\240\116\275\117\260\120\331\121" +
    "\313\126\271\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\222\350\225\306\226\317" +
    "\227\266\001\002\000\070\031\u0102\123\371\124\u010a\125" +
    "\363\143\366\145\362\146\u0104\147\364\150\373\151\u0103" +
    "\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106\160" +
    "\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100" +
    "\167\376\170\361\173\365\223\u0276\001\002\000\002\001" +
    "\ufe7c\000\014\010\u0132\012\267\110\u0131\114\100\225\306" +
    "\001\002\000\004\222\u027a\001\ufeb4\000\002\001\ufeb7\000" +
    "\134\004\344\006\076\007\073\010\245\011\262\012\267" +
    "\016\103\032\311\054\347\055\241\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\114\100" +
    "\115\240\116\275\117\260\120\331\121\313\126\271\151" +
    "\u0188\164\312\165\274\171\345\172\226\174\261\175\352" +
    "\176\237\177\336\200\251\201\333\202\300\203\337\204" +
    "\277\205\247\210\303\222\350\225\306\226\317\227\266" +
    "\001\uff5f\000\004\223\u027c\001\002\000\002\001\ufeb5\000" +
    "\004\073\u027f\001\ufeba\000\002\001\ufeb8\000\014\010\u0132" +
    "\012\267\110\u0131\114\100\225\306\001\002\000\004\222" +
    "\u027a\001\ufeb4\000\002\001\ufeb6\000\004\071\020\001\uff93" +
    "\000\004\072\023\001\uff8e\000\004\110\u0285\001\002\000" +
    "\002\001\uff4e\000\026\043\041\052\060\111\u0287\113\052" +
    "\214\056\215\040\216\042\217\047\220\036\221\055\001" +
    "\uff45\000\002\001\uff98\000\132\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\222\350\225\306" +
    "\226\317\227\266\001\002\000\070\031\u0102\123\371\124" +
    "\u010a\125\363\143\366\145\362\146\u0104\147\364\150\373" +
    "\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157" +
    "\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370" +
    "\166\u0100\167\376\170\361\173\365\223\u028a\001\002\000" +
    "\210\003\323\004\344\005\355\006\076\007\073\010\245" +
    "\011\262\012\267\014\302\016\103\017\327\020\325\021" +
    "\255\023\244\025\307\027\354\032\311\034\334\040\264" +
    "\041\326\044\340\045\252\047\353\050\236\051\223\053" +
    "\304\054\347\055\241\075\351\076\224\077\101\100\106" +
    "\101\102\102\075\103\077\104\246\110\272\113\233\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\144\222\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\214\253\222\350\224\u028b\225" +
    "\306\226\317\227\266\001\002\000\002\001\uffca\000\002" +
    "\001\uffc1\000\002\001\uff75\000\224\003\323\004\344\005" +
    "\355\006\076\007\073\010\245\011\262\012\267\014\302" +
    "\016\103\017\327\020\325\021\255\022\u028f\023\244\025" +
    "\307\027\354\032\311\034\334\040\264\041\326\042\314" +
    "\044\340\045\252\047\353\050\236\051\223\053\304\054" +
    "\347\055\241\056\265\057\243\070\343\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\110" +
    "\272\113\233\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\144\222\164\312\165\274\171\345\172" +
    "\226\174\261\175\352\176\237\177\336\200\251\201\333" +
    "\202\300\203\337\204\277\205\247\210\303\214\253\215" +
    "\270\216\230\222\350\225\306\226\317\227\266\001\002" +
    "\000\004\144\u0290\001\002\000\002\001\uff74\000\004\127" +
    "\u0298\001\uff51\000\006\122\u0293\144\u0294\001\002\000\004" +
    "\012\u0295\001\002\000\002\001\uffb5\000\004\127\u0296\001" +
    "\uff53\000\034\006\076\007\073\010\104\016\103\076\070" +
    "\077\101\100\106\101\102\102\075\103\077\114\100\164" +
    "\066\165\105\001\002\000\002\001\uff52\000\034\006\076" +
    "\007\073\010\104\016\103\076\070\077\101\100\106\101" +
    "\102\102\075\103\077\114\100\164\066\165\105\001\002" +
    "\000\002\001\uff50\000\002\001\uffca\000\224\003\323\004" +
    "\344\005\355\006\076\007\073\010\245\011\262\012\267" +
    "\014\302\016\103\017\327\020\325\021\255\023\244\025" +
    "\307\027\354\032\311\034\334\040\264\041\326\042\314" +
    "\044\340\045\252\047\353\050\236\051\223\053\304\054" +
    "\347\055\241\056\265\057\243\070\343\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\110" +
    "\272\111\u029c\113\233\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\144\222\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\214" +
    "\253\215\270\216\230\222\350\225\306\226\317\227\266" +
    "\001\002\000\004\046\u029d\001\002\000\004\222\u029e\001" +
    "\002\000\004\010\026\001\002\000\004\012\267\001\002" +
    "\000\004\223\u02a1\001\002\000\004\110\u02a2\001\002\000" +
    "\002\001\uffca\000\224\003\323\004\344\005\355\006\076" +
    "\007\073\010\245\011\262\012\267\014\302\016\103\017" +
    "\327\020\325\021\255\023\244\025\307\027\354\032\311" +
    "\034\334\040\264\041\326\042\314\044\340\045\252\047" +
    "\353\050\236\051\223\053\304\054\347\055\241\056\265" +
    "\057\243\070\343\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\110\272\111\u02a4\113\233" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\144\222\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\214\253\215\270\216\230" +
    "\222\350\225\306\226\317\227\266\001\002\000\004\046" +
    "\u02a5\001\uffa6\000\004\222\u02aa\001\002\000\002\001\uffab" +
    "\000\002\001\uffa5\000\004\046\u02a5\001\uffa7\000\002\001" +
    "\uffa4\000\004\010\026\001\002\000\004\012\u02ac\001\002" +
    "\000\004\223\u02ad\001\002\000\004\110\u02ae\001\002\000" +
    "\002\001\uffca\000\224\003\323\004\344\005\355\006\076" +
    "\007\073\010\245\011\262\012\267\014\302\016\103\017" +
    "\327\020\325\021\255\023\244\025\307\027\354\032\311" +
    "\034\334\040\264\041\326\042\314\044\340\045\252\047" +
    "\353\050\236\051\223\053\304\054\347\055\241\056\265" +
    "\057\243\070\343\075\351\076\224\077\101\100\106\101" +
    "\102\102\075\103\077\104\246\110\272\111\u02b0\113\233" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\144\222\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\214\253\215\270\216\230" +
    "\222\350\225\306\226\317\227\266\001\002\000\002\001" +
    "\uffa3\000\002\001\ufef8\000\002\001\ufef2\000\014\012\267" +
    "\015\u0222\105\u02b4\106\u0221\107\u021f\001\002\000\002\001" +
    "\ufec8\000\132\004\344\006\076\007\073\010\245\011\262" +
    "\012\267\016\103\032\311\054\347\055\241\075\351\076" +
    "\224\077\101\100\106\101\102\102\075\103\077\104\246" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\164\312\165\274\171\345\172\226\174\261\175\352" +
    "\176\237\177\336\200\251\201\333\202\300\203\337\204" +
    "\277\205\247\210\303\222\350\225\306\226\317\227\266" +
    "\001\uff33\000\004\122\u02c4\001\uff32\000\066\031\u0102\123" +
    "\371\124\u010a\125\363\143\366\145\362\146\u0104\147\364" +
    "\150\373\151\u0103\152\u0108\153\374\154\360\155\372\156" +
    "\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109" +
    "\165\370\166\u0100\167\376\170\361\173\365\001\uff30\000" +
    "\004\144\u02b9\001\002\000\132\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\164\312\165\274\171\345\172\226" +
    "\174\261\175\352\176\237\177\336\200\251\201\333\202" +
    "\300\203\337\204\277\205\247\210\303\222\350\225\306" +
    "\226\317\227\266\001\uff33\000\004\144\u02bb\001\002\000" +
    "\132\004\344\006\076\007\073\010\245\011\262\012\267" +
    "\016\103\032\311\054\347\055\241\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\114\100" +
    "\115\240\116\275\117\260\120\331\121\313\126\271\164" +
    "\312\165\274\171\345\172\226\174\261\175\352\176\237" +
    "\177\336\200\251\201\333\202\300\203\337\204\277\205" +
    "\247\210\303\222\350\225\306\226\317\227\266\001\uff33" +
    "\000\004\223\u02bd\001\002\000\210\003\323\004\344\005" +
    "\355\006\076\007\073\010\245\011\262\012\267\014\302" +
    "\016\103\017\327\020\325\021\255\023\244\025\307\027" +
    "\354\032\311\034\334\040\264\041\326\044\340\045\252" +
    "\047\353\050\236\051\223\053\304\054\347\055\241\075" +
    "\351\076\224\077\101\100\106\101\102\102\075\103\077" +
    "\104\246\110\272\113\233\114\100\115\240\116\275\117" +
    "\260\120\331\121\313\126\271\144\222\164\312\165\274" +
    "\171\345\172\226\174\261\175\352\176\237\177\336\200" +
    "\251\201\333\202\300\203\337\204\277\205\247\210\303" +
    "\214\253\222\350\224\u02bf\225\306\226\317\227\266\001" +
    "\002\000\002\001\uffbf\000\002\001\uffca\000\002\001\uff86" +
    "\000\224\003\323\004\344\005\355\006\076\007\073\010" +
    "\245\011\262\012\267\014\302\016\103\017\327\020\325" +
    "\021\255\023\244\024\u02c2\025\307\027\354\032\311\034" +
    "\334\040\264\041\326\042\314\044\340\045\252\047\353" +
    "\050\236\051\223\053\304\054\347\055\241\056\265\057" +
    "\243\070\343\075\351\076\224\077\101\100\106\101\102" +
    "\102\075\103\077\104\246\110\272\113\233\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\144\222" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\214\253\215\270\216\230\222\350\225" +
    "\306\226\317\227\266\001\002\000\004\144\u02c3\001\002" +
    "\000\002\001\uff85\000\132\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\222\350\225\306\226" +
    "\317\227\266\001\002\000\066\031\u0102\123\371\124\u010a" +
    "\125\363\143\366\145\362\146\u0104\147\364\150\373\151" +
    "\u0103\152\u0108\153\374\154\360\155\372\156\u0107\157\u0106" +
    "\160\367\161\u0105\162\u0101\163\375\164\u0109\165\370\166" +
    "\u0100\167\376\170\361\173\365\001\uff31\000\010\010\u02c7" +
    "\012\267\225\306\001\002\000\004\222\u0184\001\ufe77\000" +
    "\012\010\245\012\267\114\100\225\306\001\002\000\004" +
    "\223\u02ca\001\002\000\002\001\ufe7f\000\066\031\u0102\123" +
    "\371\124\u010a\125\363\143\366\145\362\146\u0104\147\364" +
    "\150\373\151\u0103\152\u0108\153\374\154\360\155\372\156" +
    "\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109" +
    "\165\370\166\u0100\167\376\170\361\173\365\001\ufe7e\000" +
    "\002\001\ufefa\000\004\016\u02d1\001\002\000\004\144\u02d0" +
    "\001\002\000\002\001\uff9f\000\002\001\uffb1\000\004\223" +
    "\u02d2\001\002\000\002\001\uff9e\000\002\001\uffb2\000\002" +
    "\001\uff94\000\002\001\uff07\000\134\004\344\006\076\007" +
    "\073\010\245\011\262\012\267\016\103\032\311\054\347" +
    "\055\241\075\351\076\224\077\101\100\106\101\102\102" +
    "\075\103\077\104\246\114\100\115\240\116\275\117\260" +
    "\120\331\121\313\126\271\151\u02d9\164\312\165\274\171" +
    "\345\172\226\174\261\175\352\176\237\177\336\200\251" +
    "\201\333\202\300\203\337\204\277\205\247\210\303\222" +
    "\350\225\306\226\317\227\266\001\ufe96\000\004\223\u02e9" +
    "\001\002\000\004\122\u02e0\001\ufec5\000\012\010\245\012" +
    "\267\114\100\225\306\001\002\000\070\031\u0102\074\u02db" +
    "\123\371\124\u010a\125\363\143\366\145\362\146\u0104\147" +
    "\364\150\373\151\u0103\152\u0108\153\374\154\360\155\372" +
    "\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164" +
    "\u0109\165\370\166\u0100\167\376\170\361\173\365\001\ufe91" +
    "\000\134\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\151\u02dc\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\002\000\012\010\245\012\267\114\100\225\306" +
    "\001\002\000\066\031\u0102\123\371\124\u010a\125\363\143" +
    "\366\145\362\146\u0104\147\364\150\373\151\u0103\152\u0108" +
    "\153\374\154\360\155\372\156\u0107\157\u0106\160\367\161" +
    "\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376" +
    "\170\361\173\365\001\ufe92\000\002\001\ufe8e\000\002\001" +
    "\ufe8d\000\134\004\344\006\076\007\073\010\245\011\262" +
    "\012\267\016\103\032\311\054\347\055\241\075\351\076" +
    "\224\077\101\100\106\101\102\102\075\103\077\104\246" +
    "\114\100\115\240\116\275\117\260\120\331\121\313\126" +
    "\271\151\u02e2\164\312\165\274\171\345\172\226\174\261" +
    "\175\352\176\237\177\336\200\251\201\333\202\300\203" +
    "\337\204\277\205\247\210\303\222\350\225\306\226\317" +
    "\227\266\001\ufec4\000\002\001\ufe95\000\012\010\245\012" +
    "\267\114\100\225\306\001\002\000\070\031\u0102\074\u02e4" +
    "\123\371\124\u010a\125\363\143\366\145\362\146\u0104\147" +
    "\364\150\373\151\u0103\152\u0108\153\374\154\360\155\372" +
    "\156\u0107\157\u0106\160\367\161\u0105\162\u0101\163\375\164" +
    "\u0109\165\370\166\u0100\167\376\170\361\173\365\001\ufe93" +
    "\000\134\004\344\006\076\007\073\010\245\011\262\012" +
    "\267\016\103\032\311\054\347\055\241\075\351\076\224" +
    "\077\101\100\106\101\102\102\075\103\077\104\246\114" +
    "\100\115\240\116\275\117\260\120\331\121\313\126\271" +
    "\151\u02e5\164\312\165\274\171\345\172\226\174\261\175" +
    "\352\176\237\177\336\200\251\201\333\202\300\203\337" +
    "\204\277\205\247\210\303\222\350\225\306\226\317\227" +
    "\266\001\002\000\012\010\245\012\267\114\100\225\306" +
    "\001\002\000\066\031\u0102\123\371\124\u010a\125\363\143" +
    "\366\145\362\146\u0104\147\364\150\373\151\u0103\152\u0108" +
    "\153\374\154\360\155\372\156\u0107\157\u0106\160\367\161" +
    "\u0105\162\u0101\163\375\164\u0109\165\370\166\u0100\167\376" +
    "\170\361\173\365\001\ufe94\000\002\001\ufe90\000\002\001" +
    "\ufe8f\000\002\001\ufef0\000\006\122\u02f3\144\u02f4\001\002" +
    "\000\002\001\uff56\000\014\010\245\012\267\110\u02f0\114" +
    "\100\225\306\001\002\000\002\001\uff57\000\002\001\uff55" +
    "\000\002\001\ufebd\000\132\004\344\006\076\007\073\010" +
    "\245\011\262\012\267\016\103\032\311\054\347\055\241" +
    "\075\351\076\224\077\101\100\106\101\102\102\075\103" +
    "\077\104\246\114\100\115\240\116\275\117\260\120\331" +
    "\121\313\126\271\164\312\165\274\171\345\172\226\174" +
    "\261\175\352\176\237\177\336\200\251\201\333\202\300" +
    "\203\337\204\277\205\247\210\303\222\350\225\306\226" +
    "\317\227\266\001\002\000\070\031\u0102\111\u02f2\123\371" +
    "\124\u010a\125\363\143\366\145\362\146\u0104\147\364\150" +
    "\373\151\u0103\152\u0108\153\374\154\360\155\372\156\u0107" +
    "\157\u0106\160\367\161\u0105\162\u0101\163\375\164\u0109\165" +
    "\370\166\u0100\167\376\170\361\173\365\001\002\000\002" +
    "\001\uff54\000\006\012\u02eb\225\u02ec\001\002\000\002\001" +
    "\uffb6\000\002\001\uff58\000\134\004\344\006\076\007\073" +
    "\010\245\011\262\012\267\016\103\032\311\054\347\055" +
    "\241\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\151\u0188\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\222\350" +
    "\225\306\226\317\227\266\001\uff5f\000\004\223\u02f8\001" +
    "\002\000\002\001\ufeea\000\004\146\215\001\uffe7\000\002" +
    "\001\uffe6\000\004\223\u02fc\001\002\000\002\001\uffe2\000" +
    "\010\145\216\146\215\223\u02fe\001\002\000\002\001\uffe5" +
    "\000\002\001\uffe4\000\010\010\137\160\133\166\135\001" +
    "\002\000\004\222\u0302\001\002\000\010\010\137\160\133" +
    "\166\135\001\uffdd\000\004\223\u0308\001\002\000\004\122" +
    "\u0306\001\uffde\000\002\001\uffdc\000\010\010\137\160\133" +
    "\166\135\001\002\000\002\001\uffdb\000\004\223\u0309\001" +
    "\002\000\002\001\uffe1\000\004\012\u030e\001\002\000\004" +
    "\127\u030c\001\uff67\000\034\006\076\007\073\010\104\016" +
    "\103\076\070\077\101\100\106\101\102\102\075\103\077" +
    "\114\100\164\066\165\105\001\002\000\002\001\uff65\000" +
    "\004\127\u030f\001\uff66\000\034\006\076\007\073\010\104" +
    "\016\103\076\070\077\101\100\106\101\102\102\075\103" +
    "\077\114\100\164\066\165\105\001\002\000\002\001\uff64" +
    "\000\002\001\uff42\000\010\010\200\076\175\223\uff6a\001" +
    "\uff63\000\004\223\u0314\001\002\000\004\224\u0315\001\002" +
    "\000\012\010\213\171\210\210\207\222\212\001\002\000" +
    "\010\110\u0317\145\216\146\215\001\002\000\002\001\uffca" +
    "\000\224\003\323\004\344\005\355\006\076\007\073\010" +
    "\245\011\262\012\267\014\302\016\103\017\327\020\325" +
    "\021\255\023\244\025\307\027\354\032\311\034\334\040" +
    "\264\041\326\042\314\044\340\045\252\047\353\050\236" +
    "\051\223\053\304\054\347\055\241\056\265\057\243\070" +
    "\343\075\351\076\224\077\101\100\106\101\102\102\075" +
    "\103\077\104\246\110\272\111\u0319\113\233\114\100\115" +
    "\240\116\275\117\260\120\331\121\313\126\271\144\222" +
    "\164\312\165\274\171\345\172\226\174\261\175\352\176" +
    "\237\177\336\200\251\201\333\202\300\203\337\204\277" +
    "\205\247\210\303\214\253\215\270\216\230\222\350\225" +
    "\306\226\317\227\266\001\002\000\002\001\uffec\000\010" +
    "\010\200\076\175\223\uff6a\001\uff63\000\004\223\u031c\001" +
    "\002\000\004\224\u031d\001\002\000\012\010\213\171\210" +
    "\210\207\222\212\001\002\000\010\110\u031f\145\216\146" +
    "\215\001\002\000\002\001\uffca\000\224\003\323\004\344" +
    "\005\355\006\076\007\073\010\245\011\262\012\267\014" +
    "\302\016\103\017\327\020\325\021\255\023\244\025\307" +
    "\027\354\032\311\034\334\040\264\041\326\042\314\044" +
    "\340\045\252\047\353\050\236\051\223\053\304\054\347" +
    "\055\241\056\265\057\243\070\343\075\351\076\224\077" +
    "\101\100\106\101\102\102\075\103\077\104\246\110\272" +
    "\111\u0321\113\233\114\100\115\240\116\275\117\260\120" +
    "\331\121\313\126\271\144\222\164\312\165\274\171\345" +
    "\172\226\174\261\175\352\176\237\177\336\200\251\201" +
    "\333\202\300\203\337\204\277\205\247\210\303\214\253" +
    "\215\270\216\230\222\350\225\306\226\317\227\266\001" +
    "\002\000\002\001\uffee\000\004\127\u0323\001\002\000\034" +
    "\006\076\007\073\010\104\016\103\076\070\077\101\100" +
    "\106\101\102\102\075\103\077\114\100\164\066\165\105" +
    "\001\002\000\002\001\uff36\000\004\224\u0326\001\002\000" +
    "\004\010\026\001\002\000\004\071\020\001\uff93\000\004" +
    "\072\023\001\uff8e\000\004\144\u032a\001\002\000\002\001" +
    "\ufff2\000\004\151\u0212\001\uff9b\000\004\010\u032d\001\002" +
    "\000\004\222\u032e\001\002\000\010\010\137\160\133\166" +
    "\135\001\uffe9\000\002\001\uffeb\000\006\122\u0334\223\u0333" +
    "\001\002\000\004\012\u0332\001\002\000\002\001\uffe8\000" +
    "\004\224\u0336\001\002\000\010\010\137\160\133\166\135" +
    "\001\002\000\002\001\uffea\000\012\010\213\171\210\210" +
    "\207\222\212\001\002\000\010\144\u0338\145\216\146\215" +
    "\001\002\000\002\001\uffef\000\012\010\u033b\114\100\160" +
    "\133\166\135\001\002\000\006\112\u033c\122\144\001\002" +
    "\000\004\222\ufe75\001\uffce\000\006\010\u0132\114\100\001" +
    "\002\000\004\222\u033e\001\002\000\010\010\200\076\175" +
    "\223\uff6a\001\uff63\000\004\223\u0340\001\002\000\006\110" +
    "\u0218\144\u0219\001\002\000\002\001\ufff0\000\002\001\uff92" +
    "\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0341\000\006\025\003\026\004\001\001\000\002\001" +
    "\001\000\012\002\005\003\006\004\007\027\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\153" +
    "\020\001\001\000\004\131\u0341\001\001\000\004\154\021" +
    "\001\001\000\004\022\030\001\001\000\006\131\024\155" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\131\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\033\001\001" +
    "\000\020\006\053\066\044\133\060\134\034\136\045\137" +
    "\047\160\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\u0310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\137\010\127\012\126\013\133\014\135" +
    "\132\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\077\070\100\071\125\066\175\073\001\001\000\012\077" +
    "\070\100\125\125\066\175\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\077\070\100\106\125\066\175\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\077\070\100\114\102\112\104\113\125" +
    "\066\175\073\001\001\000\002\001\001\000\004\103\120" +
    "\001\001\000\002\001\001\000\012\077\070\100\116\125" +
    "\066\175\073\001\001\000\002\001\001\000\012\077\070" +
    "\100\121\125\066\175\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\077\070\100\123\125\066\175\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\142\012\126\013\133\014" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\150\013\133\014\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\077\070\100\147\125\066\175\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\077\070\100" +
    "\160\125\066\175\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\077" +
    "\070\100\165\125\066\175\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\077\070\100" +
    "\171\125\066\175\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\055\176\056\200\057\201\156\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\057\203\156\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\213\024\210\001\001\000\002\001" +
    "\001\000\006\023\u02fe\024\210\001\001\000\002\001\001" +
    "\000\006\023\u02fc\024\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u02f9\024\210\001\001\000\006" +
    "\023\u02f8\024\210\001\001\000\004\031\217\001\001\000" +
    "\074\030\345\032\226\033\315\073\340\074\253\077\314" +
    "\101\224\105\230\106\262\107\323\114\275\124\272\125" +
    "\331\126\320\131\241\142\307\143\327\144\233\150\334" +
    "\151\234\152\255\157\341\161\304\162\220\164\231\166" +
    "\317\170\300\172\247\176\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\u02e9\063\u02ec\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\073\340\074\253" +
    "\077\314\101\224\105\u02d4\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\233\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u02cd\001\001\000\052\073\340\074\253" +
    "\077\314\101\224\105\u02cb\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\233\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\052\073\340\074\253\077\314\101\224\105\u02ca\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u02b2\001\001\000\052\073\340\074\253\077\314\101" +
    "\224\105\u02b1\106\262\107\323\114\275\124\272\125\331" +
    "\131\241\144\233\157\341\161\304\162\220\164\231\166" +
    "\317\170\300\172\247\176\256\001\001\000\002\001\001" +
    "\000\052\073\340\074\253\077\314\101\224\105\u02b0\106" +
    "\262\107\323\114\275\124\272\125\331\131\241\144\233" +
    "\157\341\161\304\162\220\164\231\166\317\170\300\172" +
    "\247\176\256\001\001\000\002\001\001\000\004\064\u0291" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\074\253" +
    "\106\262\107\323\114\275\125\u017c\131\u017f\144\u017d\161" +
    "\u0272\162\220\164\231\166\317\172\247\176\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u0270\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\002\001\001\000\004\121\u026a\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\073\340\074\253\077\314" +
    "\101\224\105\u0268\106\262\107\323\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\004\031" +
    "\u0266\001\001\000\002\001\001\000\052\073\340\074\253" +
    "\077\314\101\224\105\u0265\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\233\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\052\073\340\074\253\077\314\101\224\105\u0264\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\010\106\u0263\107\323\166\317\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u0262" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\052\073\340\074\253\077" +
    "\314\101\224\105\u0261\106\262\107\323\114\275\124\272" +
    "\125\331\131\241\144\233\157\341\161\304\162\220\164" +
    "\231\166\317\170\300\172\247\176\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\106\u0118\107\323\114" +
    "\u0115\131\u0116\164\231\166\317\167\u025f\171\u0114\172\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\073\340" +
    "\074\253\077\314\101\224\105\u023d\106\262\107\323\114" +
    "\275\124\272\125\331\131\241\144\233\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u023c" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\052\073\340\074\253\077" +
    "\314\101\224\105\u023b\106\262\107\323\114\275\124\272" +
    "\125\331\131\241\144\233\157\341\161\304\162\220\164" +
    "\231\166\317\170\300\172\247\176\256\001\001\000\004" +
    "\067\u0233\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u021b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\030\u01ff\033\315\073\340\074\253\077\314\101\224" +
    "\105\230\106\262\107\323\114\275\124\272\125\331\131" +
    "\241\144\233\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u01fd\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\054\070\u01f7\073\340\074\253\077\314\101\224\105" +
    "\u01f8\106\262\107\323\114\275\124\272\125\331\131\241" +
    "\144\233\157\341\161\304\162\220\164\231\166\317\170" +
    "\300\172\247\176\256\001\001\000\002\001\001\000\052" +
    "\073\340\074\253\077\314\101\224\105\u01f6\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\002\001\001\000\052\073\340\074\253" +
    "\077\314\101\224\105\u01f5\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\233\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\073\340\074\253" +
    "\077\314\101\224\105\u01d9\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\233\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\052\073\340\074\253\077\314\101\224\105\u01d8\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\052\073\u01d5\074\253\077\314\101" +
    "\224\105\u0188\106\262\107\323\114\275\124\272\125\331" +
    "\131\241\144\u01d4\157\341\161\304\162\220\164\231\166" +
    "\317\170\300\172\247\176\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\u01cf\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u01cd" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u01c5" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\034\074" +
    "\253\106\262\107\323\114\275\125\u017c\131\u017f\144\u017d" +
    "\161\u017e\162\220\164\231\166\317\172\247\176\256\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u017a" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\356" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\052\073" +
    "\340\074\253\077\314\101\224\105\u0169\106\262\107\323" +
    "\114\275\124\272\125\331\131\241\144\233\157\341\161" +
    "\304\162\220\164\231\166\317\170\300\172\247\176\256" +
    "\001\001\000\052\073\340\074\253\077\314\101\224\105" +
    "\u0168\106\262\107\323\114\275\124\272\125\331\131\241" +
    "\144\233\157\341\161\304\162\220\164\231\166\317\170" +
    "\300\172\247\176\256\001\001\000\052\073\340\074\253" +
    "\077\314\101\224\105\u0167\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\233\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\052\073\340\074\253\077\314\101\224\105\u0166\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\052\073\340\074\253\077\314\101" +
    "\224\105\u0165\106\262\107\323\114\275\124\272\125\331" +
    "\131\241\144\233\157\341\161\304\162\220\164\231\166" +
    "\317\170\300\172\247\176\256\001\001\000\052\073\340" +
    "\074\253\077\314\101\224\105\u0164\106\262\107\323\114" +
    "\275\124\272\125\331\131\241\144\233\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u0161" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\052\073\340\074\253\077" +
    "\314\101\224\105\u0160\106\262\107\323\114\275\124\272" +
    "\125\331\131\241\144\233\157\341\161\304\162\220\164" +
    "\231\166\317\170\300\172\247\176\256\001\001\000\052" +
    "\073\340\074\253\077\314\101\224\105\u015f\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\052\073\340\074\253\077\314\101\224" +
    "\105\u015e\106\262\107\323\114\275\124\272\125\331\131" +
    "\241\144\233\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u015d\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\052\073\340\074\253\077\314\101\224\105\u015c\106" +
    "\262\107\323\114\275\124\272\125\331\131\241\144\233" +
    "\157\341\161\304\162\220\164\231\166\317\170\300\172" +
    "\247\176\256\001\001\000\052\073\340\074\253\077\314" +
    "\101\224\105\u015b\106\262\107\323\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\052\073" +
    "\340\074\253\077\314\101\224\105\u015a\106\262\107\323" +
    "\114\275\124\272\125\331\131\241\144\233\157\341\161" +
    "\304\162\220\164\231\166\317\170\300\172\247\176\256" +
    "\001\001\000\052\073\340\074\253\077\314\101\224\105" +
    "\u0159\106\262\107\323\114\275\124\272\125\331\131\241" +
    "\144\233\157\341\161\304\162\220\164\231\166\317\170" +
    "\300\172\247\176\256\001\001\000\056\030\u0141\033\315" +
    "\073\340\074\253\077\314\101\224\105\230\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\052\073\340\074\253\077\314\101\224" +
    "\105\u013f\106\262\107\323\114\275\124\272\125\331\131" +
    "\241\144\233\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u013e\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\024\106\u0118\107\323\114\u0115\131\u0116\164\231\166" +
    "\317\167\u0112\171\u0114\172\u0113\001\001\000\052\073\340" +
    "\074\253\077\314\101\224\105\u0111\106\262\107\323\114" +
    "\275\124\272\125\331\131\241\144\233\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u0110" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\052\073\340\074\253\077" +
    "\314\101\224\105\u010f\106\262\107\323\114\275\124\272" +
    "\125\331\131\241\144\233\157\341\161\304\162\220\164" +
    "\231\166\317\170\300\172\247\176\256\001\001\000\052" +
    "\073\340\074\253\077\314\101\224\105\u010e\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\052\073\340\074\253\077\314\101\224" +
    "\105\u010d\106\262\107\323\114\275\124\272\125\331\131" +
    "\241\144\233\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u010c\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\052\073\340\074\253\077\314\101\224\105\u010b\106" +
    "\262\107\323\114\275\124\272\125\331\131\241\144\233" +
    "\157\341\161\304\162\220\164\231\166\317\170\300\172" +
    "\247\176\256\001\001\000\052\073\340\074\253\077\314" +
    "\101\224\105\u010a\106\262\107\323\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\106\u0129\107\323\166\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\073\340\074\253\077\314\101\224\105\u011e\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\054\073\340\074\253\077\314\101\224" +
    "\105\u011c\106\262\107\323\110\u011b\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\106\u0123\107\323\114\u0122\162" +
    "\u0121\166\317\001\001\000\002\001\001\000\010\106\u0124" +
    "\107\323\166\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\073\340\074\253\077\314" +
    "\101\224\105\u0127\106\262\107\323\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\106\u0123" +
    "\107\323\111\u012e\112\u012f\113\u012c\114\u0122\125\u012b\162" +
    "\u012d\166\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\173\u013a\001\001\000\002\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u0132" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\073\340\074\253\077\314" +
    "\101\224\105\u0138\106\262\107\323\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\054\073" +
    "\340\074\253\077\314\101\224\105\u011c\106\262\107\323" +
    "\110\u0136\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\174\u013b\001\001" +
    "\000\002\001\001\000\024\106\u0123\107\323\111\u013d\112" +
    "\u012f\113\u012c\114\u0122\125\u012b\162\u012d\166\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u014b\001\001\000\004\051\u0142\001\001\000\004" +
    "\053\u0143\001\001\000\002\001\001\000\056\030\u014a\033" +
    "\315\073\340\074\253\077\314\101\224\105\230\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\002\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u0147\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\002\001\001\000\056\030\u0149\033\315\073\340\074" +
    "\253\077\314\101\224\105\230\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\030\345\032" +
    "\226\033\315\052\u014c\073\340\074\253\077\314\101\224" +
    "\105\230\106\262\107\323\114\275\124\272\125\331\126" +
    "\320\131\241\142\307\143\327\144\233\150\334\151\234" +
    "\152\255\157\341\161\304\162\220\164\231\166\317\170" +
    "\300\172\247\176\256\001\001\000\004\054\u014d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\073\340\074\253\077\314\101\224\105\u0151\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u0154\001\001\000\074\030\345\032\226\033\315" +
    "\073\340\074\253\077\314\101\224\105\230\106\262\107" +
    "\323\114\275\124\272\125\331\126\320\131\241\142\307" +
    "\143\327\144\233\150\334\151\234\152\255\157\341\161" +
    "\304\162\220\164\231\166\317\170\300\172\247\176\256" +
    "\001\001\000\004\031\u0156\001\001\000\074\030\345\032" +
    "\226\033\315\073\340\074\253\077\314\101\224\105\230" +
    "\106\262\107\323\114\275\124\272\125\331\126\320\131" +
    "\241\142\307\143\327\144\233\150\334\151\234\152\255" +
    "\157\341\161\304\162\220\164\231\166\317\170\300\172" +
    "\247\176\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\073" +
    "\340\074\253\077\314\101\224\105\u0163\106\262\107\323" +
    "\114\275\124\272\125\331\131\241\144\233\157\341\161" +
    "\304\162\220\164\231\166\317\170\300\172\247\176\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\u016b\125\u016c\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\077\070\100\u016e" +
    "\125\066\175\073\001\001\000\002\001\001\000\060\030" +
    "\u0176\033\315\043\u0174\073\340\074\253\077\314\101\224" +
    "\105\230\106\262\107\323\114\275\124\272\125\331\131" +
    "\241\144\233\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\004\125\u0171\001" +
    "\001\000\002\001\001\000\012\077\070\100\u0173\125\066" +
    "\175\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\u0177\001\001\000\002\001\001\000\074\030\345" +
    "\032\226\033\315\073\340\074\253\077\314\101\224\105" +
    "\230\106\262\107\323\114\275\124\272\125\331\126\320" +
    "\131\241\142\307\143\327\144\233\150\334\151\234\152" +
    "\255\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\106\u0123\107\323\114\u0122\162\u0181\166\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\060\u0186\061" +
    "\u0184\073\u0189\074\253\077\314\101\224\105\u0188\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\u0185\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\074\253\106\262\107\323\114\275" +
    "\125\u017c\130\u018a\131\u017f\144\u018b\162\220\164\231\166" +
    "\317\172\247\176\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\073\340\074\253\077\314\101\224\105\u01ac" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\052\073\340\074\253\077" +
    "\314\101\224\105\u01a4\106\262\107\323\114\275\124\272" +
    "\125\331\131\241\144\233\157\341\161\304\162\220\164" +
    "\231\166\317\170\300\172\247\176\256\001\001\000\052" +
    "\073\340\074\253\077\314\101\224\105\u01a2\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\052\073\340\074\253\077\314\101\224" +
    "\105\u01a1\106\262\107\323\114\275\124\272\125\331\131" +
    "\241\144\233\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u01a0\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\052\073\340\074\253\077\314\101\224\105\u019f\106" +
    "\262\107\323\114\275\124\272\125\331\131\241\144\233" +
    "\157\341\161\304\162\220\164\231\166\317\170\300\172" +
    "\247\176\256\001\001\000\052\073\340\074\253\077\314" +
    "\101\224\105\u019e\106\262\107\323\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\052\073" +
    "\340\074\253\077\314\101\224\105\u019d\106\262\107\323" +
    "\114\275\124\272\125\331\131\241\144\233\157\341\161" +
    "\304\162\220\164\231\166\317\170\300\172\247\176\256" +
    "\001\001\000\052\073\340\074\253\077\314\101\224\105" +
    "\u019c\106\262\107\323\114\275\124\272\125\331\131\241" +
    "\144\233\157\341\161\304\162\220\164\231\166\317\170" +
    "\300\172\247\176\256\001\001\000\052\073\340\074\253" +
    "\077\314\101\224\105\u019b\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\233\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\052\073\340\074\253\077\314\101\224\105\u019a\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\052\073\340\074\253\077\314\101" +
    "\224\105\u0199\106\262\107\323\114\275\124\272\125\331" +
    "\131\241\144\233\157\341\161\304\162\220\164\231\166" +
    "\317\170\300\172\247\176\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\074" +
    "\253\106\262\107\323\114\275\125\u017c\131\u017f\144\u01a6" +
    "\162\220\164\231\166\317\172\247\176\256\001\001\000" +
    "\002\001\001\000\024\106\u0118\107\323\114\u0115\131\u0116" +
    "\164\231\166\317\167\u01a7\171\u0114\172\u0113\001\001\000" +
    "\002\001\001\000\004\076\u01a8\001\001\000\002\001\001" +
    "\000\056\060\u01aa\061\u0184\073\u0189\074\253\077\314\101" +
    "\224\105\u0188\106\262\107\323\114\275\124\272\125\331" +
    "\131\241\144\u0185\157\341\161\304\162\220\164\231\166" +
    "\317\170\300\172\247\176\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\073\u01b0\074" +
    "\253\077\314\101\224\105\u0188\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\u01ae\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\002\001\001\000\034\074\253\106\262\107\323\114" +
    "\275\125\u017c\130\u01b1\131\u017f\144\u018b\162\220\164\231" +
    "\166\317\172\247\176\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\060\u01b3\061\u0184\073\u0189\074\253" +
    "\077\314\101\224\105\u0188\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\u0185\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\060\u01b6\061\u0184" +
    "\073\u0189\074\253\077\314\101\224\105\u0188\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\u0185\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\074\253\106\262\107\323\114\275\115\u01b9\116\u01ba\125" +
    "\u017c\131\u017f\144\u01bb\162\220\164\231\166\317\172\247" +
    "\176\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\074\253\106\262" +
    "\107\323\114\275\115\u01be\116\u01ba\125\u017c\131\u017f\144" +
    "\u01bb\162\220\164\231\166\317\172\247\176\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\074\253\106" +
    "\262\107\323\114\275\116\u01c1\125\u017c\131\u017f\144\u01bb" +
    "\162\220\164\231\166\317\172\247\176\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\073\340\074\253" +
    "\077\314\101\224\105\u01c4\106\262\107\323\114\275\124" +
    "\272\125\331\131\241\144\233\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\074\253\106\262\107\323\114\275\125\u017c\131\u017f\144" +
    "\u01c8\162\220\164\231\165\u01c9\166\317\172\247\176\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\074\253\106\262\107\323\114\275\125\u017c" +
    "\131\u017f\144\u01cc\162\220\164\231\166\317\172\247\176" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\073\340\074\253\077\314\101\224\105\u01d0\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u01db\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\002\001\001\000\004\045\u01de\001\001\000\004\046" +
    "\u01f0\001\001\000\002\001\001\000\004\046\u01e0\001\001" +
    "\000\002\001\001\000\004\046\u01e2\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\073\340\074\253\077\314" +
    "\101\224\105\u01ea\106\262\107\323\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\004\047" +
    "\u01e6\001\001\000\004\031\u01e9\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\030\345\032\226\033\315\073" +
    "\340\074\253\077\314\101\224\105\230\106\262\107\323" +
    "\114\275\124\272\125\331\126\320\131\241\142\307\143" +
    "\327\144\233\150\334\151\234\152\255\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\004\047\u01eb\001\001\000\004\031\u01ec\001\001" +
    "\000\074\030\345\032\226\033\315\073\340\074\253\077" +
    "\314\101\224\105\230\106\262\107\323\114\275\124\272" +
    "\125\331\126\320\131\241\142\307\143\327\144\233\150" +
    "\334\151\234\152\255\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u01f2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u01fb\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\073\340\074\253\077\314\101\224\105" +
    "\u0202\106\262\107\323\114\275\124\272\125\331\131\241" +
    "\144\233\157\341\161\304\162\220\164\231\166\317\170" +
    "\300\172\247\176\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\127\u0206\001\001\000" +
    "\002\001\001\000\006\131\024\155\u0208\001\001\000\002" +
    "\001\001\000\004\065\u020a\001\001\000\016\066\u020b\133" +
    "\060\134\u020e\136\045\137\047\160\u020d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\132\130\001\001\000" +
    "\002\001\001\000\004\067\u0210\001\001\000\004\125\u0212" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\055" +
    "\u0214\056\200\057\201\156\175\001\001\000\002\001\001" +
    "\000\004\135\u0216\001\001\000\002\001\001\000\004\031" +
    "\u0219\001\001\000\002\001\001\000\074\030\345\032\226" +
    "\033\315\073\340\074\253\077\314\101\224\105\230\106" +
    "\262\107\323\114\275\124\272\125\331\126\320\131\241" +
    "\142\307\143\327\144\233\150\334\151\234\152\255\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\002\001\001\000\006\122\u021d\166" +
    "\u021c\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\074\253\106\262\107\323\114\275\125\u017c\131\u017f\144" +
    "\u0229\162\220\164\231\166\317\172\247\176\256\001\001" +
    "\000\002\001\001\000\052\073\340\074\253\077\314\101" +
    "\224\105\u0223\106\262\107\323\114\275\124\272\125\331" +
    "\131\241\144\233\157\341\161\304\162\220\164\231\166" +
    "\317\170\300\172\247\176\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\073\340\074\253\077\314\101\224\105\u0226\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\123\u022f\125\u0230\166\u022e\001\001\000\004\125\u022d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\u0234\001\001\000\002\001\001\000\012\055\u0236" +
    "\056\200\057\201\156\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0239\001\001\000\074\030\345" +
    "\032\226\033\315\073\340\074\253\077\314\101\224\105" +
    "\230\106\262\107\323\114\275\124\272\125\331\126\320" +
    "\131\241\142\307\143\327\144\233\150\334\151\234\152" +
    "\255\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\073\u0240" +
    "\074\253\077\314\101\224\105\u0188\106\262\107\323\114" +
    "\275\124\272\125\331\131\241\144\u023f\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\074\253" +
    "\106\262\107\323\114\275\125\u017c\131\u017f\144\u0242\162" +
    "\220\164\231\166\317\172\247\176\256\001\001\000\004" +
    "\037\u0243\001\001\000\002\001\001\000\034\040\u0245\074" +
    "\253\106\262\107\323\114\275\125\u017c\131\u017f\144\u0246" +
    "\162\220\164\231\166\317\172\247\176\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\074\253\106\262" +
    "\107\323\114\275\125\u017c\131\u017f\144\u0248\162\220\164" +
    "\231\166\317\172\247\176\256\001\001\000\002\001\001" +
    "\000\060\030\u024b\033\315\042\u024c\073\340\074\253\077" +
    "\314\101\224\105\230\106\262\107\323\114\275\124\272" +
    "\125\331\131\241\144\233\157\341\161\304\162\220\164" +
    "\231\166\317\170\300\172\247\176\256\001\001\000\004" +
    "\031\u024d\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\030\345\032\226\033\315\073\340\074\253\077\314" +
    "\101\224\105\230\106\262\107\323\114\275\124\272\125" +
    "\331\126\320\131\241\142\307\143\327\144\233\150\334" +
    "\151\234\152\255\157\341\161\304\162\220\164\231\166" +
    "\317\170\300\172\247\176\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\040\u0251\074\253\106\262\107" +
    "\323\114\275\125\u017c\131\u017f\144\u0246\162\220\164\231" +
    "\166\317\172\247\176\256\001\001\000\004\037\u0252\001" +
    "\001\000\002\001\001\000\060\030\u024b\033\315\042\u0254" +
    "\073\340\074\253\077\314\101\224\105\230\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\034\u025a\035\u0258\074\253\106\262\107" +
    "\323\114\275\125\u017c\131\u017f\144\u0259\162\220\164\231" +
    "\166\317\172\247\176\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\035\u025d\074\253\106\262\107\323\114\275\125\u017c\131" +
    "\u017f\144\u0259\162\220\164\231\166\317\172\247\176\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\u0260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\030\345\032\226\033\315\073\340\074\253" +
    "\077\314\101\224\105\230\106\262\107\323\114\275\124" +
    "\272\125\331\126\320\131\241\142\307\143\327\144\233" +
    "\150\334\151\234\152\255\157\341\161\304\162\220\164" +
    "\231\166\317\170\300\172\247\176\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\122" +
    "\u021d\166\u021c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\073\340\074\253\077\314\101\224\105\u0274\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\106\u0123\107\323\111\u0277\112\u012f\113\u012c\114\u0122\125" +
    "\u012b\162\u012d\166\317\001\001\000\004\140\u0278\001\001" +
    "\000\004\141\u027c\001\001\000\056\060\u027a\061\u0184\073" +
    "\u0189\074\253\077\314\101\224\105\u0188\106\262\107\323" +
    "\114\275\124\272\125\331\131\241\144\u0185\157\341\161" +
    "\304\162\220\164\231\166\317\170\300\172\247\176\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\163" +
    "\u027d\001\001\000\002\001\001\000\024\106\u0123\107\323" +
    "\111\u027f\112\u012f\113\u012c\114\u0122\125\u012b\162\u012d\166" +
    "\317\001\001\000\004\140\u0280\001\001\000\002\001\001" +
    "\000\004\153\u0282\001\001\000\004\154\u0283\001\001\000" +
    "\002\001\001\000\004\065\u0285\001\001\000\016\066\u020b" +
    "\133\060\134\u020e\136\045\137\047\160\u020d\001\001\000" +
    "\002\001\001\000\052\073\340\074\253\077\314\101\224" +
    "\105\u0288\106\262\107\323\114\275\124\272\125\331\131" +
    "\241\144\233\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\002\001\001\000" +
    "\060\030\u028c\033\315\050\u028b\073\340\074\253\077\314" +
    "\101\224\105\230\106\262\107\323\114\275\124\272\125" +
    "\331\131\241\144\233\157\341\161\304\162\220\164\231" +
    "\166\317\170\300\172\247\176\256\001\001\000\004\031" +
    "\u028d\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\030\345\032\226\033\315\073\340\074\253\077\314\101" +
    "\224\105\230\106\262\107\323\114\275\124\272\125\331" +
    "\126\320\131\241\142\307\143\327\144\233\150\334\151" +
    "\234\152\255\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\077" +
    "\070\100\u0296\125\066\175\073\001\001\000\002\001\001" +
    "\000\012\077\070\100\u0298\125\066\175\073\001\001\000" +
    "\002\001\001\000\004\031\u029a\001\001\000\074\030\345" +
    "\032\226\033\315\073\340\074\253\077\314\101\224\105" +
    "\230\106\262\107\323\114\275\124\272\125\331\126\320" +
    "\131\241\142\307\143\327\144\233\150\334\151\234\152" +
    "\255\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\131\u029e\001\001\000\004\166\u029f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u02a2\001" +
    "\001\000\074\030\345\032\226\033\315\073\340\074\253" +
    "\077\314\101\224\105\230\106\262\107\323\114\275\124" +
    "\272\125\331\126\320\131\241\142\307\143\327\144\233" +
    "\150\334\151\234\152\255\157\341\161\304\162\220\164" +
    "\231\166\317\170\300\172\247\176\256\001\001\000\010" +
    "\145\u02a5\146\u02a7\147\u02a6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\147\u02a8\001\001" +
    "\000\002\001\001\000\004\131\u02aa\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u02ae" +
    "\001\001\000\074\030\345\032\226\033\315\073\340\074" +
    "\253\077\314\101\224\105\230\106\262\107\323\114\275" +
    "\124\272\125\331\126\320\131\241\142\307\143\327\144" +
    "\233\150\334\151\234\152\255\157\341\161\304\162\220" +
    "\164\231\166\317\170\300\172\247\176\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\122\u021d\166\u021c\001\001\000\002\001\001\000\056\071" +
    "\u02b7\072\u02b5\073\340\074\253\077\314\101\224\105\u02b6" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\233\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\071\u02b9\072\u02b5\073\340" +
    "\074\253\077\314\101\224\105\u02b6\106\262\107\323\114" +
    "\275\124\272\125\331\131\241\144\233\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\002\001\001\000\056\071\u02bb\072\u02b5\073\340" +
    "\074\253\077\314\101\224\105\u02b6\106\262\107\323\114" +
    "\275\124\272\125\331\131\241\144\233\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\002\001\001\000\060\030\u02bf\033\315\041\u02bd" +
    "\073\340\074\253\077\314\101\224\105\230\106\262\107" +
    "\323\114\275\124\272\125\331\131\241\144\233\157\341" +
    "\161\304\162\220\164\231\166\317\170\300\172\247\176" +
    "\256\001\001\000\002\001\001\000\004\031\u02c0\001\001" +
    "\000\002\001\001\000\074\030\345\032\226\033\315\073" +
    "\340\074\253\077\314\101\224\105\230\106\262\107\323" +
    "\114\275\124\272\125\331\126\320\131\241\142\307\143" +
    "\327\144\233\150\334\151\234\152\255\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\073\340" +
    "\074\253\077\314\101\224\105\u02c4\106\262\107\323\114" +
    "\275\124\272\125\331\131\241\144\233\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\002\001\001\000\014\106\u0123\107\323\114\u0122" +
    "\162\u0181\166\317\001\001\000\002\001\001\000\032\074" +
    "\253\106\262\107\323\114\275\125\u017c\131\u017f\144\u02c8" +
    "\162\220\164\231\166\317\172\247\176\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\073\340\074\253\077\314\101\224\105\u02d9\106\262" +
    "\107\323\114\275\117\u02d6\120\u02d7\124\272\125\331\131" +
    "\241\144\233\157\341\161\304\162\220\164\231\166\317" +
    "\170\300\172\247\176\256\001\001\000\002\001\001\000" +
    "\004\103\u02e0\001\001\000\034\074\253\106\262\107\323" +
    "\114\275\125\u017c\130\u02de\131\u017f\144\u018b\162\220\164" +
    "\231\166\317\172\247\176\256\001\001\000\002\001\001" +
    "\000\052\073\340\074\253\077\314\101\224\105\u02dc\106" +
    "\262\107\323\114\275\124\272\125\331\131\241\144\233" +
    "\157\341\161\304\162\220\164\231\166\317\170\300\172" +
    "\247\176\256\001\001\000\034\074\253\106\262\107\323" +
    "\114\275\125\u017c\130\u02dd\131\u017f\144\u018b\162\220\164" +
    "\231\166\317\172\247\176\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\073\340\074" +
    "\253\077\314\101\224\105\u02e2\106\262\107\323\114\275" +
    "\124\272\125\331\131\241\144\233\157\341\161\304\162" +
    "\220\164\231\166\317\170\300\172\247\176\256\001\001" +
    "\000\002\001\001\000\034\074\253\106\262\107\323\114" +
    "\275\125\u017c\130\u02e7\131\u017f\144\u018b\162\220\164\231" +
    "\166\317\172\247\176\256\001\001\000\002\001\001\000" +
    "\052\073\340\074\253\077\314\101\224\105\u02e5\106\262" +
    "\107\323\114\275\124\272\125\331\131\241\144\233\157" +
    "\341\161\304\162\220\164\231\166\317\170\300\172\247" +
    "\176\256\001\001\000\034\074\253\106\262\107\323\114" +
    "\275\125\u017c\130\u02e6\131\u017f\144\u018b\162\220\164\231" +
    "\166\317\172\247\176\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\074\253\106\262\107" +
    "\323\114\275\125\u017c\131\u017f\144\u02ee\157\u02ed\162\220" +
    "\164\231\166\317\172\247\176\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\073\340" +
    "\074\253\077\314\101\224\105\u02f0\106\262\107\323\114" +
    "\275\124\272\125\331\131\241\144\233\157\341\161\304" +
    "\162\220\164\231\166\317\170\300\172\247\176\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u02f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\060" +
    "\u02f6\061\u0184\073\u0189\074\253\077\314\101\224\105\u0188" +
    "\106\262\107\323\114\275\124\272\125\331\131\241\144" +
    "\u0185\157\341\161\304\162\220\164\231\166\317\170\300" +
    "\172\247\176\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u0300\013\133\014\135\001\001" +
    "\000\002\001\001\000\014\012\u0304\013\133\014\135\020" +
    "\u0302\021\u0303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\u0306\013\133\014\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\077\070\100" +
    "\u030c\125\066\175\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\077\070\100\u030f\125\066\175\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\055\u0312" +
    "\056\200\057\201\156\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u0315\024\210\001\001\000\002" +
    "\001\001\000\004\031\u0317\001\001\000\074\030\345\032" +
    "\226\033\315\073\340\074\253\077\314\101\224\105\230" +
    "\106\262\107\323\114\275\124\272\125\331\126\320\131" +
    "\241\142\307\143\327\144\233\150\334\151\234\152\255" +
    "\157\341\161\304\162\220\164\231\166\317\170\300\172" +
    "\247\176\256\001\001\000\002\001\001\000\012\055\u031a" +
    "\056\200\057\201\156\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\u031d\024\210\001\001\000\002" +
    "\001\001\000\004\031\u031f\001\001\000\074\030\345\032" +
    "\226\033\315\073\340\074\253\077\314\101\224\105\230" +
    "\106\262\107\323\114\275\124\272\125\331\126\320\131" +
    "\241\142\307\143\327\144\233\150\334\151\234\152\255" +
    "\157\341\161\304\162\220\164\231\166\317\170\300\172" +
    "\247\176\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\077\070\100\u0323\125\066\175\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\u0326\001\001" +
    "\000\004\153\u0327\001\001\000\004\154\u0328\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\u0338\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\u0330\013" +
    "\133\014\135\016\u032f\017\u032e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\u0330\013\133\014\135\017\u0334" +
    "\001\001\000\002\001\001\000\006\023\u0336\024\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\u0339" +
    "\012\126\013\133\014\135\125\u0212\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\125\u033c\001\001\000\002" +
    "\001\001\000\012\055\u033e\056\200\057\201\156\175\001" +
    "\001\000\002\001\001\000\004\135\u0340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAspectParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAspectParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public org.phpaspect.weaver.java_cup.runtime.Symbol do_action(
    int                        act_num,
    org.phpaspect.weaver.java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAspectParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;
		
		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}
	
	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
			((ReflectionCallExpression) property).setReceiver (dispatcher);
			dispatcher = property;
		} else if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher =  new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}
	
	private List<PHPMarker> markers = new ArrayList<PHPMarker>();
		
	public List<PHPMarker> getPhpErrorMarkers(){
		return markers;
	}
	
	/**
     * This method is called when a syntax error has been detected and recovery is about to be invoked.
     * The super class just emit a "Syntax error" error message.
     * @param cur_token the current lookahead Symbol.
     */
    public void syntax_error(Symbol cur_token){
        //System.out.println("syntax_error:"+cur_token);
        //super.syntax_error(cur_token,info);
        int state = ((Symbol) stack.peek()).parse_state;
        short[] rowOfProbe = action_tab[state];
        PHPMarker phpErrorMarker = handleSyntaxError(cur_token.sym, (String)cur_token.value, rowOfProbe, cur_token.left, cur_token.right, getCurrentLine());
    	markers.add(phpErrorMarker);
    }
    
    	
	public PHPMarker handleSyntaxError(int currToken, String currText, short[] rowOfProbe, int startPosition, int endPosition, int lineNumber) {
		String unexpectedString = "";
		boolean addUnexpected;

		if (currToken == PHPAspectSymbols.EOF) {
			addUnexpected = true;
			unexpectedString = "End of File";
			startPosition = --endPosition;
		} else if (currToken == PHPAspectSymbols.T_CONSTANT_ENCAPSED_STRING) {
			addUnexpected = true;
			endPosition = startPosition + currText.trim().length();
			unexpectedString = "String";
		} else {
			addUnexpected = currText != null && currText.trim().length() > 0;
			if (addUnexpected) {
				unexpectedString = currText.trim();
				endPosition = startPosition + unexpectedString.length();
				unexpectedString = '\'' + unexpectedString + '\'';
			}
		}

		//IntList list = new IntList();
		List list = new ArrayList();
		for (int probe = 0; probe < rowOfProbe.length; probe += 2) {
			int curr = rowOfProbe[probe];
			String value = getConstantValue(curr);
			if (value != null && !value.equals("")) {
				list.add(value);
			}
		}
		int listSize = list.size();
		if (listSize > 3) {
			listSize = 0;
		}

		String description = "";

		if (!addUnexpected) {
			switch (listSize) {
				case 0:
					description = "Syntax Error";
					break;
				case 1:
					description = "Syntax Error: expecting: " + list.get(0);
					break;
				case 2:
					description = "Syntax Error: expecting: " + list.get(0) + " or " + list.get(1);
					break;
				case 3:
					description = "Syntax Error: expecting: " + list.get(0) + " or " + list.get(1) + " or " + list.get(2);
					break;
			}
		} else {
			switch (listSize) {
				case 0:
					description = "Syntax Error: unexpected " + unexpectedString;
					break;
				case 1:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0);
					break;
				case 2:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0) + " or " + list.get(1);
					break;
				case 3:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0) + " or " + list.get(1) + " or " + list.get(2);
					break;
			}
		}
		UserData userData = PHPCodeDataFactory.createUserData(null, startPosition, endPosition, startPosition, lineNumber);
		return new PHPMarker(IPHPMarker.ERROR, description, userData);
	}
	
	private String getConstantValue(int tag) {
		String rv = PHPAspectSymbolsUtils.getTokenName(tag);
		if (rv != null) {
			return '\'' + rv + '\'';
		}
		if (tag == PHPAspectSymbols.T_STRING) {
			return "Identifier";
		}
		if (tag == PHPAspectSymbols.T_VARIABLE) {
			return "Variable";
		}

		return null;
	}
    
    public int getCurrentLine(){
        PHPAspectLexer lexer = (PHPAspectLexer)getScanner();
        //TODO: fix this bug
        return lexer.getCurrentLine()+1;
    }

    public int getLength() {
        PHPAspectLexer lexer = (PHPAspectLexer)getScanner();
        return lexer.getLength();
    }
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PHPAspectParser$actions {
  private final PHPAspectParser parser;

  /** Constructor */
  CUP$PHPAspectParser$actions(PHPAspectParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final org.phpaspect.weaver.java_cup.runtime.Symbol CUP$PHPAspectParser$do_action(
    int                        CUP$PHPAspectParser$act_num,
    org.phpaspect.weaver.java_cup.runtime.lr_parser CUP$PHPAspectParser$parser,
    java.util.Stack            CUP$PHPAspectParser$stack,
    int                        CUP$PHPAspectParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      org.phpaspect.weaver.java_cup.runtime.Symbol CUP$PHPAspectParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAspectParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String value = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("string_st",83, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String value = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("string_st",83, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",116, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name); 
	RESULT = constant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant",118, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("isset_variables",115, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("isset_variables",115, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList();
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList();
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",82, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",81, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int numright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String num = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft,numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",81, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft,stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",81, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference indexedVar = new ArrayVariableReference(startleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int stringleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableReference varName = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // encaps_var ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",80, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // encaps_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",79, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",79, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",79, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",78, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",77, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",77, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // assignment_list_element ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",76, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",76, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // assignment_list_element ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",76, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list",75, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listElementsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List listElements = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int elementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression element = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list",75, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref = (Integer)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",74, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(1);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",74, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_name",73, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // variable_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_name",73, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // object_dim_list ::= variable_name 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",72, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = varArray;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",72, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = varArray;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",72, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // object_property ::= variable_without_objects 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_property",71, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // object_property ::= object_dim_list 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_property",71, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = expr; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dim_offset",70, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // dim_offset ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dim_offset",70, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;	 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("compound_variable",69, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // compound_variable ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("compound_variable",69, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // reference_variable ::= compound_variable 
            {
              Expression RESULT =null;
		int comp_varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int comp_varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression comp_var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",68, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression varName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",68, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression varName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",68, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // base_variable ::= static_member 
            {
              Expression RESULT =null;
		int staticFieldAccessleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int staticFieldAccessright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticFieldAccess staticFieldAccess = (StaticFieldAccess)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // base_variable ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",120, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",124, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",124, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              StaticFieldAccess RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_member",114, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",112, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",112, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // method_or_not ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_or_not",94, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_or_not",94, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              Expression RESULT =null;
		int memberPropertyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int memberPropertyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression memberProperty = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			result = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			result = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_property",113, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_properties",95, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT =null;
		int variablesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int variablePropertyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int variablePropertyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression variableProperty = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_properties",95, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable",98, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int memberPropertyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int memberPropertyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression memberProperty = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int propertyListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List propertyList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// get the last property 
	Expression firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			firstVarProperty = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			firstVarProperty = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;
	
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}

	RESULT = dispatcher;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable",98, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // rw_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("rw_variable",111, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // w_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("w_variable",86, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // r_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("r_variable",109, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ewvright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression ewv = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr",67, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr",67, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",66, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",66, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",66, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",66, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("possible_comma",65, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("possible_comma",65, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",64, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",64, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Scalar scalar = (Scalar)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classConstantright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // scalar ::= string_st 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",63, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	TypeReference cname = new TypeReference(classNameleft, classNameright, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, cname, vname); 
	RESULT = constant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",123, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classConstantright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // static_scalar ::= string_st 
            {
              Expression RESULT =null;
		int strleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int strright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String str = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Scalar scalar = (Scalar)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",62, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // common_scalar ::= T_FILE 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // common_scalar ::= T_LINE 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",61, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",60, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",60, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = expr;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",122, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",121, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT =null;
		int variablesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",121, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // dynamic_class_name_reference ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	 RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",119, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int firstVarPropertyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int firstVarPropertyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression firstVarProperty = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int propertyListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List propertyList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;

	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}	
	
	RESULT = dispatcher;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",119, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression className = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",117, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // class_name_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	TypeReference classReference = new TypeReference(classNameleft, classNameright, className);
	RESULT = classReference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",117, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // fully_qualified_class_name ::= T_STRING 
            {
              TypeReference RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	TypeReference name = new TypeReference(classNameleft, classNameright, className);
	RESULT = name;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",87, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression reflectionName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reflectionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression reflectionName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters); 
	RESULT = functionInvocation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, name, parameters); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = scalar; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int ifTrueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ifTrueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression ifTrue = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ifFalseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ifFalseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression ifFalse = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = expr; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression className = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression className = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ctorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int reftokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reftokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object reftoken = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression className = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ctorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation, varComment);
	RESULT = assignment;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int reftokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int reftokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object reftoken = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int refvarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int refvarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression refvar = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar, varComment); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr, varComment); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List varList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object close = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",56, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",56, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List exprList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_expr",55, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_expr",55, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",54, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",54, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int constNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",89, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int constNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",89, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",88, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // member_modifier ::= T_FINAL 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // member_modifier ::= T_ABSTRACT 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // member_modifier ::= T_STATIC 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // member_modifier ::= T_PRIVATE 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // member_modifier ::= T_PROTECTED 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // member_modifier ::= T_PUBLIC 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // method_modifiers ::= non_empty_member_modifiers 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",90, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // method_modifiers ::= 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",90, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // variable_modifiers ::= T_VAR 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock var = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",110, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // variable_modifiers ::= non_empty_member_modifiers 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",110, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",91, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",91, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // class_statement ::= T_VAR_COMMENT 
            {
              List RESULT =null;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varComment = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		


              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block body = (Block)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(startleft, bodyright, functionNameleft, functionNameright, functionName, modifierValue, paramList, body, isReference, docBlock);
	List methodList = new LinkedList();
	methodList.add(methodDeclaration);
	RESULT = methodList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              List RESULT =null;
		int decListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	List constList = new LinkedList();
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference)decl[0];
		Expression initializer = (Expression)decl[1];
		
		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock)decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		constList.add (new ClassConstantDeclaration(constant, initializer, start, end, docBlock));
	}
	RESULT = constList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	List constList = new LinkedList();
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		constList.add (new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifier.doc));
	}
	RESULT = constList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",52, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // class_statement_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",51, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int classStatementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classStatementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List classStatement = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if (classStatement != null) {
		list.addAll(classStatement);
	}
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",51, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",50, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",50, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment); 
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",50, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",50, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression varName = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",49, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",49, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // global_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",49, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var_list",48, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var_list",48, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",47, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",46, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",46, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int arrayright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object array = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	TypeReference reference = new TypeReference(arrayleft, arrayright, "array");
	RESULT = reference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // optional_class_type ::= T_STRING 
            {
              TypeReference RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	TypeReference reference = new TypeReference(classNameleft, classNameright, className);
	RESULT = reference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",108, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		TypeReference classType = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int refleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int refright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object ref = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		TypeReference classType = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference classType = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int refleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object ref = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		TypeReference classType = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",45, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int parameterleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int parameterright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",44, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int parameterright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",44, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter_list",43, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter_list",43, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_else_single",42, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_else_single",42, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("else_single",41, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("else_single",41, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int elseifListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List[] elseifList = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int colonleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
			
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",40, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",40, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int elseifListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List[] elseifList = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int iftrueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int iftrueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement iftrue = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("elseif_list",39, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("elseif_list",39, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int colonright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object colon = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("while_statement",38, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("while_statement",38, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_separator",37, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_separator",37, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statements = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",36, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statements = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",36, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",36, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",35, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",35, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",35, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",35, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List[] lists = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_list",34, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_list",34, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_statement",33, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_statement",33, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",32, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",32, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_statement",31, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_statement",31, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",30, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",30, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",29, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",29, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",107, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",107, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("implements_list",106, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("implements_list",106, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",85, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",85, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = value;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_entry",84, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",105, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",105, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // class_entry_type ::= T_FINAL T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // class_entry_type ::= T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",104, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Iterator statementIt = statementList.iterator();
	while (statementIt.hasNext()) {
		Statement statement = (Statement)statementIt.next();
		if (statement.getKind() == Declaration.D_METHOD) {
			MethodDeclaration methodDeclaration = (MethodDeclaration)statement;
			methodDeclaration.setDeclaringTypeName(className);
		}
	}
	
	Block block = new Block(blockStartleft, blockEndright, statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, classNameleft, classNameright, className, interfaces, block, start);
	RESULT = interfaceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",103, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String className = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int superClassleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int superClassright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		TypeReference superClass = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Iterator statementIt = statementList.iterator();
	while (statementIt.hasNext()) {
		Statement statement = (Statement)statementIt.next();
		if (statement.getKind() == Declaration.D_METHOD) {
			MethodDeclaration methodDeclaration = (MethodDeclaration)statement;
			methodDeclaration.setDeclaringTypeName(className);
		}
	}
	
	Block block = new Block(blockStartleft, blockEndright, statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, classNameleft, classNameright, modifier.modifier, className, superClass, interfaces, block, modifier.doc);
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",103, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int paramListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int paramListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List paramList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, blockEndright, statementList);
	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, blockEndright, functionNameleft, functionNameright, functionName, Modifiers.AccDefault, paramList, block, isReference.booleanValue(), start);
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",102, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("is_reference",53, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("is_reference",53, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classDeclarationright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",97, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int functionDeclarationright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",96, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("use_filename",28, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("use_filename",28, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variable",27, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variables",26, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variables",26, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int catch_wordright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object catch_word = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int catchBlockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchBlockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object catchBlockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List catchList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchBlockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catchBlockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catch",101, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catch_statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catch_statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",100, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catch_statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",100, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catches",99, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catches",99, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unticked_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varCommentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varComment = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// TODO: var comment should be added as ast node

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unticked_statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).value;
		int tryBlockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).left;
		int tryBlockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).right;
		Object tryBlockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).value;
		int tryListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left;
		int tryListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).right;
		List tryList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).value;
		int tryBlockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tryBlockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object tryBlockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int catch_wordleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int catch_wordright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object catch_word = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableReference var = (VariableReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int catchBlockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int catchBlockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object catchBlockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int catchListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List catchList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchBlockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchBlockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object catchBlockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchesListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catchesListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List catchesList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List[] lists = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String start = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int closeParleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeParright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object closePar = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List exprList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseBlockleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int caseBlockright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block caseBlock = (Block)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int initializationsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int initializationsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List initializations = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List conditions = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int increasementsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int increasementsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List increasements = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int colonleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int colonright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object colon = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int ifTrueStatementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int ifTrueStatementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List ifTrueStatementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int elseifleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int elseifright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List[] elseif = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int iffalseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iffalseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iffalse = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int iftrueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iftrueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iftrue = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elseifleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int elseifright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List[] elseif = (List[])((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int iffalseleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int iffalseright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement iffalse = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(tokenleft, endright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",25, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("statement",22, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int haltright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object halt = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object close = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",24, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",24, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",24, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",24, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inner_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",23, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",23, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // aspect_subtype_or_not ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_subtype_or_not",11, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // aspect_subtype_or_not ::= T_PLUS 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_subtype_or_not",11, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // aspect_signature ::= T_STRING 
            {
              String RESULT =null;
		int strleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int strright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String str = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = str.toString();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",10, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // aspect_signature ::= T_TIMES 
            {
              String RESULT =null;
		int timesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int timesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object times = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = times.toString();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",10, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // aspect_signature ::= aspect_signature T_STRING 
            {
              String RESULT =null;
		int beginleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String end = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",10, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // aspect_signature ::= aspect_signature T_TIMES 
            {
              String RESULT =null;
		int beginleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",10, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // aspect_inter_type_signature ::= T_RGREATER T_STRING T_LGREATER 
            {
              String RESULT =null;
		int signleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_signature",9, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // aspect_inter_type_signature ::= aspect_signature 
            {
              String RESULT =null;
		int signleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int signright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String sign = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_signature",9, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // aspect_inter_type_declaration_r ::= aspect_inter_type_signature aspect_subtype_or_not 
            {
              AspectInterTypeDeclaration RESULT =null;
		int signleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int subtypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int subtyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Boolean subtype = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectInterTypeDeclaration(signleft, signright, sign, subtype);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_r",8, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // aspect_inter_type_declaration ::= aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int decleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int decright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration dec = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(dec);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration",6, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aspect_inter_type_declaration ::= aspect_inter_type_declaration T_COMMA aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int decright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration dec = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(dec);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration",6, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aspect_inter_type_field_declaration ::= aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, exprright, interType, varId, expr));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",5, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aspect_inter_type_field_declaration ::= aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE 
            {
              List RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, varright, interType, varId, null));
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",5, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aspect_inter_type_field_declaration ::= aspect_inter_type_field_declaration T_COMMA aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, exprright, interType, varId, expr));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",5, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aspect_inter_type_field_declaration ::= aspect_inter_type_field_declaration T_COMMA aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, varright, interType, varId, null));
	RESULT = list;		

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",5, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // non_empty_aspect_joinpoint_parameters_list ::= non_empty_aspect_joinpoint_parameters_list T_COMMA aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.add(interType);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_aspect_joinpoint_parameters_list",15, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // non_empty_aspect_joinpoint_parameters_list ::= aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(interType);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_aspect_joinpoint_parameters_list",15, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aspect_joinpoint_parameters ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint_parameters",14, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aspect_joinpoint_parameters ::= non_empty_aspect_joinpoint_parameters_list 
            {
              List RESULT =null;
		int paramsListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List paramsList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint_parameters",14, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aspect_inter_type_declaration_or_variable ::= T_VARIABLE 
            {
              AspectInterTypeDeclaration RESULT =null;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectInterTypeDeclaration(varleft, varright, var);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_or_variable",7, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aspect_inter_type_declaration_or_variable ::= aspect_inter_type_declaration_r 
            {
              AspectInterTypeDeclaration RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = interType;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_or_variable",7, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aspect_joinpoint ::= T_NEW T_OPEN_PARENTHESE aspect_inter_type_declaration_r T_OPEN_PARENTHESE aspect_joinpoint_parameters T_CLOSE_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List params = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectConstructionJoinpoint(startleft, endright, interType, params);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint",18, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aspect_joinpoint ::= T_STRING T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int ptNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ptNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String ptName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	RESULT = new AspectPointcutReference(ptNameleft, ptNameright, ptName);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint",18, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aspect_pointcut ::= aspect_joinpoint 
            {
              Expression RESULT =null;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = pt;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aspect_pointcut ::= T_NOT aspect_pointcut 
            {
              Expression RESULT =null;
		int tokenleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, ptright, pt, UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aspect_pointcut ::= T_OPEN_PARENTHESE aspect_pointcut T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	//ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, pt);
	RESULT = pt; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_AND aspect_pointcut 
            {
              Expression RESULT =null;
		int pt1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression pt1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int pt2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new InfixExpression(pt1left, pt2right, pt1 , InfixExpression.OP_BOOL_AND, pt2);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_OR aspect_pointcut 
            {
              Expression RESULT =null;
		int pt1left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression pt1 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int pt2right = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt2 = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new InfixExpression(pt1left, pt2right, pt1, InfixExpression.OP_BOOL_OR, pt2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",17, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aspect_pointcut_parameter ::= aspect_inter_type_declaration_r T_VARIABLE 
            {
              AspectPointcutParameter RESULT =null;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	AspectPointcutParameter aspectPointcutParameter = new AspectPointcutParameter(interTypeleft, varright, interType, v);
	RESULT = aspectPointcutParameter;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter",13, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aspect_pointcut_parameter_list ::= 
            {
              List RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",12, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aspect_pointcut_parameter_list ::= aspect_pointcut_parameter_list T_COMMA aspect_pointcut_parameter 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptArgleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptArgright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectPointcutParameter ptArg = (AspectPointcutParameter)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(ptArg);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",12, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aspect_pointcut_parameter_list ::= aspect_pointcut_parameter 
            {
              List RESULT =null;
		int ptArgleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptArgright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectPointcutParameter ptArg = (AspectPointcutParameter)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(ptArg);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",12, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aspect_statement ::= T_AFTER T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.After, list, pt, block);
	List s = new LinkedList();
	s.add(aspectCodeAdviceDeclaration);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aspect_statement ::= T_AROUND T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.Around, list, pt, block);
	List s = new LinkedList();
	s.add(aspectCodeAdviceDeclaration);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aspect_statement ::= T_BEFORE T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AdviceType.Before, list, pt, block);
	List s = new LinkedList();
	s.add(aspectCodeAdviceDeclaration);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aspect_statement ::= method_modifiers T_POINTCUT T_STRING T_OPEN_PARENTHESE aspect_pointcut_parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_SEMICOLON 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int ptNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int ptNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String ptName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int argsleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int argsright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List args = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	AspectPointcutDeclaration aspectPointcutDeclaration = new AspectPointcutDeclaration(modifierleft, endright, ptName, args, expr);
	List s = new LinkedList();
	s.add(aspectPointcutDeclaration);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aspect_statement ::= method_modifiers T_FUNCTION is_reference aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interTypeleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int interTyperight = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List interType = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int functionNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block body = (Block)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}

	AspectInterTypeMethodDeclaration interTypeMethodDeclaration =
		new AspectInterTypeMethodDeclaration(startleft, bodyright, functionNameleft, functionNameright, interType, functionName, modifierValue, paramList, body, isReference, docBlock);
	List methodDeclaration = new LinkedList();
	methodDeclaration.add(methodDeclaration);
	RESULT = methodDeclaration;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aspect_statement ::= variable_modifiers aspect_inter_type_field_declaration T_SEMICOLON 
            {
              List RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	//List s = new LinkedList();
	//AspectInterTypeFieldsDeclaration aspectInterTypeFieldsDeclaration = new AspectInterTypeFieldsDeclaration(modifierleft, endright, modifier.intValue(), false, decList);
	//s.add(aspectInterTypeFieldsDeclaration);
	//RESULT = s;
	List constList = new LinkedList();
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int lstart = variable.sourceStart();
		int lend = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		constList.add (new PHPFieldDeclaration(variable, initializer, lstart, lend, modifier.modifier, modifier.doc));
	}
	RESULT = constList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aspect_statement ::= T_DECLARE T_PARENTS T_NEKUDOTAIM fully_qualified_class_name extends_from implements_list T_SEMICOLON 
            {
              List RESULT =null;
		int startleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int classNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		TypeReference className = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int superClassleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int superClassright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference superClass = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List s = new LinkedList();
	s.add(new AspectInterTypeParentDeclaration(startleft, endright, className, superClass, interfaces));
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aspect_statement ::= class_statement 
            {
              List RESULT =null;
		int classStatementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classStatementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List classStatement = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",4, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // aspect_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement_list",3, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // aspect_statement_list ::= aspect_statement_list aspect_statement 
            {
              List RESULT =null;
		int listleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int aspectStatementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int aspectStatementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List aspectStatement = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(aspectStatement);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement_list",3, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // aspect_entry_type ::= T_FINAL T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",2, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // aspect_entry_type ::= T_ABSTRACT T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",2, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // aspect_entry_type ::= T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT =null;
		int valueleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",2, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // aspect_isPersistent ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_isPersistent",16, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // aspect_isPersistent ::= T_PERSESSION 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_isPersistent",16, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // unticked_aspect_declaration_statement ::= aspect_entry_type T_STRING extends_from implements_list aspect_isPersistent T_CURLY_OPEN aspect_statement_list T_CURLY_CLOSE T_SEMICOLON 
            {
              AspectDeclaration RESULT =null;
		int modifierleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int modifierright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int aspectNameleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int aspectNameright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		String aspectName = (String)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int superClassleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int superClassright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		TypeReference superClass = (TypeReference)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interfacesleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int interfacesright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List interfaces = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int persistentleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int persistentright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Boolean persistent = (Boolean)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int blockStartright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object blockStart = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int blockEndleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int blockEndright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object blockEnd = (Object)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	Iterator statementIt = statementList.iterator();
	while (statementIt.hasNext()) {
		Statement statement = (Statement)statementIt.next();
		if (statement.getKind() == Declaration.D_METHOD) {
			MethodDeclaration methodDeclaration = (MethodDeclaration)statement;
			methodDeclaration.setDeclaringTypeName(aspectName);
		}
	}

	Block block = new Block(blockStartleft, blockEndright, statementList);
	AspectDeclaration aspectDeclaration = new AspectDeclaration(
		modifierleft, blockEndright, aspectNameleft, aspectNameright, modifier.modifier,
		aspectName, superClass, interfaces, persistent, block, modifier.doc);
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_aspect_declaration_statement",1, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // aspect_declaration_statement ::= unticked_aspect_declaration_statement 
            {
              AspectDeclaration RESULT =null;
		int aspectDeclarationleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int aspectDeclarationright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectDeclaration aspectDeclaration = (AspectDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_declaration_statement",0, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= aspect_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectDeclaration statement = (AspectDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement",21, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",20, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",20, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int start_valright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PHPAspectParser$parser.done_parsing();
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT =null;
		int statementListleft = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((org.phpaspect.weaver.java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPModuleDeclaration program = new PHPModuleDeclaration(statementListleft, statementListright, statementList);
	RESULT = program; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("thestart",19, ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((org.phpaspect.weaver.java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

