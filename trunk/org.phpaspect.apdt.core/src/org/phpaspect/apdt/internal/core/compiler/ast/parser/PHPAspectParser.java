
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Aug 25 01:00:05 CEST 2008
//----------------------------------------------------

package org.phpaspect.apdt.internal.core.compiler.ast.parser;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.internal.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.phpaspect.apdt.internal.core.compiler.ast.nodes.*;
import org.phpaspect.weaver.ast.parser.PHPAspectSymbolsUtils;

/** CUP v0.10k generated parser.
  * @version Mon Aug 25 01:00:05 CEST 2008
  */
public class PHPAspectParser extends AbstractASTParser {

  /** Default constructor. */
  public PHPAspectParser() {super();}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0180\000\002\015\003\000\002\002\004\000\002\172" +
    "\002\000\002\173\002\000\002\004\015\000\002\007\004" +
    "\000\002\007\002\000\002\010\003\000\002\010\007\000" +
    "\002\010\010\000\002\174\002\000\002\175\002\000\002" +
    "\010\016\000\002\010\011\000\002\010\012\000\002\010" +
    "\012\000\002\010\012\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\004\000\002\013\003\000" +
    "\002\014\005\000\002\014\012\000\002\006\003\000\002" +
    "\006\002\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\011\003\000\002\011\005\000\002\012\004" +
    "\000\002\012\004\000\002\012\003\000\002\012\003\000" +
    "\002\021\004\000\002\021\002\000\002\022\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\176" +
    "\002\000\002\023\006\000\002\023\011\000\002\023\014" +
    "\000\002\023\007\000\002\023\011\000\002\023\013\000" +
    "\002\023\007\000\002\023\004\000\002\023\005\000\002" +
    "\023\004\000\002\023\005\000\002\023\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\023\004\000" +
    "\002\023\005\000\002\023\007\000\002\023\012\000\002" +
    "\023\012\000\002\023\007\000\002\023\003\000\002\023" +
    "\017\000\002\023\005\000\002\135\003\000\002\135\002" +
    "\000\002\136\003\000\002\136\004\000\002\137\012\000" +
    "\002\024\003\000\002\024\005\000\002\025\003\000\002" +
    "\026\003\000\002\026\005\000\002\057\002\000\002\057" +
    "\003\000\002\171\003\000\002\171\002\000\002\167\003" +
    "\000\002\167\003\000\002\167\003\000\002\142\003\000" +
    "\002\142\004\000\002\142\004\000\002\143\002\000\002" +
    "\143\004\000\002\143\004\000\002\116\003\000\002\117" +
    "\002\000\002\117\004\000\002\144\002\000\002\144\004" +
    "\000\002\145\003\000\002\145\005\000\002\145\005\000" +
    "\002\145\003\000\002\027\002\000\002\027\004\000\002" +
    "\030\003\000\002\030\004\000\002\031\003\000\002\031" +
    "\006\000\002\032\003\000\002\032\006\000\002\033\003" +
    "\000\002\033\006\000\002\034\005\000\002\034\007\000" +
    "\002\035\005\000\002\035\006\000\002\035\006\000\002" +
    "\035\007\000\002\036\002\000\002\036\007\000\002\036" +
    "\006\000\002\037\003\000\002\037\003\000\002\040\003" +
    "\000\002\040\006\000\002\041\002\000\002\041\010\000" +
    "\002\042\002\000\002\042\011\000\002\043\002\000\002" +
    "\043\004\000\002\044\002\000\002\044\005\000\002\045" +
    "\003\000\002\045\002\000\002\046\003\000\002\046\005" +
    "\000\002\046\004\000\002\047\004\000\002\047\005\000" +
    "\002\047\006\000\002\047\007\000\002\047\003\000\002" +
    "\146\002\000\002\146\003\000\002\146\003\000\002\050" +
    "\003\000\002\050\002\000\002\051\003\000\002\051\003" +
    "\000\002\051\004\000\002\051\005\000\002\051\005\000" +
    "\002\051\006\000\002\052\005\000\002\052\003\000\002" +
    "\053\003\000\002\053\004\000\002\053\006\000\002\054" +
    "\005\000\002\054\007\000\002\054\003\000\002\054\005" +
    "\000\002\056\005\000\002\056\004\000\002\177\002\000" +
    "\002\200\002\000\002\056\014\000\002\056\003\000\002" +
    "\056\003\000\002\125\003\000\002\125\005\000\002\125" +
    "\002\000\002\150\003\000\002\150\003\000\002\124\002" +
    "\000\002\124\003\000\002\126\003\000\002\126\004\000" +
    "\002\127\003\000\002\127\003\000\002\127\003\000\002" +
    "\127\003\000\002\127\003\000\002\127\003\000\002\122" +
    "\005\000\002\122\007\000\002\122\003\000\002\122\005" +
    "\000\002\123\007\000\002\123\006\000\002\060\005\000" +
    "\002\060\003\000\002\061\002\000\002\061\003\000\002" +
    "\062\005\000\002\062\003\000\002\063\010\000\002\063" +
    "\005\000\002\063\006\000\002\063\010\000\002\063\005" +
    "\000\002\063\004\000\002\063\005\000\002\063\005\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\005\000\002\063\005\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\063\004" +
    "\000\002\063\004\000\002\063\004\000\002\063\004\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\005\000\002\063\005\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\063\005" +
    "\000\002\063\005\000\002\063\005\000\002\063\005\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\004\000\002\063\004\000\002\063\004\000\002\063" +
    "\004\000\002\063\005\000\002\063\005\000\002\063\005" +
    "\000\002\063\005\000\002\063\005\000\002\063\005\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\005\000\002\063\007\000\002\063\003\000\002\063" +
    "\004\000\002\063\004\000\002\063\004\000\002\063\004" +
    "\000\002\063\004\000\002\063\004\000\002\063\004\000" +
    "\002\063\004\000\002\063\004\000\002\063\003\000\002" +
    "\063\006\000\002\063\005\000\002\063\004\000\002\064" +
    "\006\000\002\064\010\000\002\064\010\000\002\064\006" +
    "\000\002\121\003\000\002\157\003\000\002\157\003\000" +
    "\002\161\006\000\002\161\003\000\002\163\004\000\002" +
    "\163\002\000\002\164\004\000\002\065\002\000\002\065" +
    "\004\000\002\065\005\000\002\066\002\000\002\066\005" +
    "\000\002\067\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\070\003\000\002\070" +
    "\003\000\002\070\004\000\002\070\004\000\002\070\006" +
    "\000\002\070\003\000\002\165\005\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\005\000\002\071\005\000\002\072\002\000\002\072" +
    "\004\000\002\073\002\000\002\073\003\000\002\074\007" +
    "\000\002\074\005\000\002\074\005\000\002\074\003\000" +
    "\002\075\003\000\002\075\003\000\002\147\003\000\002" +
    "\120\003\000\002\151\003\000\002\134\007\000\002\134" +
    "\003\000\002\131\004\000\002\131\002\000\002\153\005" +
    "\000\002\130\005\000\002\130\002\000\002\152\003\000" +
    "\002\152\004\000\002\154\005\000\002\166\003\000\002" +
    "\166\003\000\002\162\003\000\002\162\004\000\002\162" +
    "\003\000\002\076\006\000\002\076\006\000\002\076\003" +
    "\000\002\077\003\000\002\077\006\000\002\100\002\000" +
    "\002\100\003\000\002\101\003\000\002\101\003\000\002" +
    "\102\006\000\002\102\006\000\002\102\003\000\002\103" +
    "\003\000\002\103\005\000\002\104\003\000\002\104\004" +
    "\000\002\105\005\000\002\105\003\000\002\106\003\000" +
    "\002\106\006\000\002\106\002\000\002\107\002\000\002" +
    "\107\004\000\002\110\007\000\002\110\005\000\002\110" +
    "\005\000\002\110\003\000\002\110\010\000\002\110\006" +
    "\000\002\110\006\000\002\110\004\000\002\111\004\000" +
    "\002\111\004\000\002\111\002\000\002\112\003\000\002" +
    "\112\006\000\002\112\005\000\002\112\005\000\002\112" +
    "\010\000\002\112\005\000\002\113\003\000\002\113\003" +
    "\000\002\113\003\000\002\114\006\000\002\114\006\000" +
    "\002\114\004\000\002\114\004\000\002\114\006\000\002" +
    "\114\004\000\002\114\004\000\002\155\003\000\002\155" +
    "\005\000\002\160\005\000\002\156\003\000\002\115\003" +
    "\000\002\115\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0307\000\010\060\006\215\011\216\010\001\002\000" +
    "\002\001\001\000\004\010\015\001\002\000\002\001\uffe7" +
    "\000\004\002\014\001\002\000\004\060\013\001\002\000" +
    "\004\060\012\001\002\000\002\001\uffe6\000\002\001\uffe5" +
    "\000\002\001\000\000\002\001\uffff\000\004\071\017\001" +
    "\uffa8\000\006\003\u0308\010\030\001\002\000\004\003\022" +
    "\001\uffaf\000\004\072\024\001\uffa2\000\002\001\uffb0\000" +
    "\002\001\ufffe\000\006\003\025\010\030\001\002\000\002" +
    "\001\uff9d\000\004\122\031\001\uffa1\000\002\001\uffa0\000" +
    "\002\001\ufef7\000\006\003\032\010\030\001\002\000\002" +
    "\001\uff9e\000\002\001\uff9f\000\004\062\036\001\uffe8\000" +
    "\004\110\037\001\002\000\002\001\uffe9\000\002\001\ufffb" +
    "\000\236\003\156\004\203\005\213\006\144\007\044\010" +
    "\066\011\110\012\116\014\133\016\170\017\162\020\157" +
    "\021\100\023\065\025\140\027\214\032\141\034\171\040" +
    "\114\041\161\043\175\044\177\045\074\047\212\050\060" +
    "\051\045\052\211\053\135\054\205\055\063\065\070\066" +
    "\103\067\047\070\163\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\110\121\111\153\113" +
    "\057\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\144\043\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\214\075\215\117\216" +
    "\053\217\150\220\147\221\176\222\206\225\137\226\151" +
    "\227\115\001\uff53\000\002\001\ufee6\000\004\222\u0305\001" +
    "\002\000\002\001\uffbf\000\002\001\ufee9\000\006\012\u02fa" +
    "\225\u02fb\001\002\000\004\222\u02e5\001\002\000\004\222" +
    "\u02de\001\002\000\132\004\203\006\144\007\044\010\066" +
    "\011\110\012\116\016\170\032\141\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\164\142\165\124\171\204\172\050\174\107" +
    "\175\210\176\061\177\172\200\073\201\167\202\131\203" +
    "\174\204\127\205\071\210\134\222\206\225\137\226\151" +
    "\227\115\001\002\000\002\001\ufeff\000\070\031\330\123" +
    "\317\124\337\125\310\143\314\144\u02dc\145\311\146\331" +
    "\147\312\150\321\151\332\152\336\153\322\154\306\155" +
    "\320\156\335\157\334\160\315\161\333\162\327\163\323" +
    "\164\340\165\316\166\326\167\324\170\307\173\313\001" +
    "\002\000\002\001\uff4a\000\002\001\ufee5\000\002\001\ufeba" +
    "\000\036\127\u0154\130\u0157\131\u0155\132\u015d\133\u0158\134" +
    "\u015e\135\u015a\136\u015c\137\u0156\140\u0153\141\u0159\142\u015b" +
    "\174\ufec9\175\ufec9\001\ufecb\000\002\001\uff5a\000\006\016" +
    "\u02d8\222\u02d7\001\002\000\132\004\203\006\144\007\044" +
    "\010\066\011\110\012\116\016\170\032\141\054\205\055" +
    "\063\075\207\076\046\077\054\100\101\101\104\102\173" +
    "\103\041\104\067\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\164\142\165\124\171\204\172\050" +
    "\174\107\175\210\176\061\177\172\200\073\201\167\202" +
    "\131\203\174\204\127\205\071\210\134\222\206\225\137" +
    "\226\151\227\115\001\002\000\132\004\203\006\144\007" +
    "\044\010\066\011\110\012\116\016\170\032\141\054\205" +
    "\055\063\075\207\076\046\077\054\100\101\101\104\102" +
    "\173\103\041\104\067\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\222\206\225" +
    "\137\226\151\227\115\001\002\000\004\222\u02d1\001\002" +
    "\000\004\112\u02cf\001\002\000\004\222\u02be\001\002\000" +
    "\004\112\ufef7\001\ufe83\000\002\001\ufe98\000\004\222\u02b5" +
    "\001\002\000\132\004\203\006\144\007\044\010\066\011" +
    "\110\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\002\001\ufebe\000\132\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\222\206" +
    "\225\137\226\151\227\115\001\002\000\004\110\u029c\001" +
    "\002\000\002\001\uff4c\000\002\001\uff51\000\002\001\ufebd" +
    "\000\004\222\u0293\001\002\000\002\001\ufee4\000\002\001" +
    "\ufffc\000\004\222\u028c\001\002\000\002\001\ufee3\000\004" +
    "\073\u0281\001\ufec7\000\004\222\u027e\001\002\000\012\010" +
    "\066\012\116\114\113\225\137\001\002\000\002\001\ufeda" +
    "\000\010\110\360\206\361\222\ufec1\001\ufebc\000\006\122" +
    "\u0278\144\u0279\001\002\000\002\001\ufe82\000\134\004\203" +
    "\006\144\007\044\010\066\011\110\012\116\016\170\032" +
    "\141\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\144\u0275\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\002\001\ufe98\000\002\001\ufe84\000\002\001\uff4b\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\002\001\uffd8\000\002\001\uff09\000\012\010\u0208\012\u0263" +
    "\160\u01a1\166\u019c\001\002\000\132\004\203\006\144\007" +
    "\044\010\066\011\110\012\116\016\170\032\141\054\205" +
    "\055\063\075\207\076\046\077\054\100\101\101\104\102" +
    "\173\103\041\104\067\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\222\206\225" +
    "\137\226\151\227\115\001\002\000\132\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\222\206" +
    "\225\137\226\151\227\115\001\002\000\006\012\116\225" +
    "\374\001\002\000\132\004\203\006\144\007\044\010\066" +
    "\011\110\012\116\016\170\032\141\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\164\142\165\124\171\204\172\050\174\107" +
    "\175\210\176\061\177\172\200\073\201\167\202\131\203" +
    "\174\204\127\205\071\210\134\222\206\225\137\226\151" +
    "\227\115\001\002\000\020\042\uff52\214\u025d\215\117\216" +
    "\053\217\150\220\147\221\176\001\uff55\000\132\004\203" +
    "\006\144\007\044\010\066\011\110\012\116\016\170\032" +
    "\141\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\002\001" +
    "\ufed9\000\002\001\uffc6\000\010\010\356\012\116\225\137" +
    "\001\002\000\004\222\u0251\001\002\000\006\174\u024f\175" +
    "\u0250\001\002\000\004\110\375\001\ufeab\000\004\222\u0238" +
    "\001\002\000\132\004\203\006\144\007\044\010\066\011" +
    "\110\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\132\004\203\006\144\007\044\010\066" +
    "\011\110\012\116\016\170\032\141\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\164\142\165\124\171\204\172\050\174\107" +
    "\175\210\176\061\177\172\200\073\201\167\202\131\203" +
    "\174\204\127\205\071\210\134\222\206\225\137\226\151" +
    "\227\115\001\002\000\132\004\203\006\144\007\044\010" +
    "\066\011\110\012\116\016\170\032\141\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\222\206\225\137\226" +
    "\151\227\115\001\002\000\002\001\ufeea\000\002\001\ufed8" +
    "\000\002\001\uffad\000\002\001\uff4e\000\002\001\uff4d\000" +
    "\002\001\ufe98\000\002\001\ufeb6\000\002\001\uffae\000\002" +
    "\001\ufffd\000\002\001\ufffa\000\002\001\uff59\000\206\003" +
    "\264\004\203\005\213\006\144\007\044\010\066\011\110" +
    "\012\116\014\133\016\170\017\162\020\157\021\100\023" +
    "\065\025\140\027\214\032\141\034\171\040\114\041\161" +
    "\044\177\045\074\047\212\050\060\051\045\053\135\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\110\121\113\257\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\144\043" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\214\260\222\206\225\137\226\151\227" +
    "\115\001\002\000\002\001\ufeb7\000\134\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\144\u0214\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\132\004" +
    "\203\006\144\007\044\010\066\011\110\012\116\016\170" +
    "\032\141\054\205\055\063\075\207\076\046\077\054\100" +
    "\101\101\104\102\173\103\041\104\067\114\113\115\062" +
    "\116\125\117\106\120\165\121\143\126\120\164\142\165" +
    "\124\171\204\172\050\174\107\175\210\176\061\177\172" +
    "\200\073\201\167\202\131\203\174\204\127\205\071\210" +
    "\134\222\206\225\137\226\151\227\115\001\002\000\004" +
    "\010\u01f3\001\002\000\002\001\uffac\000\132\004\203\006" +
    "\144\007\044\010\066\011\110\012\116\016\170\032\141" +
    "\054\205\055\063\075\207\076\046\077\054\100\101\101" +
    "\104\102\173\103\041\104\067\114\113\115\062\116\125" +
    "\117\106\120\165\121\143\126\120\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\222" +
    "\206\225\137\226\151\227\115\001\002\000\004\222\u017b" +
    "\001\ufedb\000\132\004\203\006\144\007\044\010\066\011" +
    "\110\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\002\001\ufee8\000\004\222\u01d6\001\002" +
    "\000\132\004\203\006\144\007\044\010\066\011\110\012" +
    "\116\016\170\032\141\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\222\206\225\137\226\151\227\115\001" +
    "\002\000\002\001\ufee7\000\132\004\203\006\144\007\044" +
    "\010\066\011\110\012\116\016\170\032\141\054\205\055" +
    "\063\075\207\076\046\077\054\100\101\101\104\102\173" +
    "\103\041\104\067\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\164\142\165\124\171\204\172\050" +
    "\174\107\175\210\176\061\177\172\200\073\201\167\202" +
    "\131\203\174\204\127\205\071\210\134\222\206\225\137" +
    "\226\151\227\115\001\002\000\010\010\u01cd\160\u01a1\166" +
    "\u019c\001\002\000\002\001\uff4f\000\134\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\144\u01c7\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\002\001" +
    "\ufecc\000\002\001\ufecd\000\004\042\u0199\001\002\000\004" +
    "\222\u0194\001\ufeef\000\132\004\203\006\144\007\044\010" +
    "\066\011\110\012\116\016\170\032\141\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\222\206\225\137\226" +
    "\151\227\115\001\002\000\004\222\u018d\001\002\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\004\222\u017e\001\002\000\012\010\066\012\116\114\113" +
    "\225\137\001\002\000\002\001\uff54\000\132\004\203\006" +
    "\144\007\044\010\066\011\110\012\116\016\170\032\141" +
    "\054\205\055\063\075\207\076\046\077\054\100\101\101" +
    "\104\102\173\103\041\104\067\114\113\115\062\116\125" +
    "\117\106\120\165\121\143\126\120\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\222" +
    "\206\225\137\226\151\227\115\001\002\000\004\222\304" +
    "\001\002\000\004\222\215\001\002\000\006\010\220\114" +
    "\113\001\002\000\006\122\253\223\252\001\002\000\004" +
    "\127\221\001\002\000\002\001\ufe83\000\034\006\144\007" +
    "\044\010\230\016\170\076\224\077\054\100\101\101\104" +
    "\102\173\103\041\114\113\164\222\165\231\001\002\000" +
    "\034\006\144\007\044\010\230\016\170\076\224\077\054" +
    "\100\101\101\104\102\173\103\041\114\113\164\222\165" +
    "\231\001\002\000\002\001\ufee1\000\004\222\235\001\002" +
    "\000\002\001\uff92\000\002\001\ufee2\000\002\001\ufedd\000" +
    "\004\112\233\001\ufe83\000\034\006\144\007\044\010\230" +
    "\016\170\076\224\077\054\100\101\101\104\102\173\103" +
    "\041\114\113\164\222\165\231\001\002\000\002\001\ufedf" +
    "\000\004\010\234\001\002\000\002\001\ufedc\000\034\006" +
    "\144\007\044\010\230\016\170\076\224\077\054\100\101" +
    "\101\104\102\173\103\041\114\113\164\222\165\231\001" +
    "\ufed5\000\004\223\250\001\002\000\004\122\243\001\ufed3" +
    "\000\004\074\241\001\ufece\000\034\006\144\007\044\010" +
    "\230\016\170\076\224\077\054\100\101\101\104\102\173" +
    "\103\041\114\113\164\222\165\231\001\002\000\002\001" +
    "\ufecf\000\034\006\144\007\044\010\230\016\170\076\224" +
    "\077\054\100\101\101\104\102\173\103\041\114\113\164" +
    "\222\165\231\001\ufed2\000\002\001\ufed4\000\004\074\246" +
    "\001\ufed0\000\034\006\144\007\044\010\230\016\170\076" +
    "\224\077\054\100\101\101\104\102\173\103\041\114\113" +
    "\164\222\165\231\001\002\000\002\001\ufed1\000\002\001" +
    "\ufede\000\002\001\ufee0\000\210\003\264\004\203\005\213" +
    "\006\144\007\044\010\066\011\110\012\116\014\133\016" +
    "\170\017\162\020\157\021\100\023\065\025\140\027\214" +
    "\032\141\034\171\040\114\041\161\044\177\045\074\047" +
    "\212\050\060\051\045\053\135\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\110\121\113\257\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\144\043\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\214" +
    "\260\222\206\224\262\225\137\226\151\227\115\001\002" +
    "\000\006\010\220\114\113\001\002\000\004\127\255\001" +
    "\002\000\034\006\144\007\044\010\230\016\170\076\224" +
    "\077\054\100\101\101\104\102\173\103\041\114\113\164" +
    "\222\165\231\001\002\000\002\001\uff91\000\002\001\uffda" +
    "\000\004\012\273\001\002\000\002\001\uffc0\000\002\001" +
    "\uffdd\000\002\001\uffdb\000\002\001\uffd9\000\002\001\uff94" +
    "\000\210\003\264\004\203\005\213\006\144\007\044\010" +
    "\066\011\110\012\116\014\133\016\170\017\162\020\157" +
    "\021\100\023\065\025\140\027\214\030\270\032\141\034" +
    "\171\040\114\041\161\044\177\045\074\047\212\050\060" +
    "\051\045\053\135\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\110\121" +
    "\113\257\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\144\043\164\142\165\124\171\204\172\050" +
    "\174\107\175\210\176\061\177\172\200\073\201\167\202" +
    "\131\203\174\204\127\205\071\210\134\214\260\222\206" +
    "\225\137\226\151\227\115\001\002\000\002\001\uffde\000" +
    "\004\144\272\001\002\000\002\001\uffdc\000\002\001\uff93" +
    "\000\004\127\302\001\uff61\000\006\122\275\144\276\001" +
    "\002\000\004\012\277\001\002\000\002\001\uffc8\000\004" +
    "\127\300\001\uff63\000\034\006\144\007\044\010\230\016" +
    "\170\076\224\077\054\100\101\101\104\102\173\103\041" +
    "\114\113\164\222\165\231\001\002\000\002\001\uff62\000" +
    "\034\006\144\007\044\010\230\016\170\076\224\077\054" +
    "\100\101\101\104\102\173\103\041\114\113\164\222\165" +
    "\231\001\002\000\002\001\uff60\000\132\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\222\206" +
    "\225\137\226\151\227\115\001\002\000\070\031\330\123" +
    "\317\124\337\125\310\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\223\325\001" +
    "\002\000\132\004\203\006\144\007\044\010\066\011\110" +
    "\012\116\016\170\032\141\054\205\055\063\075\207\076" +
    "\046\077\054\100\101\101\104\102\173\103\041\104\067" +
    "\114\113\115\062\116\125\117\106\120\165\121\143\126" +
    "\120\164\142\165\124\171\204\172\050\174\107\175\210" +
    "\176\061\177\172\200\073\201\167\202\131\203\174\204" +
    "\127\205\071\210\134\222\206\225\137\226\151\227\115" +
    "\001\002\000\132\004\203\006\144\007\044\010\066\011" +
    "\110\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\132\004\203\006\144\007\044\010\066" +
    "\011\110\012\116\016\170\032\141\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\164\142\165\124\171\204\172\050\174\107" +
    "\175\210\176\061\177\172\200\073\201\167\202\131\203" +
    "\174\204\127\205\071\210\134\222\206\225\137\226\151" +
    "\227\115\001\002\000\132\004\203\006\144\007\044\010" +
    "\066\011\110\012\116\016\170\032\141\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\222\206\225\137\226" +
    "\151\227\115\001\002\000\132\004\203\006\144\007\044" +
    "\010\066\011\110\012\116\016\170\032\141\054\205\055" +
    "\063\075\207\076\046\077\054\100\101\101\104\102\173" +
    "\103\041\104\067\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\164\142\165\124\171\204\172\050" +
    "\174\107\175\210\176\061\177\172\200\073\201\167\202" +
    "\131\203\174\204\127\205\071\210\134\222\206\225\137" +
    "\226\151\227\115\001\002\000\132\004\203\006\144\007" +
    "\044\010\066\011\110\012\116\016\170\032\141\054\205" +
    "\055\063\075\207\076\046\077\054\100\101\101\104\102" +
    "\173\103\041\104\067\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\222\206\225" +
    "\137\226\151\227\115\001\002\000\132\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\222\206" +
    "\225\137\226\151\227\115\001\002\000\132\004\203\006" +
    "\144\007\044\010\066\011\110\012\116\016\170\032\141" +
    "\054\205\055\063\075\207\076\046\077\054\100\101\101" +
    "\104\102\173\103\041\104\067\114\113\115\062\116\125" +
    "\117\106\120\165\121\143\126\120\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\222" +
    "\206\225\137\226\151\227\115\001\002\000\132\004\203" +
    "\006\144\007\044\010\066\011\110\012\116\016\170\032" +
    "\141\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\132\004" +
    "\203\006\144\007\044\010\066\011\110\012\116\016\170" +
    "\032\141\054\205\055\063\075\207\076\046\077\054\100" +
    "\101\101\104\102\173\103\041\104\067\114\113\115\062" +
    "\116\125\117\106\120\165\121\143\126\120\164\142\165" +
    "\124\171\204\172\050\174\107\175\210\176\061\177\172" +
    "\200\073\201\167\202\131\203\174\204\127\205\071\210" +
    "\134\222\206\225\137\226\151\227\115\001\002\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\132\004\203\006\144\007\044\010\066\011\110\012\116" +
    "\016\170\032\141\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\164" +
    "\142\165\124\171\204\172\050\174\107\175\210\176\061" +
    "\177\172\200\073\201\167\202\131\203\174\204\127\205" +
    "\071\210\134\222\206\225\137\226\151\227\115\001\002" +
    "\000\132\004\203\006\144\007\044\010\066\011\110\012" +
    "\116\016\170\032\141\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\222\206\225\137\226\151\227\115\001" +
    "\002\000\132\004\203\006\144\007\044\010\066\011\110" +
    "\012\116\016\170\032\141\054\205\055\063\075\207\076" +
    "\046\077\054\100\101\101\104\102\173\103\041\104\067" +
    "\114\113\115\062\116\125\117\106\120\165\121\143\126" +
    "\120\164\142\165\124\171\204\172\050\174\107\175\210" +
    "\176\061\177\172\200\073\201\167\202\131\203\174\204" +
    "\127\205\071\210\134\222\206\225\137\226\151\227\115" +
    "\001\002\000\132\004\203\006\144\007\044\010\066\011" +
    "\110\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\210\003\264\004\203\005\213\006\144" +
    "\007\044\010\066\011\110\012\116\014\133\016\170\017" +
    "\162\020\157\021\100\023\065\025\140\027\214\032\141" +
    "\034\171\040\114\041\161\044\177\045\074\047\212\050" +
    "\060\051\045\053\135\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\110" +
    "\121\113\257\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\144\043\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\214\260\222" +
    "\206\224\u0116\225\137\226\151\227\115\001\002\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\132\004\203\006\144\007\044\010\066\011\110\012\116" +
    "\016\170\032\141\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\164" +
    "\142\165\124\171\204\172\050\174\107\175\210\176\061" +
    "\177\172\200\073\201\167\202\131\203\174\204\127\205" +
    "\071\210\134\222\206\225\137\226\151\227\115\001\002" +
    "\000\010\010\356\012\116\225\137\001\002\000\132\004" +
    "\203\006\144\007\044\010\066\011\110\012\116\016\170" +
    "\032\141\054\205\055\063\075\207\076\046\077\054\100" +
    "\101\101\104\102\173\103\041\104\067\114\113\115\062" +
    "\116\125\117\106\120\165\121\143\126\120\164\142\165" +
    "\124\171\204\172\050\174\107\175\210\176\061\177\172" +
    "\200\073\201\167\202\131\203\174\204\127\205\071\210" +
    "\134\222\206\225\137\226\151\227\115\001\002\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\132\004\203\006\144\007\044\010\066\011\110\012\116" +
    "\016\170\032\141\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\164" +
    "\142\165\124\171\204\172\050\174\107\175\210\176\061" +
    "\177\172\200\073\201\167\202\131\203\174\204\127\205" +
    "\071\210\134\222\206\225\137\226\151\227\115\001\002" +
    "\000\132\004\203\006\144\007\044\010\066\011\110\012" +
    "\116\016\170\032\141\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\222\206\225\137\226\151\227\115\001" +
    "\002\000\132\004\203\006\144\007\044\010\066\011\110" +
    "\012\116\016\170\032\141\054\205\055\063\075\207\076" +
    "\046\077\054\100\101\101\104\102\173\103\041\104\067" +
    "\114\113\115\062\116\125\117\106\120\165\121\143\126" +
    "\120\164\142\165\124\171\204\172\050\174\107\175\210" +
    "\176\061\177\172\200\073\201\167\202\131\203\174\204" +
    "\127\205\071\210\134\222\206\225\137\226\151\227\115" +
    "\001\002\000\132\004\203\006\144\007\044\010\066\011" +
    "\110\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\132\004\203\006\144\007\044\010\066" +
    "\011\110\012\116\016\170\032\141\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\164\142\165\124\171\204\172\050\174\107" +
    "\175\210\176\061\177\172\200\073\201\167\202\131\203" +
    "\174\204\127\205\071\210\134\222\206\225\137\226\151" +
    "\227\115\001\002\000\132\004\203\006\144\007\044\010" +
    "\066\011\110\012\116\016\170\032\141\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\222\206\225\137\226" +
    "\151\227\115\001\002\000\012\031\330\166\326\167\324" +
    "\170\307\001\uff1f\000\062\031\330\125\310\143\314\145" +
    "\311\146\331\147\312\150\321\151\332\152\336\153\322" +
    "\154\306\155\320\156\335\157\334\160\315\161\333\162" +
    "\327\163\323\164\340\165\316\166\326\167\324\170\307" +
    "\173\313\001\uff24\000\034\031\330\156\335\157\334\160" +
    "\315\161\333\162\327\163\323\164\340\165\316\166\326" +
    "\167\324\170\307\173\313\001\uff12\000\024\031\330\162" +
    "\327\163\323\164\340\165\316\166\326\167\324\170\307" +
    "\173\313\001\uff0f\000\024\031\330\162\327\163\323\164" +
    "\340\165\316\166\326\167\324\170\307\173\313\001\uff0d" +
    "\000\024\031\330\162\327\163\323\164\340\165\316\166" +
    "\326\167\324\170\307\173\313\001\uff0e\000\044\031\330" +
    "\152\336\153\322\154\306\155\320\156\335\157\334\160" +
    "\315\161\333\162\327\163\323\164\340\165\316\166\326" +
    "\167\324\170\307\173\313\001\uff22\000\052\031\330\147" +
    "\312\150\321\151\332\152\336\153\322\154\306\155\320" +
    "\156\335\157\334\160\315\161\333\162\327\163\323\164" +
    "\340\165\316\166\326\167\324\170\307\173\313\001\uff27" +
    "\000\002\001\uff0c\000\004\073\u0101\001\ufef3\000\002\001" +
    "\ufef5\000\006\012\116\225\374\001\002\000\004\112\367" +
    "\001\002\000\004\112\ufef7\001\ufef6\000\006\110\360\206" +
    "\361\001\ufebc\000\132\004\203\006\144\007\044\010\066" +
    "\011\110\012\116\016\170\032\141\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\164\142\165\124\171\204\172\050\174\107" +
    "\175\210\176\061\177\172\200\073\201\167\202\131\203" +
    "\174\204\127\205\071\210\134\222\206\225\137\226\151" +
    "\227\115\001\002\000\132\004\203\006\144\007\044\010" +
    "\066\011\110\012\116\016\170\032\141\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\222\206\225\137\226" +
    "\151\227\115\001\ufeb4\000\004\207\364\001\002\000\066" +
    "\031\330\123\317\124\337\125\310\143\314\145\311\146" +
    "\331\147\312\150\321\151\332\152\336\153\322\154\306" +
    "\155\320\156\335\157\334\160\315\161\333\162\327\163" +
    "\323\164\340\165\316\166\326\167\324\170\307\173\313" +
    "\001\ufeb3\000\002\001\ufeb9\000\070\031\330\111\366\123" +
    "\317\124\337\125\310\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\002\000" +
    "\002\001\ufeb8\000\006\012\116\225\137\001\002\000\002" +
    "\001\ufebf\000\006\012\116\225\374\001\002\000\006\110" +
    "\360\206\361\001\ufec1\000\006\110\360\206\361\001\ufec0" +
    "\000\004\110\375\001\ufeaa\000\132\004\203\006\144\007" +
    "\044\010\066\011\110\012\116\016\170\032\141\054\205" +
    "\055\063\075\207\076\046\077\054\100\101\101\104\102" +
    "\173\103\041\104\067\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\222\206\225" +
    "\137\226\151\227\115\001\002\000\070\031\330\111\377" +
    "\123\317\124\337\125\310\143\314\145\311\146\331\147" +
    "\312\150\321\151\332\152\336\153\322\154\306\155\320" +
    "\156\335\157\334\160\315\161\333\162\327\163\323\164" +
    "\340\165\316\166\326\167\324\170\307\173\313\001\002" +
    "\000\002\001\ufeb5\000\006\110\360\206\361\001\ufebb\000" +
    "\014\010\220\012\116\110\u0107\114\113\225\137\001\002" +
    "\000\002\001\ufead\000\002\001\ufeae\000\002\001\ufeb1\000" +
    "\002\001\ufef1\000\006\110\u010a\206\u010b\001\ufeb2\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\070\031\330\111\u0109\123\317\124\337\125\310\143\314" +
    "\145\311\146\331\147\312\150\321\151\332\152\336\153" +
    "\322\154\306\155\320\156\335\157\334\160\315\161\333" +
    "\162\327\163\323\164\340\165\316\166\326\167\324\170" +
    "\307\173\313\001\002\000\002\001\ufeac\000\132\004\203" +
    "\006\144\007\044\010\066\011\110\012\116\016\170\032" +
    "\141\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\132\004" +
    "\203\006\144\007\044\010\066\011\110\012\116\016\170" +
    "\032\141\054\205\055\063\075\207\076\046\077\054\100" +
    "\101\101\104\102\173\103\041\104\067\114\113\115\062" +
    "\116\125\117\106\120\165\121\143\126\120\164\142\165" +
    "\124\171\204\172\050\174\107\175\210\176\061\177\172" +
    "\200\073\201\167\202\131\203\174\204\127\205\071\210" +
    "\134\222\206\225\137\226\151\227\115\001\ufeb4\000\004" +
    "\207\u010d\001\002\000\002\001\ufeb0\000\070\031\330\111" +
    "\u010f\123\317\124\337\125\310\143\314\145\311\146\331" +
    "\147\312\150\321\151\332\152\336\153\322\154\306\155" +
    "\320\156\335\157\334\160\315\161\333\162\327\163\323" +
    "\164\340\165\316\166\326\167\324\170\307\173\313\001" +
    "\002\000\002\001\ufeaf\000\004\073\u0112\001\ufef4\000\002" +
    "\001\ufef2\000\014\010\220\012\116\110\u0107\114\113\225" +
    "\137\001\002\000\002\001\ufef0\000\020\031\330\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\uff1a\000" +
    "\004\031\330\001\uff1d\000\002\001\uffdd\000\002\001\uff85" +
    "\000\006\212\u011b\213\u011a\001\uff81\000\002\001\uffd6\000" +
    "\206\003\264\004\203\005\213\006\144\007\044\010\066" +
    "\011\110\012\116\014\133\016\170\017\162\020\157\021" +
    "\100\023\065\025\140\027\214\032\141\034\171\040\114" +
    "\041\161\044\177\045\074\047\212\050\060\051\045\053" +
    "\135\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\110\121\113\257\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\144\043\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\214\260\222\206\225\137\226" +
    "\151\227\115\001\002\000\004\222\u011c\001\002\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\070\031\330\123\317\124\337\125\310\143\314\145\311" +
    "\146\331\147\312\150\321\151\332\152\336\153\322\154" +
    "\306\155\320\156\335\157\334\160\315\161\333\162\327" +
    "\163\323\164\340\165\316\166\326\167\324\170\307\173" +
    "\313\223\u011e\001\002\000\206\003\264\004\203\005\213" +
    "\006\144\007\044\010\066\011\110\012\116\014\133\016" +
    "\170\017\162\020\157\021\100\023\065\025\140\027\214" +
    "\032\141\034\171\040\114\041\161\044\177\045\074\047" +
    "\212\050\060\051\045\053\135\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\110\121\113\257\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\144\043\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\214" +
    "\260\222\206\225\137\226\151\227\115\001\002\000\002" +
    "\001\uff84\000\002\001\uff80\000\206\003\264\004\203\005" +
    "\213\006\144\007\044\010\066\011\110\012\116\014\133" +
    "\016\170\017\162\020\157\021\100\023\065\025\140\027" +
    "\214\032\141\034\171\040\114\041\161\044\177\045\074" +
    "\047\212\050\060\051\045\053\135\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\110\121\113\257\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\144\043\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\214\260\222\206\225\137\226\151\227\115\001\uff83\000" +
    "\006\212\u0125\213\u0124\001\uff7f\000\004\211\u012d\001\002" +
    "\000\004\224\u012b\001\002\000\004\222\u0126\001\002\000" +
    "\132\004\203\006\144\007\044\010\066\011\110\012\116" +
    "\016\170\032\141\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\164" +
    "\142\165\124\171\204\172\050\174\107\175\210\176\061" +
    "\177\172\200\073\201\167\202\131\203\174\204\127\205" +
    "\071\210\134\222\206\225\137\226\151\227\115\001\002" +
    "\000\070\031\330\123\317\124\337\125\310\143\314\145" +
    "\311\146\331\147\312\150\321\151\332\152\336\153\322" +
    "\154\306\155\320\156\335\157\334\160\315\161\333\162" +
    "\327\163\323\164\340\165\316\166\326\167\324\170\307" +
    "\173\313\223\u0128\001\002\000\004\224\u0129\001\002\000" +
    "\002\001\uffdd\000\206\003\264\004\203\005\213\006\144" +
    "\007\044\010\066\011\110\012\116\014\133\016\170\017" +
    "\162\020\157\021\100\023\065\025\140\027\214\032\141" +
    "\034\171\040\114\041\161\044\177\045\074\047\212\050" +
    "\060\051\045\053\135\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\110" +
    "\121\113\257\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\144\043\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\214\260\222" +
    "\206\225\137\226\151\227\115\001\uff82\000\002\001\uffdd" +
    "\000\206\003\264\004\203\005\213\006\144\007\044\010" +
    "\066\011\110\012\116\014\133\016\170\017\162\020\157" +
    "\021\100\023\065\025\140\027\214\032\141\034\171\040" +
    "\114\041\161\044\177\045\074\047\212\050\060\051\045" +
    "\053\135\054\205\055\063\075\207\076\046\077\054\100" +
    "\101\101\104\102\173\103\041\104\067\110\121\113\257" +
    "\114\113\115\062\116\125\117\106\120\165\121\143\126" +
    "\120\144\043\164\142\165\124\171\204\172\050\174\107" +
    "\175\210\176\061\177\172\200\073\201\167\202\131\203" +
    "\174\204\127\205\071\210\134\214\260\222\206\225\137" +
    "\226\151\227\115\001\uff7e\000\004\144\u012e\001\002\000" +
    "\002\001\uffd5\000\004\031\330\001\uff1c\000\020\031\330" +
    "\164\340\165\316\166\326\167\324\170\307\173\313\001" +
    "\uff19\000\034\031\330\156\335\157\334\160\315\161\333" +
    "\162\327\163\323\164\340\165\316\166\326\167\324\170" +
    "\307\173\313\001\uff11\000\046\031\330\151\332\152\336" +
    "\153\322\154\306\155\320\156\335\157\334\160\315\161" +
    "\333\162\327\163\323\164\340\165\316\166\326\167\324" +
    "\170\307\173\313\001\uff21\000\034\031\330\156\335\157" +
    "\334\160\315\161\333\162\327\163\323\164\340\165\316" +
    "\166\326\167\324\170\307\173\313\001\uff13\000\064\031" +
    "\330\124\337\125\310\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\uff26\000" +
    "\012\031\330\166\326\167\324\170\307\001\uff1e\000\024" +
    "\031\330\162\327\163\323\164\340\165\316\166\326\167" +
    "\324\170\307\173\313\001\uff10\000\070\031\330\123\317" +
    "\124\337\125\310\143\314\145\311\146\331\147\312\150" +
    "\321\151\332\152\336\153\322\154\306\155\320\156\335" +
    "\157\334\160\315\161\333\162\327\163\323\164\340\165" +
    "\316\166\326\167\324\170\307\173\313\224\u0138\001\002" +
    "\000\132\004\203\006\144\007\044\010\066\011\110\012" +
    "\116\016\170\032\141\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\222\206\225\137\226\151\227\115\001" +
    "\002\000\066\031\330\123\317\124\337\125\310\143\314" +
    "\145\311\146\331\147\312\150\321\151\332\152\336\153" +
    "\322\154\306\155\320\156\335\157\334\160\315\161\333" +
    "\162\327\163\323\164\340\165\316\166\326\167\324\170" +
    "\307\173\313\001\uff0a\000\012\031\330\166\326\167\324" +
    "\170\307\001\uff20\000\050\031\330\150\321\151\332\152" +
    "\336\153\322\154\306\155\320\156\335\157\334\160\315" +
    "\161\333\162\327\163\323\164\340\165\316\166\326\167" +
    "\324\170\307\173\313\001\uff23\000\054\031\330\146\331" +
    "\147\312\150\321\151\332\152\336\153\322\154\306\155" +
    "\320\156\335\157\334\160\315\161\333\162\327\163\323" +
    "\164\340\165\316\166\326\167\324\170\307\173\313\001" +
    "\uff28\000\060\031\330\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\uff25\000" +
    "\004\031\330\001\uff1b\000\034\031\330\156\335\157\334" +
    "\160\315\161\333\162\327\163\323\164\340\165\316\166" +
    "\326\167\324\170\307\173\313\001\uff14\000\070\031\330" +
    "\123\317\124\337\125\310\143\314\144\u0141\145\311\146" +
    "\331\147\312\150\321\151\332\152\336\153\322\154\306" +
    "\155\320\156\335\157\334\160\315\161\333\162\327\163" +
    "\323\164\340\165\316\166\326\167\324\170\307\173\313" +
    "\001\002\000\002\001\uffbd\000\004\222\u017b\001\002\000" +
    "\002\001\ufec9\000\002\001\uff29\000\004\112\u0146\001\002" +
    "\000\010\010\u0148\012\116\225\137\001\002\000\004\222" +
    "\u0178\001\ufebf\000\004\222\u0149\001\002\000\134\004\203" +
    "\006\144\007\044\010\066\011\110\012\116\016\170\032" +
    "\141\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\151\u014d\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\uff6f\000" +
    "\004\122\u0173\001\uff70\000\042\122\uff6d\127\u0154\130\u0157" +
    "\131\u0155\132\u015d\133\u0158\134\u015e\135\u015a\136\u015c\137" +
    "\u0156\140\u0153\141\u0159\142\u015b\174\ufec9\175\ufec9\223\uff6d" +
    "\001\ufecb\000\004\223\u0152\001\002\000\012\010\066\012" +
    "\116\114\113\225\137\001\002\000\066\031\330\123\317" +
    "\124\337\125\310\143\314\145\311\146\331\147\312\150" +
    "\321\151\332\152\336\153\322\154\306\155\320\156\335" +
    "\157\334\160\315\161\333\162\327\163\323\164\340\165" +
    "\316\166\326\167\324\170\307\173\313\001\002\000\006" +
    "\122\uff6e\223\uff6e\001\ufecc\000\002\001\uff6c\000\002\001" +
    "\ufeca\000\002\001\ufefa\000\132\004\203\006\144\007\044" +
    "\010\066\011\110\012\116\016\170\032\141\054\205\055" +
    "\063\075\207\076\046\077\054\100\101\101\104\102\173" +
    "\103\041\104\067\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\164\142\165\124\171\204\172\050" +
    "\174\107\175\210\176\061\177\172\200\073\201\167\202" +
    "\131\203\174\204\127\205\071\210\134\222\206\225\137" +
    "\226\151\227\115\001\002\000\134\004\203\006\144\007" +
    "\044\010\066\011\110\012\116\016\170\032\141\054\205" +
    "\055\063\075\207\076\046\077\054\100\101\101\104\102" +
    "\173\103\041\104\067\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\151\u0169\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\222" +
    "\206\225\137\226\151\227\115\001\002\000\132\004\203" +
    "\006\144\007\044\010\066\011\110\012\116\016\170\032" +
    "\141\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\132\004" +
    "\203\006\144\007\044\010\066\011\110\012\116\016\170" +
    "\032\141\054\205\055\063\075\207\076\046\077\054\100" +
    "\101\101\104\102\173\103\041\104\067\114\113\115\062" +
    "\116\125\117\106\120\165\121\143\126\120\164\142\165" +
    "\124\171\204\172\050\174\107\175\210\176\061\177\172" +
    "\200\073\201\167\202\131\203\174\204\127\205\071\210" +
    "\134\222\206\225\137\226\151\227\115\001\002\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\132\004\203\006\144\007\044\010\066\011\110\012\116" +
    "\016\170\032\141\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\164" +
    "\142\165\124\171\204\172\050\174\107\175\210\176\061" +
    "\177\172\200\073\201\167\202\131\203\174\204\127\205" +
    "\071\210\134\222\206\225\137\226\151\227\115\001\002" +
    "\000\132\004\203\006\144\007\044\010\066\011\110\012" +
    "\116\016\170\032\141\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\222\206\225\137\226\151\227\115\001" +
    "\002\000\132\004\203\006\144\007\044\010\066\011\110" +
    "\012\116\016\170\032\141\054\205\055\063\075\207\076" +
    "\046\077\054\100\101\101\104\102\173\103\041\104\067" +
    "\114\113\115\062\116\125\117\106\120\165\121\143\126" +
    "\120\164\142\165\124\171\204\172\050\174\107\175\210" +
    "\176\061\177\172\200\073\201\167\202\131\203\174\204" +
    "\127\205\071\210\134\222\206\225\137\226\151\227\115" +
    "\001\002\000\132\004\203\006\144\007\044\010\066\011" +
    "\110\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\132\004\203\006\144\007\044\010\066" +
    "\011\110\012\116\016\170\032\141\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\164\142\165\124\171\204\172\050\174\107" +
    "\175\210\176\061\177\172\200\073\201\167\202\131\203" +
    "\174\204\127\205\071\210\134\222\206\225\137\226\151" +
    "\227\115\001\002\000\132\004\203\006\144\007\044\010" +
    "\066\011\110\012\116\016\170\032\141\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\222\206\225\137\226" +
    "\151\227\115\001\002\000\132\004\203\006\144\007\044" +
    "\010\066\011\110\012\116\016\170\032\141\054\205\055" +
    "\063\075\207\076\046\077\054\100\101\101\104\102\173" +
    "\103\041\104\067\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\164\142\165\124\171\204\172\050" +
    "\174\107\175\210\176\061\177\172\200\073\201\167\202" +
    "\131\203\174\204\127\205\071\210\134\222\206\225\137" +
    "\226\151\227\115\001\002\000\060\031\330\143\314\145" +
    "\311\146\331\147\312\150\321\151\332\152\336\153\322" +
    "\154\306\155\320\156\335\157\334\160\315\161\333\162" +
    "\327\163\323\164\340\165\316\166\326\167\324\170\307" +
    "\173\313\001\uff33\000\060\031\330\143\314\145\311\146" +
    "\331\147\312\150\321\151\332\152\336\153\322\154\306" +
    "\155\320\156\335\157\334\160\315\161\333\162\327\163" +
    "\323\164\340\165\316\166\326\167\324\170\307\173\313" +
    "\001\uff35\000\060\031\330\143\314\145\311\146\331\147" +
    "\312\150\321\151\332\152\336\153\322\154\306\155\320" +
    "\156\335\157\334\160\315\161\333\162\327\163\323\164" +
    "\340\165\316\166\326\167\324\170\307\173\313\001\uff31" +
    "\000\060\031\330\143\314\145\311\146\331\147\312\150" +
    "\321\151\332\152\336\153\322\154\306\155\320\156\335" +
    "\157\334\160\315\161\333\162\327\163\323\164\340\165" +
    "\316\166\326\167\324\170\307\173\313\001\uff2d\000\060" +
    "\031\330\143\314\145\311\146\331\147\312\150\321\151" +
    "\332\152\336\153\322\154\306\155\320\156\335\157\334" +
    "\160\315\161\333\162\327\163\323\164\340\165\316\166" +
    "\326\167\324\170\307\173\313\001\uff32\000\060\031\330" +
    "\143\314\145\311\146\331\147\312\150\321\151\332\152" +
    "\336\153\322\154\306\155\320\156\335\157\334\160\315" +
    "\161\333\162\327\163\323\164\340\165\316\166\326\167" +
    "\324\170\307\173\313\001\uff2e\000\060\031\330\143\314" +
    "\145\311\146\331\147\312\150\321\151\332\152\336\153" +
    "\322\154\306\155\320\156\335\157\334\160\315\161\333" +
    "\162\327\163\323\164\340\165\316\166\326\167\324\170" +
    "\307\173\313\001\uff34\000\060\031\330\143\314\145\311" +
    "\146\331\147\312\150\321\151\332\152\336\153\322\154" +
    "\306\155\320\156\335\157\334\160\315\161\333\162\327" +
    "\163\323\164\340\165\316\166\326\167\324\170\307\173" +
    "\313\001\uff37\000\060\031\330\143\314\145\311\146\331" +
    "\147\312\150\321\151\332\152\336\153\322\154\306\155" +
    "\320\156\335\157\334\160\315\161\333\162\327\163\323" +
    "\164\340\165\316\166\326\167\324\170\307\173\313\001" +
    "\uff30\000\060\031\330\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\uff36\000" +
    "\014\010\066\012\116\114\113\210\u016b\225\137\001\002" +
    "\000\060\031\330\143\314\145\311\146\331\147\312\150" +
    "\321\151\332\152\336\153\322\154\306\155\320\156\335" +
    "\157\334\160\315\161\333\162\327\163\323\164\340\165" +
    "\316\166\326\167\324\170\307\173\313\001\uff3c\000\010" +
    "\010\356\012\116\225\137\001\002\000\002\001\uff3b\000" +
    "\004\222\u016f\001\ufeec\000\002\001\uff3a\000\134\004\203" +
    "\006\144\007\044\010\066\011\110\012\116\016\170\032" +
    "\141\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\151\u014d\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\uff6f\000" +
    "\004\223\u0171\001\002\000\002\001\ufeeb\000\060\031\330" +
    "\143\314\145\311\146\331\147\312\150\321\151\332\152" +
    "\336\153\322\154\306\155\320\156\335\157\334\160\315" +
    "\161\333\162\327\163\323\164\340\165\316\166\326\167" +
    "\324\170\307\173\313\001\uff2f\000\134\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\151\u0175\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\042\122" +
    "\uff6a\127\u0154\130\u0157\131\u0155\132\u015d\133\u0158\134\u015e" +
    "\135\u015a\136\u015c\137\u0156\140\u0153\141\u0159\142\u015b\174" +
    "\ufec9\175\ufec9\223\uff6a\001\ufecb\000\012\010\066\012\116" +
    "\114\113\225\137\001\002\000\006\122\uff6b\223\uff6b\001" +
    "\ufecc\000\002\001\uff69\000\134\004\203\006\144\007\044" +
    "\010\066\011\110\012\116\016\170\032\141\054\205\055" +
    "\063\075\207\076\046\077\054\100\101\101\104\102\173" +
    "\103\041\104\067\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\151\u014d\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\222\206" +
    "\225\137\226\151\227\115\001\uff6f\000\004\223\u017a\001" +
    "\002\000\002\001\ufef9\000\134\004\203\006\144\007\044" +
    "\010\066\011\110\012\116\016\170\032\141\054\205\055" +
    "\063\075\207\076\046\077\054\100\101\101\104\102\173" +
    "\103\041\104\067\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\151\u014d\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\222\206" +
    "\225\137\226\151\227\115\001\uff6f\000\004\223\u017d\001" +
    "\002\000\002\001\ufefb\000\014\010\066\012\116\075\u0182" +
    "\114\113\225\137\001\ufea5\000\006\122\u0186\223\u0188\001" +
    "\002\000\002\001\ufea8\000\002\001\ufea7\000\004\222\u0183" +
    "\001\002\000\014\010\066\012\116\075\u0182\114\113\225" +
    "\137\001\ufea5\000\006\122\u0186\223\u0185\001\002\000\002" +
    "\001\ufea6\000\014\010\066\012\116\075\u0182\114\113\225" +
    "\137\001\ufea5\000\002\001\ufea9\000\004\127\u0189\001\002" +
    "\000\132\004\203\006\144\007\044\010\066\011\110\012" +
    "\116\016\170\032\141\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\222\206\225\137\226\151\227\115\001" +
    "\002\000\060\031\330\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\uff3d\000" +
    "\070\031\330\123\317\124\337\125\310\143\314\145\311" +
    "\146\331\147\312\150\321\151\332\152\336\153\322\154" +
    "\306\155\320\156\335\157\334\160\315\161\333\162\327" +
    "\163\323\164\340\165\316\166\326\167\324\170\307\173" +
    "\313\223\u018c\001\002\000\002\001\uff0b\000\012\010\066" +
    "\012\116\114\113\225\137\001\002\000\002\001\ufe87\000" +
    "\006\122\u0191\223\u0190\001\002\000\002\001\ufe8e\000\012" +
    "\010\066\012\116\114\113\225\137\001\002\000\002\001" +
    "\ufe86\000\004\031\330\001\uff16\000\134\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\222\206" +
    "\223\u0197\225\137\226\151\227\115\001\002\000\002\001" +
    "\uff01\000\070\031\330\123\317\124\337\125\310\143\314" +
    "\145\311\146\331\147\312\150\321\151\332\152\336\153" +
    "\322\154\306\155\320\156\335\157\334\160\315\161\333" +
    "\162\327\163\323\164\340\165\316\166\326\167\324\170" +
    "\307\173\313\223\u0198\001\002\000\002\001\ufeee\000\002" +
    "\001\ufeed\000\004\151\u019a\001\uffb2\000\002\001\uffb1\000" +
    "\012\010\u019f\114\113\160\u01a1\166\u019c\001\002\000\002" +
    "\001\uffe0\000\004\112\u01bf\001\002\000\002\001\uff5d\000" +
    "\004\222\ufe83\001\uffdf\000\006\010\u01a5\166\u01a4\001\uffe4" +
    "\000\004\010\u01a2\001\002\000\004\161\u01a3\001\002\000" +
    "\002\001\uffe3\000\002\001\uffe2\000\002\001\uffe1\000\004" +
    "\222\u01a7\001\002\000\012\003\u01aa\010\u01ac\076\u01a8\223" +
    "\uff7c\001\uff73\000\002\001\uff71\000\006\012\u01b9\151\u01b8" +
    "\001\002\000\002\001\uff74\000\004\223\u01b1\001\002\000" +
    "\002\001\uff72\000\004\122\u01af\001\uff7d\000\002\001\uff7b" +
    "\000\014\003\u01aa\010\u01ac\076\u01a8\122\uff79\223\uff79\001" +
    "\uff73\000\002\001\uff7a\000\002\001\uff5c\000\006\110\u01b4" +
    "\144\u01b5\001\uff56\000\002\001\uff5b\000\002\001\uffdd\000" +
    "\002\001\uff58\000\210\003\264\004\203\005\213\006\144" +
    "\007\044\010\066\011\110\012\116\014\133\016\170\017" +
    "\162\020\157\021\100\023\065\025\140\027\214\032\141" +
    "\034\171\040\114\041\161\044\177\045\074\047\212\050" +
    "\060\051\045\053\135\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\110" +
    "\121\111\u01b7\113\257\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\144\043\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\214" +
    "\260\222\206\225\137\226\151\227\115\001\002\000\002" +
    "\001\uff57\000\004\012\u01bc\001\002\000\004\127\u01ba\001" +
    "\uff78\000\034\006\144\007\044\010\230\016\170\076\224" +
    "\077\054\100\101\101\104\102\173\103\041\114\113\164" +
    "\222\165\231\001\002\000\002\001\uff76\000\004\127\u01bd" +
    "\001\uff77\000\034\006\144\007\044\010\230\016\170\076" +
    "\224\077\054\100\101\101\104\102\173\103\041\114\113" +
    "\164\222\165\231\001\002\000\002\001\uff75\000\006\010" +
    "\220\114\113\001\002\000\002\001\ufff7\000\004\222\u01c2" +
    "\001\002\000\012\003\u01aa\010\u01ac\076\u01a8\223\uff7c\001" +
    "\uff73\000\004\223\u01c4\001\002\000\002\001\ufff6\000\006" +
    "\110\u01b4\144\u01b5\001\uff56\000\002\001\ufff5\000\002\001" +
    "\uffcc\000\040\127\u0154\130\u0157\131\u0155\132\u015d\133\u0158" +
    "\134\u015e\135\u015a\136\u015c\137\u0156\140\u0153\141\u0159\142" +
    "\u015b\144\u01cb\174\ufec9\175\ufec9\001\ufecb\000\004\144\u01ca" +
    "\001\ufecc\000\002\001\uffcb\000\002\001\uffca\000\004\010" +
    "\u01d0\001\002\000\004\127\u01ce\001\uffdf\000\034\006\144" +
    "\007\044\010\230\016\170\076\224\077\054\100\101\101" +
    "\104\102\173\103\041\114\113\164\222\165\231\001\002" +
    "\000\002\001\uff44\000\004\127\u01d1\001\002\000\034\006" +
    "\144\007\044\010\230\016\170\076\224\077\054\100\101" +
    "\101\104\102\173\103\041\114\113\164\222\165\231\001" +
    "\002\000\004\144\u01d3\001\002\000\002\001\ufff8\000\002" +
    "\001\uff03\000\002\001\uff07\000\132\004\203\006\144\007" +
    "\044\010\066\011\110\012\116\016\170\032\141\054\205" +
    "\055\063\075\207\076\046\077\054\100\101\101\104\102" +
    "\173\103\041\104\067\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\222\206\225" +
    "\137\226\151\227\115\001\002\000\070\031\330\123\317" +
    "\124\337\125\310\143\314\145\311\146\331\147\312\150" +
    "\321\151\332\152\336\153\322\154\306\155\320\156\335" +
    "\157\334\160\315\161\333\162\327\163\323\164\340\165" +
    "\316\166\326\167\324\170\307\173\313\223\u01d8\001\002" +
    "\000\006\110\u01d9\224\u01db\001\002\000\004\144\u01ed\001" +
    "\uff8c\000\002\001\uffd1\000\004\144\u01dd\001\uff8c\000\010" +
    "\035\u01ea\036\u01e0\037\u01e1\001\002\000\002\001\uff8c\000" +
    "\010\035\u01df\036\u01e0\037\u01e1\001\002\000\004\144\u01e9" +
    "\001\002\000\132\004\203\006\144\007\044\010\066\011" +
    "\110\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\006\144\u01e3\224\u01e4\001\002\000\002" +
    "\001\uffdd\000\002\001\uff88\000\002\001\uff89\000\206\003" +
    "\264\004\203\005\213\006\144\007\044\010\066\011\110" +
    "\012\116\014\133\016\170\017\162\020\157\021\100\023" +
    "\065\025\140\027\214\032\141\034\171\040\114\041\161" +
    "\044\177\045\074\047\212\050\060\051\045\053\135\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\110\121\113\257\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\144\043" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\214\260\222\206\225\137\226\151\227" +
    "\115\001\uff8a\000\072\031\330\123\317\124\337\125\310" +
    "\143\314\144\u01e3\145\311\146\331\147\312\150\321\151" +
    "\332\152\336\153\322\154\306\155\320\156\335\157\334" +
    "\160\315\161\333\162\327\163\323\164\340\165\316\166" +
    "\326\167\324\170\307\173\313\224\u01e4\001\002\000\002" +
    "\001\uffdd\000\206\003\264\004\203\005\213\006\144\007" +
    "\044\010\066\011\110\012\116\014\133\016\170\017\162" +
    "\020\157\021\100\023\065\025\140\027\214\032\141\034" +
    "\171\040\114\041\161\044\177\045\074\047\212\050\060" +
    "\051\045\053\135\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\110\121" +
    "\113\257\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\144\043\164\142\165\124\171\204\172\050" +
    "\174\107\175\210\176\061\177\172\200\073\201\167\202" +
    "\131\203\174\204\127\205\071\210\134\214\260\222\206" +
    "\225\137\226\151\227\115\001\uff8b\000\002\001\uff8d\000" +
    "\004\144\u01eb\001\002\000\002\001\uff8e\000\010\036\u01e0" +
    "\037\u01e1\111\u01f0\001\002\000\002\001\uff8c\000\010\036" +
    "\u01e0\037\u01e1\111\u01ef\001\002\000\002\001\uff8f\000\002" +
    "\001\uff90\000\002\001\uff05\000\066\031\330\123\317\124" +
    "\337\125\310\143\314\145\311\146\331\147\312\150\321" +
    "\151\332\152\336\153\322\154\306\155\320\156\335\157" +
    "\334\160\315\161\333\162\327\163\323\164\340\165\316" +
    "\166\326\167\324\170\307\173\313\001\ufe89\000\004\222" +
    "\u01f4\001\002\000\004\223\u01f5\001\002\000\004\224\u01f6" +
    "\001\002\000\012\010\u01fb\064\u01f8\171\u01f7\222\u01fa\001" +
    "\002\000\012\010\u01fb\064\u01f8\171\u01f7\222\u01fa\001\002" +
    "\000\004\222\u0206\001\002\000\002\001\uffec\000\012\010" +
    "\u01fb\064\u01f8\171\u01f7\222\u01fa\001\002\000\004\222\u0202" +
    "\001\002\000\010\144\u01ff\145\u01fe\146\u01fd\001\002\000" +
    "\012\010\u01fb\064\u01f8\171\u01f7\222\u01fa\001\002\000\012" +
    "\010\u01fb\064\u01f8\171\u01f7\222\u01fa\001\002\000\002\001" +
    "\ufff4\000\004\146\u01fd\001\ufff0\000\002\001\uffef\000\004" +
    "\223\u0203\001\002\000\002\001\uffeb\000\010\145\u01fe\146" +
    "\u01fd\223\u0205\001\002\000\002\001\uffee\000\010\010\u0208" +
    "\160\u01a1\166\u019c\001\002\000\004\073\u0209\001\002\000" +
    "\002\001\uffdf\000\010\010\u0208\160\u01a1\166\u019c\001\002" +
    "\000\004\222\u020b\001\002\000\004\223\u020c\001\002\000" +
    "\004\223\u020d\001\002\000\002\001\uffea\000\002\001\uffed" +
    "\000\006\122\u0211\144\u0212\001\002\000\066\031\330\123" +
    "\317\124\337\125\310\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\uff42\000" +
    "\132\004\203\006\144\007\044\010\066\011\110\012\116" +
    "\016\170\032\141\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\164" +
    "\142\165\124\171\204\172\050\174\107\175\210\176\061" +
    "\177\172\200\073\201\167\202\131\203\174\204\127\205" +
    "\071\210\134\222\206\225\137\226\151\227\115\001\002" +
    "\000\002\001\uffc7\000\066\031\330\123\317\124\337\125" +
    "\310\143\314\145\311\146\331\147\312\150\321\151\332" +
    "\152\336\153\322\154\306\155\320\156\335\157\334\160" +
    "\315\161\333\162\327\163\323\164\340\165\316\166\326" +
    "\167\324\170\307\173\313\001\uff43\000\002\001\uffce\000" +
    "\070\031\330\123\317\124\337\125\310\143\314\144\u0216" +
    "\145\311\146\331\147\312\150\321\151\332\152\336\153" +
    "\322\154\306\155\320\156\335\157\334\160\315\161\333" +
    "\162\327\163\323\164\340\165\316\166\326\167\324\170" +
    "\307\173\313\001\002\000\002\001\uffcd\000\004\021\u0218" +
    "\001\002\000\004\222\u0219\001\002\000\132\004\203\006" +
    "\144\007\044\010\066\011\110\012\116\016\170\032\141" +
    "\054\205\055\063\075\207\076\046\077\054\100\101\101" +
    "\104\102\173\103\041\104\067\114\113\115\062\116\125" +
    "\117\106\120\165\121\143\126\120\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\222" +
    "\206\225\137\226\151\227\115\001\002\000\070\031\330" +
    "\123\317\124\337\125\310\143\314\145\311\146\331\147" +
    "\312\150\321\151\332\152\336\153\322\154\306\155\320" +
    "\156\335\157\334\160\315\161\333\162\327\163\323\164" +
    "\340\165\316\166\326\167\324\170\307\173\313\223\u021b" +
    "\001\002\000\004\144\u021c\001\002\000\002\001\uffd3\000" +
    "\014\012\116\015\u0223\106\u0222\107\u0220\226\u0221\001\002" +
    "\000\006\073\u022e\206\u022d\001\ufe97\000\002\001\ufe9a\000" +
    "\012\010\066\012\116\114\113\225\137\001\002\000\002" +
    "\001\ufed7\000\132\004\203\006\144\007\044\010\066\011" +
    "\u0224\012\116\016\170\032\141\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\002\000\002\001\ufe99\000\004\206\u0227\001\ufeda" +
    "\000\070\031\330\111\u0226\123\317\124\337\125\310\143" +
    "\314\145\311\146\331\147\312\150\321\151\332\152\336" +
    "\153\322\154\306\155\320\156\335\157\334\160\315\161" +
    "\333\162\327\163\323\164\340\165\316\166\326\167\324" +
    "\170\307\173\313\001\002\000\002\001\ufe94\000\132\004" +
    "\203\006\144\007\044\010\066\011\110\012\116\016\170" +
    "\032\141\054\205\055\063\075\207\076\046\077\054\100" +
    "\101\101\104\102\173\103\041\104\067\114\113\115\062" +
    "\116\125\117\106\120\165\121\143\126\120\164\142\165" +
    "\124\171\204\172\050\174\107\175\210\176\061\177\172" +
    "\200\073\201\167\202\131\203\174\204\127\205\071\210" +
    "\134\222\206\225\137\226\151\227\115\001\002\000\070" +
    "\031\330\123\317\124\337\125\310\143\314\145\311\146" +
    "\331\147\312\150\321\151\332\152\336\153\322\154\306" +
    "\155\320\156\335\157\334\160\315\161\333\162\327\163" +
    "\323\164\340\165\316\166\326\167\324\170\307\173\313" +
    "\207\u0229\001\002\000\004\111\u022a\001\002\000\002\001" +
    "\ufe93\000\004\111\u022c\001\002\000\002\001\ufe92\000\012" +
    "\010\220\012\116\013\u0233\114\113\001\002\000\006\010" +
    "\220\114\113\001\002\000\002\001\ufe95\000\002\001\ufe8f" +
    "\000\004\207\u0234\001\002\000\002\001\ufe91\000\002\001" +
    "\ufe90\000\002\001\ufe96\000\066\031\330\123\317\124\337" +
    "\125\310\143\314\145\311\146\331\147\312\150\321\151" +
    "\332\152\336\153\322\154\306\155\320\156\335\157\334" +
    "\160\315\161\333\162\327\163\323\164\340\165\316\166" +
    "\326\167\324\170\307\173\313\001\ufe88\000\012\031\330" +
    "\166\326\167\324\170\307\001\uff18\000\002\001\uff38\000" +
    "\132\004\203\006\144\007\044\010\066\011\110\012\116" +
    "\016\170\032\141\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\164" +
    "\142\165\124\171\204\172\050\174\107\175\210\176\061" +
    "\177\172\200\073\201\167\202\131\203\174\204\127\205" +
    "\071\210\134\222\206\225\137\226\151\227\115\001\002" +
    "\000\040\033\u024a\127\u0154\130\u0157\131\u0155\132\u015d\133" +
    "\u0158\134\u015e\135\u015a\136\u015c\137\u0156\140\u0153\141\u0159" +
    "\142\u015b\174\ufec9\175\ufec9\001\ufecb\000\004\033\u023b\001" +
    "\ufecc\000\012\010\066\012\116\114\113\225\137\001\002" +
    "\000\004\074\u023e\001\uff9c\000\004\223\u0243\001\002\000" +
    "\014\010\066\012\116\114\113\151\u0241\225\137\001\002" +
    "\000\002\001\uff9b\000\002\001\uff9a\000\012\010\066\012" +
    "\116\114\113\225\137\001\002\000\002\001\uff99\000\210" +
    "\003\264\004\203\005\213\006\144\007\044\010\066\011" +
    "\110\012\116\014\133\016\170\017\162\020\157\021\100" +
    "\023\065\025\140\027\214\032\141\034\171\040\114\041" +
    "\161\044\177\045\074\047\212\050\060\051\045\053\135" +
    "\054\205\055\063\075\207\076\046\077\054\100\101\101" +
    "\104\102\173\103\041\104\067\110\121\113\257\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\144" +
    "\043\164\142\165\124\171\204\172\050\174\107\175\210" +
    "\176\061\177\172\200\073\201\167\202\131\203\174\204" +
    "\127\205\071\210\134\214\260\222\206\224\u0244\225\137" +
    "\226\151\227\115\001\002\000\002\001\uffdd\000\002\001" +
    "\uff96\000\002\001\uffc1\000\210\003\264\004\203\005\213" +
    "\006\144\007\044\010\066\011\110\012\116\014\133\016" +
    "\170\017\162\020\157\021\100\023\065\025\140\026\u0248" +
    "\027\214\032\141\034\171\040\114\041\161\044\177\045" +
    "\074\047\212\050\060\051\045\053\135\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\110\121\113\257\114\113\115\062\116\125" +
    "\117\106\120\165\121\143\126\120\144\043\164\142\165" +
    "\124\171\204\172\050\174\107\175\210\176\061\177\172" +
    "\200\073\201\167\202\131\203\174\204\127\205\071\210" +
    "\134\214\260\222\206\225\137\226\151\227\115\001\002" +
    "\000\004\144\u0249\001\002\000\002\001\uff95\000\014\010" +
    "\066\012\116\114\113\151\u0241\225\137\001\002\000\004" +
    "\074\u023e\001\uff9c\000\004\223\u024d\001\002\000\210\003" +
    "\264\004\203\005\213\006\144\007\044\010\066\011\110" +
    "\012\116\014\133\016\170\017\162\020\157\021\100\023" +
    "\065\025\140\027\214\032\141\034\171\040\114\041\161" +
    "\044\177\045\074\047\212\050\060\051\045\053\135\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\110\121\113\257\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\144\043" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\214\260\222\206\224\u0244\225\137\226" +
    "\151\227\115\001\002\000\002\001\uffc2\000\002\001\uff2c" +
    "\000\002\001\uff2a\000\012\010\066\012\116\114\113\225" +
    "\137\001\002\000\002\001\uffb7\000\002\001\uffb5\000\006" +
    "\122\u0256\223\u0255\001\002\000\004\144\u0258\001\002\000" +
    "\012\010\066\012\116\114\113\225\137\001\002\000\002" +
    "\001\uffb6\000\002\001\uffc3\000\004\222\u016f\001\ufeec\000" +
    "\002\001\uff39\000\002\001\uff04\000\002\001\uff50\000\002" +
    "\001\uff4c\000\002\001\uff02\000\010\110\360\206\361\222" +
    "\ufec0\001\ufebb\000\066\031\330\123\317\124\337\125\310" +
    "\143\314\145\311\146\331\147\312\150\321\151\332\152" +
    "\336\153\322\154\306\155\320\156\335\157\334\160\315" +
    "\161\333\162\327\163\323\164\340\165\316\166\326\167" +
    "\324\170\307\173\313\001\ufe8b\000\012\031\330\166\326" +
    "\167\324\170\307\001\uff17\000\004\112\u026c\001\002\000" +
    "\004\127\u026a\001\uff47\000\006\122\u0265\144\u0266\001\002" +
    "\000\004\012\u0267\001\002\000\002\001\uff5f\000\004\127" +
    "\u0268\001\uff49\000\034\006\144\007\044\010\230\016\170" +
    "\076\224\077\054\100\101\101\104\102\173\103\041\114" +
    "\113\164\222\165\231\001\002\000\002\001\uff48\000\034" +
    "\006\144\007\044\010\230\016\170\076\224\077\054\100" +
    "\101\101\104\102\173\103\041\114\113\164\222\165\231" +
    "\001\002\000\002\001\uff46\000\004\012\u0263\001\002\000" +
    "\006\122\u0265\144\u026e\001\002\000\002\001\ufff9\000\002" +
    "\001\uffdd\000\210\003\264\004\203\005\213\006\144\007" +
    "\044\010\066\011\110\012\116\014\133\016\170\017\162" +
    "\020\157\021\100\023\065\025\140\027\214\032\141\034" +
    "\171\040\114\041\161\044\177\045\074\047\212\050\060" +
    "\051\045\053\135\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\110\121" +
    "\111\u0271\113\257\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\144\043\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\214\260" +
    "\222\206\225\137\226\151\227\115\001\002\000\002\001" +
    "\uffd7\000\060\031\330\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\ufefc\000" +
    "\014\012\116\015\u0223\106\u0222\107\u0220\227\u0274\001\002" +
    "\000\002\001\ufefd\000\002\001\uffd0\000\070\031\330\123" +
    "\317\124\337\125\310\143\314\144\u0277\145\311\146\331" +
    "\147\312\150\321\151\332\152\336\153\322\154\306\155" +
    "\320\156\335\157\334\160\315\161\333\162\327\163\323" +
    "\164\340\165\316\166\326\167\324\170\307\173\313\001" +
    "\002\000\002\001\uffcf\000\004\010\u027a\001\002\000\002" +
    "\001\uff5e\000\004\127\u027b\001\002\000\034\006\144\007" +
    "\044\010\230\016\170\076\224\077\054\100\101\101\104" +
    "\102\173\103\041\114\113\164\222\165\231\001\002\000" +
    "\002\001\uff45\000\002\001\uff2b\000\132\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\222\206" +
    "\225\137\226\151\227\115\001\002\000\070\031\330\123" +
    "\317\124\337\125\310\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\223\u0280\001" +
    "\002\000\002\001\ufe8a\000\014\010\220\012\116\110\u0107" +
    "\114\113\225\137\001\002\000\004\222\u0284\001\ufec2\000" +
    "\002\001\ufec5\000\134\004\203\006\144\007\044\010\066" +
    "\011\110\012\116\016\170\032\141\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\114\113\115\062\116\125\117\106\120\165\121" +
    "\143\126\120\151\u014d\164\142\165\124\171\204\172\050" +
    "\174\107\175\210\176\061\177\172\200\073\201\167\202" +
    "\131\203\174\204\127\205\071\210\134\222\206\225\137" +
    "\226\151\227\115\001\uff6f\000\004\223\u0286\001\002\000" +
    "\002\001\ufec3\000\004\073\u0289\001\ufec8\000\002\001\ufec6" +
    "\000\014\010\220\012\116\110\u0107\114\113\225\137\001" +
    "\002\000\004\222\u0284\001\ufec2\000\002\001\ufec4\000\004" +
    "\223\u028d\001\002\000\004\224\u028e\001\002\000\012\010" +
    "\u01fb\064\u01f8\171\u01f7\222\u01fa\001\002\000\010\110\u0290" +
    "\145\u01fe\146\u01fd\001\002\000\002\001\uffdd\000\210\003" +
    "\264\004\203\005\213\006\144\007\044\010\066\011\110" +
    "\012\116\014\133\016\170\017\162\020\157\021\100\023" +
    "\065\025\140\027\214\032\141\034\171\040\114\041\161" +
    "\044\177\045\074\047\212\050\060\051\045\053\135\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\110\121\111\u0292\113\257\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\144\043\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\214\260\222\206\225\137\226" +
    "\151\227\115\001\002\000\002\001\ufff2\000\132\004\203" +
    "\006\144\007\044\010\066\011\110\012\116\016\170\032" +
    "\141\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\070\031" +
    "\330\123\317\124\337\125\310\143\314\145\311\146\331" +
    "\147\312\150\321\151\332\152\336\153\322\154\306\155" +
    "\320\156\335\157\334\160\315\161\333\162\327\163\323" +
    "\164\340\165\316\166\326\167\324\170\307\173\313\223" +
    "\u0295\001\002\000\210\003\264\004\203\005\213\006\144" +
    "\007\044\010\066\011\110\012\116\014\133\016\170\017" +
    "\162\020\157\021\100\023\065\025\140\027\214\032\141" +
    "\034\171\040\114\041\161\044\177\045\074\047\212\050" +
    "\060\051\045\053\135\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\110" +
    "\121\113\257\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\144\043\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\214\260\222" +
    "\206\224\u0296\225\137\226\151\227\115\001\002\000\002" +
    "\001\uffdd\000\002\001\uffd4\000\002\001\uff87\000\210\003" +
    "\264\004\203\005\213\006\144\007\044\010\066\011\110" +
    "\012\116\014\133\016\170\017\162\020\157\021\100\022" +
    "\u029a\023\065\025\140\027\214\032\141\034\171\040\114" +
    "\041\161\044\177\045\074\047\212\050\060\051\045\053" +
    "\135\054\205\055\063\075\207\076\046\077\054\100\101" +
    "\101\104\102\173\103\041\104\067\110\121\113\257\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\144\043\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\214\260\222\206\225\137\226" +
    "\151\227\115\001\002\000\004\144\u029b\001\002\000\002" +
    "\001\uff86\000\002\001\uffdd\000\210\003\264\004\203\005" +
    "\213\006\144\007\044\010\066\011\110\012\116\014\133" +
    "\016\170\017\162\020\157\021\100\023\065\025\140\027" +
    "\214\032\141\034\171\040\114\041\161\044\177\045\074" +
    "\047\212\050\060\051\045\053\135\054\205\055\063\075" +
    "\207\076\046\077\054\100\101\101\104\102\173\103\041" +
    "\104\067\110\121\111\u029e\113\257\114\113\115\062\116" +
    "\125\117\106\120\165\121\143\126\120\144\043\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\214\260\222\206\225\137\226\151\227\115\001" +
    "\002\000\004\046\u029f\001\002\000\004\222\u02a0\001\002" +
    "\000\004\010\030\001\002\000\004\012\116\001\002\000" +
    "\004\223\u02a3\001\002\000\004\110\u02a4\001\002\000\002" +
    "\001\uffdd\000\210\003\264\004\203\005\213\006\144\007" +
    "\044\010\066\011\110\012\116\014\133\016\170\017\162" +
    "\020\157\021\100\023\065\025\140\027\214\032\141\034" +
    "\171\040\114\041\161\044\177\045\074\047\212\050\060" +
    "\051\045\053\135\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\110\121" +
    "\111\u02a6\113\257\114\113\115\062\116\125\117\106\120" +
    "\165\121\143\126\120\144\043\164\142\165\124\171\204" +
    "\172\050\174\107\175\210\176\061\177\172\200\073\201" +
    "\167\202\131\203\174\204\127\205\071\210\134\214\260" +
    "\222\206\225\137\226\151\227\115\001\002\000\004\046" +
    "\u02a7\001\uffbb\000\004\222\u02ac\001\002\000\002\001\uffbe" +
    "\000\002\001\uffba\000\004\046\u02a7\001\uffbc\000\002\001" +
    "\uffb9\000\004\010\030\001\002\000\004\012\u02ae\001\002" +
    "\000\004\223\u02af\001\002\000\004\110\u02b0\001\002\000" +
    "\002\001\uffdd\000\210\003\264\004\203\005\213\006\144" +
    "\007\044\010\066\011\110\012\116\014\133\016\170\017" +
    "\162\020\157\021\100\023\065\025\140\027\214\032\141" +
    "\034\171\040\114\041\161\044\177\045\074\047\212\050" +
    "\060\051\045\053\135\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\110" +
    "\121\111\u02b2\113\257\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\144\043\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\214" +
    "\260\222\206\225\137\226\151\227\115\001\002\000\002" +
    "\001\uffb8\000\002\001\uff06\000\002\001\uff00\000\004\223" +
    "\u02b6\001\002\000\004\224\u02b7\001\002\000\012\010\u01fb" +
    "\064\u01f8\171\u01f7\222\u01fa\001\002\000\010\110\u02b9\145" +
    "\u01fe\146\u01fd\001\002\000\002\001\uffdd\000\210\003\264" +
    "\004\203\005\213\006\144\007\044\010\066\011\110\012" +
    "\116\014\133\016\170\017\162\020\157\021\100\023\065" +
    "\025\140\027\214\032\141\034\171\040\114\041\161\044" +
    "\177\045\074\047\212\050\060\051\045\053\135\054\205" +
    "\055\063\075\207\076\046\077\054\100\101\101\104\102" +
    "\173\103\041\104\067\110\121\111\u02bb\113\257\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\144" +
    "\043\164\142\165\124\171\204\172\050\174\107\175\210" +
    "\176\061\177\172\200\073\201\167\202\131\203\174\204" +
    "\127\205\071\210\134\214\260\222\206\225\137\226\151" +
    "\227\115\001\002\000\002\001\ufff3\000\014\012\116\015" +
    "\u0223\105\u02bd\106\u0222\107\u0220\001\002\000\002\001\ufed6" +
    "\000\132\004\203\006\144\007\044\010\066\011\110\012" +
    "\116\016\170\032\141\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\164\142\165\124\171\204\172\050\174\107\175\210\176" +
    "\061\177\172\200\073\201\167\202\131\203\174\204\127" +
    "\205\071\210\134\222\206\225\137\226\151\227\115\001" +
    "\uff41\000\004\122\u02cd\001\uff40\000\066\031\330\123\317" +
    "\124\337\125\310\143\314\145\311\146\331\147\312\150" +
    "\321\151\332\152\336\153\322\154\306\155\320\156\335" +
    "\157\334\160\315\161\333\162\327\163\323\164\340\165" +
    "\316\166\326\167\324\170\307\173\313\001\uff3e\000\004" +
    "\144\u02c2\001\002\000\132\004\203\006\144\007\044\010" +
    "\066\011\110\012\116\016\170\032\141\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\222\206\225\137\226" +
    "\151\227\115\001\uff41\000\004\144\u02c4\001\002\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\uff41\000" +
    "\004\223\u02c6\001\002\000\210\003\264\004\203\005\213" +
    "\006\144\007\044\010\066\011\110\012\116\014\133\016" +
    "\170\017\162\020\157\021\100\023\065\025\140\027\214" +
    "\032\141\034\171\040\114\041\161\044\177\045\074\047" +
    "\212\050\060\051\045\053\135\054\205\055\063\075\207" +
    "\076\046\077\054\100\101\101\104\102\173\103\041\104" +
    "\067\110\121\113\257\114\113\115\062\116\125\117\106" +
    "\120\165\121\143\126\120\144\043\164\142\165\124\171" +
    "\204\172\050\174\107\175\210\176\061\177\172\200\073" +
    "\201\167\202\131\203\174\204\127\205\071\210\134\214" +
    "\260\222\206\224\u02c8\225\137\226\151\227\115\001\002" +
    "\000\002\001\uffd2\000\002\001\uffdd\000\002\001\uff98\000" +
    "\210\003\264\004\203\005\213\006\144\007\044\010\066" +
    "\011\110\012\116\014\133\016\170\017\162\020\157\021" +
    "\100\023\065\024\u02cb\025\140\027\214\032\141\034\171" +
    "\040\114\041\161\044\177\045\074\047\212\050\060\051" +
    "\045\053\135\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\110\121\113" +
    "\257\114\113\115\062\116\125\117\106\120\165\121\143" +
    "\126\120\144\043\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\214\260\222\206\225" +
    "\137\226\151\227\115\001\002\000\004\144\u02cc\001\002" +
    "\000\002\001\uff97\000\132\004\203\006\144\007\044\010" +
    "\066\011\110\012\116\016\170\032\141\054\205\055\063" +
    "\075\207\076\046\077\054\100\101\101\104\102\173\103" +
    "\041\104\067\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\164\142\165\124\171\204\172\050\174" +
    "\107\175\210\176\061\177\172\200\073\201\167\202\131" +
    "\203\174\204\127\205\071\210\134\222\206\225\137\226" +
    "\151\227\115\001\002\000\066\031\330\123\317\124\337" +
    "\125\310\143\314\145\311\146\331\147\312\150\321\151" +
    "\332\152\336\153\322\154\306\155\320\156\335\157\334" +
    "\160\315\161\333\162\327\163\323\164\340\165\316\166" +
    "\326\167\324\170\307\173\313\001\uff3f\000\010\010\u02d0" +
    "\012\116\225\137\001\002\000\004\222\u0149\001\ufe85\000" +
    "\012\010\066\012\116\114\113\225\137\001\002\000\004" +
    "\223\u02d3\001\002\000\002\001\ufe8d\000\066\031\330\123" +
    "\317\124\337\125\310\143\314\145\311\146\331\147\312" +
    "\150\321\151\332\152\336\153\322\154\306\155\320\156" +
    "\335\157\334\160\315\161\333\162\327\163\323\164\340" +
    "\165\316\166\326\167\324\170\307\173\313\001\ufe8c\000" +
    "\002\001\uff08\000\004\144\u02db\001\002\000\004\016\u02d9" +
    "\001\002\000\002\001\uffb4\000\004\223\u02da\001\002\000" +
    "\002\001\uffb3\000\002\001\uffc4\000\002\001\uffc5\000\002" +
    "\001\uff15\000\004\223\u02df\001\002\000\004\224\u02e0\001" +
    "\002\000\012\010\u01fb\064\u01f8\171\u01f7\222\u01fa\001\002" +
    "\000\010\110\u02e2\145\u01fe\146\u01fd\001\002\000\002\001" +
    "\uffdd\000\210\003\264\004\203\005\213\006\144\007\044" +
    "\010\066\011\110\012\116\014\133\016\170\017\162\020" +
    "\157\021\100\023\065\025\140\027\214\032\141\034\171" +
    "\040\114\041\161\044\177\045\074\047\212\050\060\051" +
    "\045\053\135\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\110\121\111" +
    "\u02e4\113\257\114\113\115\062\116\125\117\106\120\165" +
    "\121\143\126\120\144\043\164\142\165\124\171\204\172" +
    "\050\174\107\175\210\176\061\177\172\200\073\201\167" +
    "\202\131\203\174\204\127\205\071\210\134\214\260\222" +
    "\206\225\137\226\151\227\115\001\002\000\002\001\ufff1" +
    "\000\134\004\203\006\144\007\044\010\066\011\110\012" +
    "\116\016\170\032\141\054\205\055\063\075\207\076\046" +
    "\077\054\100\101\101\104\102\173\103\041\104\067\114" +
    "\113\115\062\116\125\117\106\120\165\121\143\126\120" +
    "\151\u02e8\164\142\165\124\171\204\172\050\174\107\175" +
    "\210\176\061\177\172\200\073\201\167\202\131\203\174" +
    "\204\127\205\071\210\134\222\206\225\137\226\151\227" +
    "\115\001\ufea4\000\004\223\u02f8\001\002\000\004\122\u02ef" +
    "\001\ufed3\000\012\010\066\012\116\114\113\225\137\001" +
    "\002\000\070\031\330\074\u02ea\123\317\124\337\125\310" +
    "\143\314\145\311\146\331\147\312\150\321\151\332\152" +
    "\336\153\322\154\306\155\320\156\335\157\334\160\315" +
    "\161\333\162\327\163\323\164\340\165\316\166\326\167" +
    "\324\170\307\173\313\001\ufe9f\000\134\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\151\u02eb\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\012\010" +
    "\066\012\116\114\113\225\137\001\002\000\066\031\330" +
    "\123\317\124\337\125\310\143\314\145\311\146\331\147" +
    "\312\150\321\151\332\152\336\153\322\154\306\155\320" +
    "\156\335\157\334\160\315\161\333\162\327\163\323\164" +
    "\340\165\316\166\326\167\324\170\307\173\313\001\ufea0" +
    "\000\002\001\ufe9c\000\002\001\ufe9b\000\134\004\203\006" +
    "\144\007\044\010\066\011\110\012\116\016\170\032\141" +
    "\054\205\055\063\075\207\076\046\077\054\100\101\101" +
    "\104\102\173\103\041\104\067\114\113\115\062\116\125" +
    "\117\106\120\165\121\143\126\120\151\u02f1\164\142\165" +
    "\124\171\204\172\050\174\107\175\210\176\061\177\172" +
    "\200\073\201\167\202\131\203\174\204\127\205\071\210" +
    "\134\222\206\225\137\226\151\227\115\001\ufed2\000\002" +
    "\001\ufea3\000\012\010\066\012\116\114\113\225\137\001" +
    "\002\000\070\031\330\074\u02f3\123\317\124\337\125\310" +
    "\143\314\145\311\146\331\147\312\150\321\151\332\152" +
    "\336\153\322\154\306\155\320\156\335\157\334\160\315" +
    "\161\333\162\327\163\323\164\340\165\316\166\326\167" +
    "\324\170\307\173\313\001\ufea1\000\134\004\203\006\144" +
    "\007\044\010\066\011\110\012\116\016\170\032\141\054" +
    "\205\055\063\075\207\076\046\077\054\100\101\101\104" +
    "\102\173\103\041\104\067\114\113\115\062\116\125\117" +
    "\106\120\165\121\143\126\120\151\u02f4\164\142\165\124" +
    "\171\204\172\050\174\107\175\210\176\061\177\172\200" +
    "\073\201\167\202\131\203\174\204\127\205\071\210\134" +
    "\222\206\225\137\226\151\227\115\001\002\000\012\010" +
    "\066\012\116\114\113\225\137\001\002\000\066\031\330" +
    "\123\317\124\337\125\310\143\314\145\311\146\331\147" +
    "\312\150\321\151\332\152\336\153\322\154\306\155\320" +
    "\156\335\157\334\160\315\161\333\162\327\163\323\164" +
    "\340\165\316\166\326\167\324\170\307\173\313\001\ufea2" +
    "\000\002\001\ufe9e\000\002\001\ufe9d\000\002\001\ufefe\000" +
    "\006\122\u0302\144\u0303\001\002\000\002\001\uff66\000\014" +
    "\010\066\012\116\110\u02ff\114\113\225\137\001\002\000" +
    "\002\001\uff67\000\002\001\uff65\000\002\001\ufecb\000\132" +
    "\004\203\006\144\007\044\010\066\011\110\012\116\016" +
    "\170\032\141\054\205\055\063\075\207\076\046\077\054" +
    "\100\101\101\104\102\173\103\041\104\067\114\113\115" +
    "\062\116\125\117\106\120\165\121\143\126\120\164\142" +
    "\165\124\171\204\172\050\174\107\175\210\176\061\177" +
    "\172\200\073\201\167\202\131\203\174\204\127\205\071" +
    "\210\134\222\206\225\137\226\151\227\115\001\002\000" +
    "\070\031\330\111\u0301\123\317\124\337\125\310\143\314" +
    "\145\311\146\331\147\312\150\321\151\332\152\336\153" +
    "\322\154\306\155\320\156\335\157\334\160\315\161\333" +
    "\162\327\163\323\164\340\165\316\166\326\167\324\170" +
    "\307\173\313\001\002\000\002\001\uff64\000\006\012\u02fa" +
    "\225\u02fb\001\002\000\002\001\uffc9\000\002\001\uff68\000" +
    "\134\004\203\006\144\007\044\010\066\011\110\012\116" +
    "\016\170\032\141\054\205\055\063\075\207\076\046\077" +
    "\054\100\101\101\104\102\173\103\041\104\067\114\113" +
    "\115\062\116\125\117\106\120\165\121\143\126\120\151" +
    "\u014d\164\142\165\124\171\204\172\050\174\107\175\210" +
    "\176\061\177\172\200\073\201\167\202\131\203\174\204" +
    "\127\205\071\210\134\222\206\225\137\226\151\227\115" +
    "\001\uff6f\000\004\223\u0307\001\002\000\002\001\ufef8\000" +
    "\002\001\uffa6\000\002\001\uffa7" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0307\000\010\004\003\005\004\015\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\172\015" +
    "\001\001\000\004\143\017\001\001\000\004\121\u0308\001" +
    "\001\000\004\171\020\001\001\000\004\144\022\001\001" +
    "\000\002\001\001\000\004\173\033\001\001\000\006\121" +
    "\026\145\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\037\001\001\000\076\010\101\023\145\056\154\063\177" +
    "\064\076\067\144\071\050\075\051\076\110\077\157\104" +
    "\125\114\121\115\165\121\063\123\111\124\201\126\127" +
    "\127\075\133\163\134\055\147\200\150\122\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\167\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\052\u02f8\053\u02fb\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\063\177\064" +
    "\076\067\144\071\050\075\u02dc\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\u02d5\001\001\000\052\063\177\064" +
    "\076\067\144\071\050\075\u02d4\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u02d3\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\111\u02bb\001" +
    "\001\000\002\001\001\000\052\063\177\064\076\067\144" +
    "\071\050\075\u02b3\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\002\001" +
    "\001\000\052\063\177\064\076\067\144\071\050\075\u02b2" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\002\001\001\000\004\054" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\064\076\076\110\077\157\104\125\115\u0141\121" +
    "\u0144\134\u0142\151\u027c\152\041\154\054\156\151\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\063\177\064\076" +
    "\067\144\071\050\075\u0275\076\110\077\157\104\125\114" +
    "\121\115\165\121\063\134\055\147\200\151\135\152\041" +
    "\154\054\156\151\160\131\162\071\166\104\001\001\000" +
    "\004\111\u0272\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u0271\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\004\176\u026e\001\001\000\002" +
    "\001\001\000\010\011\u0261\012\u019f\122\u0263\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0260\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\052\063\177\064\076\067\144\071" +
    "\050\075\u025f\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\010\076\u025e" +
    "\077\157\156\151\001\001\000\052\063\177\064\076\067" +
    "\144\071\050\075\u025d\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\004" +
    "\127\u025b\001\001\000\052\063\177\064\076\067\144\071" +
    "\050\075\u025a\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\076\356\077\157\104\353\121" +
    "\354\154\054\156\151\157\u0258\161\352\162\351\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\063\177\064\076\067\144\071\050" +
    "\075\u0236\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\055\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\052\063\177\064" +
    "\076\067\144\071\050\075\u0235\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u0234\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\u021c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\020\u0216\023\262\063\177\064\076\067\144\071\050" +
    "\075\051\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\055\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\002\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0214\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\054\060\u020e\063\177\064\076\067" +
    "\144\071\050\075\u020f\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\063\177\064\076\067" +
    "\144\071\050\075\u01f1\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\002" +
    "\001\001\000\052\063\177\064\076\067\144\071\050\075" +
    "\u01f0\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\063\177\064\076\067\144\071\050\075" +
    "\u01d4\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\002\001\001\000\052" +
    "\063\177\064\076\067\144\071\050\075\u01d3\076\110\077" +
    "\157\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\006\011\u01cb\012\u019f\001\001\000\002" +
    "\001\001\000\052\063\u01c8\064\076\067\144\071\050\075" +
    "\u014d\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\u01c7\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\u0194\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0192\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\052\063\177\064" +
    "\076\067\144\071\050\075\u018a\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\002\001\001\000\034\064\076\076\110\077\157\104" +
    "\125\115\u0141\121\u0144\134\u0142\151\u0143\152\041\154\054" +
    "\156\151\162\071\166\104\001\001\000\002\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u013f\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\215\115\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\067\225\070\224\115" +
    "\222\165\226\001\001\000\012\067\225\070\250\115\222" +
    "\165\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\067\225\070\231\115\222\165\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\067\225\070\237\072\235\074\236\115\222\165" +
    "\226\001\001\000\002\001\001\000\004\073\243\001\001" +
    "\000\002\001\001\000\012\067\225\070\241\115\222\165" +
    "\226\001\001\000\002\001\001\000\012\067\225\070\244" +
    "\115\222\165\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\067\225\070\246\115\222\165\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\020\264\023\262\033\260\063\177\064\076\067\144" +
    "\071\050\075\051\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\004\115" +
    "\253\001\001\000\002\001\001\000\012\067\225\070\255" +
    "\115\222\165\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\273\001\001\000\002\001\001\000\004" +
    "\021\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\020\270\022\266\023\262\063\177" +
    "\064\076\067\144\071\050\075\051\076\110\077\157\104" +
    "\125\114\121\115\165\121\063\134\055\147\200\151\135" +
    "\152\041\154\054\156\151\160\131\162\071\166\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\067\225\070\300\115\222\165\226\001\001\000\002\001" +
    "\001\000\012\067\225\070\302\115\222\165\226\001\001" +
    "\000\002\001\001\000\052\063\177\064\076\067\144\071" +
    "\050\075\304\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\002\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u013e\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\052\063\177\064\076\067\144" +
    "\071\050\075\u013d\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\052\063" +
    "\177\064\076\067\144\071\050\075\u013c\076\110\077\157" +
    "\104\125\114\121\115\165\121\063\134\055\147\200\151" +
    "\135\152\041\154\054\156\151\160\131\162\071\166\104" +
    "\001\001\000\052\063\177\064\076\067\144\071\050\075" +
    "\u013b\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\052\063\177\064\076" +
    "\067\144\071\050\075\u013a\076\110\077\157\104\125\114" +
    "\121\115\165\121\063\134\055\147\200\151\135\152\041" +
    "\154\054\156\151\160\131\162\071\166\104\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0139\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\052\063\177\064\076\067\144\071" +
    "\050\075\u0136\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\052\063\177" +
    "\064\076\067\144\071\050\075\u0135\076\110\077\157\104" +
    "\125\114\121\115\165\121\063\134\055\147\200\151\135" +
    "\152\041\154\054\156\151\160\131\162\071\166\104\001" +
    "\001\000\052\063\177\064\076\067\144\071\050\075\u0134" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\052\063\177\064\076\067" +
    "\144\071\050\075\u0133\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\052" +
    "\063\177\064\076\067\144\071\050\075\u0132\076\110\077" +
    "\157\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\052\063\177\064\076\067\144\071\050" +
    "\075\u0131\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\055\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\052\063\177\064" +
    "\076\067\144\071\050\075\u0130\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u012f\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\052\063\177\064\076\067\144" +
    "\071\050\075\u012e\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\056\020" +
    "\u0116\023\262\063\177\064\076\067\144\071\050\075\051" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\052\063\177\064\076\067" +
    "\144\071\050\075\u0114\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\052" +
    "\063\177\064\076\067\144\071\050\075\u0113\076\110\077" +
    "\157\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\024\076\356\077\157\104\353\121\354" +
    "\154\054\156\151\157\350\161\352\162\351\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\347\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\052\063\177\064\076\067\144\071" +
    "\050\075\346\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\052\063\177" +
    "\064\076\067\144\071\050\075\345\076\110\077\157\104" +
    "\125\114\121\115\165\121\063\134\055\147\200\151\135" +
    "\152\041\154\054\156\151\160\131\162\071\166\104\001" +
    "\001\000\052\063\177\064\076\067\144\071\050\075\344" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\052\063\177\064\076\067" +
    "\144\071\050\075\343\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\052" +
    "\063\177\064\076\067\144\071\050\075\342\076\110\077" +
    "\157\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\052\063\177\064\076\067\144\071\050" +
    "\075\341\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\055\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\052\063\177\064" +
    "\076\067\144\071\050\075\340\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\076\377\077\157\156\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\063\177\064\076\067\144\071\050\075\364" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\054\063\177\064\076\067" +
    "\144\071\050\075\362\076\110\077\157\100\361\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\076\371\077\157" +
    "\104\370\152\367\156\151\001\001\000\002\001\001\000" +
    "\010\076\372\077\157\156\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\063\177\064" +
    "\076\067\144\071\050\075\375\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\076\371\077\157\101\u0104\102\u0105\103\u0102\104\370" +
    "\115\u0101\152\u0103\156\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\163\u010f\001\001" +
    "\000\002\001\001\000\052\063\177\064\076\067\144\071" +
    "\050\075\u0107\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\063\177\064\076\067\144\071" +
    "\050\075\u010d\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\054\063\177" +
    "\064\076\067\144\071\050\075\362\076\110\077\157\100" +
    "\u010b\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\164\u0110\001\001\000" +
    "\002\001\001\000\024\076\371\077\157\101\u0112\102\u0105" +
    "\103\u0102\104\370\115\u0101\152\u0103\156\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0120\001\001\000\004\041\u0117\001\001\000\004\043" +
    "\u0118\001\001\000\002\001\001\000\056\020\u011f\023\262" +
    "\063\177\064\076\067\144\071\050\075\051\076\110\077" +
    "\157\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\002\001\001\000\052\063\177\064\076" +
    "\067\144\071\050\075\u011c\076\110\077\157\104\125\114" +
    "\121\115\165\121\063\134\055\147\200\151\135\152\041" +
    "\154\054\156\151\160\131\162\071\166\104\001\001\000" +
    "\002\001\001\000\056\020\u011e\023\262\063\177\064\076" +
    "\067\144\071\050\075\051\076\110\077\157\104\125\114" +
    "\121\115\165\121\063\134\055\147\200\151\135\152\041" +
    "\154\054\156\151\160\131\162\071\166\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\020\270\022\266" +
    "\023\262\042\u0121\063\177\064\076\067\144\071\050\075" +
    "\051\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\004\044\u0122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0126\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0129\001\001\000\060\020\270\022\266\023\262" +
    "\063\177\064\076\067\144\071\050\075\051\076\110\077" +
    "\157\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\004\021\u012b\001\001\000\060\020\270" +
    "\022\266\023\262\063\177\064\076\067\144\071\050\075" +
    "\051\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0138\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\076\371\077\157\104\370\152" +
    "\u0146\156\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\050\u014b\051\u0149\063\u014e\064\076\067\144\071" +
    "\050\075\u014d\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\u014a\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\064\076\076" +
    "\110\077\157\104\125\115\u0141\120\u014f\121\u0144\134\u0150" +
    "\152\041\154\054\156\151\162\071\166\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\063\177\064\076\067" +
    "\144\071\050\075\u0171\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\052" +
    "\063\177\064\076\067\144\071\050\075\u0169\076\110\077" +
    "\157\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\052\063\177\064\076\067\144\071\050" +
    "\075\u0167\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\055\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\052\063\177\064" +
    "\076\067\144\071\050\075\u0166\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u0165\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\052\063\177\064\076\067\144" +
    "\071\050\075\u0164\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\052\063" +
    "\177\064\076\067\144\071\050\075\u0163\076\110\077\157" +
    "\104\125\114\121\115\165\121\063\134\055\147\200\151" +
    "\135\152\041\154\054\156\151\160\131\162\071\166\104" +
    "\001\001\000\052\063\177\064\076\067\144\071\050\075" +
    "\u0162\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\052\063\177\064\076" +
    "\067\144\071\050\075\u0161\076\110\077\157\104\125\114" +
    "\121\115\165\121\063\134\055\147\200\151\135\152\041" +
    "\154\054\156\151\160\131\162\071\166\104\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0160\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\052\063\177\064\076\067\144\071" +
    "\050\075\u015f\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\052\063\177" +
    "\064\076\067\144\071\050\075\u015e\076\110\077\157\104" +
    "\125\114\121\115\165\121\063\134\055\147\200\151\135" +
    "\152\041\154\054\156\151\160\131\162\071\166\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\064\076\076\110\077\157\104\125\115" +
    "\u0141\121\u0144\134\u016b\152\041\154\054\156\151\162\071" +
    "\166\104\001\001\000\002\001\001\000\024\076\356\077" +
    "\157\104\353\121\354\154\054\156\151\157\u016c\161\352" +
    "\162\351\001\001\000\002\001\001\000\004\066\u016d\001" +
    "\001\000\002\001\001\000\056\050\u016f\051\u0149\063\u014e" +
    "\064\076\067\144\071\050\075\u014d\076\110\077\157\104" +
    "\125\114\121\115\165\121\063\134\u014a\147\200\151\135" +
    "\152\041\154\054\156\151\160\131\162\071\166\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\063\u0175\064\076\067\144\071\050\075\u014d\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\u0173" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\034\064\076" +
    "\076\110\077\157\104\125\115\u0141\120\u0176\121\u0144\134" +
    "\u0150\152\041\154\054\156\151\162\071\166\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\050\u0178\051" +
    "\u0149\063\u014e\064\076\067\144\071\050\075\u014d\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\u014a\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\050\u017b\051\u0149\063\u014e\064\076\067\144\071\050" +
    "\075\u014d\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\u014a\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\064\076\076\110\077\157\104\125" +
    "\105\u017e\106\u017f\115\u0141\121\u0144\134\u0180\152\041\154" +
    "\054\156\151\162\071\166\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\064\076\076\110\077\157\104\125\105\u0183\106\u017f" +
    "\115\u0141\121\u0144\134\u0180\152\041\154\054\156\151\162" +
    "\071\166\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\064\076\076\110\077\157\104\125\106\u0186\115" +
    "\u0141\121\u0144\134\u0180\152\041\154\054\156\151\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0189\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\064\076\076\110\077\157\104\125" +
    "\115\u0141\121\u0144\134\u018d\152\041\154\054\155\u018e\156" +
    "\151\162\071\166\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\064\076\076\110\077" +
    "\157\104\125\115\u0141\121\u0144\134\u0191\152\041\154\054" +
    "\156\151\162\071\166\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\063\177\064\076\067\144\071\050" +
    "\075\u0195\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\055\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\u019a\001\001\000\002\001\001\000\010\011\u019c\012" +
    "\u019f\115\u019d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\177\u01a5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\045\u01aa\046\u01ac\047\u01ad\146\u01a8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\047\u01af\146\u01a8\001\001\000\002\001\001\000" +
    "\004\200\u01b1\001\001\000\004\125\u01b2\001\001\000\002" +
    "\001\001\000\004\021\u01b5\001\001\000\002\001\001\000" +
    "\060\020\270\022\266\023\262\063\177\064\076\067\144" +
    "\071\050\075\051\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\067\225" +
    "\070\u01ba\115\222\165\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\067\225\070\u01bd\115\222\165\226" +
    "\001\001\000\002\001\001\000\004\115\u01bf\001\001\000" +
    "\004\174\u01c0\001\001\000\002\001\001\000\012\045\u01c2" +
    "\046\u01ac\047\u01ad\146\u01a8\001\001\000\002\001\001\000" +
    "\004\175\u01c4\001\001\000\004\125\u01c5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\067\225\070\u01ce\115\222\165" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\067\225\070\u01d1\115\222\165\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u01d6\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\004\035\u01d9" +
    "\001\001\000\004\036\u01eb\001\001\000\002\001\001\000" +
    "\004\036\u01db\001\001\000\002\001\001\000\004\036\u01dd" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\063" +
    "\177\064\076\067\144\071\050\075\u01e5\076\110\077\157" +
    "\104\125\114\121\115\165\121\063\134\055\147\200\151" +
    "\135\152\041\154\054\156\151\160\131\162\071\166\104" +
    "\001\001\000\004\037\u01e1\001\001\000\004\021\u01e4\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\020\270" +
    "\022\266\023\262\063\177\064\076\067\144\071\050\075" +
    "\051\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\004\037\u01e6\001\001" +
    "\000\004\021\u01e7\001\001\000\060\020\270\022\266\023" +
    "\262\063\177\064\076\067\144\071\050\075\051\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\u01ed\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\u01fb\014\u01f8\001" +
    "\001\000\006\013\u020d\014\u01f8\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u0203\014\u01f8\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u0200\014\u01f8" +
    "\001\001\000\006\013\u01ff\014\u01f8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u0206\012\u019f\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\u0209\012\u019f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\063\177\064\076\067\144\071\050\075\u0212\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\063\177\064\076\067" +
    "\144\071\050\075\u0219\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\112" +
    "\u021e\156\u021d\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\064\076\076\110\077\157\104\125\115\u0141\121" +
    "\u0144\134\u022a\152\041\154\054\156\151\162\071\166\104" +
    "\001\001\000\002\001\001\000\052\063\177\064\076\067" +
    "\144\071\050\075\u0224\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\063\177\064\076\067\144\071\050\075\u0227" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\113\u0230\115\u0231\156\u022f\001\001\000\004\115" +
    "\u022e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\063\u0239\064\076\067\144\071\050\075\u014d\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\u0238" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\064\076\076\110\077\157\104\125\115\u0141\121" +
    "\u0144\134\u023b\152\041\154\054\156\151\162\071\166\104" +
    "\001\001\000\004\027\u023c\001\001\000\002\001\001\000" +
    "\034\030\u023e\064\076\076\110\077\157\104\125\115\u0141" +
    "\121\u0144\134\u023f\152\041\154\054\156\151\162\071\166" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\064\076\076\110\077\157\104\125\115\u0141\121\u0144\134" +
    "\u0241\152\041\154\054\156\151\162\071\166\104\001\001" +
    "\000\002\001\001\000\060\020\u0244\023\262\032\u0245\063" +
    "\177\064\076\067\144\071\050\075\051\076\110\077\157" +
    "\104\125\114\121\115\165\121\063\134\055\147\200\151" +
    "\135\152\041\154\054\156\151\160\131\162\071\166\104" +
    "\001\001\000\004\021\u0246\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\020\270\022\266\023\262\063\177" +
    "\064\076\067\144\071\050\075\051\076\110\077\157\104" +
    "\125\114\121\115\165\121\063\134\055\147\200\151\135" +
    "\152\041\154\054\156\151\160\131\162\071\166\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\030\u024a" +
    "\064\076\076\110\077\157\104\125\115\u0141\121\u0144\134" +
    "\u023f\152\041\154\054\156\151\162\071\166\104\001\001" +
    "\000\004\027\u024b\001\001\000\002\001\001\000\060\020" +
    "\u0244\023\262\032\u024d\063\177\064\076\067\144\071\050" +
    "\075\051\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\055\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\024\u0253\025\u0251" +
    "\064\076\076\110\077\157\104\125\115\u0141\121\u0144\134" +
    "\u0252\152\041\154\054\156\151\162\071\166\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\025\u0256\064\076\076\110\077\157" +
    "\104\125\115\u0141\121\u0144\134\u0252\152\041\154\054\156" +
    "\151\162\071\166\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\u0259\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\067\225\070\u0268\115\222\165\226\001\001\000\002" +
    "\001\001\000\012\067\225\070\u026a\115\222\165\226\001" +
    "\001\000\002\001\001\000\004\122\u026c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u026f\001\001\000" +
    "\060\020\270\022\266\023\262\063\177\064\076\067\144" +
    "\071\050\075\051\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\112\u021e\156\u021d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\067\225\070\u027b\115\222\165\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\063\177" +
    "\064\076\067\144\071\050\075\u027e\076\110\077\157\104" +
    "\125\114\121\115\165\121\063\134\055\147\200\151\135" +
    "\152\041\154\054\156\151\160\131\162\071\166\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\076\371" +
    "\077\157\101\u0281\102\u0105\103\u0102\104\370\115\u0101\152" +
    "\u0103\156\151\001\001\000\004\130\u0282\001\001\000\004" +
    "\131\u0286\001\001\000\056\050\u0284\051\u0149\063\u014e\064" +
    "\076\067\144\071\050\075\u014d\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\u014a\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\153\u0287\001" +
    "\001\000\002\001\001\000\024\076\371\077\157\101\u0289" +
    "\102\u0105\103\u0102\104\370\115\u0101\152\u0103\156\151\001" +
    "\001\000\004\130\u028a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\u028e\014\u01f8\001" +
    "\001\000\002\001\001\000\004\021\u0290\001\001\000\060" +
    "\020\270\022\266\023\262\063\177\064\076\067\144\071" +
    "\050\075\051\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\002\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u0293\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\060\020\u0297" +
    "\023\262\040\u0296\063\177\064\076\067\144\071\050\075" +
    "\051\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\004\021\u0298\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\020\270\022" +
    "\266\023\262\063\177\064\076\067\144\071\050\075\051" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u029c\001\001\000\060\020\270\022\266" +
    "\023\262\063\177\064\076\067\144\071\050\075\051\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\121\u02a0\001\001\000\004\156\u02a1\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u02a4\001\001" +
    "\000\060\020\270\022\266\023\262\063\177\064\076\067" +
    "\144\071\050\075\051\076\110\077\157\104\125\114\121" +
    "\115\165\121\063\134\055\147\200\151\135\152\041\154" +
    "\054\156\151\160\131\162\071\166\104\001\001\000\010" +
    "\135\u02a7\136\u02a9\137\u02a8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\137\u02aa\001\001" +
    "\000\002\001\001\000\004\121\u02ac\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u02b0" +
    "\001\001\000\060\020\270\022\266\023\262\063\177\064" +
    "\076\067\144\071\050\075\051\076\110\077\157\104\125" +
    "\114\121\115\165\121\063\134\055\147\200\151\135\152" +
    "\041\154\054\156\151\160\131\162\071\166\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u02b7\014\u01f8" +
    "\001\001\000\002\001\001\000\004\021\u02b9\001\001\000" +
    "\060\020\270\022\266\023\262\063\177\064\076\067\144" +
    "\071\050\075\051\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\002\001" +
    "\001\000\006\112\u021e\156\u021d\001\001\000\002\001\001" +
    "\000\056\061\u02c0\062\u02be\063\177\064\076\067\144\071" +
    "\050\075\u02bf\076\110\077\157\104\125\114\121\115\165" +
    "\121\063\134\055\147\200\151\135\152\041\154\054\156" +
    "\151\160\131\162\071\166\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\061\u02c2\062" +
    "\u02be\063\177\064\076\067\144\071\050\075\u02bf\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\056\061\u02c4\062" +
    "\u02be\063\177\064\076\067\144\071\050\075\u02bf\076\110" +
    "\077\157\104\125\114\121\115\165\121\063\134\055\147" +
    "\200\151\135\152\041\154\054\156\151\160\131\162\071" +
    "\166\104\001\001\000\002\001\001\000\060\020\u02c8\023" +
    "\262\031\u02c6\063\177\064\076\067\144\071\050\075\051" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\002\001\001\000\004\021" +
    "\u02c9\001\001\000\002\001\001\000\060\020\270\022\266" +
    "\023\262\063\177\064\076\067\144\071\050\075\051\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\063\177\064\076\067\144\071\050\075\u02cd\076" +
    "\110\077\157\104\125\114\121\115\165\121\063\134\055" +
    "\147\200\151\135\152\041\154\054\156\151\160\131\162" +
    "\071\166\104\001\001\000\002\001\001\000\014\076\371" +
    "\077\157\104\370\152\u0146\156\151\001\001\000\002\001" +
    "\001\000\032\064\076\076\110\077\157\104\125\115\u0141" +
    "\121\u0144\134\u02d1\152\041\154\054\156\151\162\071\166" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u02e0\014\u01f8" +
    "\001\001\000\002\001\001\000\004\021\u02e2\001\001\000" +
    "\060\020\270\022\266\023\262\063\177\064\076\067\144" +
    "\071\050\075\051\076\110\077\157\104\125\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\002\001" +
    "\001\000\056\063\177\064\076\067\144\071\050\075\u02e8" +
    "\076\110\077\157\104\125\107\u02e5\110\u02e6\114\121\115" +
    "\165\121\063\134\055\147\200\151\135\152\041\154\054" +
    "\156\151\160\131\162\071\166\104\001\001\000\002\001" +
    "\001\000\004\073\u02ef\001\001\000\034\064\076\076\110" +
    "\077\157\104\125\115\u0141\120\u02ed\121\u0144\134\u0150\152" +
    "\041\154\054\156\151\162\071\166\104\001\001\000\002" +
    "\001\001\000\052\063\177\064\076\067\144\071\050\075" +
    "\u02eb\076\110\077\157\104\125\114\121\115\165\121\063" +
    "\134\055\147\200\151\135\152\041\154\054\156\151\160" +
    "\131\162\071\166\104\001\001\000\034\064\076\076\110" +
    "\077\157\104\125\115\u0141\120\u02ec\121\u0144\134\u0150\152" +
    "\041\154\054\156\151\162\071\166\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\063" +
    "\177\064\076\067\144\071\050\075\u02f1\076\110\077\157" +
    "\104\125\114\121\115\165\121\063\134\055\147\200\151" +
    "\135\152\041\154\054\156\151\160\131\162\071\166\104" +
    "\001\001\000\002\001\001\000\034\064\076\076\110\077" +
    "\157\104\125\115\u0141\120\u02f6\121\u0144\134\u0150\152\041" +
    "\154\054\156\151\162\071\166\104\001\001\000\002\001" +
    "\001\000\052\063\177\064\076\067\144\071\050\075\u02f4" +
    "\076\110\077\157\104\125\114\121\115\165\121\063\134" +
    "\055\147\200\151\135\152\041\154\054\156\151\160\131" +
    "\162\071\166\104\001\001\000\034\064\076\076\110\077" +
    "\157\104\125\115\u0141\120\u02f5\121\u0144\134\u0150\152\041" +
    "\154\054\156\151\162\071\166\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\064\076\076" +
    "\110\077\157\104\125\115\u0141\121\u0144\134\u02fd\147\u02fc" +
    "\152\041\154\054\156\151\162\071\166\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\063\177\064\076\067\144\071\050\075\u02ff\076\110\077" +
    "\157\104\125\114\121\115\165\121\063\134\055\147\200" +
    "\151\135\152\041\154\054\156\151\160\131\162\071\166" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\u0303\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\050\u0305\051\u0149\063\u014e\064\076\067\144\071\050" +
    "\075\u014d\076\110\077\157\104\125\114\121\115\165\121" +
    "\063\134\u014a\147\200\151\135\152\041\154\054\156\151" +
    "\160\131\162\071\166\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAspectParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAspectParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAspectParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;
		
		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}
	
	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.REFLECTION_CALL_EXPRESSION) {
			((ReflectionCallExpression) property).setReceiver (dispatcher);
			dispatcher = property;
		} else if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher =  new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

	protected String getTokenName(int token) {
		return PHPAspectSymbolsUtils.getTokenName(token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PHPAspectParser$actions {
  private final PHPAspectParser parser;

  /** Constructor */
  CUP$PHPAspectParser$actions(PHPAspectParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PHPAspectParser$do_action(
    int                        CUP$PHPAspectParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAspectParser$parser,
    java.util.Stack            CUP$PHPAspectParser$stack,
    int                        CUP$PHPAspectParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAspectParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAspectParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // string_st ::= T_DEFINE 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(75/*string_st*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(75/*string_st*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(108/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name); 
	RESULT = constant;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(110/*class_constant*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(107/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(107/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList();
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList();
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar scalar = new Scalar(numleft,numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // encaps_var_offset ::= string_st 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft,stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference indexedVar = new ArrayVariableReference(startleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // encaps_var ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // encaps_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // assignment_list_element ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(68/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(68/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // assignment_list_element ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(68/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(67/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(67/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(66/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(66/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(65/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // variable_name ::= string_st 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(65/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // object_dim_list ::= variable_name 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(64/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = varArray;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(64/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression varArray;
	if(var.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		varArray = new ArrayVariableReference(varleft, endright, ((SimpleReference)var).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		varArray = new ReflectionArrayVariableReference(varleft, endright, var, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = varArray;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(64/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // object_property ::= variable_without_objects 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(63/*object_property*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // object_property ::= object_dim_list 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(63/*object_property*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = expr; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(62/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // dim_offset ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(62/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;	 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(61/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // compound_variable ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(61/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // reference_variable ::= compound_variable 
            {
              Expression RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(60/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(60/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression var;
	if(varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference)varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(60/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // base_variable ::= static_member 
            {
              Expression RESULT = null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		StaticFieldAccess staticFieldAccess = (StaticFieldAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(112/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(112/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // base_variable ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(112/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(116/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(116/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              StaticFieldAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(106/*static_member*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(104/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(104/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // method_or_not ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(86/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(86/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              Expression RESULT = null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			result = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			result = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(105/*variable_property*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(87/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression variableProperty = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(87/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(90/*variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// get the last property 
	Expression firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		if (memberProperty.getClass().equals(SimpleReference.class)) {
			firstVarProperty = new PHPCallExpression(memberPropertyleft, paramsListright, null, (SimpleReference)memberProperty, paramsList);
		} else {
			firstVarProperty = new ReflectionCallExpression(memberPropertyleft, paramsListright, null, memberProperty, paramsList);
		}
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;
	
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}

	RESULT = dispatcher;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(90/*variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // rw_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(103/*rw_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // w_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(78/*w_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // r_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(101/*r_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = ewv; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(59/*expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // expr ::= r_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(59/*expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(58/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(58/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(58/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(58/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(57/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(57/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(56/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(56/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(55/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(55/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(55/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // scalar ::= class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(55/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(55/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // scalar ::= string_st 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(55/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	TypeReference cname = new TypeReference(classNameleft, classNameright, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, cname, vname); 
	RESULT = constant;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(115/*static_class_constant*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // static_scalar ::= static_class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // static_scalar ::= string_st 
            {
              Expression RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // common_scalar ::= T_FILE 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // common_scalar ::= T_LINE 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = expr;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(51/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(51/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(51/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(114/*dynamic_class_name_variable_property*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(113/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(113/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // dynamic_class_name_reference ::= base_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	 RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(111/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression firstVarProperty = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Expression dispatcher = var;

	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		Expression property = (Expression)listIt.next();
		dispatcher = parser.createDispatch(dispatcher, property);
	}	
	
	RESULT = dispatcher;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(111/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(109/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // class_name_reference ::= T_STRING 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	TypeReference classReference = new TypeReference(classNameleft, classNameright, className);
	RESULT = classReference;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(109/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // fully_qualified_class_name ::= T_STRING 
            {
              TypeReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	TypeReference name = new TypeReference(classNameleft, classNameright, className);
	RESULT = name;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(79/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(50/*function_call*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters); 
	RESULT = functionInvocation;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(50/*function_call*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(50/*function_call*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, name, parameters); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(50/*function_call*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = scalar; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = expr;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = expr; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation, varComment);
	RESULT = assignment;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar, varComment); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr, varComment); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(47/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(47/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(46/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(46/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(81/*class_constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(81/*class_constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(80/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // member_modifier ::= T_FINAL 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(85/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // member_modifier ::= T_ABSTRACT 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(85/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // member_modifier ::= T_STATIC 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(85/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // member_modifier ::= T_PRIVATE 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(85/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // member_modifier ::= T_PROTECTED 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(85/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // member_modifier ::= T_PUBLIC 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(85/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(84/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(84/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // method_modifiers ::= non_empty_member_modifiers 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(82/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // method_modifiers ::= 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(82/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // variable_modifiers ::= T_VAR 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock var = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(102/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variable_modifiers ::= non_empty_member_modifiers 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result |= modifier.modifier;
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(102/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // method_body ::= 
            {
              Statement RESULT = null;
		
	parser.reportError();
	RESULT = new ASTError(0,0);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(83/*method_body*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // class_statement ::= error 
            {
              Object RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(44/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		


              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(44/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st NT$5 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$6 method_body 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration)parser.declarations.pop();
	if(body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration)parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(44/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$6 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(126/*NT$6*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$5 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(125/*NT$5*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Object RESULT = null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference)decl[0];
		Expression initializer = (Expression)decl[1];
		
		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock)decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ClassConstantDeclaration(constant, initializer, start, end, docBlock));
	}

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(44/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(44/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(42/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // static_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(42/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VarComment varComment = (VarComment)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr, varComment); 
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(42/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference v = new VariableReference(varleft, varright, var); 
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(42/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(41/*global_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(41/*global_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // global_var ::= T_VARIABLE 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(41/*global_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(40/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(40/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(39/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(39/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(39/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(39/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(39/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(39/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT = null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(38/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(38/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	TypeReference reference = new TypeReference(arrayleft, arrayright, "array");
	RESULT = reference;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(100/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // optional_class_type ::= T_STRING 
            {
              TypeReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	TypeReference reference = new TypeReference(classNameleft, classNameright, className);
	RESULT = reference;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(100/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // optional_class_type ::= 
            {
              TypeReference RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(100/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parameter ::= error 
            {
              FormalParameter RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(37/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(37/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(37/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(37/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(37/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(36/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(36/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	if(parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(36/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parameter_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(35/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(35/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(34/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(34/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(33/*else_single*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(33/*else_single*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
			
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(32/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(32/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(31/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(31/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(30/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(30/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(29/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(29/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(28/*case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(28/*case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(28/*case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(27/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(27/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(27/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(27/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(26/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(26/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(25/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(25/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(24/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(24/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(23/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(23/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(22/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // foreach_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(22/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(21/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // foreach_optional_arg ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(21/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // interface_list ::= error 
            {
              List RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(99/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(99/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(99/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	if(className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(99/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(98/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // implements_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(98/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(77/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // interface_extends_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(77/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = value;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(76/*interface_entry*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(97/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(97/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // extends_from ::= 
            {
              TypeReference RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(97/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // class_entry_type ::= T_FINAL T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(96/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(96/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // class_entry_type ::= T_CLASS 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(96/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(117/*class_closure*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // class_closure ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(117/*class_closure*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(117/*class_closure*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // errorOrNot ::= 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(119/*errorOrNot*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // errorOrNot ::= error 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(119/*errorOrNot*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(45/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(45/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(20/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(20/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unset_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(19/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(18/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(18/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT = null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(93/*additional_catch*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(92/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT = null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(92/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additional_catches ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(91/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(91/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_CURLY_OPEN NT$4 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value != null )
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = (Block)parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$4 ::= 
            {
              Object RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);
	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(124/*NT$4*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// TODO: var comment should be added as ast node

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(14/*statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inner_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(15/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
		if(statement.getKind() == ASTNodeKinds.AST_ERROR){
			if(!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if(node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}		
		}
	}
	RESULT = statementList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(15/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aspect_signature ::= T_STRING 
            {
              String RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = str.toString();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(8/*aspect_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aspect_signature ::= T_TIMES 
            {
              String RESULT = null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = times.toString();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(8/*aspect_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aspect_signature ::= aspect_signature T_STRING 
            {
              String RESULT = null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(8/*aspect_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aspect_signature ::= aspect_signature T_TIMES 
            {
              String RESULT = null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(8/*aspect_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aspect_inter_type_signature ::= T_RGREATER T_STRING T_LGREATER 
            {
              String RESULT = null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(7/*aspect_inter_type_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aspect_inter_type_signature ::= aspect_signature 
            {
              String RESULT = null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(7/*aspect_inter_type_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aspect_entry_type ::= T_FINAL T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(3/*aspect_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aspect_entry_type ::= T_ABSTRACT T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(3/*aspect_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aspect_entry_type ::= T_ASPECT 
            {
              PHPAspectParser.ModifierDocPair RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(3/*aspect_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aspect_is_persistent ::= 
            {
              Boolean RESULT = null;
		 RESULT = false; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(4/*aspect_is_persistent*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aspect_is_persistent ::= T_PERSESSION 
            {
              Boolean RESULT = null;
		 RESULT = true; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(4/*aspect_is_persistent*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aspect_joinpoint ::= T_CALL T_OPEN_PARENTHESE aspect_inter_type_signature T_OBJECT_OPERATOR aspect_inter_type_signature T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//RESULT = new MethodInvocationPredicate(interType, methodName);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(10/*aspect_joinpoint*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aspect_joinpoint ::= T_STRING T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Object RESULT = null;
		int ptNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ptNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String ptName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	//RESULT = parser.pointcuts.get(ptName);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(10/*aspect_joinpoint*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aspect_pointcut ::= aspect_joinpoint 
            {
              Object RESULT = null;
		int jpleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int jpright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object jp = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//RESULT = jp;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aspect_pointcut ::= T_NOT aspect_pointcut 
            {
              Object RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//RESULT = new NotPointcut(pt); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aspect_pointcut ::= T_OPEN_PARENTHESE aspect_pointcut T_CLOSE_PARENTHESE 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//RESULT = new ParenthesisPointcut(pt);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_AND aspect_pointcut 
            {
              Object RESULT = null;
		int pt1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object pt1 = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object pt2 = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//RESULT = new AndPointcut(pt1, pt2);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_OR aspect_pointcut 
            {
              Object RESULT = null;
		int pt1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object pt1 = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object pt2 = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//RESULT = new OrPointcut(pt1, pt2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aspect_statement ::= T_AFTER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//Block block = new Block(blockStartleft, endright, parser.ast, statementList);
	//AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, parser.ast, AdviceType.After, pt, block);
	//RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aspect_statement ::= T_AROUND T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//Block block = new Block(blockStartleft, endright, parser.ast, statementList);
	//AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, parser.ast, AdviceType.Around, pt, block);
	//RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aspect_statement ::= T_BEFORE T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	//Block block = new Block(blockStartleft, endright, parser.ast, statementList);
	//AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, parser.ast, AdviceType.Before, pt, block);
	//RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // aspect_statement ::= T_POINTCUT T_STRING T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_SEMICOLON 
            {
              Object RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int ptNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String ptName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
    //parser.pointcuts.put(ptName, pt);
	//RESULT = null;
	//AspectPointcutDeclaration aspectPointcutDeclaration = new AspectPointcutDeclaration(startleft, endright, parser.ast, ptName, expr);
	//RESULT = aspectPointcutDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // aspect_statement ::= method_modifiers T_FUNCTION is_reference aspect_inter_type_signature T_PAAMAYIM_NEKUDOTAYIM string_st NT$2 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$3 method_body 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	InterTypePHPMethodDeclaration methodDeclaration = (InterTypePHPMethodDeclaration)parser.declarations.pop();
	if(body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration)parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;

	InterTypePHPMethodDeclaration functionDeclaration = (InterTypePHPMethodDeclaration)parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(123/*NT$3*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	InterTypePHPMethodDeclaration methodDeclaration = new InterTypePHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, interType, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(122/*NT$2*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // aspect_statement ::= T_CONST aspect_inter_type_signature T_STRING T_EQUAL static_scalar T_SEMICOLON 
            {
              Object RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	InterTypeConstantReference constId = new InterTypeConstantReference(constNameleft, constNameright, interType, constName);
	RESULT = constId;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // aspect_statement ::= variable_modifiers aspect_inter_type_signature T_PAAMAYIM_NEKUDOTAYIM class_variable_declaration T_SEMICOLON 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
  Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference)decl[0];
		Expression initializer = (Expression)decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new InterTypePHPFieldDeclaration(interType, variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // aspect_statement ::= class_statement 
            {
              Object RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // aspect_statement_list ::= 
            {
              List RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(5/*aspect_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // aspect_statement_list ::= aspect_statement_list aspect_statement 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int aspectStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int aspectStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object aspectStatement = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	if(!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(5/*aspect_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unticked_aspect_declaration_statement ::= aspect_entry_type T_STRING NT$0 extends_from errorOrNot implements_list NT$1 aspect_is_persistent T_CURLY_OPEN aspect_statement_list class_closure 
            {
              AspectDeclaration RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value != null )
                RESULT = (AspectDeclaration) ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value != null )
                RESULT = (AspectDeclaration) ((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int persistentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int persistentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Boolean persistent = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	if(blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished aspect declaration");
		parser.pendingStatement = blockEnd;
	}

	AspectDeclaration aspectDeclaration = (AspectDeclaration)parser.declarations.pop();
	aspectDeclaration.setPersistent(persistent);
	aspectDeclaration.setEnd(blockEndright);
	aspectDeclaration.getBody().setStart(blockStartleft);
	aspectDeclaration.getBody().setEnd(blockEndright);
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(2/*unticked_aspect_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;

	AspectDeclaration aspectDeclaration = (AspectDeclaration)parser.declarations.peek();
	if (superClass != null) {
		aspectDeclaration.setSuperClass(superClass);
	}
	if (interfaces != null) {
		aspectDeclaration.setInterfaceList(interfaces);
	}
	aspectDeclaration.setEnd(interfacesright);
	aspectDeclaration.getBody().setStart(interfacesright);
	aspectDeclaration.getBody().setEnd(interfacesright);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(121/*NT$1*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		PHPAspectParser.ModifierDocPair modifier = (PHPAspectParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;

	AspectDeclaration aspectDeclaration = new AspectDeclaration(modifierleft ,classNameright, classNameleft, classNameright, modifier.modifier, className, null, null, false, new Block(classNameright,classNameright,null), modifier.doc);
	parser.addDeclarationStatement(aspectDeclaration);
	parser.declarations.push(aspectDeclaration);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(120/*NT$0*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PHPAspectParser$parser.done_parsing();
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= unticked_aspect_declaration_statement 
            {
              ModuleDeclaration RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		AspectDeclaration statement = (AspectDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();
	program.setStart(statementleft);
	program.setEnd(statementright);
	RESULT = program; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(11/*thestart*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

