/* The following code was generated by JFlex 1.3.5 on 12/5/07 12:48 AM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.phpaspect.apdt.internal.core.documentModel.parser;

import org.eclipse.php.internal.core.documentModel.parser.PhpLexer;
import org.phpaspect.apdt.internal.core.documentModel.parser.regions.PHPAspectRegionTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 12/5/07 12:48 AM from the specification file
 * <tt>file:/home/wcandillon/workspace/org.phpaspect.apdt.core/Resources/highlighting/PHPAspectLexer.jflex</tt>
 */
public class PHPAspectLexer extends PhpLexer implements PHPAspectRegionTypes {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_PHP_LINE_COMMENT = 12;
  final public static int ST_PHP_DOUBLE_QUOTES = 2;
  final public static int ST_PHP_COMMENT = 10;
  final public static int ST_PHP_BACKQUOTE = 3;
  final public static int ST_PHP_DOC_COMMENT = 11;
  final public static int ST_PHP_START_HEREDOC = 6;
  final public static int ST_PHP_END_HEREDOC = 7;
  final public static int ST_PHP_VAR_OFFSET = 9;
  final public static int YYINITIAL = 0;
  final public static int ST_PHP_IN_SCRIPTING = 1;
  final public static int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  final public static int ST_PHP_HEREDOC = 5;
  final public static int ST_PHP_HIGHLIGHTING_ERROR = 13;
  final public static int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\12\1\15\2\0\1\11\22\0\1\12\1\26\1\17\1\74"+
    "\1\16\1\32\1\33\1\73\1\62\1\64\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\60\1\14\1\27\1\23\1\24\1\75"+
    "\1\76\1\40\1\7\1\47\1\42\1\3\1\45\1\63\1\52\1\43"+
    "\1\65\1\55\1\54\1\57\1\41\1\36\1\56\1\67\1\37\1\50"+
    "\1\44\1\46\1\61\1\53\1\6\1\51\1\10\1\71\1\20\1\72"+
    "\1\35\1\66\1\21\1\40\1\7\1\47\1\42\1\3\1\45\1\63"+
    "\1\52\1\43\1\65\1\55\1\54\1\57\1\41\1\36\1\56\1\67"+
    "\1\37\1\50\1\44\1\46\1\61\1\53\1\6\1\51\1\10\1\22"+
    "\1\34\1\70\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    63,   126,   189,   252,   315,   378,   441,   504,   567, 
      630,   693,   756,   819,     0,   882,   945,  1008,  1071,  1134, 
     1197,  1260,  1323,  1386,     0,     0,  1449,  1512,     0,     0, 
     1575,  1638,  1701,  1764,  1827,  1890,  1953,  2016,  2079,  2142, 
     2205,  2268,  2331,  2394,  2457,  2520,  2583,  2646,  2709,  2772, 
     2835,  2898,  2961,  3024,  3087,  3150,  3213,  3276,  3339,     0, 
     3402,     0,  3465,  3528,  3591,     0,  3654,  3717,  3780,  3843, 
     3906,  3969,     0,  4032,  4095,  4158,  4221,  4284,  4347,  4410, 
        0,  4473,     0,     0,  4536,  4599,  4662,     0,  4725,     0, 
     4788,     0,  4851,  4914,     0,  4977,  5040,  5103,  5166,     0, 
        0,  5229,  3465,     0,  5292,  5355,  5418,     0,  5481,  5544, 
     5607,  5670,  5733,  5796,     0,  5859,  5922,  5985,  6048,  3402, 
     6111,  1512,  6174,     0,  6237,  6300,  1890,  6363,  6426,  6489, 
     1323,  6552,  6615,  6678,  6741,  6804,  6867,  6930,  6993,  1323, 
     7056,  7119,  1323,  7182,  7245,  7308,  7371,  7434,  7497,  7560, 
     7623,  7686,  7749,  7812,  7875,  7938,  8001,  8064,  8127,  8190, 
     8253,  8316,  8379,  8442,  8505,  8568,  8631,     0,  8694,  8757, 
     3213,  8820,  8883,  8946,  9009,  9072,  9135,  9198,  9261,  9324, 
     9387,  9450,  9513,  9576,  3654,  9639,  9702,  9576,     0,     0, 
        0,  9639,  9765,  3906,  9828,  9765,     0,  9828,     0,  9891, 
     4347,  9954, 10017,  9891,  9954,  4473,     0, 10080,     0, 10143, 
        0,     0, 10206, 10269, 10332, 10395, 10458, 10521, 10584, 10647, 
    10710, 10773, 10836, 10899, 10962, 11025, 11088, 11151,     0, 11214, 
     4662, 11277, 11340, 11403, 11466, 11529, 11592, 11655,  5859, 11718, 
    11781, 11844, 11907, 11970, 12033, 12096, 12159, 12222, 12285, 12348, 
    12411,  1323, 12474, 12537,  1323, 12600, 12663, 12726, 12789, 12852, 
    12915,  1323, 12978, 13041, 13104, 13167, 13230, 13293, 13356,  1323, 
    13419, 13482, 13545, 13608, 13671, 13734, 13797, 13860, 13923, 13986, 
    14049, 14112, 14175, 14238, 14301, 14364,  1323, 14427, 14490, 14553, 
    14616, 14679, 14742, 14805, 14868, 14931, 14994, 15057, 15120, 15183, 
    15246, 15309, 15372,     0,     0, 15435, 15498, 15561, 15624, 15687, 
    15750, 15813, 15876, 15939, 16002, 16065, 16128, 16191, 16254, 16317, 
    16380, 16443, 16506, 16569, 16632, 16695, 16758, 16821, 16884, 16947, 
    17010, 17073, 17136, 17199,  1323, 17262, 17325, 17388, 17451, 17514, 
    17577,  1323, 17640, 17703,  1323, 17766, 17829, 17892, 11970, 17955, 
    18018, 18081, 18144, 18207, 18270, 18333, 18396, 18459, 18522, 18585, 
    18648, 18711, 18774,  1323, 18837, 18900,  1323, 18963, 19026, 19089, 
    19152, 19215, 19278, 19341,  1323, 19404, 19467,  1323, 19530, 19593, 
    19656,  1323, 19719, 19782, 19845, 19908, 19971, 20034, 20097, 20160, 
    20223, 20286, 20349, 20412, 20475, 20538, 20601, 20664, 20727, 20790, 
    20853, 20916, 20979, 21042, 21105, 21168, 21231, 21294, 21357, 21420, 
    21483, 21546, 21609, 21672, 21735, 21798, 21861, 21924, 21987, 22050, 
    22113, 22176, 22239, 22302, 22365,     0, 22428, 22491, 22554, 22617, 
    22680, 22743, 22806, 22869, 22932, 22995, 23058,     0, 23121, 23184, 
    23247,  1323, 23310, 23373, 23436, 23499,  1323, 23562,  1323, 23625, 
        0, 23688, 23751, 23814, 23877,  1323,  1323, 23940, 24003, 24066, 
    24129, 24192, 24255,  1323, 24318,  1323, 24381,  1323,  1323, 24444, 
     1323, 24507,  1323,  1323,  1323,  1323, 24570, 24633,  1323, 24696, 
    24759, 24822,  1323, 24885, 24948, 25011, 25074, 25137, 25200, 25263, 
    25326, 25389, 25452,     0, 25515, 25578, 25641, 25704, 25767, 25830, 
    25893, 25956, 26019, 26082, 26145, 26208, 26271, 26334, 26397,     0, 
        0, 26460, 26523, 26586,     0, 26649, 26712, 26775, 26838,     0, 
    26901, 26964, 27027, 27090, 27153,     0, 27216, 27279, 27342, 27405, 
    27468, 27531, 27594, 27657, 27720, 27783, 27846, 27909, 27972,  1323, 
     1323,  1323, 28035, 28098,  1323,  1323, 28161, 28224, 28287, 28350, 
    28413, 28476, 28539, 28602, 28665,  1323,  1323, 28728, 28791, 28854, 
    28917,  1323,  1323, 28980, 29043, 29106, 29169,  1323, 29232, 29295, 
    29358, 29421, 29484, 29547, 29610, 29673, 29736, 29799, 29862, 29925, 
    29988, 30051, 30114, 30177, 30240,     0, 30303, 30366, 30429,     0, 
    30492, 30555, 30618, 30681,     0, 30744, 30807,     0, 30870, 30933, 
     1323, 30996, 31059, 31122, 31185, 31248, 31311,  1323,  1323, 31374, 
    31437, 31500, 31563,  1323, 31626, 31689, 31752, 31815, 31878,  1323, 
    31941, 32004, 32067, 32130, 32193, 32256, 32319, 32382, 32445, 32508, 
        0, 32571,     0,     0, 32634, 32697,     0, 32760,     0, 32823, 
    32886, 32949, 33012, 33075, 33138, 33201, 33264,     0, 33327,     0, 
    33390, 33453, 33516,  1323, 33579,  1323, 33642, 33705, 33768, 33831, 
     1323,  1323, 33894,  1323, 33957,  1323, 34020, 34083, 34146,  1323, 
    34209,     0, 34272, 34335, 34398, 34461, 34524, 34587, 34650, 34713, 
    34776, 34839,     0, 34902,     0,     0, 34965, 35028,  1323, 35091, 
     1323, 35154, 35217, 35280, 35343,  1323, 35406,  1323, 35469, 35532, 
    35595,     0, 35658,     0,     0, 35721, 35784,     0, 35847, 35910, 
        0,  1323,  1323, 35973, 36036,  1323,  1323,  1323, 36099, 36162, 
     1323,     0, 36225, 36288,     0,     0, 36351, 36414, 36477, 36540, 
    36603,     0,     0,     0,  1323,  1323,  1323, 36666, 36729, 36792, 
     1323
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\77\0\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\31\1\32\1\30\1\33\1\34"+
    "\1\17\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\44\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\2\27\1\64\1\65\1\27\1\66\1\27\1\67"+
    "\1\70\1\71\1\72\1\31\1\27\1\73\1\27\1\74"+
    "\2\31\1\75\1\76\1\77\1\31\16\100\1\101\1\102"+
    "\1\103\1\100\1\104\54\100\16\105\1\106\1\105\1\107"+
    "\1\102\1\110\54\105\4\111\1\112\15\111\1\113\54\111"+
    "\11\114\1\115\3\114\1\115\1\116\1\114\1\117\1\114"+
    "\1\120\54\114\3\121\1\122\2\121\3\122\25\121\22\122"+
    "\1\121\1\122\1\121\1\122\1\121\3\122\7\121\77\123"+
    "\3\124\1\125\1\126\1\124\3\125\25\124\22\125\1\124"+
    "\1\125\1\124\1\125\1\124\3\125\7\124\1\17\1\127"+
    "\1\130\1\27\1\130\1\131\3\27\2\132\2\130\1\132"+
    "\1\133\1\130\1\132\15\130\22\27\1\130\1\27\1\130"+
    "\1\27\1\130\3\27\1\130\1\31\1\134\2\132\2\130"+
    "\30\135\1\136\46\135\30\137\1\140\45\137\1\141\11\142"+
    "\1\143\3\142\1\144\6\142\1\145\5\142\1\146\42\142"+
    "\1\147\1\142\11\150\2\151\2\150\1\151\61\150\1\0"+
    "\1\20\1\152\1\153\1\0\1\20\72\0\1\152\3\0"+
    "\1\152\15\0\1\154\54\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\155\2\27\25\0\3\27\1\156\5\27\1\157"+
    "\4\27\1\160\2\27\1\161\1\0\1\162\1\0\1\27"+
    "\1\0\3\27\13\0\1\154\16\0\1\154\1\163\53\0"+
    "\1\20\1\152\1\153\1\0\1\20\1\164\71\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\1\51\21\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\165\1\0\4\27\6\0\1\34\7\0\1\166\6\0"+
    "\1\27\1\167\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\3\0\1\170\4\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\20\0\2\30\2\0\1\30\64\0\1\171\2\0"+
    "\3\171\25\0\22\171\1\0\1\171\1\0\1\171\1\0"+
    "\3\171\7\0\16\172\1\173\1\174\1\175\1\172\1\176"+
    "\54\172\23\0\1\177\1\154\75\0\1\154\1\177\75\0"+
    "\1\154\1\0\1\154\74\0\1\177\76\0\2\154\2\0"+
    "\1\200\72\0\1\154\76\0\1\154\4\0\1\201\1\76"+
    "\70\0\1\154\1\202\75\0\1\154\7\0\1\154\66\0"+
    "\1\154\10\0\1\154\43\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\203\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\204\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\2\27\1\205"+
    "\1\27\25\0\1\27\1\206\1\27\1\207\3\27\1\210"+
    "\2\27\1\211\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\212\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\213\1\0\4\27\25\0\1\214\4\27"+
    "\1\215\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\3\27"+
    "\1\216\3\27\1\217\2\27\1\220\6\27\1\221\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\27\1\222\12\27\1\223"+
    "\5\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\1\224\1\225"+
    "\1\226\2\27\1\227\2\27\1\230\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\3\27\1\231\6\27\1\232\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\1\233\1\27\1\234"+
    "\13\27\1\235\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\236\1\0\4\27\25\0"+
    "\6\27\1\237\6\27\1\240\4\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\14\27\1\241\5\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\242\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\243\1\0"+
    "\4\27\25\0\1\244\1\245\1\246\5\27\1\247\11\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\67\0\1\250"+
    "\17\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\251\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\16\0\1\252\2\0\1\253\23\0\1\254\1\255\1\256"+
    "\1\0\1\257\1\260\1\0\1\261\1\262\1\0\1\263"+
    "\27\0\1\27\1\0\1\27\1\0\4\27\25\0\16\27"+
    "\1\264\3\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\1\27\1\265\1\27"+
    "\7\0\20\170\1\266\52\170\1\174\3\170\24\0\1\267"+
    "\52\0\16\100\1\270\1\0\1\271\1\100\1\272\57\100"+
    "\1\273\2\100\3\273\5\100\1\274\1\275\1\271\1\100"+
    "\1\276\13\100\22\273\1\100\1\273\1\100\1\273\1\100"+
    "\3\273\124\100\1\277\1\275\1\271\1\100\1\300\54\100"+
    "\16\105\1\301\1\105\1\302\1\0\1\303\57\105\1\273"+
    "\2\105\3\273\5\105\1\304\1\105\1\302\1\305\1\276"+
    "\13\105\22\273\1\105\1\273\1\105\1\273\1\105\3\273"+
    "\124\105\1\277\1\105\1\302\1\305\1\306\54\105\24\0"+
    "\1\307\70\0\1\277\60\0\11\114\1\115\3\114\1\115"+
    "\1\310\1\114\1\311\1\114\1\312\57\114\1\313\2\114"+
    "\3\313\1\115\3\114\1\115\1\310\1\114\1\311\1\114"+
    "\1\312\13\114\22\313\1\114\1\313\1\114\1\313\1\114"+
    "\3\313\12\114\1\273\2\114\3\273\1\115\3\114\1\115"+
    "\1\314\1\114\1\311\1\114\1\276\13\114\22\273\1\114"+
    "\1\273\1\114\1\273\1\114\3\273\20\114\1\115\3\114"+
    "\1\115\72\114\1\115\3\114\1\115\1\277\1\114\1\311"+
    "\1\114\1\315\54\114\1\0\1\316\1\0\1\316\1\0"+
    "\4\316\1\317\2\0\1\320\1\317\20\0\22\316\1\0"+
    "\1\316\1\0\1\316\1\0\3\316\10\0\1\125\1\0"+
    "\1\125\1\0\4\125\25\0\22\125\1\0\1\125\1\0"+
    "\1\125\1\0\3\125\33\0\1\321\53\0\1\127\3\0"+
    "\1\127\72\0\1\127\3\0\1\127\1\164\73\0\1\322"+
    "\2\0\3\322\25\0\22\322\1\0\1\322\1\0\1\322"+
    "\1\0\3\322\7\0\30\135\1\0\46\135\31\0\1\323"+
    "\76\0\1\324\50\0\1\325\33\0\1\326\1\327\1\330"+
    "\1\331\1\332\1\333\1\334\1\335\1\336\1\337\3\0"+
    "\1\340\1\0\1\341\1\342\1\0\1\343\1\0\1\344"+
    "\13\0\11\142\1\144\3\142\1\144\6\142\1\144\5\142"+
    "\1\144\42\142\1\144\1\142\15\0\1\345\105\0\1\346"+
    "\63\0\2\151\2\0\1\151\62\0\1\152\1\0\1\153"+
    "\1\0\1\152\72\0\1\127\2\0\1\347\1\127\17\0"+
    "\1\347\52\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\350\1\351\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\4\27\1\352\15\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\14\27\1\353\5\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\12\27\1\354\7\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\20\27\1\355\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\356\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\357\1\0\1\357\1\0\1\357"+
    "\1\0\1\357\30\0\1\357\1\0\1\357\2\0\1\357"+
    "\1\0\1\357\30\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\7\27\1\360\12\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\36\0\1\361\50\0\1\27\1\0\1\362"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\171\1\0\1\171\1\0\4\171"+
    "\25\0\22\171\1\0\1\171\1\0\1\171\1\0\3\171"+
    "\7\0\3\172\1\0\2\172\3\0\5\172\1\173\1\174"+
    "\1\175\1\172\1\0\13\172\22\0\1\172\1\0\1\172"+
    "\1\0\1\172\3\0\124\172\1\0\1\174\1\175\1\172"+
    "\1\176\54\172\23\0\1\154\3\0\1\363\77\0\1\364"+
    "\57\0\2\202\2\0\1\202\62\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\365\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\2\27\1\366\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\12\27\1\367\7\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\370\1\371\20\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\4\27\1\203\15\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\372\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\20\27\1\373\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\15\27\1\374\4\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\7\27\1\375\1\27\1\376"+
    "\10\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\377\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0100\2\27\1\u0101"+
    "\1\u0102\7\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\12\27"+
    "\1\u0103\7\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\20\27"+
    "\1\u0104\1\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\10\27"+
    "\1\u0105\2\27\1\u0106\6\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\27\1\u0107\20\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\27\1\u0108\20\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\u0109\21\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\16\27\1\u010a\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\3\27\1\u010b\16\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\3\27\1\u010c\16\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\12\27\1\u010d\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u010e\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\u010f"+
    "\16\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u0110"+
    "\3\27\1\u0111\7\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\u0112\1\27\1\u0113\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u0114\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u0115\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\5\27\1\u0116\14\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\5\27\1\u0117\14\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\12\27\1\u0118\7\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\27\1\u0119\20\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\5\27\1\u011a\14\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\u011b\4\27\1\u011c\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\u011d\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\2\27\1\u011e\1\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\u011f\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\45\0\1\u0120\4\0\1\u0121\42\0"+
    "\1\u0122\72\0\1\u0123\132\0\1\u0124\75\0\1\u0125\101\0"+
    "\1\u0126\111\0\1\u0127\63\0\1\u0128\101\0\1\u0129\33\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\1\u012a\21\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\7\27\1\u012b\1\27"+
    "\1\u012c\2\27\1\u012d\1\27\1\u012e\2\27\1\u012f\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\7\0\77\170\11\0"+
    "\2\267\2\0\1\267\61\0\3\100\1\0\2\100\3\0"+
    "\5\100\1\274\1\275\1\271\1\100\1\0\13\100\22\0"+
    "\1\100\1\0\1\100\1\0\1\100\3\0\25\100\1\0"+
    "\1\275\1\271\1\100\1\300\54\100\1\0\1\273\1\0"+
    "\1\273\1\0\4\273\25\0\22\273\1\0\1\273\1\0"+
    "\1\273\1\0\3\273\1\0\1\u0130\5\0\3\105\1\0"+
    "\2\105\3\0\5\105\1\304\1\105\1\302\1\305\1\0"+
    "\13\105\22\0\1\105\1\0\1\105\1\0\1\105\3\0"+
    "\25\105\1\0\1\105\1\302\1\305\1\306\54\105\3\114"+
    "\1\0\2\114\3\0\1\115\3\114\1\115\1\314\1\114"+
    "\1\311\1\114\1\0\13\114\22\0\1\114\1\0\1\114"+
    "\1\0\1\114\3\0\20\114\1\115\3\114\1\115\1\0"+
    "\1\114\1\311\1\114\1\315\55\114\1\313\1\114\1\313"+
    "\1\114\4\313\1\u0131\2\114\1\u0132\1\u0131\1\310\1\114"+
    "\1\311\1\114\1\312\13\114\22\313\1\114\1\313\1\114"+
    "\1\313\1\114\3\313\7\114\11\0\1\317\3\0\1\317"+
    "\62\0\1\322\1\0\1\322\1\0\4\322\25\0\22\322"+
    "\1\0\1\322\1\0\1\322\1\0\3\322\15\0\1\u0133"+
    "\73\0\1\u0134\102\0\1\u0135\36\0\1\u0136\1\u0137\67\0"+
    "\1\u0138\41\0\1\u0139\134\0\1\u013a\21\0\1\u013b\51\0"+
    "\1\u013c\7\0\1\u013d\3\0\1\u013e\67\0\1\u013f\103\0"+
    "\1\u0140\64\0\1\u0141\1\0\1\u0142\41\0\1\u0143\37\0"+
    "\1\u0144\1\u0145\1\0\1\u0146\73\0\1\u0147\72\0\1\u0148"+
    "\1\u0149\41\0\1\u014a\34\0\1\u014b\41\0\1\u014c\34\0"+
    "\1\u014d\112\0\1\u014e\33\0\2\346\2\0\1\346\62\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u014f"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u0150\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\4\27\1\u0151\1\u0152\1\27"+
    "\1\u0153\2\27\1\u0154\2\27\1\u0155\4\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\u0156\21\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u0157\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\6\27\1\u0158\13\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\16\27\1\u0159\3\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\u015a\21\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\36\0\1\363\50\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\2\27\1\u015b\17\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\12\0\1\u015c\2\0\3\u015c\1\0\1\363"+
    "\23\0\22\u015c\1\0\1\u015c\1\0\1\u015c\1\0\3\u015c"+
    "\20\0\2\u015d\2\0\1\u015d\62\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\10\27\1\u015e\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\10\27\1\u015f\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u0160\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\10\27\1\u0161\11\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\2\27\1\u0162\17\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u0163"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\u0164\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\u0165\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\16\27"+
    "\1\u0166\3\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u0167\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\16\27\1\u0168\3\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\6\27\1\u0169\13\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u016a\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\16\27\1\u016b\3\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u016c"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\u016d\21\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u016e\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\21\27\1\u016f"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\u0170\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\2\27\1\u0171\17\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\11\27\1\u0172\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u0173\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u0174\3\27\1\u0175\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\11\27\1\u0176\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u0177\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\3\27\1\u0178\16\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\12\27\1\u0179\7\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\7\27\1\u017a\12\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u017b\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u017c\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\16\27\1\u017d\3\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u017e\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\12\27\1\u017f\7\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\3\27\1\u0180\16\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\6\27\1\u0181\13\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\3\27\1\u0182\16\27\1\0\1\u0183"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u0184"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u0185\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\45\0\1\u0186\101\0\1\u0187\122\0\1\u0188"+
    "\51\0\1\u0189\75\0\1\u018a\105\0\1\u018b\74\0\1\u018c"+
    "\70\0\1\u018d\110\0\1\u018e\65\0\1\u018f\40\0\1\27"+
    "\1\0\1\27\1\0\2\27\1\u0190\1\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\5\27\1\u0191\2\27"+
    "\1\u0192\11\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\16\27"+
    "\1\u0193\3\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\u0194\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u0195\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u0196\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\7\0\11\114"+
    "\1\u0131\3\114\1\u0131\1\310\1\114\1\311\1\114\1\312"+
    "\54\114\40\0\1\u0197\6\0\1\u0198\73\0\1\u0199\102\0"+
    "\1\u019a\72\0\1\u019b\101\0\1\u019c\106\0\1\u019d\67\0"+
    "\1\u019e\5\0\1\u019f\64\0\1\u01a0\73\0\1\u01a1\77\0"+
    "\1\u01a2\100\0\1\u01a3\71\0\1\u01a4\100\0\1\u01a5\12\0"+
    "\1\u01a6\25\0\1\u01a7\151\0\1\u01a8\64\0\1\u01a9\35\0"+
    "\1\u01aa\134\0\1\u01ab\75\0\1\u01ac\45\0\1\u01ad\130\0"+
    "\1\u01ae\5\0\1\u01af\65\0\1\u01b0\77\0\1\u01b1\7\0"+
    "\1\u01b2\73\0\1\u01b3\115\0\1\u01b4\52\0\1\u01b5\76\0"+
    "\1\u01b6\75\0\1\u01b7\41\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\3\27\1\u01b8\16\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u01b9\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\7\27\1\u01ba\12\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\u01bb\21\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\15\27"+
    "\1\u01bc\4\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\14\27"+
    "\1\u01bd\5\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\5\27"+
    "\1\u01be\14\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\13\27"+
    "\1\u01bf\6\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\27"+
    "\1\u01c0\20\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\17\27"+
    "\1\u01c1\2\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\u015c\1\0\1\u015c\1\0\4\u015c\1\u01c2\3\0"+
    "\1\u01c3\20\0\22\u015c\1\0\1\u015c\1\0\1\u015c\1\0"+
    "\3\u015c\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u01c4\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\u01c5\14\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u01c6\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\3\27\1\u01c7\16\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\13\27\1\u01c8\6\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u01c9\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u01ca\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\10\27\1\u01cb\11\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\2\27\1\u01cc\17\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u01cd\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\10\27\1\u01ce\11\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\2\27\1\u01cf\17\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\6\27\1\u01d0\13\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u01d1\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\15\27\1\u01d2"+
    "\4\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\2\27\1\u01d3"+
    "\17\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u01d4\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\16\27\1\u01d5\3\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u01d6\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u01d7\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\5\27\1\u01d8\14\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u01d9\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\14\27\1\u01da\5\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\u01db\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\12\27\1\u01dc\7\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u01dd\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\11\27\1\u01de\10\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u01df\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u01e0\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u01e1"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u01e2\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u01e3\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\2\27\1\u01e4\17\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\3\27\1\u01e5\16\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\5\27\1\u01e6\14\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\63\0\1\u01e7\62\0"+
    "\1\u01e8\41\0\1\u01e9\147\0\1\u01ea\62\0\1\u01eb\45\0"+
    "\1\u01ec\72\0\1\u01ed\6\0\1\u01ea\51\0\1\u01ee\52\0"+
    "\1\u01ef\41\0\1\u01ef\136\0\1\u01f0\34\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\2\27\1\u01f1\17\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\16\27\1\u01f2\3\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\3\27\1\u01f3\16\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\2\27\1\u01f4\17\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\16\27\1\u01f5\3\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\3\27\1\u01f6\16\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u01f7\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\66\0\1\u01f8\22\0"+
    "\1\u01f9\141\0\1\u01fa\74\0\1\u01fb\104\0\1\u01fc\27\0"+
    "\1\u01fd\76\0\1\u01fe\142\0\1\u01ff\66\0\1\u0200\42\0"+
    "\1\u0201\131\0\1\u0202\76\0\1\u0203\76\0\1\u0204\76\0"+
    "\1\u0205\100\0\1\u0206\41\0\1\u0207\143\0\1\u0208\77\0"+
    "\1\u0209\30\0\1\u020a\142\0\1\u020b\73\0\1\u020c\110\0"+
    "\1\u020d\75\0\1\u020e\24\0\1\u020f\151\0\1\u0210\60\0"+
    "\1\u0211\113\0\1\u0212\73\0\1\u0213\67\0\1\u0214\103\0"+
    "\1\u0215\35\0\1\u0216\70\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\u0217\15\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\11\27\1\u0218\10\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\u0219\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u021a\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u021b\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\7\27\1\u021c\12\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u021d\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\24\0\1\u01c3\62\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\3\27\1\u021e\16\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\u021f\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\2\27\1\u0220\17\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\u0221\15\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\6\27\1\u0222\13\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\16\27\1\u0223\3\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\27\1\u0224\20\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\7\27\1\u0225\12\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\4\27\1\u0226\15\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\3\27\1\u0227\16\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\21\27\1\u0228\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\11\27\1\u0229\10\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\5\27\1\u022a\14\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\3\27\1\u022b\16\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\11\27\1\u022c\10\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\14\27\1\u022d\5\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\12\27\1\u022e\7\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\11\27\1\u022f\10\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\11\27\1\u0230\10\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\u0231\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\u0232\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\11\27\1\u0233\10\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\12\0\1\u0234\6\0\1\u01ea\51\0\1\u01ee"+
    "\51\0\1\u01eb\106\0\1\u01ef\41\0\1\u01ea\51\0\1\u01ee"+
    "\63\0\1\u01ea\101\0\1\u0235\105\0\1\u0236\57\0\1\u01ea"+
    "\73\0\1\u0237\36\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u0238\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\u0239\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\11\27"+
    "\1\u023a\10\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\12\27"+
    "\1\u023b\7\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\6\27"+
    "\1\u023c\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u023d\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\14\27\1\u023e\5\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\65\0\1\u023f"+
    "\76\0\1\u0240\57\0\1\u0241\76\0\1\u0242\75\0\1\u0243"+
    "\110\0\1\u0244\31\0\1\u0245\132\0\1\u0246\76\0\1\u0247"+
    "\76\0\1\u0248\112\0\1\u0249\77\0\1\u024a\72\0\1\u024b"+
    "\65\0\1\u024c\122\0\1\u024d\16\0\1\u024e\136\0\1\u024f"+
    "\73\0\1\u0250\77\0\1\u0251\40\0\1\u0252\152\0\1\u0253"+
    "\57\0\1\u0254\74\0\1\u0255\107\0\1\u0256\72\0\1\u0257"+
    "\73\0\1\u0258\37\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\12\27\1\u0259\7\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\16\27\1\u025a\3\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\u025b\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\6\27"+
    "\1\u025c\13\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\16\27"+
    "\1\u025d\3\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u025e\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\11\27\1\u025f\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\6\27\1\u0260\13\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\u0261\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\2\27\1\u0262\17\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u0263"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\11\27\1\u0264\10\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\u0265\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\14\27"+
    "\1\u0266\5\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\1\u0267"+
    "\21\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\10\27\1\u0268"+
    "\11\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\12\27\1\u0269"+
    "\7\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\10\27\1\u026a"+
    "\11\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\u026b"+
    "\13\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\u026c\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\47\0\1\u026d\41\0"+
    "\1\u01ea\76\0\1\u026e\156\0\1\u01ea\14\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u026f\1\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u0270\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\12\27\1\u0271\7\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u0272\1\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u0273\1\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\u0274\21\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\63\0\1\u0275\66\0\1\u0276"+
    "\73\0\1\u0277\75\0\1\u0278\75\0\1\u0279\107\0\1\u027a"+
    "\75\0\1\u027b\70\0\1\u027c\40\0\1\u027d\136\0\1\u027e"+
    "\103\0\1\u027f\64\0\1\u0280\103\0\1\u0281\71\0\1\u0282"+
    "\107\0\1\u0283\76\0\1\u0284\77\0\1\u0285\65\0\1\u0286"+
    "\122\0\1\u0287\55\0\1\u0288\72\0\1\u0289\114\0\1\u028a"+
    "\23\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\u028b\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\2\27"+
    "\1\u028c\17\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\27\1\0\4\27\25\0\11\27"+
    "\1\u028d\10\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\10\0\1\27\1\0\1\u028e\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\u028f\1\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\6\27\1\u0290\13\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\11\27\1\u0291\10\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\u0292\1\27\10\0\1\27"+
    "\1\0\1\u0293\1\0\4\27\25\0\22\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\3\27\1\u0294\16\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\3\27\1\u0295\16\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\u0296"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\5\27\1\u0297\14\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\6\27\1\u0298\13\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\u0299\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\3\27"+
    "\50\0\1\u01ea\74\0\1\u01ea\40\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u029a\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\5\27\1\u029b\14\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u029c\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\11\27\1\u029d\10\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\22\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u029e\1\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\4\27\1\u029f\15\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\12\0\1\u02a0\136\0\1\u02a1"+
    "\102\0\1\u02a2\67\0\1\u02a3\76\0\1\u02a4\76\0\1\u02a5"+
    "\104\0\1\u02a6\113\0\1\u02a7\52\0\1\u02a8\120\0\1\u02a9"+
    "\72\0\1\u02aa\24\0\1\u02ab\137\0\1\u02ac\35\0\1\u02ad"+
    "\134\0\1\u02ae\36\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\27\1\u02af\20\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\11\27\1\u02b0\10\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\14\27\1\u02b1\5\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\1\u02b2\21\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\u02b3\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\3\27\10\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\1\u02b4\21\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\1\u02b5\21\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\6\27\1\u02b6\13\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\u02b7\21\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\4\27\1\u02b8\15\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\10\0\1\27\1\0\1\27"+
    "\1\0\4\27\25\0\1\u02b9\21\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u02ba\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\1\u02bb\21\27\1\0\1\27\1\0\1\27"+
    "\1\0\3\27\10\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\22\27\1\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\u02bc\1\27\45\0\1\u02bd\104\0\1\u02be\76\0\1\u02bf"+
    "\106\0\1\u02c0\76\0\1\u02c1\61\0\1\u02c2\111\0\1\u02c3"+
    "\75\0\1\u02c4\65\0\1\u02c5\76\0\1\u02c6\107\0\1\u02c7"+
    "\26\0\1\27\1\0\1\u02c8\1\0\4\27\25\0\22\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\14\27\1\u02c9\5\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02ca\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02cb\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\7\27\1\u02cc\12\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\u02cd\7\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02ce\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\3\27\1\u02cf\16\27"+
    "\1\0\1\27\1\0\1\27\1\0\3\27\10\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\21\27\1\u02d0\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\u02d1\1\27\50\0\1\u02d2\40\0"+
    "\1\u02d3\142\0\1\u02d4\73\0\1\u02d5\71\0\1\u02d6\122\0"+
    "\1\u02d7\14\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u02d8\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\11\27\1\u02d9\10\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\22\27\1\0\1\27\1\0\1\27\1\0\1\27\1\u02da"+
    "\1\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\20\27\1\u02db\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\51\0\1\u02dc\37\0\1\u02dd\76\0\1\u02de\74\0"+
    "\1\27\1\0\1\u02df\1\0\4\27\25\0\22\27\1\0"+
    "\1\27\1\0\1\27\1\0\3\27\10\0\1\27\1\0"+
    "\1\u02e0\1\0\4\27\25\0\22\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u02e1\1\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\5\27\1\u02e2\14\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\16\27\1\u02e3\3\27\1\0\1\27\1\0"+
    "\1\27\1\0\3\27\10\0\1\27\1\0\1\u02e4\1\0"+
    "\4\27\25\0\22\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\10\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\u02e5\20\27\1\0\1\27\1\0\1\27\1\0"+
    "\3\27\7\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     8,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  9,  9,  1,  1,  1,  9,  1,  9,  1,  9,  1,  1,  9,  1, 
     1,  1,  1,  9,  9,  1,  1,  9,  1,  1,  0,  9,  1,  1,  1,  1, 
     1,  1,  9,  0,  1,  0,  1,  0,  1,  0,  0,  9,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  1,  1,  0,  1,  0,  0,  0,  1,  1,  9,  9,  9,  1, 
     0,  0,  0,  1,  9,  1,  9,  0,  0,  0,  1,  1,  1,  0,  9,  0, 
     9,  1,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  9, 
     9,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  9,  9,  0, 
     0,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0, 
     0,  0,  9,  0,  0,  9,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1, 
     1,  1,  1,  1,  0,  0,  9,  0,  9,  9,  0,  0,  9,  0,  9,  0, 
     0,  0,  1,  0,  0,  0,  0,  9,  0,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  9,  0,  9, 
     9,  0,  0,  9,  0,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  0,  0,  9,  9,  0,  1,  1,  1,  1,  9,  9,  9,  1,  1, 
     1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    public PHPAspectLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.yy_buffer = array;
        this.yy_currentPos = offset;
        this.yy_markedPos = offset;
        this.yy_pushbackPos = offset;
        this.yychar = offset;
        this.yy_endRead = offset + length;
        this.yy_startRead = offset;
        this.yy_atEOF = yy_currentPos >= yy_endRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.yy_reader = reader;
    	this.yy_buffer = buffer;
    	this.yy_markedPos = parameters[0];
    	this.yy_pushbackPos = parameters[1];
    	this.yy_currentPos = parameters[2];
    	this.yy_startRead = parameters[3];
    	this.yy_endRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{yy_markedPos, yy_pushbackPos, yy_currentPos, yy_startRead, yy_endRead, yyline, yy_lexical_state};
    }

    protected int getYy_lexical_state() {
        return yy_lexical_state;
    }

    protected int getYy_markedPos() {
        return yy_markedPos;
    }

    protected int getYy_endRead() {
        return yy_endRead;
    }

    public char[] getYy_buffer() {
        return yy_buffer;
    }
    
    protected int getYy_startRead() {
    	return this.yy_startRead;
    }

    protected int getYy_pushBackPosition() {
    	return this.yy_pushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHPAspectLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHPAspectLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[36855];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 104: 
          { popState();return WHITESPACE; }
        case 742: break;
        case 425: 
          { return PHPDOC_SEE; }
        case 743: break;
        case 437: 
          { return PHPDOC_VAR; }
        case 744: break;
        case 509: 
          { return PHPDOC_NAME; }
        case 745: break;
        case 510: 
          { return PHPDOC_DESC; }
        case 746: break;
        case 514: 
          { return PHPDOC_TODO; }
        case 747: break;
        case 519: 
          { return PHPDOC_USES; }
        case 748: break;
        case 525: 
          { return PHPDOC_LINK; }
        case 749: break;
        case 710: 
          { return PHPDOC_PROPERTY; }
        case 750: break;
        case 707: 
          { return PHPDOC_CATEGORY; }
        case 751: break;
        case 704: 
          { return PHPDOC_TUTORIAL; }
        case 752: break;
        case 703: 
          { return PHPDOC_INTERNAL; }
        case 753: break;
        case 701: 
          { return PHPDOC_ABSTRACT; }
        case 754: break;
        case 94: 
        case 95: 
        case 96: 
          { return PHPDOC_COMMENT; }
        case 755: break;
        case 671: 
          { return PHPDOC_EXAMPLE; }
        case 756: break;
        case 682: 
          { return PHPDOC_LICENSE; }
        case 757: break;
        case 684: 
          { return PHPDOC_PACKAGE; }
        case 758: break;
        case 685: 
          { return PHPDOC_VERSION; }
        case 759: break;
        case 103: 
          { return UNKNOWN_TOKEN; }
        case 760: break;
        case 585: 
          { return PHPDOC_FINAL; }
        case 761: break;
        case 589: 
          { return PHPDOC_SINCE; }
        case 762: break;
        case 594: 
          { return PHPDOC_PARAM; }
        case 763: break;
        case 597: 
          { return PHPDOC_MAGIC; }
        case 764: break;
        case 630: 
          { return PHPDOC_RETURN; }
        case 765: break;
        case 632: 
          { return PHPDOC_AUTHOR; }
        case 766: break;
        case 633: 
          { return PHPDOC_ACCESS; }
        case 767: break;
        case 636: 
          { return PHPDOC_IGNORE; }
        case 768: break;
        case 638: 
          { return PHPDOC_THROWS; }
        case 769: break;
        case 642: 
          { return PHPDOC_STATIC; }
        case 770: break;
        case 647: 
          { return PHPDOC_METHOD; }
        case 771: break;
        case 649: 
          { return PHPDOC_GLOBAL; }
        case 772: break;
        case 733: 
          { return PHPDOC_SUBPACKAGE; }
        case 773: break;
        case 732: 
          { return PHPDOC_FILESOURCE; }
        case 774: break;
        case 731: 
          { return PHPDOC_DEPRECATED; }
        case 775: break;
        case 725: 
          { return PHPDOC_STATICVAR; }
        case 776: break;
        case 724: 
          { return PHPDOC_COPYRIGHT; }
        case 777: break;
        case 721: 
          { return PHPDOC_EXCEPTION; }
        case 778: break;
        case 87: 
        case 90: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
 }
        case 779: break;
        case 211: 
          { 
    popState();
    return PHPDOC_COMMENT_END;
 }
        case 780: break;
        case 59: 
          { 
    if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
 }
        case 781: break;
        case 206: 
          { 
    int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
 }
        case 782: break;
        case 286: 
          { 
    return PHP_VAR;
 }
        case 783: break;
        case 269: 
          { 
    return PHP_USE;
 }
        case 784: break;
        case 263: 
          { 
    return PHP_FOR;
 }
        case 785: break;
        case 261: 
          { 
    return PHP_TRY;
 }
        case 786: break;
        case 254: 
          { 
    return PHP_DIE;
 }
        case 787: break;
        case 251: 
          { 
    return PHP_NEW;
 }
        case 788: break;
        case 203: 
        case 204: 
          { 
    yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 789: break;
        case 187: 
        case 188: 
        case 191: 
          { 
    yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 790: break;
        case 142: 
          { 
    return PHP_IF;
 }
        case 791: break;
        case 139: 
          { 
    return PHP_DO;
 }
        case 792: break;
        case 136: 
          { 
    return PHP_AS;
 }
        case 793: break;
        case 472: 
          { 

    return PHP_CONST;
 }
        case 794: break;
        case 229: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHP_LINE_COMMENT;
 }
        case 795: break;
        case 228: 
          { 
    popState();
    return PHP_LINE_COMMENT;
 }
        case 796: break;
        case 210: 
          { 
    popState();
    return PHP_COMMENT_END;
 }
        case 797: break;
        case 80: 
        case 81: 
          { 
	yypushback(1);
	yybegin(ST_PHP_HEREDOC);
 }
        case 798: break;
        case 89: 
          { 
	yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 799: break;
        case 91: 
          { 
	popState();
	return PHP_TOKEN;
 }
        case 800: break;
        case 449: 
        case 450: 
          { 
    int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHP_HEREDOC_TAG;
 }
        case 801: break;
        case 304: 
          { 
    int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	   yypushback(1);
        yybegin(ST_PHP_END_HEREDOC);
    }
        return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 802: break;
        case 14: 
        case 60: 
        case 77: 
        case 78: 
        case 79: 
          { 
    yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
 }
        case 803: break;
        case 735: 
          { 
    return PHP_INCLUDE_ONCE;
 }
        case 804: break;
        case 734: 
          { 
    return PHP_REQUIRE_ONCE;
 }
        case 805: break;
        case 82: 
          { 
    heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 806: break;
        case 100: 
        case 101: 
        case 102: 
          { 
    return PHP_LINE_COMMENT;
 }
        case 807: break;
        case 303: 
          { 
	yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
 }
        case 808: break;
        case 189: 
          { 
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
 }
        case 809: break;
        case 61: 
          { 
    pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
 }
        case 810: break;
        case 198: 
          { 
    popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
     }
        case 811: break;
        case 114: 
          { 
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
 }
        case 812: break;
        case 736: 
          { 
    return PHP__FUNCTION__;
 }
        case 813: break;
        case 717: 
          { 
    return PHP_PERSESSION;
 }
        case 814: break;
        case 716: 
          { 
    return PHP_IMPLEMENTS;
 }
        case 815: break;
        case 715: 
          { 
    return PHP_INSTANCEOF;
 }
        case 816: break;
        case 712: 
          { 
    return PHP_ENDFOREACH;
 }
        case 817: break;
        case 711: 
          { 
    return PHP_ENDDECLARE;
 }
        case 818: break;
        case 238: 
          { 
    return PHP_NUMBER;
 }
        case 819: break;
        case 182: 
          { 
	return PHP_CLOSETAG;
 }
        case 820: break;
        case 68: 
          { 
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 821: break;
        case 65: 
          { 
    popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 822: break;
        case 29: 
          { 
    return PHP_CURLY_OPEN;
 }
        case 823: break;
        case 15: 
        case 19: 
          { 
    return PHP_NUMBER;
 }
        case 824: break;
        case 92: 
          { 
    return PHP_COMMENT;
 }
        case 825: break;
        case 93: 
          { 
    return PHP_COMMENT;
 }
        case 826: break;
        case 105: 
          { 
    return PHP_NUMBER;
 }
        case 827: break;
        case 493: 
          { 
    return PHP_CASTING;
 }
        case 828: break;
        case 536: 
          { 
    return PHP_ENDFOR;
 }
        case 829: break;
        case 539: 
          { 
    return PHP_ELSEIF;
 }
        case 830: break;
        case 540: 
          { 
    return PHP_BEFORE;
 }
        case 831: break;
        case 541: 
          { 
    return PHP_RETURN;
 }
        case 832: break;
        case 544: 
          { 
    return PHP_AROUND;
 }
        case 833: break;
        case 545: 
          { 
    return PHP_ASPECT;
 }
        case 834: break;
        case 555: 
          { 
    return PHP_STATIC;
 }
        case 835: break;
        case 556: 
          { 
    return PHP_SWITCH;
 }
        case 836: break;
        case 561: 
          { 
    return PHP_PARENT;
 }
        case 837: break;
        case 562: 
          { 
    return PHP_PUBLIC;
 }
        case 838: break;
        case 567: 
          { 
    return PHP_GLOBAL;
 }
        case 839: break;
        case 600: 
          { 
    return PHP_EXTENDS;
 }
        case 840: break;
        case 605: 
          { 
    return PHP_REQUIRE;
 }
        case 841: break;
        case 607: 
          { 
    return PHP_DEFAULT;
 }
        case 842: break;
        case 608: 
          { 
    return PHP_DECLARE;
 }
        case 843: break;
        case 610: 
          { 
    return PHP_INCLUDE;
 }
        case 844: break;
        case 613: 
          { 
    return PHP_FOREACH;
 }
        case 845: break;
        case 619: 
          { 
    return PHP_PRIVATE;
 }
        case 846: break;
        case 665: 
          { 
    return PHP__FILE__;
 }
        case 847: break;
        case 669: 
          { 
    return PHP__LINE__;
 }
        case 848: break;
        case 167: 
          { 
    return PHP_PAAMAYIM_NEKUDOTAYIM;
 }
        case 849: break;
        case 129: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
 }
        case 850: break;
        case 208: 
          { 
	return PHP_OBJECT_OPERATOR;
 }
        case 851: break;
        case 190: 
          { 
    yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
 }
        case 852: break;
        case 720: 
          { 
    return PHP__METHOD__;
 }
        case 853: break;
        case 697: 
          { 
    return PHP__CLASS__;
 }
        case 854: break;
        case 695: 
          { 
    return PHP_PROTECTED;
 }
        case 855: break;
        case 690: 
          { 
    return PHP_INTERFACE;
 }
        case 856: break;
        case 688: 
          { 
    return PHP_ENDSWITCH;
 }
        case 857: break;
        case 195: 
        case 196: 
        case 197: 
          { 
	yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 858: break;
        case 120: 
          { 
    return PHP_VARIABLE;
 }
        case 859: break;
        case 25: 
          { 
    return PHP_SEMICOLON;
 }
        case 860: break;
        case 86: 
        case 88: 
          { 
	return PHP_NUMBER;
 }
        case 861: break;
        case 107: 
        case 126: 
        case 127: 
        case 130: 
          { 
    return PHP_OPERATOR;
 }
        case 862: break;
        case 653: 
          { 
    return PHP_ENDWHILE;
 }
        case 863: break;
        case 655: 
          { 
    return PHP_ABSTRACT;
 }
        case 864: break;
        case 660: 
          { 
    return PHP_FUNCTION;
 }
        case 865: break;
        case 661: 
          { 
    return PHP_CONTINUE;
 }
        case 866: break;
        case 663: 
          { 
    return PHP_POINTCUT;
 }
        case 867: break;
        case 63: 
          { 
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 868: break;
        case 5: 
        case 75: 
        case 76: 
        case 202: 
        case 305: 
          { 
	return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 869: break;
        case 740: 
          { 
	return PHP_HALT_COMPILER;
 }
        case 870: break;
        case 186: 
        case 209: 
          { 
    pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
 }
        case 871: break;
        case 123: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 872: break;
        case 69: 
        case 70: 
        case 71: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 873: break;
        case 64: 
        case 66: 
        case 67: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 874: break;
        case 83: 
        case 85: 
          { 
    yypushback(1);
    popState();
 }
        case 875: break;
        case 344: 
          { 
    return PHP_EVAL;
 }
        case 876: break;
        case 342: 
          { 
    return PHP_ELSE;
 }
        case 877: break;
        case 341: 
          { 
    return PHP_ECHO;
 }
        case 878: break;
        case 334: 
          { 
    return PHP_EXIT;
 }
        case 879: break;
        case 28: 
          { 
    pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 880: break;
        case 16: 
        case 18: 
        case 24: 
        case 26: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 54: 
        case 56: 
        case 62: 
          { 
    return PHP_TOKEN;
 }
        case 881: break;
        case 17: 
        case 20: 
        case 21: 
        case 22: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 55: 
        case 57: 
        case 58: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 116: 
        case 118: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 137: 
        case 138: 
        case 140: 
        case 141: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 168: 
        case 179: 
        case 180: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 237: 
        case 239: 
        case 241: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 252: 
        case 253: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 259: 
        case 260: 
        case 262: 
        case 264: 
        case 265: 
        case 266: 
        case 267: 
        case 268: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 284: 
        case 285: 
        case 297: 
        case 298: 
        case 299: 
        case 300: 
        case 301: 
        case 302: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 343: 
        case 345: 
        case 346: 
        case 349: 
        case 350: 
        case 351: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 361: 
        case 362: 
        case 364: 
        case 365: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 375: 
        case 376: 
        case 378: 
        case 379: 
        case 380: 
        case 382: 
        case 383: 
        case 384: 
        case 385: 
        case 386: 
        case 387: 
        case 388: 
        case 399: 
        case 400: 
        case 401: 
        case 402: 
        case 403: 
        case 404: 
        case 405: 
        case 439: 
        case 440: 
        case 442: 
        case 443: 
        case 444: 
        case 445: 
        case 447: 
        case 451: 
        case 452: 
        case 453: 
        case 454: 
        case 457: 
        case 458: 
        case 459: 
        case 460: 
        case 461: 
        case 462: 
        case 464: 
        case 466: 
        case 469: 
        case 471: 
        case 476: 
        case 477: 
        case 479: 
        case 480: 
        case 481: 
        case 483: 
        case 484: 
        case 485: 
        case 496: 
        case 497: 
        case 498: 
        case 499: 
        case 500: 
        case 501: 
        case 502: 
        case 534: 
        case 535: 
        case 537: 
        case 538: 
        case 542: 
        case 543: 
        case 546: 
        case 547: 
        case 548: 
        case 549: 
        case 550: 
        case 551: 
        case 552: 
        case 553: 
        case 554: 
        case 557: 
        case 558: 
        case 559: 
        case 560: 
        case 568: 
        case 569: 
        case 570: 
        case 571: 
        case 572: 
        case 573: 
        case 601: 
        case 602: 
        case 603: 
        case 604: 
        case 606: 
        case 609: 
        case 611: 
        case 612: 
        case 614: 
        case 615: 
        case 616: 
        case 617: 
        case 618: 
        case 622: 
        case 623: 
        case 624: 
        case 625: 
        case 626: 
        case 627: 
        case 650: 
        case 651: 
        case 652: 
        case 654: 
        case 656: 
        case 657: 
        case 658: 
        case 659: 
        case 662: 
        case 664: 
        case 666: 
        case 667: 
        case 668: 
        case 670: 
        case 686: 
        case 687: 
        case 689: 
        case 691: 
        case 692: 
        case 693: 
        case 694: 
        case 696: 
        case 698: 
        case 699: 
        case 713: 
        case 714: 
        case 718: 
        case 719: 
        case 727: 
        case 728: 
        case 729: 
        case 730: 
        case 737: 
        case 738: 
        case 739: 
          { 
    return  PHP_STRING;
 }
        case 882: break;
        case 23: 
          { 
    return  WHITESPACE;
 }
        case 883: break;
        case 27: 
          { 
    pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 884: break;
        case 84: 
          { 
    popState();
    return PHP_STRING;
 }
        case 885: break;
        case 363: 
          { 
    return PHP_TRUE;
 }
        case 886: break;
        case 366: 
          { 
    return PHP_FROM;
 }
        case 887: break;
        case 374: 
          { 
    return PHP_CASE;
 }
        case 888: break;
        case 377: 
          { 
    return PHP_SELF;
 }
        case 889: break;
        case 381: 
          { 
    return PHP_LIST;
 }
        case 890: break;
        case 441: 
          { 
    return PHP_ENDIF;
 }
        case 891: break;
        case 446: 
          { 
    return PHP_EMPTY;
 }
        case 892: break;
        case 448: 
          { 
    return PHP_BREAK;
 }
        case 893: break;
        case 455: 
          { 
    return PHP_ARRAY;
 }
        case 894: break;
        case 456: 
          { 
    return PHP_AFTER;
 }
        case 895: break;
        case 463: 
          { 
    return PHP_ISSET;
 }
        case 896: break;
        case 465: 
          { 
    return PHP_THROW;
 }
        case 897: break;
        case 467: 
          { 
    return PHP_FALSE;
 }
        case 898: break;
        case 468: 
          { 
    return PHP_FINAL;
 }
        case 899: break;
        case 470: 
          { 
    return PHP_UNSET;
 }
        case 900: break;
        case 473: 
          { 
    return PHP_CATCH;
 }
        case 901: break;
        case 474: 
          { 
    return PHP_CLONE;
 }
        case 902: break;
        case 475: 
          { 
    return PHP_CLASS;
 }
        case 903: break;
        case 478: 
          { 
    return PHP_WHILE;
 }
        case 904: break;
        case 482: 
          { 
    return PHP_PRINT;
 }
        case 905: break;
        case 128: 
          { 
    pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
 }
        case 906: break;
        case 348: 
          { 
    pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
 }
        case 907: break;
        case 72: 
        case 73: 
        case 74: 
          { 
        yypushback(1);
        popState();
     }
        case 908: break;
        case 97: 
        case 98: 
        case 99: 
          { 
	String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
 }
        case 909: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
