/* The following code was generated by JFlex 1.3.5 on 10/28/07 4:41 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.phpaspect.apdt.internal.core.documentModel.parser;

import org.eclipse.php.internal.core.documentModel.parser.PhpLexer;
import org.phpaspect.apdt.internal.core.documentModel.parser.regions.PHPAspectRegionTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/28/07 4:41 PM from the specification file
 * <tt>file:/home/wcandillon/apdt/workspace/org.phpaspect.apdt.core/Ressources/highlighting/PHPAspectLexer.jflex</tt>
 */
public class PHPAspectLexer extends PhpLexer implements PHPAspectRegionTypes {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_PHP_LINE_COMMENT = 20;
  final public static int ST_PHP_DOUBLE_QUOTES = 4;
  final public static int ST_PHP_COMMENT = 16;
  final public static int ST_PHP_BACKQUOTE = 8;
  final public static int ST_PHP_DOC_COMMENT = 18;
  final public static int YYINITIAL = 0;
  final public static int ST_PHP_IN_SCRIPTING = 2;
  final public static int ST_PHP_LOOKING_FOR_PROPERTY = 14;
  final public static int ST_PHP_HEREDOC = 12;
  final public static int ST_PHP_SINGLE_QUOTE = 6;
  final public static int ST_PHP_HIGHLIGHTING_ERROR = 22;
  final public static int ST_PHP_QUOTES_AFTER_VARIABLE = 10;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  7,  8,  8, 
     9,  9, 10, 10, 11, 11, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\12\1\20\2\0\1\11\22\0\1\12\1\24\1\73\1\70"+
    "\1\67\1\30\1\31\1\17\1\60\1\62\1\26\1\23\1\13\1\4"+
    "\1\2\1\27\1\5\7\76\2\1\1\56\1\14\1\25\1\21\1\22"+
    "\1\71\1\72\1\36\1\7\1\45\1\40\1\3\1\43\1\61\1\50"+
    "\1\41\1\63\1\53\1\52\1\55\1\37\1\34\1\54\1\65\1\35"+
    "\1\46\1\42\1\44\1\57\1\51\1\6\1\47\1\10\1\16\1\74"+
    "\1\16\1\33\1\64\1\75\1\36\1\7\1\45\1\40\1\3\1\43"+
    "\1\61\1\50\1\41\1\63\1\53\1\52\1\55\1\37\1\34\1\54"+
    "\1\65\1\35\1\46\1\42\1\44\1\57\1\51\1\6\1\47\1\10"+
    "\1\66\1\32\1\15\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    63,   126,   189,   252,   315,   378,   441,   504,   567, 
      630,   693,   756,     0,   819,   882,   945,  1008,  1071,  1134, 
     1197,  1260,  1323,     0,     0,     0,  1386,  1449,  1512,  1575, 
     1638,  1701,  1764,  1827,  1890,  1953,  2016,  2079,  2142,  2205, 
     2268,  2331,  2394,  2457,  2520,  2583,  2646,  2709,  2772,  2835, 
     2898,  2961,  3024,  3087,  3150,  3213,     0,  3276,     0,  3339, 
     3402,     0,     0,  3465,  3528,  3591,  3654,  3717,  3780,     0, 
     3843,  3906,  3969,  4032,  4095,     0,  4158,  3717,  4221,  4284, 
     3843,  4347,     0,  4410,  4473,  4536,     0,  4599,  4662,  4725, 
     4788,     0,     0,  4851,  3339,     0,  4914,  4977,  5040,     0, 
     5103,  5166,  5229,  5292,  5355,  5418,     0,  5481,  5544,  5607, 
     1386,  5670,  1764,  5733,  5796,  5859,  1260,  5922,  5985,  6048, 
     6111,  6174,  6237,  6300,  6363,  1260,  6426,  6489,  1260,  6552, 
     6615,  6678,  6741,  6804,  6867,  6930,  6993,  7056,  7119,  7182, 
     7245,  7308,  7371,  7434,  7497,  7560,  7623,  7686,  7749,  7812, 
     7875,  7938,  8001,     0,  8064,  8127,  3087,  8190,  8253,  8316, 
     8379,  8442,  8505,  8568,  8631,  8694,  8757,  8820,  8883,  3402, 
     8946,  9009,     0,     0,  9072,     0,  9135,  9198,  9261,     0, 
     9324,  9387,     0,     0,     0,  9450,  9513,  9576,  9639,  9702, 
     9765,  9828,  9891,  9954, 10017, 10080, 10143, 10206, 10269, 10332, 
    10395,     0, 10458, 10521, 10521, 10584, 10647, 10710, 10773, 10836, 
    10899, 10962,  5481, 11025, 11088, 11151, 11214, 11277, 11340, 11403, 
    11466, 11529, 11592, 11655,  1260, 11718, 11781,  1260, 11844, 11907, 
    11970, 12033, 12096, 12159,  1260, 12222, 12285, 12348, 12411, 12474, 
    12537, 12600,  1260, 12663, 12726, 12789, 12852, 12915, 12978, 13041, 
    13104, 13167, 13230, 13293, 13356, 13419, 13482, 13545, 13608,  1260, 
    13671, 13734, 13797, 13860, 13923, 13986, 14049, 14112, 14175, 14238, 
    14301, 14364, 14427, 14490, 14553,  9009, 14616, 14679, 14742, 14805, 
    14868, 14931, 14994, 15057, 15120, 15183, 15246, 15309, 15372, 15435, 
    15498, 15561, 15624, 15687, 15750, 15813, 15876, 15939, 16002, 16065, 
    16128, 16191, 16254, 16317,  1260, 16380, 16443, 16506, 16569, 16632, 
    16695,  1260, 16758, 16821,  1260, 16884, 16947, 17010, 11214, 17073, 
    17136, 17199, 17262, 17325, 17388, 17451, 17514, 17577, 17640, 17703, 
    17766, 17829, 17892,  1260, 17955, 18018,  1260, 18081, 18144, 18207, 
    18270, 18333, 18396, 18459,  1260, 18522, 18585,  1260, 18648, 18711, 
    18774,  1260, 18837, 18900, 18963, 19026, 19089, 19152, 19215, 19278, 
    19341, 19404, 19467, 19530, 19593, 19656, 19719, 19782, 19845, 19908, 
    19971, 20034, 20097, 20160, 20223, 20286, 20349, 20412, 20475, 20538, 
    20601, 20664, 20727, 20790, 20853, 20916, 20979, 21042, 21105, 21168, 
    21231, 21294, 21357, 21420,     0, 21483, 21546, 21609, 21672, 21735, 
    21798, 21861, 21924, 21987,     0, 22050, 22113, 22176,  1260, 22239, 
    22302, 22365, 22428,  1260, 22491,  1260, 22554,     0, 22617, 22680, 
    22743, 22806,  1260,  1260, 22869, 22932, 22995, 23058, 23121, 23184, 
     1260, 23247,  1260, 23310,  1260,  1260, 23373,  1260, 23436,  1260, 
     1260,  1260,  1260, 23499, 23562,  1260, 23625, 23688, 23751,  1260, 
    23814, 23877, 23940, 24003, 24066, 24129, 24192, 24255, 24318,     0, 
    24381, 24444, 24507, 24570, 24633, 24696, 24759, 24822, 24885, 24948, 
    25011, 25074, 25137, 25200, 25263,     0,     0, 25326, 25389, 25452, 
        0, 25515, 25578, 25641, 25704,     0, 25767, 25830, 25893, 25956, 
    26019,     0, 26082, 26145, 26208, 26271, 26334, 26397, 26460, 26523, 
    26586, 26649, 26712,  1260,  1260,  1260, 26775, 26838,  1260,  1260, 
    26901, 26964, 27027, 27090, 27153, 27216, 27279, 27342, 27405,  1260, 
     1260, 27468, 27531, 27594, 27657,  1260,  1260, 27720, 27783, 27846, 
    27909,  1260, 27972, 28035, 28098, 28161, 28224, 28287, 28350, 28413, 
    28476, 28539, 28602, 28665, 28728, 28791, 28854, 28917, 28980,     0, 
    29043, 29106, 29169,     0, 29232, 29295, 29358,     0, 29421,     0, 
    29484, 29547,  1260, 29610, 29673, 29736, 29799, 29862, 29925,  1260, 
     1260, 29988, 30051, 30114, 30177,  1260, 30240, 30303, 30366, 30429, 
    30492,  1260, 30555, 30618, 30681, 30744, 30807, 30870, 30933, 30996, 
    31059, 31122,     0, 31185,     0,     0, 31248, 31311,     0, 31374, 
        0, 31437, 31500, 31563, 31626, 31689, 31752, 31815, 31878,     0, 
    31941, 32004, 32067,  1260, 32130,  1260, 32193, 32256, 32319, 32382, 
     1260,  1260, 32445,  1260, 32508,  1260, 32571, 32634, 32697,  1260, 
    32760,     0, 32823, 32886, 32949, 33012, 33075, 33138, 33201, 33264, 
    33327, 33390,     0,     0,     0, 33453, 33516,  1260, 33579,  1260, 
    33642, 33705, 33768, 33831,  1260, 33894,  1260, 33957, 34020, 34083, 
        0, 34146,     0,     0, 34209, 34272,     0, 34335, 34398,  1260, 
     1260, 34461, 34524,  1260,  1260,  1260, 34587, 34650,  1260,     0, 
    34713, 34776,     0,     0, 34839, 34902, 34965, 35028, 35091,     0, 
        0,     0,  1260,  1260,  1260, 35154, 35217, 35280,  1260
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\77\0\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\27\1\30\1\31\1\32\1\30\1\33"+
    "\1\27\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\41\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\2\26"+
    "\1\61\1\62\1\26\1\63\1\26\1\64\1\65\1\66"+
    "\1\67\1\30\1\26\1\70\1\26\1\71\1\72\1\73"+
    "\1\74\1\30\1\75\1\16\1\76\1\17\1\77\1\100"+
    "\1\101\1\102\1\101\1\103\3\102\4\101\2\77\15\101"+
    "\22\102\1\101\1\102\1\101\1\102\1\101\3\102\1\104"+
    "\1\105\3\101\1\106\1\107\1\110\1\100\17\111\1\106"+
    "\54\111\1\112\2\111\1\77\1\100\1\101\1\102\1\101"+
    "\1\103\3\102\4\101\2\77\15\101\22\102\1\101\1\102"+
    "\1\101\1\102\1\101\3\102\1\104\1\105\3\101\1\113"+
    "\1\107\1\106\1\100\4\114\1\115\61\114\1\116\10\114"+
    "\1\16\1\100\1\101\1\102\1\101\1\103\3\102\4\101"+
    "\2\77\1\117\14\101\22\102\1\101\1\102\1\101\1\102"+
    "\1\101\3\102\1\104\1\105\3\101\1\120\1\121\1\120"+
    "\1\100\1\16\1\100\1\101\1\122\1\101\1\103\3\122"+
    "\4\101\2\77\1\117\14\101\22\122\1\101\1\122\1\101"+
    "\1\122\1\101\3\122\1\104\1\105\3\101\1\120\1\121"+
    "\1\120\1\100\3\123\1\124\2\123\3\124\23\123\22\124"+
    "\1\123\1\124\1\123\1\124\1\123\3\124\11\123\26\125"+
    "\1\126\50\125\26\127\1\130\43\127\1\131\4\127\11\132"+
    "\1\133\6\132\1\134\1\132\1\135\5\132\1\136\40\132"+
    "\1\137\5\132\11\140\2\141\5\140\1\141\56\140\1\0"+
    "\1\17\1\142\1\143\1\0\1\17\70\0\1\17\1\0"+
    "\1\142\3\0\1\142\13\0\1\144\54\0\1\142\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\145\2\26\23\0"+
    "\3\26\1\146\5\26\1\147\4\26\1\150\2\26\1\151"+
    "\1\0\1\152\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\4\0\1\144\14\0\1\144\1\153\55\0\1\17\1\142"+
    "\1\143\1\0\1\17\1\154\67\0\1\17\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\46\21\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\155\1\0\4\26\23\0\1\26\1\156"+
    "\20\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\11\0\2\27\5\0\1\27\56\0\17\157\1\77"+
    "\54\157\1\160\2\157\21\0\1\161\1\144\75\0\1\144"+
    "\1\161\75\0\1\144\1\0\1\144\74\0\1\161\76\0"+
    "\2\144\2\0\1\162\72\0\1\144\76\0\1\144\4\0"+
    "\1\163\1\73\70\0\1\144\1\164\75\0\1\144\7\0"+
    "\1\144\66\0\1\144\10\0\1\144\45\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\1\165\20\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\166\1\0\4\26\23\0\22\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\2\26\1\167\1\26\23\0"+
    "\1\26\1\170\1\26\1\171\3\26\1\172\2\26\1\173"+
    "\7\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\174\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\175\1\0\4\26\23\0"+
    "\1\176\4\26\1\177\14\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\3\26\1\200\3\26\1\201\2\26"+
    "\1\202\6\26\1\203\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\1\204\12\26\1\205\5\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\206\1\207"+
    "\1\210\2\26\1\211\2\26\1\212\11\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\3\26\1\213\6\26"+
    "\1\214\7\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\215\1\26\1\216\13\26\1\217\3\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\220\1\0\4\26\23\0\6\26\1\221"+
    "\6\26\1\222\4\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\14\26\1\223\5\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\5\26\1\224\14\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\225\1\0\4\26\23\0\1\226\1\227"+
    "\1\230\5\26\1\231\11\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\56\0\1\232\21\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\2\26\1\233\17\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\7\0\1\234\2\0\1\235\21\0\1\236\1\237\1\240"+
    "\1\0\1\241\1\242\1\0\1\243\1\244\1\0\1\245"+
    "\31\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\246\3\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\247\1\26\10\0\1\26\3\0\1\250\2\0\3\250"+
    "\23\0\22\250\1\0\1\250\1\0\1\250\1\0\3\250"+
    "\33\0\1\251\54\0\67\252\1\0\3\252\1\77\1\253"+
    "\2\252\1\0\1\100\3\0\1\100\70\0\1\100\2\0"+
    "\1\101\1\0\1\101\4\0\4\101\2\0\15\101\22\0"+
    "\1\101\1\0\1\101\1\0\1\101\5\0\3\101\5\0"+
    "\1\102\1\0\1\102\1\0\4\102\23\0\22\102\1\0"+
    "\1\102\1\0\1\102\1\0\3\102\10\0\1\102\1\0"+
    "\1\100\3\0\1\100\1\254\67\0\1\100\67\0\1\255"+
    "\7\0\3\256\1\257\2\256\3\257\23\256\22\257\1\256"+
    "\1\257\1\256\1\257\1\256\3\257\1\260\10\256\5\77"+
    "\1\261\1\262\67\77\1\261\75\0\1\110\1\0\17\111"+
    "\1\0\54\111\1\263\21\111\1\77\54\111\1\77\2\111"+
    "\73\0\1\113\25\0\1\264\56\0\1\101\1\0\1\101"+
    "\4\0\4\101\2\0\1\117\14\101\22\0\1\101\1\0"+
    "\1\101\1\0\1\101\5\0\3\101\1\120\1\0\1\120"+
    "\20\0\1\120\53\0\1\120\1\0\1\120\2\0\1\122"+
    "\1\0\1\122\1\0\4\122\1\265\2\0\1\266\3\0"+
    "\1\267\13\0\22\122\1\0\1\122\1\0\1\122\1\0"+
    "\3\122\10\0\1\122\1\0\1\124\1\0\1\124\1\0"+
    "\4\124\23\0\22\124\1\0\1\124\1\0\1\124\1\0"+
    "\3\124\10\0\1\124\26\125\1\0\50\125\27\0\1\270"+
    "\76\0\1\271\52\0\1\272\31\0\1\273\1\274\1\275"+
    "\1\276\1\277\1\300\1\301\1\302\1\303\1\304\3\0"+
    "\1\305\1\0\1\306\1\307\1\0\1\310\1\0\1\311"+
    "\15\0\11\132\1\134\6\132\1\134\1\132\1\134\5\132"+
    "\1\134\40\132\1\134\5\132\20\0\1\312\100\0\1\313"+
    "\65\0\2\141\5\0\1\141\57\0\1\142\1\0\1\143"+
    "\1\0\1\142\70\0\1\142\1\0\1\314\2\0\1\315"+
    "\1\314\15\0\1\315\52\0\1\314\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\5\26\1\316\1\317\13\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\4\26"+
    "\1\320\15\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\14\26\1\321\5\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\12\26\1\322\7\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\20\26\1\323\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\2\26"+
    "\1\324\17\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\325\1\0\1\325\1\0\1\325"+
    "\1\0\1\325\26\0\1\325\1\0\1\325\2\0\1\325"+
    "\1\0\1\325\30\0\1\325\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\7\26\1\326\12\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\327\1\0\4\26\23\0\22\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\20\157\1\0"+
    "\56\157\21\0\1\144\3\0\1\330\77\0\1\331\61\0"+
    "\2\164\5\0\1\164\57\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\6\26\1\332\13\26\1\0\1\26\1\0"+
    "\1\26\1\0\2\26\1\333\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\12\26\1\334\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\335"+
    "\1\336\20\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\4\26\1\165\15\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\337\13\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\20\26\1\340\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\15\26"+
    "\1\341\4\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\7\26\1\342\1\26\1\343\10\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\344\1\0\4\26\23\0\22\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\345\2\26"+
    "\1\346\1\347\7\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\12\26\1\350\7\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\20\26\1\351\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\10\26\1\352"+
    "\2\26\1\353\6\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\1\354\20\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\1\26\1\355\20\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\356\21\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\357\3\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\3\26\1\360\16\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\3\26\1\361\16\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\12\26\1\362\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\363\1\0\4\26\23\0\22\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\3\26"+
    "\1\364\16\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\365\3\26\1\366\7\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\367\1\26\1\370"+
    "\17\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\16\26\1\371\3\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\2\26\1\372\17\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\5\26\1\373\14\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\5\26\1\374"+
    "\14\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\12\26\1\375\7\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\26\1\376\20\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\5\26\1\377\14\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\u0100\4\26"+
    "\1\u0101\14\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\1\u0102\20\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\2\26\1\u0103\1\26\23\0\22\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\26\1\u0104\20\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\34\0\1\u0105\51\0\1\u0106\72\0\1\u0107\130\0\1\u0108"+
    "\75\0\1\u0109\101\0\1\u010a\111\0\1\u010b\63\0\1\u010c"+
    "\101\0\1\u010d\35\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\u010e\21\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\7\26\1\u010f\1\26\1\u0110\2\26\1\u0111"+
    "\1\26\1\u0112\2\26\1\u0113\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\250\1\0\1\250"+
    "\1\0\4\250\23\0\22\250\1\0\1\250\1\0\1\250"+
    "\1\0\3\250\10\0\1\250\11\0\2\251\5\0\1\251"+
    "\56\0\20\252\1\0\56\252\1\0\1\u0114\1\0\1\u0114"+
    "\1\0\1\u0114\1\0\1\u0114\26\0\1\u0114\1\0\1\u0114"+
    "\2\0\1\u0114\1\0\1\u0114\30\0\1\u0114\1\0\1\257"+
    "\1\0\1\257\1\0\4\257\23\0\22\257\1\0\1\257"+
    "\1\0\1\257\1\0\3\257\10\0\1\257\5\0\1\u0115"+
    "\70\0\1\u0115\1\0\1\u0116\1\0\1\u0116\1\0\1\u0116"+
    "\1\0\1\u0116\26\0\1\u0116\1\0\1\u0116\2\0\1\u0116"+
    "\1\0\1\u0116\30\0\1\u0116\17\111\1\0\54\111\1\0"+
    "\2\111\20\0\1\267\67\0\1\265\6\0\1\267\64\0"+
    "\1\u0117\73\0\1\u0118\102\0\1\u0119\34\0\1\u011a\1\u011b"+
    "\67\0\1\u011c\43\0\1\u011d\132\0\1\u011e\21\0\1\u011f"+
    "\51\0\1\u0120\7\0\1\u0121\3\0\1\u0122\67\0\1\u0123"+
    "\103\0\1\u0124\64\0\1\u0125\1\0\1\u0126\43\0\1\u0127"+
    "\35\0\1\u0128\1\u0129\1\0\1\u012a\73\0\1\u012b\73\0"+
    "\1\u012c\76\0\1\u012d\43\0\1\u012e\32\0\1\u012f\112\0"+
    "\1\u0130\35\0\2\313\5\0\1\313\57\0\1\314\3\0"+
    "\1\314\70\0\1\314\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\6\26\1\u0131\13\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u0132\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\4\26\1\u0133\1\u0134\1\26"+
    "\1\u0135\2\26\1\u0136\2\26\1\u0137\4\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\u0138\21\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\u0139\1\0\4\26\23\0\22\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\6\26\1\u013a"+
    "\13\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\16\26\1\u013b\3\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\u013c\21\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\2\26\1\u013d\17\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\3\0\1\u013e"+
    "\2\0\3\u013e\1\0\1\330\21\0\22\u013e\1\0\1\u013e"+
    "\1\0\1\u013e\1\0\3\u013e\22\0\2\u013f\5\0\1\u013f"+
    "\57\0\1\26\1\0\1\26\1\0\4\26\23\0\10\26"+
    "\1\u0140\11\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\10\26\1\u0141\11\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\u0142\13\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\10\26\1\u0143\11\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\2\26"+
    "\1\u0144\17\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u0145\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u0146\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\2\26\1\u0147\17\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\16\26\1\u0148\3\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u0149\1\0\4\26\23\0\22\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\16\26\1\u014a\3\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\6\26"+
    "\1\u014b\13\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u014c\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\16\26\1\u014d\3\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\u014e"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\u014f\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u0150\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\21\26\1\u0151\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\12\26\1\u0152\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\2\26"+
    "\1\u0153\17\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\11\26\1\u0154\10\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\u0155"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\u0156\3\26\1\u0157\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\11\26"+
    "\1\u0158\10\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u0159\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\3\26\1\u015a\16\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\12\26\1\u015b\7\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\7\26\1\u015c\12\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\6\26"+
    "\1\u015d\13\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u015e\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\16\26\1\u015f\3\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\u0160\13\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\12\26"+
    "\1\u0161\7\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\3\26\1\u0162\16\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\u0163\13\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\3\26\1\u0164\16\26"+
    "\1\0\1\u0165\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\u0166\1\0\4\26\23\0\22\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\u0167\3\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\34\0\1\u0168\125\0\1\u0169\51\0\1\u016a"+
    "\75\0\1\u016b\105\0\1\u016c\74\0\1\u016d\70\0\1\u016e"+
    "\110\0\1\u016f\65\0\1\u0170\42\0\1\26\1\0\1\26"+
    "\1\0\2\26\1\u0171\1\26\23\0\22\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\5\26\1\u0172\2\26"+
    "\1\u0173\11\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\16\26\1\u0174\3\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\2\26\1\u0175\17\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\5\26\1\u0176\14\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\u0177\1\0\4\26\23\0\22\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\5\0\1\77\70\0\1\77\1\0\1\77\1\0\1\77"+
    "\1\0\1\77\1\0\1\77\26\0\1\77\1\0\1\77"+
    "\2\0\1\77\1\0\1\77\30\0\1\77\36\0\1\u0178"+
    "\6\0\1\u0179\73\0\1\u017a\102\0\1\u017b\72\0\1\u017c"+
    "\101\0\1\u017d\106\0\1\u017e\67\0\1\u017f\5\0\1\u0180"+
    "\64\0\1\u0181\73\0\1\u0182\77\0\1\u0183\100\0\1\u0184"+
    "\71\0\1\u0185\100\0\1\u0186\12\0\1\u0187\27\0\1\u0188"+
    "\147\0\1\u0189\64\0\1\u018a\37\0\1\u018b\132\0\1\u018c"+
    "\75\0\1\u018d\47\0\1\u018e\126\0\1\u018f\5\0\1\u0190"+
    "\66\0\1\u0191\7\0\1\u0192\112\0\1\u0193\52\0\1\u0194"+
    "\76\0\1\u0195\75\0\1\u0196\43\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\3\26\1\u0197\16\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u0198\1\0\4\26\23\0\22\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\7\26\1\u0199\12\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\u019a"+
    "\21\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\15\26\1\u019b\4\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\14\26\1\u019c\5\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\5\26\1\u019d\14\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\13\26\1\u019e"+
    "\6\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\1\u019f\20\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\17\26\1\u01a0\2\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\u013e\1\0"+
    "\1\u013e\1\0\4\u013e\1\u01a1\6\0\1\u01a2\13\0\22\u013e"+
    "\1\0\1\u013e\1\0\1\u013e\1\0\3\u013e\10\0\1\u013e"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\1\u01a3\20\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\5\26\1\u01a4\14\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\1\u01a5\20\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\3\26\1\u01a6\16\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\13\26"+
    "\1\u01a7\6\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\1\u01a8\20\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\11\26\1\u01a9\10\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\10\26\1\u01aa\11\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\2\26"+
    "\1\u01ab\17\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\1\u01ac\20\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\10\26\1\u01ad\11\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\2\26\1\u01ae\17\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\6\26"+
    "\1\u01af\13\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u01b0\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\15\26\1\u01b1\4\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\2\26\1\u01b2\17\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\u01b3\1\0\4\26\23\0\22\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\16\26\1\u01b4\3\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\6\26"+
    "\1\u01b5\13\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u01b6\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\5\26\1\u01b7\14\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\u01b8\13\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\14\26"+
    "\1\u01b9\5\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u01ba\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\12\26\1\u01bb\7\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\5\26\1\u01bc\14\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\11\26\1\u01bd\10\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\u01be\1\0\4\26\23\0\22\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\u01bf\1\0\4\26\23\0\22\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\6\26"+
    "\1\u01c0\13\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u01c1\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u01c2\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\2\26\1\u01c3\17\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\3\26\1\u01c4\16\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\5\26"+
    "\1\u01c5\14\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\52\0\1\u01c6\27\0\1\u01c7\145\0\1\u01c8"+
    "\62\0\1\u01c9\47\0\1\u01ca\72\0\1\u01cb\6\0\1\u01c8"+
    "\47\0\1\u01cc\52\0\1\u01cd\43\0\1\u01cd\134\0\1\u01ce"+
    "\36\0\1\26\1\0\1\26\1\0\4\26\23\0\2\26"+
    "\1\u01cf\17\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\16\26\1\u01d0\3\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\3\26\1\u01d1\16\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\2\26\1\u01d2\17\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\u01d3\3\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\3\26\1\u01d4\16\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\6\26\1\u01d5\13\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\55\0\1\u01d6"+
    "\24\0\1\u01d7\137\0\1\u01d8\74\0\1\u01d9\104\0\1\u01da"+
    "\31\0\1\u01db\76\0\1\u01dc\140\0\1\u01dd\66\0\1\u01de"+
    "\44\0\1\u01df\127\0\1\u01e0\76\0\1\u01e1\76\0\1\u01e2"+
    "\76\0\1\u01e3\100\0\1\u01e4\43\0\1\u01e5\141\0\1\u01e6"+
    "\77\0\1\u01e7\32\0\1\u01e8\140\0\1\u01e9\73\0\1\u01ea"+
    "\110\0\1\u01eb\75\0\1\u01ec\26\0\1\u01ed\131\0\1\u01ee"+
    "\113\0\1\u01ef\64\0\1\u01f0\103\0\1\u01f1\37\0\1\u01f2"+
    "\70\0\1\26\1\0\1\26\1\0\4\26\23\0\4\26"+
    "\1\u01f3\15\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\11\26\1\u01f4\10\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\26\1\u01f5\20\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\5\26\1\u01f6\14\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\5\26"+
    "\1\u01f7\14\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\7\26\1\u01f8\12\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\u01f9"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\20\0\1\u01a2\57\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\3\26\1\u01fa\16\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\26"+
    "\1\u01fb\20\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\2\26\1\u01fc\17\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\4\26\1\u01fd\15\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\u01fe\13\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\u01ff\3\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\1\u0200\20\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\7\26\1\u0201\12\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\4\26\1\u0202\15\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\3\26"+
    "\1\u0203\16\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\21\26\1\u0204\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\11\26\1\u0205\10\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\5\26\1\u0206\14\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\3\26\1\u0207"+
    "\16\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\11\26\1\u0208\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\14\26\1\u0209\5\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\12\26\1\u020a\7\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\11\26\1\u020b"+
    "\10\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\11\26\1\u020c\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\6\26\1\u020d\13\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\6\26\1\u020e\13\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\11\26\1\u020f"+
    "\10\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\3\0\1\u0210\6\0\1\u01c8\47\0\1\u01cc\61\0"+
    "\1\u01cd\43\0\1\u01c8\47\0\1\u01cc\63\0\1\u01c8\101\0"+
    "\1\u0211\105\0\1\u0212\57\0\1\u01c8\73\0\1\u0213\40\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\16\26\1\u0214"+
    "\3\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\u0215\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\11\26\1\u0216\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\12\26\1\u0217\7\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\6\26\1\u0218\13\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\u0219\1\0\4\26\23\0\22\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\14\26\1\u021a"+
    "\5\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\54\0\1\u021b\76\0\1\u021c\57\0\1\u021d\76\0"+
    "\1\u021e\75\0\1\u021f\110\0\1\u0220\33\0\1\u0221\130\0"+
    "\1\u0222\76\0\1\u0223\76\0\1\u0224\112\0\1\u0225\77\0"+
    "\1\u0226\72\0\1\u0227\65\0\1\u0228\122\0\1\u0229\20\0"+
    "\1\u022a\134\0\1\u022b\73\0\1\u022c\77\0\1\u022d\114\0"+
    "\1\u022e\57\0\1\u022f\105\0\1\u0230\72\0\1\u0231\73\0"+
    "\1\u0232\41\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\12\26\1\u0233\7\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\16\26\1\u0234\3\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u0235\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\6\26\1\u0236\13\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\16\26\1\u0237"+
    "\3\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\u0238\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\11\26\1\u0239\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\6\26\1\u023a\13\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u023b\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\2\26\1\u023c\17\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\u023d\1\0\4\26\23\0\22\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\11\26\1\u023e"+
    "\10\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\u023f\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\14\26\1\u0240\5\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\1\u0241\21\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\10\26\1\u0242\11\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\12\26\1\u0243\7\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\10\26"+
    "\1\u0244\11\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u0245\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\u0246"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\36\0\1\u0247\43\0\1\u01c8"+
    "\76\0\1\u0248\154\0\1\u01c8\16\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\u0249\1\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\6\26\1\u024a\13\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\12\26"+
    "\1\u024b\7\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\u024c\1\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\u024d\1\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\1\u024e\21\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\52\0"+
    "\1\u024f\66\0\1\u0250\73\0\1\u0251\75\0\1\u0252\75\0"+
    "\1\u0253\107\0\1\u0254\75\0\1\u0255\70\0\1\u0256\42\0"+
    "\1\u0257\134\0\1\u0258\103\0\1\u0259\64\0\1\u025a\103\0"+
    "\1\u025b\71\0\1\u025c\107\0\1\u025d\76\0\1\u025e\77\0"+
    "\1\u025f\111\0\1\u0260\51\0\1\u0261\114\0\1\u0262\25\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\2\26\1\u0263"+
    "\17\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\2\26\1\u0264\17\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\11\26\1\u0265\10\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u0266\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\u0267\1\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\6\26\1\u0268"+
    "\13\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\11\26\1\u0269\10\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\22\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\u026a\1\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u026b\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\3\26\1\u026c\16\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\3\26\1\u026d"+
    "\16\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\u026e\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\5\26\1\u026f\14\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\6\26\1\u0270\13\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\u0271\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\37\0\1\u01c8\74\0"+
    "\1\u01c8\42\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\1\26\1\u0272"+
    "\1\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\5\26\1\u0273\14\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\22\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\u0274\1\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\11\26\1\u0275"+
    "\10\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\1\26\1\u0276"+
    "\1\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\4\26\1\u0277\15\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\3\0\1\u0278\134\0"+
    "\1\u0279\102\0\1\u027a\67\0\1\u027b\76\0\1\u027c\76\0"+
    "\1\u027d\104\0\1\u027e\113\0\1\u027f\52\0\1\u0280\120\0"+
    "\1\u0281\72\0\1\u0282\26\0\1\u0283\76\0\1\u0284\132\0"+
    "\1\u0285\40\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\26\1\u0286\20\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\11\26\1\u0287\10\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\14\26\1\u0288\5\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\u0289\21\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\u028a\1\0\4\26\23\0\22\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\1\u028b"+
    "\21\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\1\u028c\21\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\6\26\1\u028d\13\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\1\u028e\21\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\4\26\1\u028f\15\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\1\u0290\21\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\22\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\u0291\1\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\u0292\21\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\22\26\1\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\u0293\1\26\10\0\1\26\34\0\1\u0294\104\0"+
    "\1\u0295\76\0\1\u0296\106\0\1\u0297\76\0\1\u0298\61\0"+
    "\1\u0299\111\0\1\u029a\75\0\1\u029b\65\0\1\u029c\76\0"+
    "\1\u029d\41\0\1\26\1\0\1\u029e\1\0\4\26\23\0"+
    "\22\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\14\26\1\u029f\5\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\3\26\1\u02a0\16\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\3\26\1\u02a1\16\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\7\26\1\u02a2"+
    "\12\26\1\0\1\26\1\0\1\26\1\0\3\26\10\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\23\0"+
    "\12\26\1\u02a3\7\26\1\0\1\26\1\0\1\26\1\0"+
    "\3\26\10\0\1\26\1\0\1\26\1\0\1\26\1\0"+
    "\4\26\23\0\3\26\1\u02a4\16\26\1\0\1\26\1\0"+
    "\1\26\1\0\3\26\10\0\1\26\1\0\1\26\1\0"+
    "\1\26\1\0\4\26\23\0\3\26\1\u02a5\16\26\1\0"+
    "\1\26\1\0\1\26\1\0\3\26\10\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\4\26\23\0\21\26\1\u02a6"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\22\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\u02a7\1\26"+
    "\10\0\1\26\37\0\1\u02a8\42\0\1\u02a9\140\0\1\u02aa"+
    "\73\0\1\u02ab\71\0\1\u02ac\122\0\1\u02ad\16\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\11\26\1\u02ae\10\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\11\26"+
    "\1\u02af\10\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\u02b0\1\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\20\26\1\u02b1\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\3\26\10\0\1\26\40\0\1\u02b2"+
    "\41\0\1\u02b3\76\0\1\u02b4\74\0\1\26\1\0\1\u02b5"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\u02b6"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\23\0\22\26\1\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\u02b7\1\26\10\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\23\0\5\26\1\u02b8\14\26"+
    "\1\0\1\26\1\0\1\26\1\0\3\26\10\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\4\26\23\0\16\26"+
    "\1\u02b9\3\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\u02ba\1\0\4\26"+
    "\23\0\22\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\10\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26"+
    "\23\0\1\26\1\u02bb\20\26\1\0\1\26\1\0\1\26"+
    "\1\0\3\26\10\0\1\26";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1,  9,  9,  1, 
     1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  1,  9,  9,  1,  1,  9, 
     1,  1,  0,  9,  1,  1,  1,  1,  1,  1,  9,  0,  1,  1,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  9,  9,  1,  9, 
     1,  1,  0,  9,  1,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  9,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0, 
     9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  9,  0,  9, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  0,  0, 
     9,  0,  9,  9,  0,  0,  9,  0,  9,  0,  0,  0,  1,  0,  0,  0, 
     0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  0,  9,  0,  9,  9,  0,  0,  9,  0,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  9,  9,  0,  1,  1,  1, 
     1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
    public PHPAspectLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.yy_buffer = array;
        this.yy_currentPos = offset;
        this.yy_markedPos = offset;
        this.yy_pushbackPos = offset;
        this.yychar = offset;
        this.yy_endRead = offset + length;
        this.yy_startRead = offset;
        this.yy_atEOF = yy_currentPos >= yy_endRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.yy_reader = reader;
    	this.yy_buffer = buffer;
    	this.yy_markedPos = parameters[0];
    	this.yy_pushbackPos = parameters[1];
    	this.yy_currentPos = parameters[2];
    	this.yy_startRead = parameters[3];
    	this.yy_endRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    public int[] getParamenters(){
    	return new int[]{yy_markedPos, yy_pushbackPos, yy_currentPos, yy_startRead, yy_endRead, yyline, yy_lexical_state};
    }

    protected int getYy_lexical_state() {
        return yy_lexical_state;
    }

    protected int getYy_markedPos() {
        return yy_markedPos;
    }

    protected int getYy_endRead() {
        return yy_endRead;
    }

    protected char[] getYy_buffer() {
        return yy_buffer;
    }
    
    protected int getYy_startRead() {
    	return this.yy_startRead;
    }

    protected int getYy_pushBackPosition() {
    	return this.yy_pushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHPAspectLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHPAspectLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[35343];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 96: 
          { popState();return WHITESPACE; }
        case 700: break;
        case 394: 
          { return PHPDOC_SEE; }
        case 701: break;
        case 404: 
          { return PHPDOC_VAR; }
        case 702: break;
        case 475: 
          { return PHPDOC_NAME; }
        case 703: break;
        case 476: 
          { return PHPDOC_DESC; }
        case 704: break;
        case 480: 
          { return PHPDOC_TODO; }
        case 705: break;
        case 485: 
          { return PHPDOC_USES; }
        case 706: break;
        case 491: 
          { return PHPDOC_LINK; }
        case 707: break;
        case 666: 
          { return PHPDOC_CATEGORY; }
        case 708: break;
        case 663: 
          { return PHPDOC_TUTORIAL; }
        case 709: break;
        case 662: 
          { return PHPDOC_INTERNAL; }
        case 710: break;
        case 660: 
          { return PHPDOC_ABSTRACT; }
        case 711: break;
        case 86: 
        case 87: 
        case 88: 
          { return PHPDOC_COMMENT; }
        case 712: break;
        case 631: 
          { return PHPDOC_EXAMPLE; }
        case 713: break;
        case 642: 
          { return PHPDOC_LICENSE; }
        case 714: break;
        case 643: 
          { return PHPDOC_PACKAGE; }
        case 715: break;
        case 644: 
          { return PHPDOC_VERSION; }
        case 716: break;
        case 95: 
          { return UNKNOWN_TOKEN; }
        case 717: break;
        case 549: 
          { return PHPDOC_FINAL; }
        case 718: break;
        case 553: 
          { return PHPDOC_SINCE; }
        case 719: break;
        case 557: 
          { return PHPDOC_PARAM; }
        case 720: break;
        case 559: 
          { return PHPDOC_MAGIC; }
        case 721: break;
        case 592: 
          { return PHPDOC_RETURN; }
        case 722: break;
        case 594: 
          { return PHPDOC_AUTHOR; }
        case 723: break;
        case 595: 
          { return PHPDOC_ACCESS; }
        case 724: break;
        case 598: 
          { return PHPDOC_IGNORE; }
        case 725: break;
        case 600: 
          { return PHPDOC_THROWS; }
        case 726: break;
        case 604: 
          { return PHPDOC_STATIC; }
        case 727: break;
        case 609: 
          { return PHPDOC_GLOBAL; }
        case 728: break;
        case 691: 
          { return PHPDOC_SUBPACKAGE; }
        case 729: break;
        case 690: 
          { return PHPDOC_FILESOURCE; }
        case 730: break;
        case 689: 
          { return PHPDOC_DEPRECATED; }
        case 731: break;
        case 683: 
          { return PHPDOC_STATICVAR; }
        case 732: break;
        case 682: 
          { return PHPDOC_COPYRIGHT; }
        case 733: break;
        case 679: 
          { return PHPDOC_EXCEPTION; }
        case 734: break;
        case 184: 
          { 
    popState();
    return PHPDOC_COMMENT_END;
 }
        case 735: break;
        case 25: 
          { 
    if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
 }
        case 736: break;
        case 259: 
          { 
    return PHP_VAR;
 }
        case 737: break;
        case 242: 
          { 
    return PHP_USE;
 }
        case 738: break;
        case 236: 
          { 
    return PHP_FOR;
 }
        case 739: break;
        case 234: 
          { 
    return PHP_TRY;
 }
        case 740: break;
        case 227: 
          { 
    return PHP_DIE;
 }
        case 741: break;
        case 224: 
          { 
    return PHP_NEW;
 }
        case 742: break;
        case 128: 
          { 
    return PHP_IF;
 }
        case 743: break;
        case 125: 
          { 
    return PHP_DO;
 }
        case 744: break;
        case 122: 
          { 
    return PHP_AS;
 }
        case 745: break;
        case 202: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHP_LINE_COMMENT;
 }
        case 746: break;
        case 201: 
          { 
    popState();
    return PHP_LINE_COMMENT;
 }
        case 747: break;
        case 183: 
          { 
    popState();
    return PHP_COMMENT_END;
 }
        case 748: break;
        case 13: 
        case 80: 
          { 
    yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
 }
        case 749: break;
        case 693: 
          { 
    return PHP_INCLUDE_ONCE;
 }
        case 750: break;
        case 692: 
          { 
    return PHP_REQUIRE_ONCE;
 }
        case 751: break;
        case 92: 
        case 93: 
        case 94: 
          { 
    return PHP_LINE_COMMENT;
 }
        case 752: break;
        case 175: 
          { 
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
 }
        case 753: break;
        case 58: 
          { 
    pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
 }
        case 754: break;
        case 179: 
          { 
    popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
     }
        case 755: break;
        case 106: 
          { 
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
 }
        case 756: break;
        case 694: 
          { 
    return PHP__FUNCTION__;
 }
        case 757: break;
        case 675: 
          { 
    return PHP_PERSESSION;
 }
        case 758: break;
        case 674: 
          { 
    return PHP_IMPLEMENTS;
 }
        case 759: break;
        case 673: 
          { 
    return PHP_INSTANCEOF;
 }
        case 760: break;
        case 670: 
          { 
    return PHP_ENDFOREACH;
 }
        case 761: break;
        case 669: 
          { 
    return PHP_ENDDECLARE;
 }
        case 762: break;
        case 212: 
          { 
    return PHP_NUMBER;
 }
        case 763: break;
        case 168: 
          { 
	return PHP_CLOSETAG;
 }
        case 764: break;
        case 56: 
          { 
    return PHP_CURLY_OPEN;
 }
        case 765: break;
        case 14: 
        case 18: 
          { 
    return PHP_NUMBER;
 }
        case 766: break;
        case 69: 
          { 
    popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 767: break;
        case 79: 
          { 
    return PHP_ENCAPSED_AND_WHITESPACE;
 }
        case 768: break;
        case 84: 
          { 
    return PHP_COMMENT;
 }
        case 769: break;
        case 85: 
          { 
    return PHP_COMMENT;
 }
        case 770: break;
        case 97: 
        case 203: 
          { 
    return PHP_NUMBER;
 }
        case 771: break;
        case 459: 
          { 
    return PHP_CASTING;
 }
        case 772: break;
        case 500: 
          { 
    return PHP_ENDFOR;
 }
        case 773: break;
        case 503: 
          { 
    return PHP_ELSEIF;
 }
        case 774: break;
        case 504: 
          { 
    return PHP_BEFORE;
 }
        case 775: break;
        case 505: 
          { 
    return PHP_RETURN;
 }
        case 776: break;
        case 508: 
          { 
    return PHP_AROUND;
 }
        case 777: break;
        case 509: 
          { 
    return PHP_ASPECT;
 }
        case 778: break;
        case 519: 
          { 
    return PHP_STATIC;
 }
        case 779: break;
        case 520: 
          { 
    return PHP_SWITCH;
 }
        case 780: break;
        case 525: 
          { 
    return PHP_PARENT;
 }
        case 781: break;
        case 526: 
          { 
    return PHP_PUBLIC;
 }
        case 782: break;
        case 531: 
          { 
    return PHP_GLOBAL;
 }
        case 783: break;
        case 562: 
          { 
    return PHP_EXTENDS;
 }
        case 784: break;
        case 567: 
          { 
    return PHP_REQUIRE;
 }
        case 785: break;
        case 569: 
          { 
    return PHP_DEFAULT;
 }
        case 786: break;
        case 570: 
          { 
    return PHP_DECLARE;
 }
        case 787: break;
        case 572: 
          { 
    return PHP_INCLUDE;
 }
        case 788: break;
        case 575: 
          { 
    return PHP_FOREACH;
 }
        case 789: break;
        case 581: 
          { 
    return PHP_PRIVATE;
 }
        case 790: break;
        case 625: 
          { 
    return PHP__FILE__;
 }
        case 791: break;
        case 629: 
          { 
    return PHP__LINE__;
 }
        case 792: break;
        case 65: 
        case 81: 
          { 
	return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 793: break;
        case 153: 
          { 
    return PHP_PAAMAYIM_NEKUDOTAYIM;
 }
        case 794: break;
        case 115: 
          { 
	if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
 }
        case 795: break;
        case 172: 
          { 
    yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
 }
        case 796: break;
        case 678: 
          { 
    return PHP__METHOD__;
 }
        case 797: break;
        case 167: 
          { 
    return PHP_VARIABLE;
 }
        case 798: break;
        case 24: 
          { 
    return PHP_SEMICOLON;
 }
        case 799: break;
        case 99: 
        case 112: 
        case 113: 
        case 116: 
          { 
    return PHP_OPERATOR;
 }
        case 800: break;
        case 613: 
          { 
    return PHP_ENDWHILE;
 }
        case 801: break;
        case 615: 
          { 
    return PHP_ABSTRACT;
 }
        case 802: break;
        case 620: 
          { 
    return PHP_FUNCTION;
 }
        case 803: break;
        case 621: 
          { 
    return PHP_CONTINUE;
 }
        case 804: break;
        case 623: 
          { 
    return PHP_POINTCUT;
 }
        case 805: break;
        case 647: 
          { 
    return PHP_ENDSWITCH;
 }
        case 806: break;
        case 649: 
          { 
    return PHP_INTERFACE;
 }
        case 807: break;
        case 654: 
          { 
    return PHP_PROTECTED;
 }
        case 808: break;
        case 656: 
          { 
    return PHP__CLASS__;
 }
        case 809: break;
        case 698: 
          { 
	return PHP_HALT_COMPILER;
 }
        case 810: break;
        case 277: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 811: break;
        case 177: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 812: break;
        case 176: 
        case 276: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 813: break;
        case 174: 
          { 
    pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
 }
        case 814: break;
        case 67: 
        case 68: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 815: break;
        case 64: 
        case 78: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 816: break;
        case 63: 
        case 66: 
        case 275: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 817: break;
        case 62: 
        case 70: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 818: break;
        case 71: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 819: break;
        case 72: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 820: break;
        case 73: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 821: break;
        case 74: 
          { 
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 822: break;
        case 173: 
          { 
    if (yylength() == 2) {
        yypushback(1);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 823: break;
        case 82: 
          { 
    yypushback(1);
    popState();
 }
        case 824: break;
        case 416: 
        case 417: 
          { 
    int startString=3;
    heredoc_len = yylength()-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    pushState(ST_PHP_HEREDOC);
    return PHP_HEREDOC_TAG;
 }
        case 825: break;
        case 336: 
          { 
    return PHP_FROM;
 }
        case 826: break;
        case 333: 
          { 
    return PHP_TRUE;
 }
        case 827: break;
        case 314: 
          { 
    return PHP_EVAL;
 }
        case 828: break;
        case 312: 
          { 
    return PHP_ELSE;
 }
        case 829: break;
        case 311: 
          { 
    return PHP_ECHO;
 }
        case 830: break;
        case 304: 
          { 
    return PHP_EXIT;
 }
        case 831: break;
        case 180: 
        case 182: 
          { 
    int label_len;
    int length=yylength();
    if (yytext().charAt(length-2)=='\r') {
        label_len = length-2;
    } else {
        label_len = length-1;
    }

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        popState();
        return  PHP_HEREDOC_TAG;
    } else {
        return  PHP_CONSTANT_ENCAPSED_STRING;
    }
 }
        case 832: break;
        case 61: 
          { 
    pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 833: break;
        case 60: 
          { 
    pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 834: break;
        case 15: 
        case 17: 
        case 23: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 51: 
        case 53: 
        case 57: 
        case 59: 
          { 
    return PHP_TOKEN;
 }
        case 835: break;
        case 16: 
        case 19: 
        case 20: 
        case 21: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 52: 
        case 54: 
        case 55: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 108: 
        case 109: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 123: 
        case 124: 
        case 126: 
        case 127: 
        case 129: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 154: 
        case 165: 
        case 166: 
        case 205: 
        case 206: 
        case 207: 
        case 208: 
        case 209: 
        case 210: 
        case 211: 
        case 213: 
        case 214: 
        case 217: 
        case 218: 
        case 219: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 225: 
        case 226: 
        case 228: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 235: 
        case 237: 
        case 238: 
        case 239: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 245: 
        case 246: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 257: 
        case 258: 
        case 269: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 305: 
        case 306: 
        case 307: 
        case 308: 
        case 309: 
        case 310: 
        case 313: 
        case 315: 
        case 316: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 323: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 328: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 334: 
        case 335: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 345: 
        case 346: 
        case 348: 
        case 349: 
        case 350: 
        case 352: 
        case 353: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 406: 
        case 407: 
        case 409: 
        case 410: 
        case 411: 
        case 412: 
        case 414: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 424: 
        case 425: 
        case 426: 
        case 427: 
        case 428: 
        case 429: 
        case 431: 
        case 433: 
        case 436: 
        case 438: 
        case 443: 
        case 444: 
        case 446: 
        case 447: 
        case 448: 
        case 450: 
        case 451: 
        case 452: 
        case 462: 
        case 463: 
        case 464: 
        case 465: 
        case 466: 
        case 467: 
        case 468: 
        case 498: 
        case 499: 
        case 501: 
        case 502: 
        case 506: 
        case 507: 
        case 510: 
        case 511: 
        case 512: 
        case 513: 
        case 514: 
        case 515: 
        case 516: 
        case 517: 
        case 518: 
        case 521: 
        case 522: 
        case 523: 
        case 524: 
        case 532: 
        case 533: 
        case 534: 
        case 535: 
        case 536: 
        case 537: 
        case 563: 
        case 564: 
        case 565: 
        case 566: 
        case 568: 
        case 571: 
        case 573: 
        case 574: 
        case 576: 
        case 577: 
        case 578: 
        case 579: 
        case 580: 
        case 584: 
        case 585: 
        case 586: 
        case 587: 
        case 588: 
        case 589: 
        case 610: 
        case 611: 
        case 612: 
        case 614: 
        case 616: 
        case 617: 
        case 618: 
        case 619: 
        case 622: 
        case 624: 
        case 626: 
        case 627: 
        case 628: 
        case 630: 
        case 645: 
        case 646: 
        case 648: 
        case 650: 
        case 651: 
        case 652: 
        case 653: 
        case 655: 
        case 657: 
        case 658: 
        case 671: 
        case 672: 
        case 676: 
        case 677: 
        case 685: 
        case 686: 
        case 687: 
        case 688: 
        case 695: 
        case 696: 
        case 697: 
          { 
    return  PHP_STRING;
 }
        case 836: break;
        case 22: 
          { 
    return  WHITESPACE;
 }
        case 837: break;
        case 26: 
          { 
    pushState(ST_PHP_SINGLE_QUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
 }
        case 838: break;
        case 83: 
          { 
    popState();
    return PHP_STRING;
 }
        case 839: break;
        case 344: 
          { 
    return PHP_CASE;
 }
        case 840: break;
        case 347: 
          { 
    return PHP_SELF;
 }
        case 841: break;
        case 351: 
          { 
    return PHP_LIST;
 }
        case 842: break;
        case 408: 
          { 
    return PHP_ENDIF;
 }
        case 843: break;
        case 413: 
          { 
    return PHP_EMPTY;
 }
        case 844: break;
        case 415: 
          { 
    return PHP_BREAK;
 }
        case 845: break;
        case 422: 
          { 
    return PHP_ARRAY;
 }
        case 846: break;
        case 423: 
          { 
    return PHP_AFTER;
 }
        case 847: break;
        case 430: 
          { 
    return PHP_ISSET;
 }
        case 848: break;
        case 432: 
          { 
    return PHP_THROW;
 }
        case 849: break;
        case 434: 
          { 
    return PHP_FALSE;
 }
        case 850: break;
        case 435: 
          { 
    return PHP_FINAL;
 }
        case 851: break;
        case 437: 
          { 
    return PHP_UNSET;
 }
        case 852: break;
        case 439: 
          { 
    return PHP_CONST;
 }
        case 853: break;
        case 440: 
          { 
    return PHP_CATCH;
 }
        case 854: break;
        case 441: 
          { 
    return PHP_CLONE;
 }
        case 855: break;
        case 442: 
          { 
    return PHP_CLASS;
 }
        case 856: break;
        case 445: 
          { 
    return PHP_WHILE;
 }
        case 857: break;
        case 449: 
          { 
    return PHP_PRINT;
 }
        case 858: break;
        case 318: 
          { 
    pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
 }
        case 859: break;
        case 114: 
          { 
    pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
 }
        case 860: break;
        case 75: 
        case 76: 
        case 77: 
          { 
        yypushback(1);
        popState();
     }
        case 861: break;
        case 89: 
        case 90: 
        case 91: 
          { 
	String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
 }
        case 862: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
