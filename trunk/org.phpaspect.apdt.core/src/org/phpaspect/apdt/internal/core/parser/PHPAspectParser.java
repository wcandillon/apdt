
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 28 16:41:22 GMT+01:00 2007
//----------------------------------------------------

package org.phpaspect.apdt.internal.core.parser;

import java.util.*;
import java_cup.runtime.*;
import org.eclipse.php.internal.core.ast.nodes.*;
import org.phpaspect.apdt.internal.core.nodes.*;
import org.eclipse.php.internal.core.phpModel.parser.PHPCodeDataFactory;
import org.eclipse.php.internal.core.phpModel.phpElementData.IPHPMarker;
import org.eclipse.php.internal.core.phpModel.phpElementData.PHPMarker;
import org.eclipse.php.internal.core.phpModel.phpElementData.UserData;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 28 16:41:22 GMT+01:00 2007
  */
public class PHPAspectParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PHPAspectParser() {super();}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\011\003" +
    "\000\002\012\012\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\014\004\000\002\014\002\000\002" +
    "\015\003\000\002\015\005\000\002\015\014\000\002\015" +
    "\013\000\002\015\013\000\002\015\013\000\002\015\013" +
    "\000\002\024\003\000\002\024\005\000\002\024\002\000" +
    "\002\025\004\000\002\122\005\000\002\122\005\000\002" +
    "\122\005\000\002\122\004\000\002\122\003\000\002\123" +
    "\005\000\002\016\007\000\002\016\011\000\002\016\005" +
    "\000\002\016\007\000\002\017\005\000\002\017\003\000" +
    "\002\020\004\000\002\021\003\000\002\021\005\000\002" +
    "\022\004\000\002\022\004\000\002\022\003\000\002\022" +
    "\003\000\002\023\003\000\002\023\002\000\002\006\004" +
    "\000\002\006\002\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\006\000\002\005\003\000\002" +
    "\010\005\000\002\010\011\000\002\010\014\000\002\010" +
    "\007\000\002\010\011\000\002\010\013\000\002\010\007" +
    "\000\002\010\004\000\002\010\005\000\002\010\004\000" +
    "\002\010\005\000\002\010\004\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\010\004\000\002\010\005" +
    "\000\002\010\007\000\002\010\012\000\002\010\012\000" +
    "\002\010\007\000\002\010\003\000\002\010\017\000\002" +
    "\010\005\000\002\010\003\000\002\010\003\000\002\141" +
    "\003\000\002\141\002\000\002\142\003\000\002\142\004" +
    "\000\002\143\012\000\002\026\003\000\002\026\005\000" +
    "\002\027\003\000\002\030\003\000\002\030\005\000\002" +
    "\136\003\000\002\137\003\000\002\061\002\000\002\061" +
    "\003\000\002\144\013\000\002\145\011\000\002\145\010" +
    "\000\002\146\003\000\002\146\004\000\002\146\004\000" +
    "\002\147\002\000\002\147\004\000\002\120\003\000\002" +
    "\121\002\000\002\121\004\000\002\150\002\000\002\150" +
    "\004\000\002\151\003\000\002\151\005\000\002\031\002" +
    "\000\002\031\004\000\002\032\003\000\002\032\004\000" +
    "\002\033\003\000\002\033\006\000\002\034\003\000\002" +
    "\034\006\000\002\035\003\000\002\035\006\000\002\036" +
    "\005\000\002\036\007\000\002\037\005\000\002\037\006" +
    "\000\002\037\006\000\002\037\007\000\002\040\002\000" +
    "\002\040\007\000\002\040\006\000\002\041\003\000\002" +
    "\041\003\000\002\042\003\000\002\042\006\000\002\043" +
    "\002\000\002\043\010\000\002\044\002\000\002\044\011" +
    "\000\002\045\002\000\002\045\004\000\002\046\002\000" +
    "\002\046\005\000\002\047\003\000\002\047\002\000\002" +
    "\050\003\000\002\050\005\000\002\051\004\000\002\051" +
    "\005\000\002\051\006\000\002\051\007\000\002\152\002" +
    "\000\002\152\003\000\002\152\003\000\002\052\003\000" +
    "\002\052\002\000\002\053\003\000\002\053\003\000\002" +
    "\053\004\000\002\053\005\000\002\053\005\000\002\053" +
    "\006\000\002\054\005\000\002\054\003\000\002\055\003" +
    "\000\002\055\004\000\002\055\006\000\002\056\005\000" +
    "\002\056\007\000\002\056\003\000\002\056\005\000\002" +
    "\057\004\000\002\057\002\000\002\060\005\000\002\060" +
    "\004\000\002\060\012\000\002\060\003\000\002\131\003" +
    "\000\002\131\005\000\002\154\003\000\002\154\003\000" +
    "\002\130\002\000\002\130\003\000\002\132\003\000\002" +
    "\132\004\000\002\133\003\000\002\133\003\000\002\133" +
    "\003\000\002\133\003\000\002\133\003\000\002\133\003" +
    "\000\002\126\005\000\002\126\007\000\002\126\003\000" +
    "\002\126\005\000\002\127\007\000\002\127\006\000\002" +
    "\062\005\000\002\062\003\000\002\063\002\000\002\063" +
    "\003\000\002\064\005\000\002\064\003\000\002\065\010" +
    "\000\002\065\005\000\002\065\006\000\002\065\010\000" +
    "\002\065\005\000\002\065\004\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\065\005\000" +
    "\002\065\004\000\002\065\004\000\002\065\004\000\002" +
    "\065\004\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\005\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\004\000\002\065\004\000\002\065\004" +
    "\000\002\065\004\000\002\065\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\065\007\000\002\065\003" +
    "\000\002\065\004\000\002\065\004\000\002\065\004\000" +
    "\002\065\004\000\002\065\004\000\002\065\004\000\002" +
    "\065\004\000\002\065\004\000\002\065\004\000\002\065" +
    "\003\000\002\065\006\000\002\065\005\000\002\065\004" +
    "\000\002\066\006\000\002\066\010\000\002\066\010\000" +
    "\002\066\006\000\002\125\003\000\002\163\003\000\002" +
    "\163\003\000\002\165\006\000\002\165\003\000\002\167" +
    "\004\000\002\167\002\000\002\170\004\000\002\067\002" +
    "\000\002\067\004\000\002\067\005\000\002\070\002\000" +
    "\002\070\005\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\004\000\002\072\004\000" +
    "\002\072\006\000\002\072\003\000\002\171\005\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\074\002\000\002\074\004\000\002\075\002\000" +
    "\002\075\003\000\002\076\007\000\002\076\005\000\002" +
    "\076\005\000\002\076\003\000\002\077\003\000\002\077" +
    "\003\000\002\153\003\000\002\124\003\000\002\155\003" +
    "\000\002\140\007\000\002\140\003\000\002\135\004\000" +
    "\002\135\002\000\002\157\005\000\002\134\005\000\002" +
    "\134\002\000\002\156\003\000\002\156\004\000\002\160" +
    "\005\000\002\172\003\000\002\172\003\000\002\166\003" +
    "\000\002\166\004\000\002\166\003\000\002\100\006\000" +
    "\002\100\006\000\002\100\003\000\002\101\003\000\002" +
    "\101\006\000\002\102\002\000\002\102\003\000\002\103" +
    "\003\000\002\103\003\000\002\104\006\000\002\104\006" +
    "\000\002\104\003\000\002\105\003\000\002\105\005\000" +
    "\002\106\003\000\002\106\004\000\002\107\005\000\002" +
    "\107\003\000\002\110\003\000\002\110\006\000\002\110" +
    "\002\000\002\111\002\000\002\111\004\000\002\112\007" +
    "\000\002\112\005\000\002\112\005\000\002\112\003\000" +
    "\002\112\010\000\002\112\006\000\002\112\006\000\002" +
    "\112\004\000\002\113\004\000\002\113\004\000\002\113" +
    "\004\000\002\113\004\000\002\113\004\000\002\113\004" +
    "\000\002\113\004\000\002\113\004\000\002\113\004\000" +
    "\002\113\004\000\002\113\004\000\002\113\002\000\002" +
    "\114\003\000\002\114\006\000\002\114\005\000\002\114" +
    "\005\000\002\114\010\000\002\114\005\000\002\115\003" +
    "\000\002\115\003\000\002\115\003\000\002\116\006\000" +
    "\002\116\006\000\002\116\004\000\002\116\004\000\002" +
    "\116\006\000\002\116\004\000\002\116\004\000\002\161" +
    "\003\000\002\161\005\000\002\164\005\000\002\162\003" +
    "\000\002\117\003\000\002\117\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0339\000\002\001\ufffe\000\004\002\u033b\001\002\000" +
    "\010\062\011\216\014\217\012\001\001\000\002\001\ufffd" +
    "\000\002\001\ufffc\000\004\010\017\001\002\000\002\001" +
    "\ufffa\000\004\062\016\001\002\000\002\001\uffff\000\004" +
    "\062\015\001\002\000\002\001\ufff9\000\002\001\ufff8\000" +
    "\004\072\020\001\uff9d\000\004\010\026\001\002\000\004" +
    "\073\023\001\uff98\000\004\111\031\001\002\000\004\010" +
    "\026\001\002\000\004\123\027\001\uff97\000\002\001\uff96" +
    "\000\002\001\ufef3\000\004\010\026\001\002\000\002\001" +
    "\uff95\000\002\001\ufff6\000\034\045\036\054\055\065\040" +
    "\066\045\067\041\112\050\114\047\215\053\216\035\217" +
    "\037\220\044\221\034\222\052\001\uff4f\000\006\044\u0323" +
    "\070\u0324\001\002\000\002\001\uff4a\000\002\001\uff47\000" +
    "\004\010\u0320\001\002\000\002\001\uff46\000\004\223\u0318" +
    "\001\002\000\004\223\u0310\001\002\000\002\001\ufff5\000" +
    "\022\044\uff4e\070\uff4e\215\053\216\035\217\037\220\044" +
    "\221\034\222\052\001\uff51\000\002\001\uff49\000\004\223" +
    "\171\001\002\000\002\001\uff4d\000\002\001\uff54\000\004" +
    "\145\170\001\002\000\002\001\ufff7\000\002\001\uff4b\000" +
    "\002\001\uff48\000\012\010\134\012\127\161\130\167\132" +
    "\001\002\000\002\001\uff50\000\006\123\057\145\060\001" +
    "\002\000\004\010\061\001\002\000\002\001\uff56\000\004" +
    "\130\062\001\002\000\034\006\073\007\070\010\101\020" +
    "\100\077\065\100\076\101\103\102\077\103\072\104\074" +
    "\115\075\165\063\166\102\001\002\000\034\006\073\007" +
    "\070\010\101\020\100\077\065\100\076\101\103\102\077" +
    "\103\072\104\074\115\075\165\063\166\102\001\002\000" +
    "\002\001\ufedd\000\004\223\107\001\002\000\002\001\ufede" +
    "\000\002\001\uff41\000\002\001\ufee5\000\002\001\ufed9\000" +
    "\002\001\ufee3\000\002\001\ufee6\000\002\001\ufee2\000\002" +
    "\001\ufe74\000\002\001\ufee1\000\002\001\ufedf\000\002\001" +
    "\ufee4\000\004\113\105\001\ufe75\000\034\006\073\007\070" +
    "\010\101\020\100\077\065\100\076\101\103\102\077\103" +
    "\072\104\074\115\075\165\063\166\102\001\002\000\002" +
    "\001\ufee0\000\002\001\ufedb\000\004\010\106\001\002\000" +
    "\002\001\ufed8\000\034\006\073\007\070\010\101\020\100" +
    "\077\065\100\076\101\103\102\077\103\072\104\074\115" +
    "\075\165\063\166\102\001\ufed0\000\004\224\122\001\002" +
    "\000\004\123\115\001\ufece\000\004\075\113\001\ufec9\000" +
    "\034\006\073\007\070\010\101\020\100\077\065\100\076" +
    "\101\103\102\077\103\072\104\074\115\075\165\063\166" +
    "\102\001\002\000\002\001\ufeca\000\034\006\073\007\070" +
    "\010\101\020\100\077\065\100\076\101\103\102\077\103" +
    "\072\104\074\115\075\165\063\166\102\001\ufecd\000\002" +
    "\001\ufecf\000\004\075\120\001\ufecb\000\034\006\073\007" +
    "\070\010\101\020\100\077\065\100\076\101\103\102\077" +
    "\103\072\104\074\115\075\165\063\166\102\001\002\000" +
    "\002\001\ufecc\000\002\001\ufeda\000\002\001\ufedc\000\002" +
    "\001\uffdf\000\006\113\164\123\141\001\002\000\006\123" +
    "\157\145\160\001\002\000\004\130\155\001\uff43\000\004" +
    "\010\153\001\002\000\004\165\151\001\uffd6\000\002\001" +
    "\uffd9\000\006\010\150\167\147\001\uffdd\000\002\001\uffd8" +
    "\000\006\123\136\145\137\001\002\000\010\010\134\161" +
    "\130\167\132\001\002\000\002\001\ufff4\000\006\113\142" +
    "\123\141\001\002\000\010\010\134\161\130\167\132\001" +
    "\002\000\004\012\143\001\002\000\004\130\144\001\uffe4" +
    "\000\034\006\073\007\070\010\101\020\100\077\065\100" +
    "\076\101\103\102\077\103\072\104\074\115\075\165\063" +
    "\166\102\001\002\000\002\001\uffe3\000\002\001\uffe0\000" +
    "\002\001\uffdb\000\002\001\uffda\000\002\001\uffd7\000\002" +
    "\001\uffde\000\004\162\154\001\002\000\002\001\uffdc\000" +
    "\034\006\073\007\070\010\101\020\100\077\065\100\076" +
    "\101\103\102\077\103\072\104\074\115\075\165\063\166" +
    "\102\001\002\000\002\001\uff42\000\004\012\161\001\002" +
    "\000\002\001\uff57\000\004\130\162\001\uff45\000\034\006" +
    "\073\007\070\010\101\020\100\077\065\100\076\101\103" +
    "\102\077\103\072\104\074\115\075\165\063\166\102\001" +
    "\002\000\002\001\uff44\000\004\012\165\001\002\000\004" +
    "\130\166\001\uffe2\000\034\006\073\007\070\010\101\020" +
    "\100\077\065\100\076\101\103\102\077\103\072\104\074" +
    "\115\075\165\063\166\102\001\002\000\002\001\uffe1\000" +
    "\002\001\ufffb\000\010\010\175\077\172\224\uff74\001\uff6d" +
    "\000\002\001\uff6b\000\006\012\u0309\152\u0308\001\002\000" +
    "\004\224\202\001\002\000\002\001\uff6c\000\004\123\200" +
    "\001\uff75\000\002\001\uff73\000\006\010\175\077\172\001" +
    "\uff6d\000\002\001\uff72\000\004\225\203\001\002\000\010" +
    "\010\207\172\204\223\206\001\002\000\010\010\207\172" +
    "\204\223\206\001\002\000\002\001\uffe6\000\010\010\207" +
    "\172\204\223\206\001\002\000\004\223\u0303\001\002\000" +
    "\010\111\213\146\212\147\211\001\002\000\010\010\207" +
    "\172\204\223\206\001\002\000\010\010\207\172\204\223" +
    "\206\001\002\000\002\001\uffd4\000\226\003\320\004\341" +
    "\005\351\006\073\007\070\010\241\011\256\012\263\014" +
    "\276\020\100\021\324\022\321\023\251\025\240\027\304" +
    "\031\352\034\306\036\331\042\260\043\323\044\311\046" +
    "\335\047\246\051\350\052\232\053\217\055\300\056\344" +
    "\057\235\060\261\061\237\071\340\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\111\266" +
    "\112\317\114\231\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\145\216\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\215\247" +
    "\216\264\217\225\223\346\226\303\227\314\230\262\231" +
    "\301\001\002\000\004\223\u02fe\001\002\000\002\001\uffb6" +
    "\000\006\012\u02f3\226\u02f4\001\002\000\004\223\u02de\001" +
    "\002\000\002\001\uffd5\000\002\001\ufefb\000\134\004\341" +
    "\006\073\007\070\010\241\011\256\012\263\020\100\034" +
    "\306\056\344\057\235\076\345\077\220\100\076\101\103" +
    "\102\077\103\072\104\074\105\242\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\223\346\226\303\227\314\230\262\231\301\001\002\000" +
    "\070\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\145\u02dc" +
    "\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154" +
    "\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113" +
    "\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171" +
    "\377\174\u0103\001\002\000\004\061\u02db\001\002\000\002" +
    "\001\ufeb5\000\002\001\uffa6\000\036\130\u018c\131\u0190\132" +
    "\u018d\133\u0196\134\u018f\135\u0195\136\u0192\137\u0194\140\u018e" +
    "\141\u018b\142\u0191\143\u0193\175\ufec4\176\ufec4\001\ufec6\000" +
    "\002\001\uffb2\000\006\020\u02d7\223\u02d5\001\002\000\134" +
    "\004\341\006\073\007\070\010\241\011\256\012\263\020" +
    "\100\034\306\056\344\057\235\076\345\077\220\100\076" +
    "\101\103\102\077\103\072\104\074\105\242\115\075\116" +
    "\234\117\271\120\254\121\326\122\310\127\265\165\307" +
    "\166\270\172\342\173\223\175\255\176\347\177\233\200" +
    "\332\201\245\202\330\203\274\204\334\205\272\206\243" +
    "\211\277\223\346\226\303\227\314\230\262\231\301\001" +
    "\002\000\134\004\341\006\073\007\070\010\241\011\256" +
    "\012\263\020\100\034\306\056\344\057\235\076\345\077" +
    "\220\100\076\101\103\102\077\103\072\104\074\105\242" +
    "\115\075\116\234\117\271\120\254\121\326\122\310\127" +
    "\265\165\307\166\270\172\342\173\223\175\255\176\347" +
    "\177\233\200\332\201\245\202\330\203\274\204\334\205" +
    "\272\206\243\211\277\223\346\226\303\227\314\230\262" +
    "\231\301\001\002\000\004\223\u02d0\001\002\000\004\113" +
    "\u02ce\001\002\000\002\001\uffa0\000\004\223\u02bd\001\002" +
    "\000\004\113\ufef3\001\ufe75\000\002\001\ufe8a\000\134\004" +
    "\341\006\073\007\070\010\241\011\256\012\263\020\100" +
    "\034\306\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\002\001\ufeb9\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\004\111\u02a2\001\002" +
    "\000\004\012\u0299\001\002\000\002\001\ufeb8\000\004\223" +
    "\u0290\001\002\000\004\010\u028a\001\002\000\004\074\u027f" +
    "\001\ufec2\000\004\223\u027c\001\002\000\012\010\241\012" +
    "\263\115\075\226\303\001\002\000\002\001\ufed6\000\010" +
    "\111\u0128\207\u0129\223\ufebc\001\ufeb7\000\136\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\145\u0278\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\004\223\u0275\001\002\000\002\001\ufe8a\000\002\001" +
    "\ufe76\000\004\061\u0272\001\002\000\134\004\341\006\073" +
    "\007\070\010\241\011\256\012\263\020\100\034\306\056" +
    "\344\057\235\076\345\077\220\100\076\101\103\102\077" +
    "\103\072\104\074\105\242\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\002\000\002\001" +
    "\uffd4\000\002\001\uff05\000\134\004\341\006\073\007\070" +
    "\010\241\011\256\012\263\020\100\034\306\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\165\307\166\270\172\342\173\223" +
    "\175\255\176\347\177\233\200\332\201\245\202\330\203" +
    "\274\204\334\205\272\206\243\211\277\223\346\226\303" +
    "\227\314\230\262\231\301\001\002\000\134\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\002\000\134" +
    "\004\341\006\073\007\070\010\241\011\256\012\263\020" +
    "\100\034\306\056\344\057\235\076\345\077\220\100\076" +
    "\101\103\102\077\103\072\104\074\105\242\115\075\116" +
    "\234\117\271\120\254\121\326\122\310\127\265\165\307" +
    "\166\270\172\342\173\223\175\255\176\347\177\233\200" +
    "\332\201\245\202\330\203\274\204\334\205\272\206\243" +
    "\211\277\223\346\226\303\227\314\230\262\231\301\001" +
    "\002\000\006\012\263\226\u0134\001\002\000\134\004\341" +
    "\006\073\007\070\010\241\011\256\012\263\020\100\034" +
    "\306\056\344\057\235\076\345\077\220\100\076\101\103" +
    "\102\077\103\072\104\074\105\242\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\223\346\226\303\227\314\230\262\231\301\001\002\000" +
    "\002\001\ufed5\000\002\001\uffbd\000\010\010\u0126\012\263" +
    "\226\303\001\002\000\004\223\u0260\001\002\000\002\001" +
    "\ufe8a\000\006\175\u025c\176\u025d\001\002\000\004\111\u0135" +
    "\001\ufea6\000\004\223\u0245\001\002\000\002\001\uffd2\000" +
    "\134\004\341\006\073\007\070\010\241\011\256\012\263" +
    "\020\100\034\306\056\344\057\235\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\223\346\226\303\227\314\230\262\231\301" +
    "\001\002\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\134\004\341\006\073\007\070" +
    "\010\241\011\256\012\263\020\100\034\306\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\165\307\166\270\172\342\173\223" +
    "\175\255\176\347\177\233\200\332\201\245\202\330\203" +
    "\274\204\334\205\272\206\243\211\277\223\346\226\303" +
    "\227\314\230\262\231\301\001\002\000\004\152\u020f\001" +
    "\uffa5\000\002\001\ufed4\000\002\001\uffcf\000\002\001\ufe8a" +
    "\000\002\001\ufeb1\000\004\010\u0203\001\002\000\002\001" +
    "\ufff0\000\002\001\uffb3\000\210\003\320\004\341\005\351" +
    "\006\073\007\070\010\241\011\256\012\263\014\276\020" +
    "\100\021\324\022\321\023\251\025\240\027\304\031\352" +
    "\034\306\036\331\042\260\043\323\046\335\047\246\051" +
    "\350\052\232\053\217\055\300\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\111\266\114\231\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\145\216\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\215" +
    "\247\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\002\001\ufeb2\000\136\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\145\u01fa\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\223\346\226" +
    "\303\227\314\230\262\231\301\001\002\000\134\004\341" +
    "\006\073\007\070\010\241\011\256\012\263\020\100\034" +
    "\306\056\344\057\235\076\345\077\220\100\076\101\103" +
    "\102\077\103\072\104\074\105\242\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\223\346\226\303\227\314\230\262\231\301\001\002\000" +
    "\002\001\uffd1\000\134\004\341\006\073\007\070\010\241" +
    "\011\256\012\263\020\100\034\306\056\344\057\235\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\115\075\116\234\117\271\120\254\121\326\122" +
    "\310\127\265\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\223\346\226\303\227\314" +
    "\230\262\231\301\001\002\000\004\223\u01b3\001\ufed7\000" +
    "\134\004\341\006\073\007\070\010\241\011\256\012\263" +
    "\020\100\034\306\056\344\057\235\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\223\346\226\303\227\314\230\262\231\301" +
    "\001\002\000\004\223\u01d8\001\002\000\134\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\002\000\002" +
    "\001\uffa7\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\136\004\341\006\073\007\070" +
    "\010\241\011\256\012\263\020\100\034\306\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\145\u01d1\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\002\000\002\001" +
    "\ufec7\000\002\001\ufec8\000\002\001\uff9b\000\004\223\u01cc" +
    "\001\ufeeb\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\002\001\uffd3\000\004\223\u01c5" +
    "\001\002\000\004\223\u01b8\001\002\000\134\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\002\000\012" +
    "\010\241\012\263\115\075\226\303\001\002\000\134\004" +
    "\341\006\073\007\070\010\241\011\256\012\263\020\100" +
    "\034\306\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\004\223\374\001\002\000\004\223\353\001\002\000" +
    "\006\010\356\115\075\001\002\000\006\123\362\224\361" +
    "\001\002\000\004\130\357\001\002\000\002\001\ufe75\000" +
    "\034\006\073\007\070\010\101\020\100\077\065\100\076" +
    "\101\103\102\077\103\072\104\074\115\075\165\063\166" +
    "\102\001\002\000\002\001\uff8a\000\212\003\320\004\341" +
    "\005\351\006\073\007\070\010\241\011\256\012\263\014" +
    "\276\020\100\021\324\022\321\023\251\025\240\027\304" +
    "\031\352\034\306\036\331\042\260\043\323\046\335\047" +
    "\246\051\350\052\232\053\217\055\300\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\111\266\114\231\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\145\216\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\215\247\223\346\225\367\226\303\227\314\230\262" +
    "\231\301\001\002\000\006\010\356\115\075\001\002\000" +
    "\004\130\364\001\002\000\034\006\073\007\070\010\101" +
    "\020\100\077\065\100\076\101\103\102\077\103\072\104" +
    "\074\115\075\165\063\166\102\001\002\000\002\001\uff89" +
    "\000\002\001\uffb7\000\002\001\uffd4\000\002\001\uff8c\000" +
    "\226\003\320\004\341\005\351\006\073\007\070\010\241" +
    "\011\256\012\263\014\276\020\100\021\324\022\321\023" +
    "\251\025\240\027\304\031\352\032\372\034\306\036\331" +
    "\042\260\043\323\044\311\046\335\047\246\051\350\052" +
    "\232\053\217\055\300\056\344\057\235\060\261\061\237" +
    "\071\340\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\111\266\114\231\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\145\216\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\215\247\216\264\217\225\223\346\226\303" +
    "\227\314\230\262\231\301\001\002\000\004\145\373\001" +
    "\002\000\002\001\uff8b\000\134\004\341\006\073\007\070" +
    "\010\241\011\256\012\263\020\100\034\306\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\165\307\166\270\172\342\173\223" +
    "\175\255\176\347\177\233\200\332\201\245\202\330\203" +
    "\274\204\334\205\272\206\243\211\277\223\346\226\303" +
    "\227\314\230\262\231\301\001\002\000\070\033\u0110\124" +
    "\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102" +
    "\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157" +
    "\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117" +
    "\166\u0106\167\u010e\170\u010c\171\377\174\u0103\224\u010d\001" +
    "\002\000\134\004\341\006\073\007\070\010\241\011\256" +
    "\012\263\020\100\034\306\056\344\057\235\076\345\077" +
    "\220\100\076\101\103\102\077\103\072\104\074\105\242" +
    "\115\075\116\234\117\271\120\254\121\326\122\310\127" +
    "\265\165\307\166\270\172\342\173\223\175\255\176\347" +
    "\177\233\200\332\201\245\202\330\203\274\204\334\205" +
    "\272\206\243\211\277\223\346\226\303\227\314\230\262" +
    "\231\301\001\002\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\134\004\341\006\073" +
    "\007\070\010\241\011\256\012\263\020\100\034\306\056" +
    "\344\057\235\076\345\077\220\100\076\101\103\102\077" +
    "\103\072\104\074\105\242\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\002\000\134\004" +
    "\341\006\073\007\070\010\241\011\256\012\263\020\100" +
    "\034\306\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\134\004\341\006\073\007\070\010\241\011\256\012" +
    "\263\020\100\034\306\056\344\057\235\076\345\077\220" +
    "\100\076\101\103\102\077\103\072\104\074\105\242\115" +
    "\075\116\234\117\271\120\254\121\326\122\310\127\265" +
    "\165\307\166\270\172\342\173\223\175\255\176\347\177" +
    "\233\200\332\201\245\202\330\203\274\204\334\205\272" +
    "\206\243\211\277\223\346\226\303\227\314\230\262\231" +
    "\301\001\002\000\134\004\341\006\073\007\070\010\241" +
    "\011\256\012\263\020\100\034\306\056\344\057\235\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\115\075\116\234\117\271\120\254\121\326\122" +
    "\310\127\265\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\223\346\226\303\227\314" +
    "\230\262\231\301\001\002\000\134\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\223\346\226" +
    "\303\227\314\230\262\231\301\001\002\000\134\004\341" +
    "\006\073\007\070\010\241\011\256\012\263\020\100\034" +
    "\306\056\344\057\235\076\345\077\220\100\076\101\103" +
    "\102\077\103\072\104\074\105\242\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\223\346\226\303\227\314\230\262\231\301\001\002\000" +
    "\134\004\341\006\073\007\070\010\241\011\256\012\263" +
    "\020\100\034\306\056\344\057\235\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\223\346\226\303\227\314\230\262\231\301" +
    "\001\002\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\134\004\341\006\073\007\070" +
    "\010\241\011\256\012\263\020\100\034\306\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\165\307\166\270\172\342\173\223" +
    "\175\255\176\347\177\233\200\332\201\245\202\330\203" +
    "\274\204\334\205\272\206\243\211\277\223\346\226\303" +
    "\227\314\230\262\231\301\001\002\000\134\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\002\000\134" +
    "\004\341\006\073\007\070\010\241\011\256\012\263\020" +
    "\100\034\306\056\344\057\235\076\345\077\220\100\076" +
    "\101\103\102\077\103\072\104\074\105\242\115\075\116" +
    "\234\117\271\120\254\121\326\122\310\127\265\165\307" +
    "\166\270\172\342\173\223\175\255\176\347\177\233\200" +
    "\332\201\245\202\330\203\274\204\334\205\272\206\243" +
    "\211\277\223\346\226\303\227\314\230\262\231\301\001" +
    "\002\000\134\004\341\006\073\007\070\010\241\011\256" +
    "\012\263\020\100\034\306\056\344\057\235\076\345\077" +
    "\220\100\076\101\103\102\077\103\072\104\074\105\242" +
    "\115\075\116\234\117\271\120\254\121\326\122\310\127" +
    "\265\165\307\166\270\172\342\173\223\175\255\176\347" +
    "\177\233\200\332\201\245\202\330\203\274\204\334\205" +
    "\272\206\243\211\277\223\346\226\303\227\314\230\262" +
    "\231\301\001\002\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\212\003\320\004\341" +
    "\005\351\006\073\007\070\010\241\011\256\012\263\014" +
    "\276\020\100\021\324\022\321\023\251\025\240\027\304" +
    "\031\352\034\306\036\331\042\260\043\323\046\335\047" +
    "\246\051\350\052\232\053\217\055\300\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\111\266\114\231\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\145\216\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\215\247\223\346\225\u014e\226\303\227\314\230\262" +
    "\231\301\001\002\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\134\004\341\006\073" +
    "\007\070\010\241\011\256\012\263\020\100\034\306\056" +
    "\344\057\235\076\345\077\220\100\076\101\103\102\077" +
    "\103\072\104\074\105\242\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\002\000\010\010" +
    "\u0126\012\263\226\303\001\002\000\134\004\341\006\073" +
    "\007\070\010\241\011\256\012\263\020\100\034\306\056" +
    "\344\057\235\076\345\077\220\100\076\101\103\102\077" +
    "\103\072\104\074\105\242\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\002\000\134\004" +
    "\341\006\073\007\070\010\241\011\256\012\263\020\100" +
    "\034\306\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\134\004\341\006\073\007\070\010\241\011\256\012" +
    "\263\020\100\034\306\056\344\057\235\076\345\077\220" +
    "\100\076\101\103\102\077\103\072\104\074\105\242\115" +
    "\075\116\234\117\271\120\254\121\326\122\310\127\265" +
    "\165\307\166\270\172\342\173\223\175\255\176\347\177" +
    "\233\200\332\201\245\202\330\203\274\204\334\205\272" +
    "\206\243\211\277\223\346\226\303\227\314\230\262\231" +
    "\301\001\002\000\134\004\341\006\073\007\070\010\241" +
    "\011\256\012\263\020\100\034\306\056\344\057\235\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\115\075\116\234\117\271\120\254\121\326\122" +
    "\310\127\265\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\223\346\226\303\227\314" +
    "\230\262\231\301\001\002\000\134\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\223\346\226" +
    "\303\227\314\230\262\231\301\001\002\000\134\004\341" +
    "\006\073\007\070\010\241\011\256\012\263\020\100\034" +
    "\306\056\344\057\235\076\345\077\220\100\076\101\103" +
    "\102\077\103\072\104\074\105\242\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\223\346\226\303\227\314\230\262\231\301\001\002\000" +
    "\134\004\341\006\073\007\070\010\241\011\256\012\263" +
    "\020\100\034\306\056\344\057\235\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\223\346\226\303\227\314\230\262\231\301" +
    "\001\002\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\062\033\u0110\126\u0101\144\u0104" +
    "\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154" +
    "\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113" +
    "\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171" +
    "\377\174\u0103\001\uff20\000\012\033\u0110\167\u010e\170\u010c" +
    "\171\377\001\uff1b\000\034\033\u0110\157\u0115\160\u0114\161" +
    "\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e" +
    "\170\u010c\171\377\174\u0103\001\uff0e\000\024\033\u0110\163" +
    "\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377" +
    "\174\u0103\001\uff0b\000\024\033\u0110\163\u010f\164\u010b\165" +
    "\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\uff09" +
    "\000\024\033\u0110\163\u010f\164\u010b\165\u0117\166\u0106\167" +
    "\u010e\170\u010c\171\377\174\u0103\001\uff0a\000\052\033\u0110" +
    "\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156" +
    "\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b" +
    "\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001" +
    "\uff23\000\044\033\u0110\153\u0116\154\u010a\155\376\156\u0108" +
    "\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165" +
    "\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\uff1e" +
    "\000\002\001\uff08\000\004\074\u0139\001\ufeef\000\002\001" +
    "\ufef1\000\006\012\263\226\u0134\001\002\000\004\113\u012f" +
    "\001\002\000\004\113\ufef3\001\ufef2\000\006\111\u0128\207" +
    "\u0129\001\ufeb7\000\134\004\341\006\073\007\070\010\241" +
    "\011\256\012\263\020\100\034\306\056\344\057\235\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\115\075\116\234\117\271\120\254\121\326\122" +
    "\310\127\265\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\223\346\226\303\227\314" +
    "\230\262\231\301\001\002\000\134\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\223\346\226" +
    "\303\227\314\230\262\231\301\001\ufeaf\000\004\210\u012c" +
    "\001\002\000\066\033\u0110\124\u0107\125\u0118\126\u0101\144" +
    "\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116" +
    "\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162" +
    "\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c" +
    "\171\377\174\u0103\001\ufeae\000\002\001\ufeb4\000\070\033" +
    "\u0110\112\u012e\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100" +
    "\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155" +
    "\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f" +
    "\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174" +
    "\u0103\001\002\000\002\001\ufeb3\000\006\012\263\226\303" +
    "\001\002\000\002\001\ufeba\000\006\012\263\226\u0134\001" +
    "\002\000\006\111\u0128\207\u0129\001\ufebc\000\006\111\u0128" +
    "\207\u0129\001\ufebb\000\004\111\u0135\001\ufea5\000\134\004" +
    "\341\006\073\007\070\010\241\011\256\012\263\020\100" +
    "\034\306\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\070\033\u0110\112\u0137\124\u0107\125\u0118\126\u0101\144" +
    "\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116" +
    "\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162" +
    "\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c" +
    "\171\377\174\u0103\001\002\000\002\001\ufeb0\000\006\111" +
    "\u0128\207\u0129\001\ufeb6\000\014\010\356\012\263\111\u013f" +
    "\115\075\226\303\001\002\000\002\001\ufea8\000\002\001" +
    "\ufea9\000\002\001\ufeac\000\002\001\ufeed\000\006\111\u0142" +
    "\207\u0143\001\ufead\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\070\033\u0110\112\u0141" +
    "\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112\150" +
    "\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108" +
    "\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165" +
    "\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\002" +
    "\000\002\001\ufea7\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\134\004\341\006\073" +
    "\007\070\010\241\011\256\012\263\020\100\034\306\056" +
    "\344\057\235\076\345\077\220\100\076\101\103\102\077" +
    "\103\072\104\074\105\242\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\ufeaf\000\004\210" +
    "\u0145\001\002\000\002\001\ufeab\000\070\033\u0110\112\u0147" +
    "\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112\150" +
    "\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108" +
    "\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165" +
    "\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\002" +
    "\000\002\001\ufeaa\000\004\074\u014a\001\ufef0\000\002\001" +
    "\ufeee\000\014\010\356\012\263\111\u013f\115\075\226\303" +
    "\001\002\000\002\001\ufeec\000\020\033\u0110\165\u0117\166" +
    "\u0106\167\u010e\170\u010c\171\377\174\u0103\001\uff16\000\004" +
    "\033\u0110\001\uff19\000\002\001\uffd4\000\002\001\uff7d\000" +
    "\006\213\u0153\214\u0152\001\uff79\000\002\001\uffcd\000\210" +
    "\003\320\004\341\005\351\006\073\007\070\010\241\011" +
    "\256\012\263\014\276\020\100\021\324\022\321\023\251" +
    "\025\240\027\304\031\352\034\306\036\331\042\260\043" +
    "\323\046\335\047\246\051\350\052\232\053\217\055\300" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\111\266\114\231\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\145" +
    "\216\165\307\166\270\172\342\173\223\175\255\176\347" +
    "\177\233\200\332\201\245\202\330\203\274\204\334\205" +
    "\272\206\243\211\277\215\247\223\346\226\303\227\314" +
    "\230\262\231\301\001\002\000\004\223\u0154\001\002\000" +
    "\134\004\341\006\073\007\070\010\241\011\256\012\263" +
    "\020\100\034\306\056\344\057\235\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\223\346\226\303\227\314\230\262\231\301" +
    "\001\002\000\070\033\u0110\124\u0107\125\u0118\126\u0101\144" +
    "\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116" +
    "\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162" +
    "\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c" +
    "\171\377\174\u0103\224\u0156\001\002\000\210\003\320\004" +
    "\341\005\351\006\073\007\070\010\241\011\256\012\263" +
    "\014\276\020\100\021\324\022\321\023\251\025\240\027" +
    "\304\031\352\034\306\036\331\042\260\043\323\046\335" +
    "\047\246\051\350\052\232\053\217\055\300\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\111\266\114\231\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\145\216\165\307" +
    "\166\270\172\342\173\223\175\255\176\347\177\233\200" +
    "\332\201\245\202\330\203\274\204\334\205\272\206\243" +
    "\211\277\215\247\223\346\226\303\227\314\230\262\231" +
    "\301\001\002\000\002\001\uff7c\000\002\001\uff78\000\224" +
    "\003\320\004\341\005\351\006\073\007\070\010\241\011" +
    "\256\012\263\014\276\020\100\021\324\022\321\023\251" +
    "\025\240\027\304\031\352\034\306\036\331\042\260\043" +
    "\323\044\311\046\335\047\246\051\350\052\232\053\217" +
    "\055\300\056\344\057\235\060\261\061\237\071\340\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\111\266\114\231\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\145\216\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\215\247\216\264\217\225\223\346\226\303\227\314\230" +
    "\262\231\301\001\uff7b\000\006\213\u015d\214\u015c\001\uff77" +
    "\000\004\212\u0165\001\002\000\004\225\u0163\001\002\000" +
    "\004\223\u015e\001\002\000\134\004\341\006\073\007\070" +
    "\010\241\011\256\012\263\020\100\034\306\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\165\307\166\270\172\342\173\223" +
    "\175\255\176\347\177\233\200\332\201\245\202\330\203" +
    "\274\204\334\205\272\206\243\211\277\223\346\226\303" +
    "\227\314\230\262\231\301\001\002\000\070\033\u0110\124" +
    "\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102" +
    "\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157" +
    "\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117" +
    "\166\u0106\167\u010e\170\u010c\171\377\174\u0103\224\u0160\001" +
    "\002\000\004\225\u0161\001\002\000\002\001\uffd4\000\224" +
    "\003\320\004\341\005\351\006\073\007\070\010\241\011" +
    "\256\012\263\014\276\020\100\021\324\022\321\023\251" +
    "\025\240\027\304\031\352\034\306\036\331\042\260\043" +
    "\323\044\311\046\335\047\246\051\350\052\232\053\217" +
    "\055\300\056\344\057\235\060\261\061\237\071\340\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\111\266\114\231\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\145\216\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\215\247\216\264\217\225\223\346\226\303\227\314\230" +
    "\262\231\301\001\uff7a\000\002\001\uffd4\000\224\003\320" +
    "\004\341\005\351\006\073\007\070\010\241\011\256\012" +
    "\263\014\276\020\100\021\324\022\321\023\251\025\240" +
    "\027\304\031\352\034\306\036\331\042\260\043\323\044" +
    "\311\046\335\047\246\051\350\052\232\053\217\055\300" +
    "\056\344\057\235\060\261\061\237\071\340\076\345\077" +
    "\220\100\076\101\103\102\077\103\072\104\074\105\242" +
    "\111\266\114\231\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\145\216\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\215\247" +
    "\216\264\217\225\223\346\226\303\227\314\230\262\231" +
    "\301\001\uff76\000\004\145\u0166\001\002\000\002\001\uffcc" +
    "\000\004\033\u0110\001\uff18\000\020\033\u0110\165\u0117\166" +
    "\u0106\167\u010e\170\u010c\171\377\174\u0103\001\uff15\000\034" +
    "\033\u0110\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164" +
    "\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103" +
    "\001\uff0d\000\046\033\u0110\152\u0111\153\u0116\154\u010a\155" +
    "\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f" +
    "\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174" +
    "\u0103\001\uff1d\000\034\033\u0110\157\u0115\160\u0114\161\u0105" +
    "\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170" +
    "\u010c\171\377\174\u0103\001\uff0f\000\064\033\u0110\125\u0118" +
    "\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152" +
    "\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114" +
    "\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167" +
    "\u010e\170\u010c\171\377\174\u0103\001\uff22\000\012\033\u0110" +
    "\167\u010e\170\u010c\171\377\001\uff1a\000\024\033\u0110\163" +
    "\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377" +
    "\174\u0103\001\uff0c\000\070\033\u0110\124\u0107\125\u0118\126" +
    "\u0101\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111" +
    "\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161" +
    "\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e" +
    "\170\u010c\171\377\174\u0103\225\u0170\001\002\000\134\004" +
    "\341\006\073\007\070\010\241\011\256\012\263\020\100" +
    "\034\306\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\066\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146" +
    "\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a" +
    "\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163" +
    "\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377" +
    "\174\u0103\001\uff06\000\012\033\u0110\167\u010e\170\u010c\171" +
    "\377\001\uff1c\000\050\033\u0110\151\u0109\152\u0111\153\u0116" +
    "\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162" +
    "\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c" +
    "\171\377\174\u0103\001\uff1f\000\060\033\u0110\144\u0104\146" +
    "\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a" +
    "\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163" +
    "\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377" +
    "\174\u0103\001\uff21\000\054\033\u0110\147\u0112\150\u0102\151" +
    "\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115" +
    "\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166" +
    "\u0106\167\u010e\170\u010c\171\377\174\u0103\001\uff24\000\004" +
    "\033\u0110\001\uff17\000\034\033\u0110\157\u0115\160\u0114\161" +
    "\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e" +
    "\170\u010c\171\377\174\u0103\001\uff10\000\070\033\u0110\124" +
    "\u0107\125\u0118\126\u0101\144\u0104\145\u0179\146\u0100\147\u0112" +
    "\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156" +
    "\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b" +
    "\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001" +
    "\002\000\002\001\uffb4\000\004\223\u01b3\001\002\000\002" +
    "\001\ufec4\000\002\001\uff25\000\004\113\u017e\001\002\000" +
    "\010\010\u0180\012\263\226\303\001\002\000\004\223\u01b0" +
    "\001\ufeba\000\004\223\u0181\001\002\000\136\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\152\u0185\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\uff69" +
    "\000\004\123\u01ab\001\uff6a\000\042\123\uff67\130\u018c\131" +
    "\u0190\132\u018d\133\u0196\134\u018f\135\u0195\136\u0192\137\u0194" +
    "\140\u018e\141\u018b\142\u0191\143\u0193\175\ufec4\176\ufec4\224" +
    "\uff67\001\ufec6\000\004\224\u018a\001\002\000\012\010\241" +
    "\012\263\115\075\226\303\001\002\000\066\033\u0110\124" +
    "\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102" +
    "\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157" +
    "\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117" +
    "\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\002\000" +
    "\006\123\uff68\224\uff68\001\ufec7\000\002\001\uff66\000\002" +
    "\001\ufec5\000\002\001\ufef6\000\134\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\223\346\226" +
    "\303\227\314\230\262\231\301\001\002\000\136\004\341" +
    "\006\073\007\070\010\241\011\256\012\263\020\100\034" +
    "\306\056\344\057\235\076\345\077\220\100\076\101\103" +
    "\102\077\103\072\104\074\105\242\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\152\u01a1\165\307" +
    "\166\270\172\342\173\223\175\255\176\347\177\233\200" +
    "\332\201\245\202\330\203\274\204\334\205\272\206\243" +
    "\211\277\223\346\226\303\227\314\230\262\231\301\001" +
    "\002\000\134\004\341\006\073\007\070\010\241\011\256" +
    "\012\263\020\100\034\306\056\344\057\235\076\345\077" +
    "\220\100\076\101\103\102\077\103\072\104\074\105\242" +
    "\115\075\116\234\117\271\120\254\121\326\122\310\127" +
    "\265\165\307\166\270\172\342\173\223\175\255\176\347" +
    "\177\233\200\332\201\245\202\330\203\274\204\334\205" +
    "\272\206\243\211\277\223\346\226\303\227\314\230\262" +
    "\231\301\001\002\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\134\004\341\006\073" +
    "\007\070\010\241\011\256\012\263\020\100\034\306\056" +
    "\344\057\235\076\345\077\220\100\076\101\103\102\077" +
    "\103\072\104\074\105\242\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\002\000\134\004" +
    "\341\006\073\007\070\010\241\011\256\012\263\020\100" +
    "\034\306\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\134\004\341\006\073\007\070\010\241\011\256\012" +
    "\263\020\100\034\306\056\344\057\235\076\345\077\220" +
    "\100\076\101\103\102\077\103\072\104\074\105\242\115" +
    "\075\116\234\117\271\120\254\121\326\122\310\127\265" +
    "\165\307\166\270\172\342\173\223\175\255\176\347\177" +
    "\233\200\332\201\245\202\330\203\274\204\334\205\272" +
    "\206\243\211\277\223\346\226\303\227\314\230\262\231" +
    "\301\001\002\000\134\004\341\006\073\007\070\010\241" +
    "\011\256\012\263\020\100\034\306\056\344\057\235\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\115\075\116\234\117\271\120\254\121\326\122" +
    "\310\127\265\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\223\346\226\303\227\314" +
    "\230\262\231\301\001\002\000\134\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\223\346\226" +
    "\303\227\314\230\262\231\301\001\002\000\134\004\341" +
    "\006\073\007\070\010\241\011\256\012\263\020\100\034" +
    "\306\056\344\057\235\076\345\077\220\100\076\101\103" +
    "\102\077\103\072\104\074\105\242\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\223\346\226\303\227\314\230\262\231\301\001\002\000" +
    "\134\004\341\006\073\007\070\010\241\011\256\012\263" +
    "\020\100\034\306\056\344\057\235\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\223\346\226\303\227\314\230\262\231\301" +
    "\001\002\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\060\033\u0110\144\u0104\146\u0100" +
    "\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155" +
    "\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f" +
    "\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174" +
    "\u0103\001\uff31\000\060\033\u0110\144\u0104\146\u0100\147\u0112" +
    "\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156" +
    "\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b" +
    "\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001" +
    "\uff2f\000\060\033\u0110\144\u0104\146\u0100\147\u0112\150\u0102" +
    "\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157" +
    "\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117" +
    "\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\uff2d\000" +
    "\060\033\u0110\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109" +
    "\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160" +
    "\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106" +
    "\167\u010e\170\u010c\171\377\174\u0103\001\uff29\000\060\033" +
    "\u0110\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111" +
    "\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161" +
    "\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e" +
    "\170\u010c\171\377\174\u0103\001\uff2e\000\060\033\u0110\144" +
    "\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116" +
    "\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162" +
    "\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c" +
    "\171\377\174\u0103\001\uff2a\000\060\033\u0110\144\u0104\146" +
    "\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a" +
    "\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163" +
    "\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377" +
    "\174\u0103\001\uff33\000\060\033\u0110\144\u0104\146\u0100\147" +
    "\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376" +
    "\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164" +
    "\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103" +
    "\001\uff30\000\060\033\u0110\144\u0104\146\u0100\147\u0112\150" +
    "\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108" +
    "\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165" +
    "\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\uff2c" +
    "\000\060\033\u0110\144\u0104\146\u0100\147\u0112\150\u0102\151" +
    "\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115" +
    "\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166" +
    "\u0106\167\u010e\170\u010c\171\377\174\u0103\001\uff32\000\014" +
    "\010\241\012\263\115\075\211\u01a3\226\303\001\002\000" +
    "\060\033\u0110\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109" +
    "\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160" +
    "\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106" +
    "\167\u010e\170\u010c\171\377\174\u0103\001\uff38\000\010\010" +
    "\u0126\012\263\226\303\001\002\000\002\001\uff37\000\004" +
    "\223\u01a7\001\ufee8\000\002\001\uff36\000\136\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\152\u0185\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\uff69" +
    "\000\004\224\u01a9\001\002\000\002\001\ufee7\000\060\033" +
    "\u0110\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111" +
    "\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161" +
    "\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e" +
    "\170\u010c\171\377\174\u0103\001\uff2b\000\136\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\152\u01ad\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\002" +
    "\000\042\123\uff64\130\u018c\131\u0190\132\u018d\133\u0196\134" +
    "\u018f\135\u0195\136\u0192\137\u0194\140\u018e\141\u018b\142\u0191" +
    "\143\u0193\175\ufec4\176\ufec4\224\uff64\001\ufec6\000\012\010" +
    "\241\012\263\115\075\226\303\001\002\000\006\123\uff65" +
    "\224\uff65\001\ufec7\000\002\001\uff63\000\136\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\152\u0185\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\223\346\226\303\227\314\230\262\231\301\001\uff69" +
    "\000\004\224\u01b2\001\002\000\002\001\ufef5\000\136\004" +
    "\341\006\073\007\070\010\241\011\256\012\263\020\100" +
    "\034\306\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\152\u0185\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\223\346\226\303\227\314\230\262\231\301" +
    "\001\uff69\000\004\224\u01b5\001\002\000\002\001\ufef7\000" +
    "\070\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100" +
    "\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155" +
    "\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f" +
    "\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174" +
    "\u0103\224\u01b7\001\002\000\002\001\uff07\000\014\010\241" +
    "\012\263\076\u01bc\115\075\226\303\001\ufea0\000\006\123" +
    "\u01c0\224\u01c2\001\002\000\002\001\ufea3\000\002\001\ufea2" +
    "\000\004\223\u01bd\001\002\000\014\010\241\012\263\076" +
    "\u01bc\115\075\226\303\001\ufea0\000\006\123\u01c0\224\u01bf" +
    "\001\002\000\002\001\ufea1\000\014\010\241\012\263\076" +
    "\u01bc\115\075\226\303\001\ufea0\000\002\001\ufea4\000\004" +
    "\130\u01c3\001\002\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\060\033\u0110\144\u0104" +
    "\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154" +
    "\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113" +
    "\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171" +
    "\377\174\u0103\001\uff39\000\012\010\241\012\263\115\075" +
    "\226\303\001\002\000\002\001\ufe79\000\006\123\u01c9\224" +
    "\u01c8\001\002\000\002\001\ufe80\000\012\010\241\012\263" +
    "\115\075\226\303\001\002\000\002\001\ufe78\000\004\033" +
    "\u0110\001\uff12\000\136\004\341\006\073\007\070\010\241" +
    "\011\256\012\263\020\100\034\306\056\344\057\235\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\115\075\116\234\117\271\120\254\121\326\122" +
    "\310\127\265\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\223\346\224\u01cf\226\303" +
    "\227\314\230\262\231\301\001\002\000\002\001\ufefd\000" +
    "\070\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100" +
    "\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155" +
    "\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f" +
    "\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174" +
    "\u0103\224\u01d0\001\002\000\002\001\ufeea\000\002\001\ufee9" +
    "\000\002\001\uffc3\000\040\130\u018c\131\u0190\132\u018d\133" +
    "\u0196\134\u018f\135\u0195\136\u0192\137\u0194\140\u018e\141\u018b" +
    "\142\u0191\143\u0193\145\u01d5\175\ufec4\176\ufec4\001\ufec6\000" +
    "\004\145\u01d4\001\ufec7\000\002\001\uffc2\000\002\001\uffc1" +
    "\000\002\001\ufeff\000\002\001\uff03\000\134\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\002\000\070" +
    "\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147" +
    "\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376" +
    "\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164" +
    "\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103" +
    "\224\u01da\001\002\000\006\111\u01dc\225\u01dd\001\002\000" +
    "\002\001\uffc8\000\004\145\u01ef\001\uff84\000\004\145\u01df" +
    "\001\uff84\000\010\037\u01ec\040\u01e2\041\u01e3\001\002\000" +
    "\002\001\uff84\000\010\037\u01e1\040\u01e2\041\u01e3\001\002" +
    "\000\004\145\u01eb\001\002\000\134\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\223\346\226" +
    "\303\227\314\230\262\231\301\001\002\000\006\145\u01e6" +
    "\225\u01e5\001\002\000\002\001\uffd4\000\002\001\uff81\000" +
    "\002\001\uff80\000\224\003\320\004\341\005\351\006\073" +
    "\007\070\010\241\011\256\012\263\014\276\020\100\021" +
    "\324\022\321\023\251\025\240\027\304\031\352\034\306" +
    "\036\331\042\260\043\323\044\311\046\335\047\246\051" +
    "\350\052\232\053\217\055\300\056\344\057\235\060\261" +
    "\061\237\071\340\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\111\266\114\231\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\145" +
    "\216\165\307\166\270\172\342\173\223\175\255\176\347" +
    "\177\233\200\332\201\245\202\330\203\274\204\334\205" +
    "\272\206\243\211\277\215\247\216\264\217\225\223\346" +
    "\226\303\227\314\230\262\231\301\001\uff82\000\072\033" +
    "\u0110\124\u0107\125\u0118\126\u0101\144\u0104\145\u01e6\146\u0100" +
    "\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155" +
    "\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f" +
    "\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174" +
    "\u0103\225\u01e5\001\002\000\002\001\uffd4\000\224\003\320" +
    "\004\341\005\351\006\073\007\070\010\241\011\256\012" +
    "\263\014\276\020\100\021\324\022\321\023\251\025\240" +
    "\027\304\031\352\034\306\036\331\042\260\043\323\044" +
    "\311\046\335\047\246\051\350\052\232\053\217\055\300" +
    "\056\344\057\235\060\261\061\237\071\340\076\345\077" +
    "\220\100\076\101\103\102\077\103\072\104\074\105\242" +
    "\111\266\114\231\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\145\216\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\215\247" +
    "\216\264\217\225\223\346\226\303\227\314\230\262\231" +
    "\301\001\uff83\000\002\001\uff85\000\004\145\u01ed\001\002" +
    "\000\002\001\uff86\000\010\040\u01e2\041\u01e3\112\u01f2\001" +
    "\002\000\002\001\uff84\000\010\040\u01e2\041\u01e3\112\u01f1" +
    "\001\002\000\002\001\uff87\000\002\001\uff88\000\002\001" +
    "\uff01\000\066\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104" +
    "\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154" +
    "\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113" +
    "\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171" +
    "\377\174\u0103\001\ufe7b\000\006\123\u01f7\145\u01f8\001\002" +
    "\000\066\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146" +
    "\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a" +
    "\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163" +
    "\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377" +
    "\174\u0103\001\uff3e\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\002\001\uffbe\000\066" +
    "\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147" +
    "\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376" +
    "\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164" +
    "\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103" +
    "\001\uff3f\000\002\001\uffc5\000\070\033\u0110\124\u0107\125" +
    "\u0118\126\u0101\144\u0104\145\u01fc\146\u0100\147\u0112\150\u0102" +
    "\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157" +
    "\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117" +
    "\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\002\000" +
    "\002\001\uffc4\000\004\023\u01fe\001\002\000\004\223\u01ff" +
    "\001\002\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\070\033\u0110\124\u0107\125\u0118" +
    "\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152" +
    "\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114" +
    "\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167" +
    "\u010e\170\u010c\171\377\174\u0103\224\u0201\001\002\000\004" +
    "\145\u0202\001\002\000\002\001\uffca\000\004\072\u0205\001" +
    "\uff9a\000\004\111\u0207\001\002\000\004\010\026\001\002" +
    "\000\004\123\027\001\uff99\000\002\001\uff58\000\026\045" +
    "\036\054\055\112\u020a\114\047\215\053\216\035\217\037" +
    "\220\044\221\034\222\052\001\uff4f\000\002\001\uff59\000" +
    "\002\001\uffa1\000\004\012\127\001\002\000\004\044\u020d" +
    "\001\002\000\004\152\u020f\001\uffa5\000\006\010\356\115" +
    "\075\001\002\000\002\001\uffa4\000\004\223\u0211\001\002" +
    "\000\010\010\175\077\172\224\uff74\001\uff6d\000\004\224" +
    "\u0213\001\002\000\006\111\u0215\145\u0216\001\002\000\002" +
    "\001\uff55\000\002\001\uffd4\000\002\001\uff53\000\226\003" +
    "\320\004\341\005\351\006\073\007\070\010\241\011\256" +
    "\012\263\014\276\020\100\021\324\022\321\023\251\025" +
    "\240\027\304\031\352\034\306\036\331\042\260\043\323" +
    "\044\311\046\335\047\246\051\350\052\232\053\217\055" +
    "\300\056\344\057\235\060\261\061\237\071\340\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\111\266\112\u0218\114\231\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\145\216\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\215\247\216\264\217\225\223\346\226\303\227\314" +
    "\230\262\231\301\001\002\000\002\001\uff52\000\040\010" +
    "\356\012\263\013\u0220\015\u0227\016\u021c\017\u0225\074\u0226" +
    "\107\u021d\110\u0221\111\u0228\112\u0223\115\075\207\u0222\210" +
    "\u021e\227\u021f\001\002\000\006\074\u0233\207\u0232\001\ufe89" +
    "\000\002\001\ufe95\000\002\001\ufe90\000\134\004\341\006" +
    "\073\007\070\010\241\011\u022b\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\002\000\002" +
    "\001\ufe8e\000\002\001\ufed3\000\002\001\ufe93\000\012\010" +
    "\241\012\263\115\075\226\303\001\002\000\002\001\ufe8f" +
    "\000\002\001\ufe8c\000\002\001\ufe94\000\002\001\ufe92\000" +
    "\002\001\ufe8b\000\002\001\ufe91\000\002\001\ufe8d\000\004" +
    "\112\u022a\001\002\000\002\001\ufe84\000\004\207\u022e\001" +
    "\ufed6\000\070\033\u0110\112\u022d\124\u0107\125\u0118\126\u0101" +
    "\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153" +
    "\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105" +
    "\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170" +
    "\u010c\171\377\174\u0103\001\002\000\002\001\ufe86\000\134" +
    "\004\341\006\073\007\070\010\241\011\256\012\263\020" +
    "\100\034\306\056\344\057\235\076\345\077\220\100\076" +
    "\101\103\102\077\103\072\104\074\105\242\115\075\116" +
    "\234\117\271\120\254\121\326\122\310\127\265\165\307" +
    "\166\270\172\342\173\223\175\255\176\347\177\233\200" +
    "\332\201\245\202\330\203\274\204\334\205\272\206\243" +
    "\211\277\223\346\226\303\227\314\230\262\231\301\001" +
    "\002\000\070\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104" +
    "\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154" +
    "\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113" +
    "\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171" +
    "\377\174\u0103\210\u0230\001\002\000\004\112\u0231\001\002" +
    "\000\002\001\ufe85\000\012\010\356\012\263\013\u0238\115" +
    "\075\001\002\000\006\010\356\115\075\001\002\000\002" +
    "\001\ufe87\000\002\001\ufe81\000\004\210\u0239\001\002\000" +
    "\002\001\ufe83\000\002\001\ufe82\000\002\001\ufe88\000\006" +
    "\010\356\115\075\001\002\000\004\223\u023c\001\002\000" +
    "\010\010\175\077\172\224\uff74\001\uff6d\000\004\224\u023e" +
    "\001\002\000\004\111\u023f\001\002\000\002\001\uffd4\000" +
    "\226\003\320\004\341\005\351\006\073\007\070\010\241" +
    "\011\256\012\263\014\276\020\100\021\324\022\321\023" +
    "\251\025\240\027\304\031\352\034\306\036\331\042\260" +
    "\043\323\044\311\046\335\047\246\051\350\052\232\053" +
    "\217\055\300\056\344\057\235\060\261\061\237\071\340" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\111\266\112\u0241\114\231\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\145\216\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\215\247\216\264\217\225\223\346\226\303" +
    "\227\314\230\262\231\301\001\002\000\002\001\uffa3\000" +
    "\066\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100" +
    "\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155" +
    "\376\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f" +
    "\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174" +
    "\u0103\001\ufe7a\000\012\033\u0110\167\u010e\170\u010c\171\377" +
    "\001\uff14\000\002\001\uff34\000\134\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\223\346\226" +
    "\303\227\314\230\262\231\301\001\002\000\040\035\u0257" +
    "\130\u018c\131\u0190\132\u018d\133\u0196\134\u018f\135\u0195\136" +
    "\u0192\137\u0194\140\u018e\141\u018b\142\u0191\143\u0193\175\ufec4" +
    "\176\ufec4\001\ufec6\000\004\035\u0248\001\ufec7\000\012\010" +
    "\241\012\263\115\075\226\303\001\002\000\004\075\u024b" +
    "\001\uff94\000\004\224\u0250\001\002\000\014\010\241\012" +
    "\263\115\075\152\u024e\226\303\001\002\000\002\001\uff93" +
    "\000\002\001\uff92\000\012\010\241\012\263\115\075\226" +
    "\303\001\002\000\002\001\uff91\000\212\003\320\004\341" +
    "\005\351\006\073\007\070\010\241\011\256\012\263\014" +
    "\276\020\100\021\324\022\321\023\251\025\240\027\304" +
    "\031\352\034\306\036\331\042\260\043\323\046\335\047" +
    "\246\051\350\052\232\053\217\055\300\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\111\266\114\231\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\145\216\165\307\166" +
    "\270\172\342\173\223\175\255\176\347\177\233\200\332" +
    "\201\245\202\330\203\274\204\334\205\272\206\243\211" +
    "\277\215\247\223\346\225\u0251\226\303\227\314\230\262" +
    "\231\301\001\002\000\002\001\uffd4\000\002\001\uff8e\000" +
    "\002\001\uffb8\000\226\003\320\004\341\005\351\006\073" +
    "\007\070\010\241\011\256\012\263\014\276\020\100\021" +
    "\324\022\321\023\251\025\240\027\304\030\u0255\031\352" +
    "\034\306\036\331\042\260\043\323\044\311\046\335\047" +
    "\246\051\350\052\232\053\217\055\300\056\344\057\235" +
    "\060\261\061\237\071\340\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\111\266\114\231" +
    "\115\075\116\234\117\271\120\254\121\326\122\310\127" +
    "\265\145\216\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\215\247\216\264\217\225" +
    "\223\346\226\303\227\314\230\262\231\301\001\002\000" +
    "\004\145\u0256\001\002\000\002\001\uff8d\000\014\010\241" +
    "\012\263\115\075\152\u024e\226\303\001\002\000\004\075" +
    "\u024b\001\uff94\000\004\224\u025a\001\002\000\212\003\320" +
    "\004\341\005\351\006\073\007\070\010\241\011\256\012" +
    "\263\014\276\020\100\021\324\022\321\023\251\025\240" +
    "\027\304\031\352\034\306\036\331\042\260\043\323\046" +
    "\335\047\246\051\350\052\232\053\217\055\300\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\111\266\114\231\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\145\216\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\215\247\223\346\225\u0251\226\303\227\314" +
    "\230\262\231\301\001\002\000\002\001\uffb9\000\002\001" +
    "\uff28\000\002\001\uff26\000\040\010\356\012\263\013\u0220" +
    "\015\u0227\016\u021c\017\u0225\074\u0226\107\u021d\110\u0221\111" +
    "\u0228\112\u0223\115\075\207\u0222\210\u021e\231\u025f\001\002" +
    "\000\002\001\ufed2\000\012\010\241\012\263\115\075\226" +
    "\303\001\002\000\002\001\uffac\000\002\001\uffaa\000\006" +
    "\123\u0265\224\u0264\001\002\000\004\145\u0267\001\002\000" +
    "\012\010\241\012\263\115\075\226\303\001\002\000\002" +
    "\001\uffab\000\002\001\uffba\000\004\223\u01a7\001\ufee8\000" +
    "\002\001\uff35\000\002\001\uff00\000\010\111\u0128\207\u0129" +
    "\223\ufebb\001\ufeb6\000\002\001\ufefe\000\066\033\u0110\124" +
    "\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102" +
    "\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157" +
    "\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117" +
    "\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\ufe7d\000" +
    "\012\033\u0110\167\u010e\170\u010c\171\377\001\uff13\000\226" +
    "\003\320\004\341\005\351\006\073\007\070\010\241\011" +
    "\256\012\263\014\276\020\100\021\324\022\321\023\251" +
    "\025\240\027\304\031\352\034\306\036\331\042\260\043" +
    "\323\044\311\046\335\047\246\051\350\052\232\053\217" +
    "\055\300\056\344\057\235\060\261\061\237\071\340\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\111\266\112\u0270\114\231\115\075\116\234\117" +
    "\271\120\254\121\326\122\310\127\265\145\216\165\307" +
    "\166\270\172\342\173\223\175\255\176\347\177\233\200" +
    "\332\201\245\202\330\203\274\204\334\205\272\206\243" +
    "\211\277\215\247\216\264\217\225\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\002\001\uffce\000\060" +
    "\033\u0110\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152" +
    "\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114" +
    "\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167" +
    "\u010e\170\u010c\171\377\174\u0103\001\ufef8\000\002\001\uff9f" +
    "\000\040\010\356\012\263\013\u0220\015\u0227\016\u021c\017" +
    "\u0225\074\u0226\107\u021d\110\u0221\111\u0228\112\u0223\115\075" +
    "\207\u0222\210\u021e\230\u0274\001\002\000\002\001\ufef9\000" +
    "\004\224\u0276\001\002\000\004\145\u0277\001\002\000\002" +
    "\001\uffd0\000\002\001\uffc7\000\070\033\u0110\124\u0107\125" +
    "\u0118\126\u0101\144\u0104\145\u027a\146\u0100\147\u0112\150\u0102" +
    "\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157" +
    "\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117" +
    "\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\002\000" +
    "\002\001\uffc6\000\002\001\uff27\000\134\004\341\006\073" +
    "\007\070\010\241\011\256\012\263\020\100\034\306\056" +
    "\344\057\235\076\345\077\220\100\076\101\103\102\077" +
    "\103\072\104\074\105\242\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\002\000\070\033" +
    "\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112" +
    "\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156" +
    "\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b" +
    "\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\224" +
    "\u027e\001\002\000\002\001\ufe7c\000\014\010\356\012\263" +
    "\111\u013f\115\075\226\303\001\002\000\004\223\u0282\001" +
    "\ufebd\000\002\001\ufec0\000\136\004\341\006\073\007\070" +
    "\010\241\011\256\012\263\020\100\034\306\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\152\u0185\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\uff69\000\004\224" +
    "\u0284\001\002\000\002\001\ufebe\000\004\074\u0287\001\ufec3" +
    "\000\002\001\ufec1\000\014\010\356\012\263\111\u013f\115" +
    "\075\226\303\001\002\000\004\223\u0282\001\ufebd\000\002" +
    "\001\ufebf\000\004\072\020\001\uff9d\000\004\073\023\001" +
    "\uff98\000\004\111\u028d\001\002\000\002\001\uff58\000\026" +
    "\045\036\054\055\112\u028f\114\047\215\053\216\035\217" +
    "\037\220\044\221\034\222\052\001\uff4f\000\002\001\uffa2" +
    "\000\134\004\341\006\073\007\070\010\241\011\256\012" +
    "\263\020\100\034\306\056\344\057\235\076\345\077\220" +
    "\100\076\101\103\102\077\103\072\104\074\105\242\115" +
    "\075\116\234\117\271\120\254\121\326\122\310\127\265" +
    "\165\307\166\270\172\342\173\223\175\255\176\347\177" +
    "\233\200\332\201\245\202\330\203\274\204\334\205\272" +
    "\206\243\211\277\223\346\226\303\227\314\230\262\231" +
    "\301\001\002\000\070\033\u0110\124\u0107\125\u0118\126\u0101" +
    "\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153" +
    "\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105" +
    "\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170" +
    "\u010c\171\377\174\u0103\224\u0292\001\002\000\212\003\320" +
    "\004\341\005\351\006\073\007\070\010\241\011\256\012" +
    "\263\014\276\020\100\021\324\022\321\023\251\025\240" +
    "\027\304\031\352\034\306\036\331\042\260\043\323\046" +
    "\335\047\246\051\350\052\232\053\217\055\300\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\111\266\114\231\115\075\116\234" +
    "\117\271\120\254\121\326\122\310\127\265\145\216\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\215\247\223\346\225\u0293\226\303\227\314" +
    "\230\262\231\301\001\002\000\002\001\uffd4\000\002\001" +
    "\uffcb\000\002\001\uff7f\000\226\003\320\004\341\005\351" +
    "\006\073\007\070\010\241\011\256\012\263\014\276\020" +
    "\100\021\324\022\321\023\251\024\u0297\025\240\027\304" +
    "\031\352\034\306\036\331\042\260\043\323\044\311\046" +
    "\335\047\246\051\350\052\232\053\217\055\300\056\344" +
    "\057\235\060\261\061\237\071\340\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\111\266" +
    "\114\231\115\075\116\234\117\271\120\254\121\326\122" +
    "\310\127\265\145\216\165\307\166\270\172\342\173\223" +
    "\175\255\176\347\177\233\200\332\201\245\202\330\203" +
    "\274\204\334\205\272\206\243\211\277\215\247\216\264" +
    "\217\225\223\346\226\303\227\314\230\262\231\301\001" +
    "\002\000\004\145\u0298\001\002\000\002\001\uff7e\000\004" +
    "\130\u02a0\001\uff5b\000\006\123\u029b\145\u029c\001\002\000" +
    "\004\012\u029d\001\002\000\002\001\uffbf\000\004\130\u029e" +
    "\001\uff5d\000\034\006\073\007\070\010\101\020\100\077" +
    "\065\100\076\101\103\102\077\103\072\104\074\115\075" +
    "\165\063\166\102\001\002\000\002\001\uff5c\000\034\006" +
    "\073\007\070\010\101\020\100\077\065\100\076\101\103" +
    "\102\077\103\072\104\074\115\075\165\063\166\102\001" +
    "\002\000\002\001\uff5a\000\002\001\uffd4\000\226\003\320" +
    "\004\341\005\351\006\073\007\070\010\241\011\256\012" +
    "\263\014\276\020\100\021\324\022\321\023\251\025\240" +
    "\027\304\031\352\034\306\036\331\042\260\043\323\044" +
    "\311\046\335\047\246\051\350\052\232\053\217\055\300" +
    "\056\344\057\235\060\261\061\237\071\340\076\345\077" +
    "\220\100\076\101\103\102\077\103\072\104\074\105\242" +
    "\111\266\112\u02a4\114\231\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\145\216\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\215\247\216\264\217\225\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\004\050\u02a5\001\002\000\004" +
    "\223\u02a6\001\002\000\004\010\026\001\002\000\004\012" +
    "\263\001\002\000\004\224\u02a9\001\002\000\004\111\u02aa" +
    "\001\002\000\002\001\uffd4\000\226\003\320\004\341\005" +
    "\351\006\073\007\070\010\241\011\256\012\263\014\276" +
    "\020\100\021\324\022\321\023\251\025\240\027\304\031" +
    "\352\034\306\036\331\042\260\043\323\044\311\046\335" +
    "\047\246\051\350\052\232\053\217\055\300\056\344\057" +
    "\235\060\261\061\237\071\340\076\345\077\220\100\076" +
    "\101\103\102\077\103\072\104\074\105\242\111\266\112" +
    "\u02ac\114\231\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\145\216\165\307\166\270\172\342\173" +
    "\223\175\255\176\347\177\233\200\332\201\245\202\330" +
    "\203\274\204\334\205\272\206\243\211\277\215\247\216" +
    "\264\217\225\223\346\226\303\227\314\230\262\231\301" +
    "\001\002\000\004\050\u02ad\001\uffb0\000\004\223\u02b2\001" +
    "\002\000\002\001\uffb5\000\002\001\uffaf\000\004\050\u02ad" +
    "\001\uffb1\000\002\001\uffae\000\004\010\026\001\002\000" +
    "\004\012\u02b4\001\002\000\004\224\u02b5\001\002\000\004" +
    "\111\u02b6\001\002\000\002\001\uffd4\000\226\003\320\004" +
    "\341\005\351\006\073\007\070\010\241\011\256\012\263" +
    "\014\276\020\100\021\324\022\321\023\251\025\240\027" +
    "\304\031\352\034\306\036\331\042\260\043\323\044\311" +
    "\046\335\047\246\051\350\052\232\053\217\055\300\056" +
    "\344\057\235\060\261\061\237\071\340\076\345\077\220" +
    "\100\076\101\103\102\077\103\072\104\074\105\242\111" +
    "\266\112\u02b8\114\231\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\145\216\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\215" +
    "\247\216\264\217\225\223\346\226\303\227\314\230\262" +
    "\231\301\001\002\000\002\001\uffad\000\002\001\uff02\000" +
    "\002\001\ufefc\000\040\010\356\012\263\013\u0220\015\u0227" +
    "\016\u021c\017\u0225\074\u0226\106\u02bc\107\u021d\110\u0221\111" +
    "\u0228\112\u0223\115\075\207\u0222\210\u021e\001\002\000\002" +
    "\001\ufed1\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\uff3d\000\004\123\u02cc\001\uff3c\000\066" +
    "\033\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147" +
    "\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376" +
    "\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164" +
    "\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103" +
    "\001\uff3a\000\004\145\u02c1\001\002\000\134\004\341\006" +
    "\073\007\070\010\241\011\256\012\263\020\100\034\306" +
    "\056\344\057\235\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\115\075\116\234\117\271" +
    "\120\254\121\326\122\310\127\265\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\uff3d\000\004" +
    "\145\u02c3\001\002\000\134\004\341\006\073\007\070\010" +
    "\241\011\256\012\263\020\100\034\306\056\344\057\235" +
    "\076\345\077\220\100\076\101\103\102\077\103\072\104" +
    "\074\105\242\115\075\116\234\117\271\120\254\121\326" +
    "\122\310\127\265\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\uff3d\000\004\224\u02c5\001\002" +
    "\000\212\003\320\004\341\005\351\006\073\007\070\010" +
    "\241\011\256\012\263\014\276\020\100\021\324\022\321" +
    "\023\251\025\240\027\304\031\352\034\306\036\331\042" +
    "\260\043\323\046\335\047\246\051\350\052\232\053\217" +
    "\055\300\056\344\057\235\076\345\077\220\100\076\101" +
    "\103\102\077\103\072\104\074\105\242\111\266\114\231" +
    "\115\075\116\234\117\271\120\254\121\326\122\310\127" +
    "\265\145\216\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\215\247\223\346\225\u02c7" +
    "\226\303\227\314\230\262\231\301\001\002\000\002\001" +
    "\uffc9\000\002\001\uffd4\000\002\001\uff90\000\226\003\320" +
    "\004\341\005\351\006\073\007\070\010\241\011\256\012" +
    "\263\014\276\020\100\021\324\022\321\023\251\025\240" +
    "\026\u02ca\027\304\031\352\034\306\036\331\042\260\043" +
    "\323\044\311\046\335\047\246\051\350\052\232\053\217" +
    "\055\300\056\344\057\235\060\261\061\237\071\340\076" +
    "\345\077\220\100\076\101\103\102\077\103\072\104\074" +
    "\105\242\111\266\114\231\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\145\216\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\215\247\216\264\217\225\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\004\145\u02cb\001\002\000\002" +
    "\001\uff8f\000\134\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\165\307\166\270\172\342\173\223\175\255\176" +
    "\347\177\233\200\332\201\245\202\330\203\274\204\334" +
    "\205\272\206\243\211\277\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\066\033\u0110\124\u0107\125\u0118" +
    "\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152" +
    "\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114" +
    "\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167" +
    "\u010e\170\u010c\171\377\174\u0103\001\uff3b\000\010\010\u02cf" +
    "\012\263\226\303\001\002\000\004\223\u0181\001\ufe77\000" +
    "\012\010\241\012\263\115\075\226\303\001\002\000\004" +
    "\224\u02d2\001\002\000\002\001\ufe7f\000\066\033\u0110\124" +
    "\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102" +
    "\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157" +
    "\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117" +
    "\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001\ufe7e\000" +
    "\002\001\uff04\000\004\020\u02d9\001\002\000\004\145\u02d8" +
    "\001\002\000\002\001\uffa9\000\002\001\uffbb\000\004\224" +
    "\u02da\001\002\000\002\001\uffa8\000\002\001\uff9e\000\002" +
    "\001\uffbc\000\002\001\uff11\000\136\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\152\u02e1\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\ufe9f\000\004" +
    "\224\u02f1\001\002\000\004\123\u02e8\001\ufece\000\012\010" +
    "\241\012\263\115\075\226\303\001\002\000\070\033\u0110" +
    "\075\u02e3\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147" +
    "\u0112\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376" +
    "\156\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164" +
    "\u010b\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103" +
    "\001\ufe9a\000\136\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\152\u02e4\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\002\000\012\010\241\012\263" +
    "\115\075\226\303\001\002\000\066\033\u0110\124\u0107\125" +
    "\u0118\126\u0101\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109" +
    "\152\u0111\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160" +
    "\u0114\161\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106" +
    "\167\u010e\170\u010c\171\377\174\u0103\001\ufe9b\000\002\001" +
    "\ufe97\000\002\001\ufe96\000\136\004\341\006\073\007\070" +
    "\010\241\011\256\012\263\020\100\034\306\056\344\057" +
    "\235\076\345\077\220\100\076\101\103\102\077\103\072" +
    "\104\074\105\242\115\075\116\234\117\271\120\254\121" +
    "\326\122\310\127\265\152\u02ea\165\307\166\270\172\342" +
    "\173\223\175\255\176\347\177\233\200\332\201\245\202" +
    "\330\203\274\204\334\205\272\206\243\211\277\223\346" +
    "\226\303\227\314\230\262\231\301\001\ufecd\000\002\001" +
    "\ufe9e\000\012\010\241\012\263\115\075\226\303\001\002" +
    "\000\070\033\u0110\075\u02ec\124\u0107\125\u0118\126\u0101\144" +
    "\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111\153\u0116" +
    "\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161\u0105\162" +
    "\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e\170\u010c" +
    "\171\377\174\u0103\001\ufe9c\000\136\004\341\006\073\007" +
    "\070\010\241\011\256\012\263\020\100\034\306\056\344" +
    "\057\235\076\345\077\220\100\076\101\103\102\077\103" +
    "\072\104\074\105\242\115\075\116\234\117\271\120\254" +
    "\121\326\122\310\127\265\152\u02ed\165\307\166\270\172" +
    "\342\173\223\175\255\176\347\177\233\200\332\201\245" +
    "\202\330\203\274\204\334\205\272\206\243\211\277\223" +
    "\346\226\303\227\314\230\262\231\301\001\002\000\012" +
    "\010\241\012\263\115\075\226\303\001\002\000\066\033" +
    "\u0110\124\u0107\125\u0118\126\u0101\144\u0104\146\u0100\147\u0112" +
    "\150\u0102\151\u0109\152\u0111\153\u0116\154\u010a\155\376\156" +
    "\u0108\157\u0115\160\u0114\161\u0105\162\u0113\163\u010f\164\u010b" +
    "\165\u0117\166\u0106\167\u010e\170\u010c\171\377\174\u0103\001" +
    "\ufe9d\000\002\001\ufe99\000\002\001\ufe98\000\002\001\ufefa" +
    "\000\006\123\u02fb\145\u02fc\001\002\000\002\001\uff60\000" +
    "\014\010\241\012\263\111\u02f8\115\075\226\303\001\002" +
    "\000\002\001\uff61\000\002\001\uff5f\000\002\001\ufec6\000" +
    "\134\004\341\006\073\007\070\010\241\011\256\012\263" +
    "\020\100\034\306\056\344\057\235\076\345\077\220\100" +
    "\076\101\103\102\077\103\072\104\074\105\242\115\075" +
    "\116\234\117\271\120\254\121\326\122\310\127\265\165" +
    "\307\166\270\172\342\173\223\175\255\176\347\177\233" +
    "\200\332\201\245\202\330\203\274\204\334\205\272\206" +
    "\243\211\277\223\346\226\303\227\314\230\262\231\301" +
    "\001\002\000\070\033\u0110\112\u02fa\124\u0107\125\u0118\126" +
    "\u0101\144\u0104\146\u0100\147\u0112\150\u0102\151\u0109\152\u0111" +
    "\153\u0116\154\u010a\155\376\156\u0108\157\u0115\160\u0114\161" +
    "\u0105\162\u0113\163\u010f\164\u010b\165\u0117\166\u0106\167\u010e" +
    "\170\u010c\171\377\174\u0103\001\002\000\002\001\uff5e\000" +
    "\006\012\u02f3\226\u02f4\001\002\000\002\001\uffc0\000\002" +
    "\001\uff62\000\136\004\341\006\073\007\070\010\241\011" +
    "\256\012\263\020\100\034\306\056\344\057\235\076\345" +
    "\077\220\100\076\101\103\102\077\103\072\104\074\105" +
    "\242\115\075\116\234\117\271\120\254\121\326\122\310" +
    "\127\265\152\u0185\165\307\166\270\172\342\173\223\175" +
    "\255\176\347\177\233\200\332\201\245\202\330\203\274" +
    "\204\334\205\272\206\243\211\277\223\346\226\303\227" +
    "\314\230\262\231\301\001\uff69\000\004\224\u0300\001\002" +
    "\000\002\001\ufef4\000\004\147\211\001\uffea\000\002\001" +
    "\uffe9\000\004\224\u0304\001\002\000\002\001\uffe5\000\010" +
    "\146\212\147\211\224\u0306\001\002\000\002\001\uffe8\000" +
    "\002\001\uffe7\000\004\012\u030c\001\002\000\004\130\u030a" +
    "\001\uff71\000\034\006\073\007\070\010\101\020\100\077" +
    "\065\100\076\101\103\102\077\103\072\104\074\115\075" +
    "\165\063\166\102\001\002\000\002\001\uff6f\000\004\130" +
    "\u030d\001\uff70\000\034\006\073\007\070\010\101\020\100" +
    "\077\065\100\076\101\103\102\077\103\072\104\074\115" +
    "\075\165\063\166\102\001\002\000\002\001\uff6e\000\002" +
    "\001\uff4c\000\010\010\175\077\172\224\uff74\001\uff6d\000" +
    "\004\224\u0312\001\002\000\004\225\u0313\001\002\000\010" +
    "\010\207\172\204\223\206\001\002\000\010\111\u0315\146" +
    "\212\147\211\001\002\000\002\001\uffd4\000\226\003\320" +
    "\004\341\005\351\006\073\007\070\010\241\011\256\012" +
    "\263\014\276\020\100\021\324\022\321\023\251\025\240" +
    "\027\304\031\352\034\306\036\331\042\260\043\323\044" +
    "\311\046\335\047\246\051\350\052\232\053\217\055\300" +
    "\056\344\057\235\060\261\061\237\071\340\076\345\077" +
    "\220\100\076\101\103\102\077\103\072\104\074\105\242" +
    "\111\266\112\u0317\114\231\115\075\116\234\117\271\120" +
    "\254\121\326\122\310\127\265\145\216\165\307\166\270" +
    "\172\342\173\223\175\255\176\347\177\233\200\332\201" +
    "\245\202\330\203\274\204\334\205\272\206\243\211\277" +
    "\215\247\216\264\217\225\223\346\226\303\227\314\230" +
    "\262\231\301\001\002\000\002\001\uffef\000\010\010\175" +
    "\077\172\224\uff74\001\uff6d\000\004\224\u031a\001\002\000" +
    "\004\225\u031b\001\002\000\010\010\207\172\204\223\206" +
    "\001\002\000\010\111\u031d\146\212\147\211\001\002\000" +
    "\002\001\uffd4\000\226\003\320\004\341\005\351\006\073" +
    "\007\070\010\241\011\256\012\263\014\276\020\100\021" +
    "\324\022\321\023\251\025\240\027\304\031\352\034\306" +
    "\036\331\042\260\043\323\044\311\046\335\047\246\051" +
    "\350\052\232\053\217\055\300\056\344\057\235\060\261" +
    "\061\237\071\340\076\345\077\220\100\076\101\103\102" +
    "\077\103\072\104\074\105\242\111\266\112\u031f\114\231" +
    "\115\075\116\234\117\271\120\254\121\326\122\310\127" +
    "\265\145\216\165\307\166\270\172\342\173\223\175\255" +
    "\176\347\177\233\200\332\201\245\202\330\203\274\204" +
    "\334\205\272\206\243\211\277\215\247\216\264\217\225" +
    "\223\346\226\303\227\314\230\262\231\301\001\002\000" +
    "\002\001\ufff1\000\004\130\u0321\001\002\000\034\006\073" +
    "\007\070\010\101\020\100\077\065\100\076\101\103\102" +
    "\077\103\072\104\074\115\075\165\063\166\102\001\002" +
    "\000\002\001\uff40\000\004\152\u020f\001\uffa5\000\004\010" +
    "\u0325\001\002\000\004\223\u0326\001\002\000\010\010\134" +
    "\161\130\167\132\001\uffec\000\002\001\uffee\000\006\123" +
    "\u032c\224\u032b\001\002\000\004\012\u032a\001\002\000\002" +
    "\001\uffeb\000\004\225\u032e\001\002\000\010\010\134\161" +
    "\130\167\132\001\002\000\002\001\uffed\000\010\010\207" +
    "\172\204\223\206\001\002\000\010\145\u0330\146\212\147" +
    "\211\001\002\000\002\001\ufff2\000\012\010\u0333\115\075" +
    "\161\130\167\132\001\002\000\006\113\u0334\123\141\001" +
    "\002\000\004\223\ufe75\001\uffd8\000\006\010\356\115\075" +
    "\001\002\000\004\223\u0336\001\002\000\010\010\175\077" +
    "\172\224\uff74\001\uff6d\000\004\224\u0338\001\002\000\006" +
    "\111\u0215\145\u0216\001\002\000\002\001\ufff3\000\002\001" +
    "\uff9c\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0339\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\012\011\005\012\006\013\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\147" +
    "\020\001\001\000\004\125\u0339\001\001\000\004\150\021" +
    "\001\001\000\002\001\001\000\006\125\024\151\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\125\027\001\001\000\002\001\001\000\004\014" +
    "\031\001\001\000\020\015\050\060\041\127\055\130\032" +
    "\132\042\133\045\154\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\133\u030e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\016\134\017\124\020\123\021\130\022\132\126" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\071" +
    "\065\072\066\117\063\171\070\001\001\000\012\071\065" +
    "\072\122\117\063\171\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\071\065\072\103\117\063\171\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\071\065\072\111\074\107\076\110\117\063" +
    "\171\070\001\001\000\002\001\001\000\004\075\115\001" +
    "\001\000\002\001\001\000\012\071\065\072\113\117\063" +
    "\171\070\001\001\000\002\001\001\000\012\071\065\072" +
    "\116\117\063\171\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\071\065\072\120\117\063\171\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\137\020\123\021\130\022\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\145\021\130\022\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\071\065\072\144\117\063\171\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\071\065\072\155" +
    "\117\063\171\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\071\065" +
    "\072\162\117\063\171\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\071\065\072\166" +
    "\117\063\171\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\047\173\050\175\051\176\152\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\200\152\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\122\207\123\204\001\001\000\006\122\u0306" +
    "\123\204\001\001\000\002\001\001\000\006\122\u0304\123" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\122\u0301\123\204\001\001\000\006\122\u0300\123\204\001" +
    "\001\000\004\006\213\001\001\000\074\005\342\007\220" +
    "\010\312\065\335\066\247\071\311\073\221\077\223\100" +
    "\256\101\321\106\272\116\266\117\326\120\315\125\235" +
    "\136\304\137\324\140\227\144\332\145\226\146\251\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\u02f1\055\u02f4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\065\335\066\247\071" +
    "\311\073\221\077\u02dc\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u02d5" +
    "\001\001\000\052\065\335\066\247\071\311\073\221\077" +
    "\u02d3\100\256\101\321\106\272\116\266\117\326\125\235" +
    "\140\227\153\336\155\301\156\214\160\225\162\314\164" +
    "\274\166\243\172\252\001\001\000\052\065\335\066\247" +
    "\071\311\073\221\077\u02d2\100\256\101\321\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u02ba\001\001\000" +
    "\052\065\335\066\247\071\311\073\221\077\u02b9\100\256" +
    "\101\321\106\272\116\266\117\326\125\235\140\227\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\002\001\001\000\052\065\335\066" +
    "\247\071\311\073\221\077\u02b8\100\256\101\321\106\272" +
    "\116\266\117\326\125\235\140\227\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\002\001\001\000\004\056\u0299\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\066\247\100\256\101\321\106" +
    "\272\117\u0179\125\u017c\140\u017a\155\u027a\156\214\160\225" +
    "\162\314\166\243\172\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\u0278\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\002\001\001\000" +
    "\004\113\u0272\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\065\335\066\247\071\311\073\221\077\u0270\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\004\006\u026e\001\001\000\002" +
    "\001\001\000\052\065\335\066\247\071\311\073\221\077" +
    "\u026d\100\256\101\321\106\272\116\266\117\326\125\235" +
    "\140\227\153\336\155\301\156\214\160\225\162\314\164" +
    "\274\166\243\172\252\001\001\000\052\065\335\066\247" +
    "\071\311\073\221\077\u026c\100\256\101\321\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\052\065\335\066\247\071\311\073\221\077\u026b\100\256" +
    "\101\321\106\272\116\266\117\326\125\235\140\227\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\010\100\u026a\101\321\162\314\001" +
    "\001\000\052\065\335\066\247\071\311\073\221\077\u0269" +
    "\100\256\101\321\106\272\116\266\117\326\125\235\140" +
    "\227\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\100\u0126\101\321\106\u0123\125\u0124\160\225" +
    "\162\314\163\u0267\165\u0122\166\u0121\001\001\000\002\001" +
    "\001\000\004\113\u025d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\065" +
    "\335\066\247\071\311\073\221\077\u0243\100\256\101\321" +
    "\106\272\116\266\117\326\125\235\140\227\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\052\065\335\066\247\071\311\073\221\077" +
    "\u0242\100\256\101\321\106\272\116\266\117\326\125\235" +
    "\140\227\153\336\155\301\156\214\160\225\162\314\164" +
    "\274\166\243\172\252\001\001\000\052\065\335\066\247" +
    "\071\311\073\221\077\u0241\100\256\101\321\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\004\061\u0239\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u0218\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\005\u01fc" +
    "\010\312\065\335\066\247\071\311\073\221\077\223\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\002\001\001\000\052\065\335" +
    "\066\247\071\311\073\221\077\u01fa\100\256\101\321\106" +
    "\272\116\266\117\326\125\235\140\227\153\336\155\301" +
    "\156\214\160\225\162\314\164\274\166\243\172\252\001" +
    "\001\000\054\062\u01f4\065\335\066\247\071\311\073\221" +
    "\077\u01f5\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\002\001\001\000" +
    "\052\065\335\066\247\071\311\073\221\077\u01f3\100\256" +
    "\101\321\106\272\116\266\117\326\125\235\140\227\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\002\001\001\000\052\065\335\066" +
    "\247\071\311\073\221\077\u01f2\100\256\101\321\106\272" +
    "\116\266\117\326\125\235\140\227\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\002\001\001\000\052\065\335\066\247\071\311\073" +
    "\221\077\u01d6\100\256\101\321\106\272\116\266\117\326" +
    "\125\235\140\227\153\336\155\301\156\214\160\225\162" +
    "\314\164\274\166\243\172\252\001\001\000\002\001\001" +
    "\000\052\065\335\066\247\071\311\073\221\077\u01d5\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\052\065\u01d2\066\247\071\311" +
    "\073\221\077\u0185\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\u01d1\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u01cc" +
    "\001\001\000\052\065\335\066\247\071\311\073\221\077" +
    "\u01ca\100\256\101\321\106\272\116\266\117\326\125\235" +
    "\140\227\153\336\155\301\156\214\160\225\162\314\164" +
    "\274\166\243\172\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\065\335\066\247\071" +
    "\311\073\221\077\u01b5\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\034" +
    "\066\247\100\256\101\321\106\272\117\u0179\125\u017c\140" +
    "\u017a\155\u017b\156\214\160\225\162\314\166\243\172\252" +
    "\001\001\000\052\065\335\066\247\071\311\073\221\077" +
    "\u0177\100\256\101\321\106\272\116\266\117\326\125\235" +
    "\140\227\153\336\155\301\156\214\160\225\162\314\164" +
    "\274\166\243\172\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\353\117\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\071\065" +
    "\072\357\117\063\171\070\001\001\000\002\001\001\000" +
    "\060\005\367\010\312\035\365\065\335\066\247\071\311" +
    "\073\221\077\223\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\227\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\004\117" +
    "\362\001\001\000\002\001\001\000\012\071\065\072\364" +
    "\117\063\171\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\370\001\001\000\002\001\001\000\074" +
    "\005\342\007\220\010\312\065\335\066\247\071\311\073" +
    "\221\077\223\100\256\101\321\106\272\116\266\117\326" +
    "\120\315\125\235\136\304\137\324\140\227\144\332\145" +
    "\226\146\251\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\374\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\002\001\001\000" +
    "\052\065\335\066\247\071\311\073\221\077\u0176\100\256" +
    "\101\321\106\272\116\266\117\326\125\235\140\227\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\052\065\335\066\247\071\311\073" +
    "\221\077\u0175\100\256\101\321\106\272\116\266\117\326" +
    "\125\235\140\227\153\336\155\301\156\214\160\225\162" +
    "\314\164\274\166\243\172\252\001\001\000\052\065\335" +
    "\066\247\071\311\073\221\077\u0174\100\256\101\321\106" +
    "\272\116\266\117\326\125\235\140\227\153\336\155\301" +
    "\156\214\160\225\162\314\164\274\166\243\172\252\001" +
    "\001\000\052\065\335\066\247\071\311\073\221\077\u0173" +
    "\100\256\101\321\106\272\116\266\117\326\125\235\140" +
    "\227\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\052\065\335\066\247\071" +
    "\311\073\221\077\u0172\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\052" +
    "\065\335\066\247\071\311\073\221\077\u0171\100\256\101" +
    "\321\106\272\116\266\117\326\125\235\140\227\153\336" +
    "\155\301\156\214\160\225\162\314\164\274\166\243\172" +
    "\252\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\u016e\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\052\065\335\066" +
    "\247\071\311\073\221\077\u016d\100\256\101\321\106\272" +
    "\116\266\117\326\125\235\140\227\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\052\065\335\066\247\071\311\073\221\077\u016c\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\052\065\335\066\247\071\311" +
    "\073\221\077\u016b\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\227\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\052\065" +
    "\335\066\247\071\311\073\221\077\u016a\100\256\101\321" +
    "\106\272\116\266\117\326\125\235\140\227\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\052\065\335\066\247\071\311\073\221\077" +
    "\u0169\100\256\101\321\106\272\116\266\117\326\125\235" +
    "\140\227\153\336\155\301\156\214\160\225\162\314\164" +
    "\274\166\243\172\252\001\001\000\052\065\335\066\247" +
    "\071\311\073\221\077\u0168\100\256\101\321\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\052\065\335\066\247\071\311\073\221\077\u0167\100\256" +
    "\101\321\106\272\116\266\117\326\125\235\140\227\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\052\065\335\066\247\071\311\073" +
    "\221\077\u0166\100\256\101\321\106\272\116\266\117\326" +
    "\125\235\140\227\153\336\155\301\156\214\160\225\162" +
    "\314\164\274\166\243\172\252\001\001\000\056\005\u014e" +
    "\010\312\065\335\066\247\071\311\073\221\077\223\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\052\065\335\066\247\071\311" +
    "\073\221\077\u014c\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\227\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\052\065" +
    "\335\066\247\071\311\073\221\077\u014b\100\256\101\321" +
    "\106\272\116\266\117\326\125\235\140\227\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\024\100\u0126\101\321\106\u0123\125\u0124\160" +
    "\225\162\314\163\u0120\165\u0122\166\u0121\001\001\000\052" +
    "\065\335\066\247\071\311\073\221\077\u011f\100\256\101" +
    "\321\106\272\116\266\117\326\125\235\140\227\153\336" +
    "\155\301\156\214\160\225\162\314\164\274\166\243\172" +
    "\252\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\u011e\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\052\065\335\066" +
    "\247\071\311\073\221\077\u011d\100\256\101\321\106\272" +
    "\116\266\117\326\125\235\140\227\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\052\065\335\066\247\071\311\073\221\077\u011c\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\052\065\335\066\247\071\311" +
    "\073\221\077\u011b\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\227\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\052\065" +
    "\335\066\247\071\311\073\221\077\u011a\100\256\101\321" +
    "\106\272\116\266\117\326\125\235\140\227\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\052\065\335\066\247\071\311\073\221\077" +
    "\u0119\100\256\101\321\106\272\116\266\117\326\125\235" +
    "\140\227\153\336\155\301\156\214\160\225\162\314\164" +
    "\274\166\243\172\252\001\001\000\052\065\335\066\247" +
    "\071\311\073\221\077\u0118\100\256\101\321\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\100\u0137\101\321\162\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\065\335\066\247\071\311\073\221\077\u012c\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\054\065\335\066\247\071\311" +
    "\073\221\077\u012a\100\256\101\321\102\u0129\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\100\u0131\101\321\106" +
    "\u0130\156\u012f\162\314\001\001\000\002\001\001\000\010" +
    "\100\u0132\101\321\162\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\065\335\066\247" +
    "\071\311\073\221\077\u0135\100\256\101\321\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\100\u0131\101\321\103\u013c\104\u013d\105\u013a\106\u0130\117" +
    "\u0139\156\u013b\162\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\167\u0147\001\001\000" +
    "\002\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\u013f\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\u0145\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\054\065\335\066" +
    "\247\071\311\073\221\077\u012a\100\256\101\321\102\u0143" +
    "\106\272\116\266\117\326\125\235\140\227\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\170\u0148\001\001\000\002" +
    "\001\001\000\024\100\u0131\101\321\103\u014a\104\u013d\105" +
    "\u013a\106\u0130\117\u0139\156\u013b\162\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0158\001\001\000\004\043\u014f\001\001\000\004\045\u0150" +
    "\001\001\000\002\001\001\000\056\005\u0157\010\312\065" +
    "\335\066\247\071\311\073\221\077\223\100\256\101\321" +
    "\106\272\116\266\117\326\125\235\140\227\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\002\001\001\000\052\065\335\066\247\071" +
    "\311\073\221\077\u0154\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\002" +
    "\001\001\000\056\005\u0156\010\312\065\335\066\247\071" +
    "\311\073\221\077\223\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\005\342\007\220\010" +
    "\312\044\u0159\065\335\066\247\071\311\073\221\077\223" +
    "\100\256\101\321\106\272\116\266\117\326\120\315\125" +
    "\235\136\304\137\324\140\227\144\332\145\226\146\251" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\004\046\u015a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\065" +
    "\335\066\247\071\311\073\221\077\u015e\100\256\101\321" +
    "\106\272\116\266\117\326\125\235\140\227\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0161\001\001\000\074\005\342\007\220\010\312\065\335" +
    "\066\247\071\311\073\221\077\223\100\256\101\321\106" +
    "\272\116\266\117\326\120\315\125\235\136\304\137\324" +
    "\140\227\144\332\145\226\146\251\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\004\006\u0163\001\001\000\074\005\342\007\220\010" +
    "\312\065\335\066\247\071\311\073\221\077\223\100\256" +
    "\101\321\106\272\116\266\117\326\120\315\125\235\136" +
    "\304\137\324\140\227\144\332\145\226\146\251\153\336" +
    "\155\301\156\214\160\225\162\314\164\274\166\243\172" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\065\335\066" +
    "\247\071\311\073\221\077\u0170\100\256\101\321\106\272" +
    "\116\266\117\326\125\235\140\227\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\100\u0131\101\321\106\u0130\156\u017e\162\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\052\u0183" +
    "\053\u0181\065\u0186\066\247\071\311\073\221\077\u0185\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\u0182" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\066\247\100\256\101\321\106" +
    "\272\117\u0179\124\u0187\125\u017c\140\u0188\156\214\160\225" +
    "\162\314\166\243\172\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\065\335\066\247\071\311\073\221\077" +
    "\u01a9\100\256\101\321\106\272\116\266\117\326\125\235" +
    "\140\227\153\336\155\301\156\214\160\225\162\314\164" +
    "\274\166\243\172\252\001\001\000\052\065\335\066\247" +
    "\071\311\073\221\077\u01a1\100\256\101\321\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\052\065\335\066\247\071\311\073\221\077\u019f\100\256" +
    "\101\321\106\272\116\266\117\326\125\235\140\227\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\052\065\335\066\247\071\311\073" +
    "\221\077\u019e\100\256\101\321\106\272\116\266\117\326" +
    "\125\235\140\227\153\336\155\301\156\214\160\225\162" +
    "\314\164\274\166\243\172\252\001\001\000\052\065\335" +
    "\066\247\071\311\073\221\077\u019d\100\256\101\321\106" +
    "\272\116\266\117\326\125\235\140\227\153\336\155\301" +
    "\156\214\160\225\162\314\164\274\166\243\172\252\001" +
    "\001\000\052\065\335\066\247\071\311\073\221\077\u019c" +
    "\100\256\101\321\106\272\116\266\117\326\125\235\140" +
    "\227\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\052\065\335\066\247\071" +
    "\311\073\221\077\u019b\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\052" +
    "\065\335\066\247\071\311\073\221\077\u019a\100\256\101" +
    "\321\106\272\116\266\117\326\125\235\140\227\153\336" +
    "\155\301\156\214\160\225\162\314\164\274\166\243\172" +
    "\252\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\u0199\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\052\065\335\066" +
    "\247\071\311\073\221\077\u0198\100\256\101\321\106\272" +
    "\116\266\117\326\125\235\140\227\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\052\065\335\066\247\071\311\073\221\077\u0197\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\052\065\335\066\247\071\311" +
    "\073\221\077\u0196\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\227\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\066\247\100\256\101\321\106\272\117\u0179\125\u017c\140" +
    "\u01a3\156\214\160\225\162\314\166\243\172\252\001\001" +
    "\000\002\001\001\000\024\100\u0126\101\321\106\u0123\125" +
    "\u0124\160\225\162\314\163\u01a4\165\u0122\166\u0121\001\001" +
    "\000\002\001\001\000\004\070\u01a5\001\001\000\002\001" +
    "\001\000\056\052\u01a7\053\u0181\065\u0186\066\247\071\311" +
    "\073\221\077\u0185\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\u0182\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\065\u01ad" +
    "\066\247\071\311\073\221\077\u0185\100\256\101\321\106" +
    "\272\116\266\117\326\125\235\140\u01ab\153\336\155\301" +
    "\156\214\160\225\162\314\164\274\166\243\172\252\001" +
    "\001\000\002\001\001\000\034\066\247\100\256\101\321" +
    "\106\272\117\u0179\124\u01ae\125\u017c\140\u0188\156\214\160" +
    "\225\162\314\166\243\172\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\052\u01b0\053\u0181\065\u0186\066" +
    "\247\071\311\073\221\077\u0185\100\256\101\321\106\272" +
    "\116\266\117\326\125\235\140\u0182\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\052\u01b3\053" +
    "\u0181\065\u0186\066\247\071\311\073\221\077\u0185\100\256" +
    "\101\321\106\272\116\266\117\326\125\235\140\u0182\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\066\247\100\256" +
    "\101\321\106\272\107\u01b8\110\u01b9\117\u0179\125\u017c\140" +
    "\u01ba\156\214\160\225\162\314\166\243\172\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\066\247\100\256\101\321\106\272" +
    "\107\u01bd\110\u01b9\117\u0179\125\u017c\140\u01ba\156\214\160" +
    "\225\162\314\166\243\172\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\066\247\100\256\101\321\106" +
    "\272\110\u01c0\117\u0179\125\u017c\140\u01ba\156\214\160\225" +
    "\162\314\166\243\172\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\u01c3\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\002\001\001\000" +
    "\034\066\247\100\256\101\321\106\272\117\u0179\125\u017c" +
    "\140\u01c5\156\214\160\225\161\u01c6\162\314\166\243\172" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\066\247\100\256\101\321\106\272\117" +
    "\u0179\125\u017c\140\u01c9\156\214\160\225\162\314\166\243" +
    "\172\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\065\335\066\247\071\311\073\221\077\u01cd\100\256" +
    "\101\321\106\272\116\266\117\326\125\235\140\227\153" +
    "\336\155\301\156\214\160\225\162\314\164\274\166\243" +
    "\172\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\065\335" +
    "\066\247\071\311\073\221\077\u01d8\100\256\101\321\106" +
    "\272\116\266\117\326\125\235\140\227\153\336\155\301" +
    "\156\214\160\225\162\314\164\274\166\243\172\252\001" +
    "\001\000\002\001\001\000\004\037\u01da\001\001\000\002" +
    "\001\001\000\004\040\u01ed\001\001\000\004\040\u01dd\001" +
    "\001\000\002\001\001\000\004\040\u01df\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\065\335\066\247\071" +
    "\311\073\221\077\u01e7\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\004" +
    "\041\u01e3\001\001\000\004\006\u01e6\001\001\000\002\001" +
    "\001\000\002\001\001\000\074\005\342\007\220\010\312" +
    "\065\335\066\247\071\311\073\221\077\223\100\256\101" +
    "\321\106\272\116\266\117\326\120\315\125\235\136\304" +
    "\137\324\140\227\144\332\145\226\146\251\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\004\041\u01e8\001\001\000\004\006\u01e9\001" +
    "\001\000\074\005\342\007\220\010\312\065\335\066\247" +
    "\071\311\073\221\077\223\100\256\101\321\106\272\116" +
    "\266\117\326\120\315\125\235\136\304\137\324\140\227" +
    "\144\332\145\226\146\251\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u01ef\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\065\335" +
    "\066\247\071\311\073\221\077\u01f8\100\256\101\321\106" +
    "\272\116\266\117\326\125\235\140\227\153\336\155\301" +
    "\156\214\160\225\162\314\164\274\166\243\172\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\065\335\066\247\071\311\073\221" +
    "\077\u01ff\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u0203\001\001" +
    "\000\002\001\001\000\006\125\024\151\u0205\001\001\000" +
    "\002\001\001\000\004\057\u0207\001\001\000\016\060\u0208" +
    "\127\055\130\u020b\132\042\133\045\154\u020a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\126\125\001\001" +
    "\000\002\001\001\000\004\061\u020d\001\001\000\004\117" +
    "\u020f\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\047\u0211\050\175\051\176\152\172\001\001\000\002\001" +
    "\001\000\004\131\u0213\001\001\000\002\001\001\000\004" +
    "\006\u0216\001\001\000\002\001\001\000\074\005\342\007" +
    "\220\010\312\065\335\066\247\071\311\073\221\077\223" +
    "\100\256\101\321\106\272\116\266\117\326\120\315\125" +
    "\235\136\304\137\324\140\227\144\332\145\226\146\251" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\002\001\001\000\010\114\u021a" +
    "\117\u0223\162\u0219\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\065\335\066\247\071\311" +
    "\073\221\077\u022b\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\227\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\066\247" +
    "\100\256\101\321\106\272\117\u0179\125\u017c\140\u0228\156" +
    "\214\160\225\162\314\166\243\172\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\065\335\066\247" +
    "\071\311\073\221\077\u022e\100\256\101\321\106\272\116" +
    "\266\117\326\125\235\140\227\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\115\u0235\117\u0236\162\u0234\001\001\000\004\117\u0233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\117\u023a\001\001\000\002\001\001\000\012\047\u023c" +
    "\050\175\051\176\152\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u023f\001\001\000\074\005\342" +
    "\007\220\010\312\065\335\066\247\071\311\073\221\077" +
    "\223\100\256\101\321\106\272\116\266\117\326\120\315" +
    "\125\235\136\304\137\324\140\227\144\332\145\226\146" +
    "\251\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\065\u0246" +
    "\066\247\071\311\073\221\077\u0185\100\256\101\321\106" +
    "\272\116\266\117\326\125\235\140\u0245\153\336\155\301" +
    "\156\214\160\225\162\314\164\274\166\243\172\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\066\247" +
    "\100\256\101\321\106\272\117\u0179\125\u017c\140\u0248\156" +
    "\214\160\225\162\314\166\243\172\252\001\001\000\004" +
    "\031\u0249\001\001\000\002\001\001\000\034\032\u024b\066" +
    "\247\100\256\101\321\106\272\117\u0179\125\u017c\140\u024c" +
    "\156\214\160\225\162\314\166\243\172\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\066\247\100\256" +
    "\101\321\106\272\117\u0179\125\u017c\140\u024e\156\214\160" +
    "\225\162\314\166\243\172\252\001\001\000\002\001\001" +
    "\000\060\005\u0251\010\312\034\u0252\065\335\066\247\071" +
    "\311\073\221\077\223\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\004" +
    "\006\u0253\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\005\342\007\220\010\312\065\335\066\247\071\311" +
    "\073\221\077\223\100\256\101\321\106\272\116\266\117" +
    "\326\120\315\125\235\136\304\137\324\140\227\144\332" +
    "\145\226\146\251\153\336\155\301\156\214\160\225\162" +
    "\314\164\274\166\243\172\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\032\u0257\066\247\100\256\101" +
    "\321\106\272\117\u0179\125\u017c\140\u024c\156\214\160\225" +
    "\162\314\166\243\172\252\001\001\000\004\031\u0258\001" +
    "\001\000\002\001\001\000\060\005\u0251\010\312\034\u025a" +
    "\065\335\066\247\071\311\073\221\077\223\100\256\101" +
    "\321\106\272\116\266\117\326\125\235\140\227\153\336" +
    "\155\301\156\214\160\225\162\314\164\274\166\243\172" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\114\u021a\117\u0223\162\u0219\001\001\000" +
    "\002\001\001\000\036\026\u0262\027\u0260\066\247\100\256" +
    "\101\321\106\272\117\u0179\125\u017c\140\u0261\156\214\160" +
    "\225\162\314\166\243\172\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\027\u0265\066\247\100\256\101\321\106\272\117\u0179" +
    "\125\u017c\140\u0261\156\214\160\225\162\314\166\243\172" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\u0268\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\005\342\007\220\010\312\065\335\066" +
    "\247\071\311\073\221\077\223\100\256\101\321\106\272" +
    "\116\266\117\326\120\315\125\235\136\304\137\324\140" +
    "\227\144\332\145\226\146\251\153\336\155\301\156\214" +
    "\160\225\162\314\164\274\166\243\172\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\114\u021a\117\u0223\162\u0219\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\065\335\066\247\071\311\073\221\077\u027c" +
    "\100\256\101\321\106\272\116\266\117\326\125\235\140" +
    "\227\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\100\u0131\101\321\103\u027f\104\u013d\105\u013a" +
    "\106\u0130\117\u0139\156\u013b\162\314\001\001\000\004\134" +
    "\u0280\001\001\000\004\135\u0284\001\001\000\056\052\u0282" +
    "\053\u0181\065\u0186\066\247\071\311\073\221\077\u0185\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\u0182" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\157\u0285\001\001\000\002\001\001\000\024\100" +
    "\u0131\101\321\103\u0287\104\u013d\105\u013a\106\u0130\117\u0139" +
    "\156\u013b\162\314\001\001\000\004\134\u0288\001\001\000" +
    "\002\001\001\000\004\147\u028a\001\001\000\004\150\u028b" +
    "\001\001\000\002\001\001\000\004\057\u028d\001\001\000" +
    "\016\060\u0208\127\055\130\u020b\132\042\133\045\154\u020a" +
    "\001\001\000\002\001\001\000\052\065\335\066\247\071" +
    "\311\073\221\077\u0290\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\002" +
    "\001\001\000\060\005\u0294\010\312\042\u0293\065\335\066" +
    "\247\071\311\073\221\077\223\100\256\101\321\106\272" +
    "\116\266\117\326\125\235\140\227\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\004\006\u0295\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\005\342\007\220\010\312\065\335\066\247" +
    "\071\311\073\221\077\223\100\256\101\321\106\272\116" +
    "\266\117\326\120\315\125\235\136\304\137\324\140\227" +
    "\144\332\145\226\146\251\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\071\065\072\u029e\117\063\171\070\001\001\000" +
    "\002\001\001\000\012\071\065\072\u02a0\117\063\171\070" +
    "\001\001\000\002\001\001\000\004\006\u02a2\001\001\000" +
    "\074\005\342\007\220\010\312\065\335\066\247\071\311" +
    "\073\221\077\223\100\256\101\321\106\272\116\266\117" +
    "\326\120\315\125\235\136\304\137\324\140\227\144\332" +
    "\145\226\146\251\153\336\155\301\156\214\160\225\162" +
    "\314\164\274\166\243\172\252\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\125\u02a6\001\001\000\004\162" +
    "\u02a7\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u02aa\001\001\000\074\005\342\007\220\010\312\065" +
    "\335\066\247\071\311\073\221\077\223\100\256\101\321" +
    "\106\272\116\266\117\326\120\315\125\235\136\304\137" +
    "\324\140\227\144\332\145\226\146\251\153\336\155\301" +
    "\156\214\160\225\162\314\164\274\166\243\172\252\001" +
    "\001\000\010\141\u02ad\142\u02af\143\u02ae\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\143" +
    "\u02b0\001\001\000\002\001\001\000\004\125\u02b2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u02b6\001\001\000\074\005\342\007\220\010\312" +
    "\065\335\066\247\071\311\073\221\077\223\100\256\101" +
    "\321\106\272\116\266\117\326\120\315\125\235\136\304" +
    "\137\324\140\227\144\332\145\226\146\251\153\336\155" +
    "\301\156\214\160\225\162\314\164\274\166\243\172\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\114\u021a\117\u0223\162\u0219\001\001\000\002" +
    "\001\001\000\056\063\u02bf\064\u02bd\065\335\066\247\071" +
    "\311\073\221\077\u02be\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\227\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\063" +
    "\u02c1\064\u02bd\065\335\066\247\071\311\073\221\077\u02be" +
    "\100\256\101\321\106\272\116\266\117\326\125\235\140" +
    "\227\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\002\001\001\000\056\063" +
    "\u02c3\064\u02bd\065\335\066\247\071\311\073\221\077\u02be" +
    "\100\256\101\321\106\272\116\266\117\326\125\235\140" +
    "\227\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\002\001\001\000\060\005" +
    "\u02c7\010\312\033\u02c5\065\335\066\247\071\311\073\221" +
    "\077\223\100\256\101\321\106\272\116\266\117\326\125" +
    "\235\140\227\153\336\155\301\156\214\160\225\162\314" +
    "\164\274\166\243\172\252\001\001\000\002\001\001\000" +
    "\004\006\u02c8\001\001\000\002\001\001\000\074\005\342" +
    "\007\220\010\312\065\335\066\247\071\311\073\221\077" +
    "\223\100\256\101\321\106\272\116\266\117\326\120\315" +
    "\125\235\136\304\137\324\140\227\144\332\145\226\146" +
    "\251\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\065\335\066\247\071\311\073\221\077\u02cc" +
    "\100\256\101\321\106\272\116\266\117\326\125\235\140" +
    "\227\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\002\001\001\000\014\100" +
    "\u0131\101\321\106\u0130\156\u017e\162\314\001\001\000\002" +
    "\001\001\000\032\066\247\100\256\101\321\106\272\117" +
    "\u0179\125\u017c\140\u02d0\156\214\160\225\162\314\166\243" +
    "\172\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\065\335\066\247\071\311\073" +
    "\221\077\u02e1\100\256\101\321\106\272\111\u02de\112\u02df" +
    "\116\266\117\326\125\235\140\227\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\002\001\001\000\004\075\u02e8\001\001\000\034\066" +
    "\247\100\256\101\321\106\272\117\u0179\124\u02e6\125\u017c" +
    "\140\u0188\156\214\160\225\162\314\166\243\172\252\001" +
    "\001\000\002\001\001\000\052\065\335\066\247\071\311" +
    "\073\221\077\u02e4\100\256\101\321\106\272\116\266\117" +
    "\326\125\235\140\227\153\336\155\301\156\214\160\225" +
    "\162\314\164\274\166\243\172\252\001\001\000\034\066" +
    "\247\100\256\101\321\106\272\117\u0179\124\u02e5\125\u017c" +
    "\140\u0188\156\214\160\225\162\314\166\243\172\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\065\335\066\247\071\311\073\221\077\u02ea\100" +
    "\256\101\321\106\272\116\266\117\326\125\235\140\227" +
    "\153\336\155\301\156\214\160\225\162\314\164\274\166" +
    "\243\172\252\001\001\000\002\001\001\000\034\066\247" +
    "\100\256\101\321\106\272\117\u0179\124\u02ef\125\u017c\140" +
    "\u0188\156\214\160\225\162\314\166\243\172\252\001\001" +
    "\000\002\001\001\000\052\065\335\066\247\071\311\073" +
    "\221\077\u02ed\100\256\101\321\106\272\116\266\117\326" +
    "\125\235\140\227\153\336\155\301\156\214\160\225\162" +
    "\314\164\274\166\243\172\252\001\001\000\034\066\247" +
    "\100\256\101\321\106\272\117\u0179\124\u02ee\125\u017c\140" +
    "\u0188\156\214\160\225\162\314\166\243\172\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\066\247\100\256\101\321\106\272\117\u0179\125\u017c\140" +
    "\u02f6\153\u02f5\156\214\160\225\162\314\166\243\172\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\065\335\066\247\071\311\073\221\077\u02f8" +
    "\100\256\101\321\106\272\116\266\117\326\125\235\140" +
    "\227\153\336\155\301\156\214\160\225\162\314\164\274" +
    "\166\243\172\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u02fc\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\052\u02fe\053\u0181\065\u0186\066\247\071" +
    "\311\073\221\077\u0185\100\256\101\321\106\272\116\266" +
    "\117\326\125\235\140\u0182\153\336\155\301\156\214\160" +
    "\225\162\314\164\274\166\243\172\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\071\065\072\u030a\117\063\171\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\071" +
    "\065\072\u030d\117\063\171\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\047\u0310\050\175\051\176\152" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\122\u0313\123\204\001\001\000\002\001\001\000\004\006" +
    "\u0315\001\001\000\074\005\342\007\220\010\312\065\335" +
    "\066\247\071\311\073\221\077\223\100\256\101\321\106" +
    "\272\116\266\117\326\120\315\125\235\136\304\137\324" +
    "\140\227\144\332\145\226\146\251\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\002\001\001\000\012\047\u0318\050\175\051\176\152" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\122\u031b\123\204\001\001\000\002\001\001\000\004\006" +
    "\u031d\001\001\000\074\005\342\007\220\010\312\065\335" +
    "\066\247\071\311\073\221\077\223\100\256\101\321\106" +
    "\272\116\266\117\326\120\315\125\235\136\304\137\324" +
    "\140\227\144\332\145\226\146\251\153\336\155\301\156" +
    "\214\160\225\162\314\164\274\166\243\172\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\071\065\072" +
    "\u0321\117\063\171\070\001\001\000\002\001\001\000\004" +
    "\061\u0330\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\u0328\021\130\022\132\024\u0327\025\u0326\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\u0328\021\130" +
    "\022\132\025\u032c\001\001\000\002\001\001\000\006\122" +
    "\u032e\123\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\u0331\020\123\021\130\022\132\117\u020f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\117\u0334" +
    "\001\001\000\002\001\001\000\012\047\u0336\050\175\051" +
    "\176\152\172\001\001\000\002\001\001\000\004\131\u0338" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAspectParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAspectParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAspectParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = new Integer(BodyDeclaration.Modifier.PUBLIC);
	protected final static Integer PRIVATE = new Integer(BodyDeclaration.Modifier.PRIVATE);
	protected final static Integer PROTECTED = new Integer(BodyDeclaration.Modifier.PROTECTED);
	protected final static Integer ABSTRACT = new Integer(BodyDeclaration.Modifier.ABSTRACT);
	protected final static Integer FINAL = new Integer(BodyDeclaration.Modifier.FINAL);
	protected final static Integer STATIC = new Integer(BodyDeclaration.Modifier.STATIC);
	
	private List<PHPMarker> markers = new ArrayList<PHPMarker>();
		
	public List<PHPMarker> getPhpErrorMarkers(){
		return markers;
	}
	
	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd() ,dispatcher, (Variable)property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd() ,dispatcher, (FunctionInvocation)property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		// System.err.print(message);
  		// if (info instanceof Symbol)
		//	if (((Symbol)info).left != -1)
		//		System.err.println(" at character " + ((Symbol)info).left + " of input");
		//	else System.err.println("");
	    // else 
	   	//	System.err.println("");
    }
    
	/**
     * This method is called when a syntax error has been detected and recovery is about to be invoked.
     * The super class just emit a "Syntax error" error message.
     * @param cur_token the current lookahead Symbol.
     */
    public void syntax_error(Symbol cur_token){
        //System.out.println("syntax_error:"+cur_token);
        //super.syntax_error(cur_token,info);
        int state = ((Symbol) stack.peek()).parse_state;
        short[] rowOfProbe = action_tab[state];
        PHPMarker phpErrorMarker = handleSyntaxError(cur_token.sym, (String)cur_token.value, rowOfProbe, cur_token.left, cur_token.right, getCurrentLine());
    	markers.add(phpErrorMarker);
    }
    
    	
	public PHPMarker handleSyntaxError(int currToken, String currText, short[] rowOfProbe, int startPosition, int endPosition, int lineNumber) {
		String unexpectedString = "";
		boolean addUnexpected;

		if (currToken == PHPAspectSymbols.EOF) {
			addUnexpected = true;
			unexpectedString = "End of File";
			startPosition = --endPosition;
		} else if (currToken == PHPAspectSymbols.T_CONSTANT_ENCAPSED_STRING) {
			addUnexpected = true;
			endPosition = startPosition + currText.trim().length();
			unexpectedString = "String";
		} else {
			addUnexpected = currText != null && currText.trim().length() > 0;
			if (addUnexpected) {
				unexpectedString = currText.trim();
				endPosition = startPosition + unexpectedString.length();
				unexpectedString = '\'' + unexpectedString + '\'';
			}
		}

		//IntList list = new IntList();
		List list = new ArrayList();
		for (int probe = 0; probe < rowOfProbe.length; probe += 2) {
			int curr = rowOfProbe[probe];
			String value = getConstantValue(curr);
			if (value != null && !value.equals("")) {
				list.add(value);
			}
		}
		int listSize = list.size();
		if (listSize > 3) {
			listSize = 0;
		}

		String description = "";

		if (!addUnexpected) {
			switch (listSize) {
				case 0:
					description = "Syntax Error";
					break;
				case 1:
					description = "Syntax Error: expecting: " + list.get(0);
					break;
				case 2:
					description = "Syntax Error: expecting: " + list.get(0) + " or " + list.get(1);
					break;
				case 3:
					description = "Syntax Error: expecting: " + list.get(0) + " or " + list.get(1) + " or " + list.get(2);
					break;
			}
		} else {
			switch (listSize) {
				case 0:
					description = "Syntax Error: unexpected " + unexpectedString;
					break;
				case 1:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0);
					break;
				case 2:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0) + " or " + list.get(1);
					break;
				case 3:
					description = "Syntax Error: unexpected " + unexpectedString + ", expecting: " + list.get(0) + " or " + list.get(1) + " or " + list.get(2);
					break;
			}
		}
		UserData userData = PHPCodeDataFactory.createUserData(null, startPosition, endPosition, startPosition, lineNumber);
		return new PHPMarker(IPHPMarker.ERROR, description, userData);
	}
	
	private String getConstantValue(int tag) {
		String rv = PHPAspectSymbolsUtils.getTokenName(tag);
		if (rv != null) {
			return '\'' + rv + '\'';
		}
		if (tag == PHPAspectSymbols.T_STRING) {
			return "Identifier";
		}
		if (tag == PHPAspectSymbols.T_VARIABLE) {
			return "Variable";
		}

		return null;
	}
    
	
    
    public int getCurrentLine(){
        PHPAspectLexer lexer = (PHPAspectLexer)getScanner();
        //TODO: fix this bug
        return lexer.getCurrentLine()+1;
    }

    public int getLength() {
        PHPAspectLexer lexer = (PHPAspectLexer)getScanner();
        return lexer.getLength();
    }
	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PHPAspectParser$actions {
  private final PHPAspectParser parser;

  /** Constructor */
  CUP$PHPAspectParser$actions(PHPAspectParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PHPAspectParser$do_action(
    int                        CUP$PHPAspectParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAspectParser$parser,
    java.util.Stack            CUP$PHPAspectParser$stack,
    int                        CUP$PHPAspectParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAspectParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAspectParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("string_st",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("string_st",77, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, varName); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",112, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier name = new Identifier(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name); 
	RESULT = constant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant",114, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("isset_variables",111, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // isset_variables ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("isset_variables",111, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, "eval");
	FunctionName name = new FunctionName(startleft, startright, id);
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, exprList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, "empty");
	FunctionName name = new FunctionName(startleft, startright, id);
	LinkedList varList = new LinkedList();
	varList.add(var);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, "isset");
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",75, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft,numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",75, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(stringleft, stringright, string);
	RESULT = id;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",75, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, endright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable var = new Variable(varNameleft, varNameright, varName);
	Variable indexedVar = new ArrayAccess(startleft, endright, var, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, expr);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable property = new Variable(stringleft, stringright, string);
	Dispatch dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // encaps_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // encaps_list ::= encaps_list T_OBJECT_OPERATOR 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "->", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // encaps_list ::= encaps_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "}", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // encaps_list ::= encaps_list T_CURLY_OPEN 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "{", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // encaps_list ::= encaps_list T_CLOSE_RECT 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "]", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // encaps_list ::= encaps_list T_OPEN_RECT 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, "[", Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // encaps_list ::= encaps_list T_BAD_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_UNKNOWN);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // encaps_list ::= encaps_list T_NUM_STRING 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // encaps_list ::= encaps_list string_st 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("encaps_list",73, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Reference ref = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Reference value = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Reference ref = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Reference value = new Reference(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",72, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",71, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",71, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // assignment_list_element ::= 
            {
              VariableBase RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",70, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",70, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // assignment_list_element ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",70, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list",69, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("assignment_list",69, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",68, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(1);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",68, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(startleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_name",67, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // variable_name ::= string_st 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, varName); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_name",67, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // object_dim_list ::= variable_name 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",66, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, var, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = varArray;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",66, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, var, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = varArray;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",66, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // object_property ::= variable_without_objects 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_property",65, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // object_property ::= object_dim_list 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("object_property",65, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = expr; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dim_offset",64, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // dim_offset ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dim_offset",64, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, expr);
	RESULT = var;	 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("compound_variable",63, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // compound_variable ::= tracked_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("compound_variable",63, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // reference_variable ::= compound_variable 
            {
              Variable RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",62, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, varName, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",62, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("reference_variable",62, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // base_variable ::= static_member 
            {
              VariableBase RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase staticFieldAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",116, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",116, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // base_variable ::= reference_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable",116, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",120, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",120, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, className, var);
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_member",110, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",108, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",108, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // method_or_not ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_or_not",90, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_or_not",90, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              VariableBase RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	VariableBase result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, memberProperty);
		result = new FunctionInvocation(memberPropertyleft, paramsListright, functionName, paramsList);
	}
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_property",109, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_properties",91, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase variableProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_properties",91, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable",94, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// get the last property 
	VariableBase firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, memberProperty);
		firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, functionName, paramsList);
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	RESULT = dispatch;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable",94, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // rw_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("rw_variable",107, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // w_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("w_variable",82, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // r_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("r_variable",105, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr",61, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",60, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("possible_comma",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("possible_comma",59, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",58, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",58, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_SINGLE);
	RESULT = quote;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // scalar ::= string_st 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("scalar",57, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier vname = new Identifier(varNameleft, varNameright, varName);
	Identifier cname = new Identifier(classNameleft, classNameright, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, cname, vname); 
	RESULT = constant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",119, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // static_scalar ::= string_st 
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_scalar",56, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // common_scalar ::= T_FILE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // common_scalar ::= T_LINE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("common_scalar",55, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",54, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ctor_arguments ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",54, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = expr;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",53, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",53, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("exit_expr",53, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",118, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",117, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",117, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // dynamic_class_name_reference ::= base_variable 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	 ClassName name = new ClassName(varleft, varright, var);
	 RESULT = name;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",115, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	
	// create class name from the dispatch
	ClassName name = new ClassName(varleft, propertyListright, dispatch);
	RESULT = name;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",115, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",113, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // class_name_reference ::= T_STRING 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, className);
	RESULT = new ClassName(classNameleft, classNameright, name);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",113, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // fully_qualified_class_name ::= T_STRING 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, className);
	RESULT = name;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",83, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, reflectionName); 
	RESULT = new FunctionInvocation(reflectionNameleft, endright, functionName, parameters); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",52, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, reflectionName);
	FunctionInvocation functionInvocation = new FunctionInvocation(reflectionNameleft, endright, functionName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",52, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, name);
	FunctionInvocation functionInvocation = new FunctionInvocation(functionNameleft, endright, fName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",52, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, name);
	RESULT = new FunctionInvocation(functionNameleft, endright, fName, parameters); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call",52, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, "print");
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, name, expList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = scalar; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, start);
	FunctionName name = new FunctionName(startleft, startright, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, name, expList);
	RESULT = result;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_UNSET); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_BOOL); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_OBJECT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_ARRAY); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_STRING); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_REAL); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, expr , CastExpression.TYPE_INT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition , ifTrue, ifFalse); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, expr);
	RESULT = parenthesisExpression; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr , className); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_TILDA); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_MINUS); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, expr , UnaryOperation.OP_PLUS); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, var , PrefixExpression.OP_INC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, var , PostfixExpression.OP_INC); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 	
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Reference reference = new Reference(reftokenleft, ctorright, classInstanceCreation);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_EQUAL, reference);
	RESULT = assignment;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, refvar)); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",51, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",50, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",50, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_expr",49, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_expr",49, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",48, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",48, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",85, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",85, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",84, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // member_modifier ::= T_FINAL 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.FINAL;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.ABSTRACT;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // member_modifier ::= T_STATIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.STATIC;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.PRIVATE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.PROTECTED;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.PUBLIC;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",88, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",88, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",86, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // method_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",86, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT =null;
		
	RESULT = PHPAspectParser.PUBLIC;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",106, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",106, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",87, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("method_body",87, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // class_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		


              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",46, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? PHPAspectParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, functionId, paramList, body, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",46, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ClassConstantDeclaration classConstantDeclaration = new ClassConstantDeclaration(listleft, endright, list);
	RESULT = classConstantDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",46, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, modifier.intValue(), decList);
	RESULT = fieldsDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement",46, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // class_statement_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",45, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",45, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",44, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",44, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var); 
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",44, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var); 
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("static_var_list",44, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, varName);
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",43, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, varright, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",43, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable variable = new Variable(varleft, varright, var);
	RESULT = variable;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var",43, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var_list",42, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("global_var_list",42, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression var_ref = new Reference(startleft, varright, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(startleft, varright, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",41, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // function_call_parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",40, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",40, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // optional_class_type ::= T_ARRAY 
            {
              Identifier RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier classId = new Identifier(arrayleft, arrayright, "array");
	RESULT = classId;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",104, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // optional_class_type ::= T_STRING 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, className);
	RESULT = classId;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",104, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // optional_class_type ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",104, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	Reference ref_var = new Reference (refleft, varright, v);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, ref_var, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",39, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",39, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	Reference ref_var = new Reference (refleft, varright, v);
	FormalParameter parameter = new FormalParameter(start, varright, classType, ref_var);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",39, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, var);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter",39, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",38, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",38, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter_list",37, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("parameter_list",37, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_else_single",36, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_else_single",36, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("else_single",35, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("else_single",35, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
			
	Block block = new Block(colonleft, statementListright, statementList, false);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",34, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",34, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("elseif_list",33, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("elseif_list",33, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("while_statement",32, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("while_statement",32, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_separator",31, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_separator",31, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",30, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",30, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("case_list",30, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList, false);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",29, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList, false);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",29, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",29, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",29, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(keyleft, keyright, key);
	lists[0].add(id);
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_list",28, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	Identifier id = new Identifier(keyleft, keyright, key);
	listKeys.add(id);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_list",28, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_statement",27, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("declare_statement",27, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",26, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",26, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_statement",25, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("for_statement",25, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	Reference reference = new Reference (startleft, varright, var);
	RESULT = reference;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",24, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",24, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",23, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",23, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",103, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_list",103, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("implements_list",102, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("implements_list",102, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",79, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",79, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("interface_entry",78, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",101, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // extends_from ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("extends_from",101, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_FINAL);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",100, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",100, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_NONE);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",100, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, className);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, classId, interfaces, block);
	RESULT = interfaceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",99, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, className);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, modifier.intValue(), classId, superClass, interfaces, block);
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",99, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, blockEndright, functionId, paramList, block, isReference.booleanValue());
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",98, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("is_reference",47, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("is_reference",47, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",93, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",92, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("use_filename",22, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("use_filename",22, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unset_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variable",21, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variables",20, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unset_variables ::= unset_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unset_variables",20, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	Variable variable = new Variable(varleft, varright, var);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catch",97, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",96, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",96, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catches",95, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("additional_catches",95, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unticked_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// TODO: var comment should be added as ast node

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unticked_statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, "unset");
	FunctionName functionName = new FunctionName(startleft, startright, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, closeParright, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(expr);
	Identifier id = new Identifier(startleft, startright, "use");
	FunctionName functionName = new FunctionName(startleft, startright, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, exprright, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	InLineHtml inLineHtml = new InLineHtml(htmlleft, htmlright);
	RESULT = inLineHtml;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new EchoStatement(startleft, endright, exprList); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, expr); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);			
	RESULT = doStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);			
	RESULT = whileStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList, false);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(tokenleft, endright, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // inner_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // aspect_subtype_or_not ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.FALSE; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_subtype_or_not",17, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // aspect_subtype_or_not ::= T_PLUS 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.TRUE; 
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_subtype_or_not",17, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aspect_signature ::= T_STRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = str.toString();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",16, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aspect_signature ::= T_TIMES 
            {
              String RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = times.toString();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",16, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aspect_signature ::= aspect_signature T_STRING 
            {
              String RESULT =null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",16, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aspect_signature ::= aspect_signature T_TIMES 
            {
              String RESULT =null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_signature",16, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aspect_inter_type_signature ::= T_RGREATER T_STRING T_LGREATER 
            {
              String RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_signature",15, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aspect_inter_type_signature ::= aspect_signature 
            {
              String RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_signature",15, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aspect_inter_type_declaration_r ::= aspect_inter_type_signature aspect_subtype_or_not 
            {
              AspectInterTypeDeclaration RESULT =null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int subtypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int subtyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Boolean subtype = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new AspectInterTypeDeclaration(signleft, signright, sign, subtype);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration_r",14, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aspect_inter_type_declaration ::= aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration dec = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(dec);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration",13, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aspect_inter_type_declaration ::= aspect_inter_type_declaration T_COMMA aspect_inter_type_declaration_r 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectInterTypeDeclaration dec = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(dec);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_declaration",13, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aspect_inter_type_field_declaration ::= aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, exprright, interType, varId, expr));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",12, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aspect_inter_type_field_declaration ::= aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE 
            {
              List RESULT =null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, var);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, varright, interType, varId, null));
	RESULT = list;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",12, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aspect_inter_type_field_declaration ::= aspect_inter_type_field_declaration T_COMMA aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, var);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, exprright, interType, varId, expr));
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",12, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aspect_inter_type_field_declaration ::= aspect_inter_type_field_declaration T_COMMA aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, var);
	list.add(new AspectInterTypeFieldDeclaration(interTypeleft, varright, interType, varId, null));
	RESULT = list;		

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_inter_type_field_declaration",12, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aspect_joinpoint ::= T_STRING T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int ptNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ptNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String ptName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	RESULT = new AspectPointcutReference(ptNameleft, ptNameright, ptName);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_joinpoint",81, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aspect_pointcut ::= aspect_joinpoint 
            {
              Expression RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = pt;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aspect_pointcut ::= T_NOT aspect_pointcut 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, ptright, pt, UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aspect_pointcut ::= T_OPEN_PARENTHESE aspect_pointcut T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, pt);
	RESULT = parenthesisExpression; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_AND aspect_pointcut 
            {
              Expression RESULT =null;
		int pt1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression pt1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new InfixExpression(pt1left, pt2right, pt1 , InfixExpression.OP_BOOL_AND, pt2);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_OR aspect_pointcut 
            {
              Expression RESULT =null;
		int pt1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression pt1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Expression pt2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = new InfixExpression(pt1left, pt2right, pt1, InfixExpression.OP_BOOL_OR, pt2); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut",80, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aspect_pointcut_parameter ::= aspect_inter_type_declaration_r T_VARIABLE 
            {
              AspectPointcutParameter RESULT =null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		AspectInterTypeDeclaration interType = (AspectInterTypeDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, var);
	AspectPointcutParameter aspectPointcutParameter = new AspectPointcutParameter(interTypeleft, varright, interType, v);
	RESULT = aspectPointcutParameter;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter",19, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aspect_pointcut_parameter_list ::= 
            {
              List RESULT =null;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",18, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aspect_pointcut_parameter_list ::= aspect_pointcut_parameter_list T_COMMA aspect_pointcut_parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptArgleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptArgright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectPointcutParameter ptArg = (AspectPointcutParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(ptArg);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",18, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aspect_pointcut_parameter_list ::= aspect_pointcut_parameter 
            {
              List RESULT =null;
		int ptArgleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int ptArgright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectPointcutParameter ptArg = (AspectPointcutParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(ptArg);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_pointcut_parameter_list",18, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aspect_statement ::= T_AFTER T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AspectCodeAdviceDeclaration.BEFORE, list, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aspect_statement ::= T_AROUND T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AspectCodeAdviceDeclaration.BEFORE, list, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aspect_statement ::= T_BEFORE T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression pt = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	Block block = new Block(blockStartleft, endright, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, AspectCodeAdviceDeclaration.BEFORE, list, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aspect_statement ::= method_modifiers T_POINTCUT T_STRING T_OPEN_PARENTHESE aspect_pointcut_parameter_list T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int ptNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int ptNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String ptName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	AspectPointcutDeclaration aspectPointcutDeclaration = new AspectPointcutDeclaration(modifierleft, endright, ptName, args, expr);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aspect_statement ::= method_modifiers T_FUNCTION is_reference aspect_inter_type_declaration T_PAAMAYIM_NEKUDOTAYIM string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List interType = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? PHPAspectParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, functionId, paramList, body, isReference.booleanValue());
	AspectInterTypeMethodDeclaration interTypeMethodDeclaration = new AspectInterTypeMethodDeclaration(methodStart, bodyright, modifier.intValue(), interType, functionDeclaration, true);
	RESULT = interTypeMethodDeclaration;	

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // aspect_statement ::= variable_modifiers aspect_inter_type_field_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	AspectInterTypeFieldsDeclaration aspectInterTypeFieldsDeclaration = new AspectInterTypeFieldsDeclaration(modifierleft, endright, modifier.intValue(), false, decList);
	RESULT = aspectInterTypeFieldsDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // aspect_statement ::= class_statement 
            {
              Statement RESULT =null;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = classStatement;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement",11, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // aspect_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement_list",10, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // aspect_statement_list ::= aspect_statement_list aspect_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int aspectStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int aspectStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement aspectStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	list.add(aspectStatement);
	RESULT = list;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_statement_list",10, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // aspect_entry_type ::= T_FINAL T_ASPECT 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(AspectDeclaration.MODIFIER_FINAL);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",9, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // aspect_entry_type ::= T_ABSTRACT T_ASPECT 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(AspectDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",9, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // aspect_entry_type ::= T_ASPECT 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(AspectDeclaration.MODIFIER_NONE);

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_entry_type",9, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // unticked_aspect_declaration_statement ::= aspect_entry_type T_STRING extends_from implements_list T_CURLY_OPEN aspect_statement_list T_CURLY_CLOSE T_SEMICOLON 
            {
              AspectDeclaration RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int aspectNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int aspectNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String aspectName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	Identifier classId = new Identifier(aspectNameleft, aspectNameright, aspectName);
	Block block = new Block(blockStartleft, blockEndright, statementList);
	//ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, modifier.intValue(), classId, superClass, interfaces, block);
	AspectDeclaration aspectDeclaration = new AspectDeclaration(modifierleft ,blockEndright, modifier.intValue(), classId, superClass, interfaces, block);
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("unticked_aspect_declaration_statement",8, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // aspect_declaration_statement ::= unticked_aspect_declaration_statement 
            {
              AspectDeclaration RESULT =null;
		int aspectDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int aspectDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectDeclaration aspectDeclaration = (AspectDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("aspect_declaration_statement",7, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= aspect_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		AspectDeclaration statement = (AspectDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PHPAspectParser$parser.done_parsing();
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.peek()).value;
		
	PHPAspectLexer PHPAspectLexer = (PHPAspectLexer) parser.getScanner();
	List commentList = PHPAspectLexer.getCommentList();
	Program program = new Program(statementListleft, statementListright, statementList, commentList);
	RESULT = program; 

              CUP$PHPAspectParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.peek()), RESULT);
            }
          return CUP$PHPAspectParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

