//### This file created by BYACC 1.8(/Java extension  1.14)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";



package org.phpaspect.parsetree;



//#line 1 "php_parser.y"

/*
   +----------------------------------------------------------------------+
   | Zend Engine                                                          |
   +----------------------------------------------------------------------+
   | Copyright (c) 1998-2006 Zend Technologies Ltd. (http://www.zend.com) |
   +----------------------------------------------------------------------+
   | This source file is subject to version 2.00 of the Zend license,     |
   | that is bundled with this package in the file LICENSE, and is        | 
   | available through the world-wide-web at the following url:           |
   | http://www.zend.com/license/2_00.txt.                                |
   | If you did not receive a copy of the Zend license and are unable to  |
   | obtain it through the world-wide-web, please send a note to          |
   | license@zend.com so we can mail you a copy immediately.              |
   +----------------------------------------------------------------------+
   | Authors: Andi Gutmans <andi@zend.com>                                |
   |          Zeev Suraski <zeev@zend.com>                                |
   +----------------------------------------------------------------------+
*/

/* $Id: php_parser.y,v 1.1 2007/01/19 21:41:16 wcandillon Exp $ */

/* 
 * LALR shift/reduce conflicts and how they are resolved:
 *
 * - 2 shift/reduce conflicts due to the dangeling elseif/else ambiguity.  Solved by shift.
 * - 1 shift/reduce conflict due to arrays within encapsulated strings. Solved by shift. 
 * - 1 shift/reduce conflict due to objects within encapsulated strings.  Solved by shift.
 * 
 */

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
//#line 54 "PHPAspectParser.java"




public class PHPAspectParser
             implements PHPAspectParserTokens
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class PHPAspectParserVal is defined in PHPAspectParserVal.java


String   yytext;//user variable to return contextual strings
PHPAspectParserVal yyval; //used to return semantic vals from action routines
PHPAspectParserVal yylval;//the 'lval' (result) I got from yylex()
PHPAspectParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new PHPAspectParserVal[YYSTACKSIZE];
  yyval=new PHPAspectParserVal();
  yylval=new PHPAspectParserVal();
  valptr=-1;
}
void val_push(PHPAspectParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
PHPAspectParserVal val_pop()
{
  if (valptr<0)
    return new PHPAspectParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
PHPAspectParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new PHPAspectParserVal();
  return valstk[ptr];
}
//#### end semantic value section ####
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    3,    1,    1,    2,    2,    2,    2,    2,    2,
   10,    8,    8,    9,    9,    9,    9,    4,   11,   13,
   15,   11,   17,   19,   11,   21,   23,   11,   24,   25,
   11,   27,   28,   30,   11,   32,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   40,   42,   45,   11,   46,   47,   48,   11,   49,
   11,   11,   52,   54,   55,   56,   58,   11,   11,   57,
   57,   59,   59,   61,   62,   60,   39,   39,   63,   38,
   38,    5,    6,   66,   66,   67,   68,   64,   73,   65,
   77,   65,    7,    7,   78,   78,   78,   78,   78,   78,
   78,   78,   87,   87,   86,   86,   86,   86,   86,   88,
   88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
   88,   92,   92,   90,   90,   81,   81,   81,   81,   82,
   82,   84,   84,   89,   91,   91,   91,   91,   93,   93,
   70,   70,   70,   71,   71,   75,   76,   76,   72,   72,
   95,   95,   43,   43,   41,   41,   29,   29,   44,   44,
   51,   51,   50,   50,   31,   31,   31,   31,   96,   98,
   96,   99,   96,   97,   97,   22,   22,   14,  100,   14,
   18,  101,   18,   16,   16,   20,   20,   69,   69,  102,
  102,  102,  102,  102,  102,  102,  102,  103,  103,  103,
  104,  104,  105,  105,  105,  105,  105,  105,   35,   35,
  107,  107,  107,   36,   36,   36,   36,   74,   74,  110,
   79,   79,   79,   79,   85,   85,   80,   80,   83,   83,
  112,  112,  113,  113,  113,  113,  113,  113,  109,  109,
  109,  109,  111,  111,   37,   37,   26,   26,  115,  114,
  114,  117,   33,   33,   33,  120,   33,  121,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,  123,   33,  124,   33,  125,
   33,  126,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,  127,
  128,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,  131,   33,   33,   33,   33,   33,  136,  135,  137,
  135,  139,  135,  140,  135,   53,  118,  118,  144,  146,
  141,  141,  145,  145,  147,  130,  130,  130,  119,  119,
  148,  148,  148,  148,  148,  148,  148,  148,   94,   94,
   94,   94,   94,   94,  150,  132,  132,  132,  132,  132,
  132,  132,  149,  149,  153,  153,  152,  152,  152,  152,
   12,   12,  108,  154,  106,  155,  122,  157,  159,   34,
   34,  160,  160,  162,  161,  163,  158,  158,  138,  138,
  166,  156,  156,  142,  142,  142,  164,  164,  164,  168,
  168,  167,  167,  143,  170,  143,  169,  169,  169,  171,
  171,  165,  165,  116,  116,  172,  173,  172,  172,  133,
  133,  174,  174,  174,  174,  174,  174,  174,  174,  134,
  134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
  134,  175,  177,  175,  175,  175,  175,  175,  176,  176,
  176,  129,  129,  129,  129,  129,  129,  129,  178,  179,
  178,  151,
};
final static short yylen[] = {                            2,
    1,    0,    3,    0,    1,    1,    1,    4,    5,    1,
    0,    3,    0,    1,    1,    1,    4,    1,    3,    0,
    0,    9,    0,    0,   12,    0,    0,    7,    0,    0,
    9,    0,    0,    0,   12,    0,    6,    2,    3,    2,
    3,    2,    3,    3,    3,    3,    3,    1,    2,    3,
    5,    0,    0,    0,   11,    0,    0,    0,   11,    0,
    6,    1,    0,    0,    0,    0,    0,   18,    3,    1,
    0,    1,    2,    0,    0,   10,    1,    3,    1,    1,
    3,    1,    1,    0,    1,    0,    0,   11,    0,    8,
    0,    7,    2,    0,    1,    3,    2,   10,    5,    9,
    8,   10,    0,    1,    3,    3,    3,    2,    1,    1,
    9,   12,    7,    4,    4,    6,    6,    4,    4,    4,
    2,    1,    1,    1,    1,    5,    7,    3,    5,    7,
    6,    3,    1,    2,    2,    2,    1,    1,    1,    0,
    1,    2,    2,    0,    2,    1,    0,    2,    0,    2,
    1,    3,    0,    2,    1,    2,    1,    4,    1,    4,
    1,    4,    3,    5,    3,    4,    4,    5,    0,    0,
    6,    0,    5,    1,    1,    1,    4,    0,    0,    7,
    0,    0,    8,    0,    2,    0,    3,    1,    0,    2,
    3,    5,    4,    4,    5,    7,    6,    0,    1,    1,
    1,    0,    1,    1,    2,    3,    3,    4,    3,    1,
    1,    2,    4,    3,    5,    1,    3,    2,    0,    0,
    4,    2,    8,    1,    1,    3,    1,    1,    0,    1,
    1,    2,    1,    1,    1,    1,    1,    1,    3,    5,
    1,    3,    5,    4,    3,    1,    0,    1,    0,    4,
    1,    0,    7,    3,    4,    0,    7,    0,    4,    2,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    2,    2,    2,    2,    0,    4,    0,    4,    0,
    4,    0,    4,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    2,    2,    2,    2,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    0,
    0,    7,    1,    2,    2,    2,    2,    2,    2,    2,
    2,    0,    3,    1,    4,    3,    2,    0,    5,    0,
    7,    0,    7,    0,    5,    1,    1,    1,    0,    0,
    6,    1,    2,    0,    2,    0,    2,    3,    0,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    4,    1,    3,    1,    1,    1,    1,    3,
    3,    3,    0,    2,    0,    1,    5,    3,    3,    1,
    1,    1,    1,    0,    2,    0,    2,    0,    0,    7,
    1,    2,    0,    0,    4,    0,    4,    0,    1,    2,
    3,    1,    1,    1,    2,    1,    4,    4,    1,    1,
    4,    0,    1,    1,    0,    2,    4,    4,    1,    1,
    3,    1,    2,    3,    1,    1,    0,    5,    0,    0,
    2,    5,    3,    3,    1,    6,    4,    4,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    0,    1,    0,    5,    3,    3,    6,    3,    1,    1,
    1,    4,    4,    2,    2,    4,    2,    2,    1,    0,
    4,    3,
};
final static short yydefred[] = {                         4,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  322,    0,    0,    0,    0,  351,  352,    0,
  367,  410,   48,  353,    0,   29,    0,    0,    0,   60,
    0,    0,    0,   86,    0,   63,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  141,  146,    0,    0,
  356,  357,  358,  354,  355,   10,  451,    0,    0,   62,
   13,    0,  451,  451,  451,    3,    5,    6,    7,   18,
    0,  382,    0,    0,   82,   83,    0,    0,  381,    0,
  313,  324,  403,    0,  402,  369,  368,    0,    0,    0,
  406,  409,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  299,    0,  386,    0,  273,  275,  314,  315,  316,
  317,  318,  319,  320,    0,    0,    0,  258,  338,    0,
    0,    0,  260,    0,  321,    0,  328,    0,    0,    0,
   26,    0,    0,    0,    0,   38,    0,   40,    0,    0,
   42,    0,    0,    0,    0,    0,   80,    0,    0,  211,
    0,    0,  210,    0,    0,  142,  143,    0,    0,    0,
    0,  252,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  280,    0,  282,  310,  276,  278,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   49,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  387,    0,    0,   91,  272,  274,  334,  388,    0,    0,
    0,    0,    0,    0,  323,    0,    0,  339,    0,  347,
    0,    0,    0,    0,   47,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   39,   41,   85,    0,   43,   44,
   13,   69,    0,   50,    0,  383,  212,    0,   45,    0,
    0,   46,   79,    0,   77,  469,    0,    0,    0,    0,
    0,    0,    0,    0,  446,  441,    0,  442,  444,  445,
  443,  450,  372,    0,    0,  448,  449,  447,  440,   94,
  309,   19,    0,    0,  326,  370,  371,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  308,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,    0,    0,    0,    0,    0,    0,  466,    0,
  401,    0,  259,    0,  348,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   32,  249,    0,    0,    0,    0,
   36,   87,    0,   81,    0,  209,    0,    0,    0,    0,
  217,  359,  364,    0,    0,    0,  470,  462,  463,    8,
    0,  426,    0,  425,  384,  439,    0,  325,    0,  431,
  453,    0,    0,    0,    0,    0,    0,   14,   15,   16,
   12,  411,    0,    0,    0,    0,    0,    0,  255,  330,
  332,    0,  336,  145,    0,    0,    0,    0,  420,    0,
  415,  389,    0,  419,  407,  408,    0,  340,   23,    0,
  205,  329,    0,   30,   27,    0,    0,   57,   53,    0,
    0,    0,    0,    0,    0,  213,  361,  362,    0,    0,
    0,   78,   51,    0,  427,    0,    0,  385,    0,    0,
    0,    0,    0,  455,    0,  456,  458,    0,  236,  237,
  238,  235,  234,  233,  228,  224,    0,    0,    0,    0,
    9,   93,   95,    0,    0,    0,    0,    0,  231,    0,
  311,  256,    0,    0,    0,    0,  151,    0,  219,  335,
    0,  416,    0,    0,    0,  350,  344,   13,   21,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  163,    0,
   13,  161,   61,    0,    0,   37,    0,    0,  365,    0,
    0,    0,  215,  471,    0,  424,    0,  438,  437,    0,
  459,  461,  460,    0,    0,  137,    0,    0,  133,    0,
    0,    0,    0,    0,  138,    0,    0,    0,    0,   97,
    0,    0,  222,  232,    0,    0,    0,    0,    0,    0,
  219,    0,    0,  421,  396,  393,    0,    0,    0,    0,
  178,  208,    0,   13,  176,   28,   33,    0,    0,  155,
    0,    0,    0,  169,    0,  169,    0,  199,  200,    0,
    0,    0,   64,    0,  363,    0,  374,    0,    0,    0,
    0,  454,    0,    0,    0,    0,  139,  135,  136,  134,
    0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
    0,    0,    0,   17,    0,  257,  331,  333,    0,  152,
    0,   92,  218,  220,    0,    0,    0,  417,  418,    0,
  343,  181,    0,    0,    0,    0,    0,    0,  156,    0,
  164,    0,    0,    0,    0,    0,    0,  165,    0,    0,
    0,    0,    0,  379,    0,  428,  436,  457,  244,  132,
    0,    0,    0,    0,    0,    0,    0,  110,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  109,
    0,    0,    0,    0,  221,    0,    0,    0,    0,   90,
    0,    0,    0,    0,  392,  345,    0,    0,    0,   22,
   31,    0,    0,  154,   58,   54,  162,    0,  167,    0,
  174,  175,  172,  166,   13,    0,    0,    0,   65,    0,
    0,    0,    0,    0,  108,  121,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
    0,    0,  242,    0,    0,    0,    0,  243,    0,  397,
  394,    0,    0,    0,    0,  185,  177,   34,    0,    0,
  168,  170,   13,    0,    0,    0,    0,  193,    0,  377,
  131,    0,   13,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  107,    0,  106,    0,  129,
    0,    0,    0,    0,    0,    0,    0,   13,    0,    0,
    0,   13,  159,   59,   55,   13,    0,   88,    0,    0,
  192,    0,   13,    0,   13,    0,  114,  115,  120,    0,
  124,  125,    0,    0,    0,  118,  119,    0,  240,  130,
    0,    0,  395,    0,    0,   25,  179,   13,  157,   35,
    0,    0,    0,  197,   66,    0,  101,    0,  123,  122,
    0,    0,    0,    0,    0,  127,  225,   13,  223,    0,
    0,    0,    0,    0,  196,    0,  100,    0,    0,    0,
    0,  116,  117,    0,    0,  182,  180,    0,  160,   13,
  102,  113,    0,    0,  226,   98,   13,  158,    0,    0,
    0,    0,   67,    0,  111,    0,    0,    0,   68,    0,
   72,    0,    0,   73,  112,   74,    0,    0,   75,    0,
   13,    0,   76,
};
final static short yydgoto[] = {                          1,
    2,   76,    3,  843,   78,   79,  416,  177,  421,  303,
   80,   81,  450,  673,  601,  740,  528,  737,  672,  794,
  247,  606,  534,  140,  533,  249,  456,  676,  880,  841,
  546,  463,   82,   83,  162,  165,  139,  159,  641,  378,
  611,  538,  678,  844,  800,  377,  537,  799,  144,  380,
  543,  155,   84,  693,  809,  906,  939,  936,  940,  941,
  947,  950,  275,   85,   86,  258,  150,  464,  620,   87,
  352,  516,  435,  593,   88,  437,  353,  502,  663,  664,
  576,  505,  665,  568,  899,  719,  642,  720,  569,  863,
  570,  891,  640,  391,  518,  615,  753,  846,  803,  902,
  927,  621,  622,  370,  371,  406,  163,   89,  650,  578,
  507,  508,  509,  250,  457,  403,  280,  128,  363,  587,
  237,   90,  312,  313,  308,  310,  311,  586,   91,  135,
  125,   92,  283,  174,   93,  243,  513,   94,  514,  354,
  129,   95,  442,  364,  599,  527,  671,   96,  551,  393,
   97,  552,  410,  478,  221,   98,  355,  596,  523,  667,
  735,  836,  666,   99,  100,  101,  357,  102,  443,  522,
  444,  404,  555,  284,  299,  564,  483,  277,  474,
};
final static short yysindex[] = {                         0,
    0,    0, 1995, 6236, 6236,   53, 6236, 6236, 6236, 6236,
 6236, 6236, 6236,   49,   49, 6236, 6236, 6236, 6236, 6236,
 6236, 6236,    0,   76, 6236,  132,  142,    0,    0,  148,
    0,    0,    0,    0, 6236,    0,  165,  172,  194,    0,
  212, 4804, 5080,    0, 5165,    0, 6236,  -17,    5, -218,
 -225, -205,  214,  234,  253,  263,    0,    0,  277,  340,
    0,    0,    0,    0,    0,    0,    0, -156, 6236,    0,
    0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
 9538,    0, 1053, -194,    0,    0, -106,  -60,    0,  205,
    0,    0,    0,  361,    0,    0,    0,  -76,  -32,   15,
    0,    0,10734,10734, 6236,10734,10734, 2655,  131,  131,
  145,    0,  148,    0,   71,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 6236,    0,   85,    0,    0,  109,
  -32,   15,    0, 5284,    0, 6236,    0,10734,   18, 4597,
    0, 6236, 6236,  399, 6236,    0, 9580,    0, 9653,  437,
    0,10734,  425, 1041,  363, 9664,    0,  203,  473,    0,
    4,   75,    0,  479,  101,    0,    0,   49,   49,   49,
  493,    0, 5369, 1372,  421, 9703,  429, 6236, 2271,  117,
  -24,    0, 6236,    0,    0,    0,    0, 6236, 6236, 6236,
 6236, 6236, 6236, 6236, 6236, 6236, 6236, 6236, 6236, 6236,
 6236, 6236, 6236, 6236, 6236, 6236,   76,    0, 5522, 6236,
 6236, 6236, 6236, 6236, 6236, 6236, 6236, 6236, 6236, 6236,
    0,   77,  197,    0,    0,    0,    0,    0, 6236, 6236,
   52,  -32, 9744,   86,    0,   24,  516,    0,  -32,    0,
 9835, 9915, 5646, 6236,    0,  252, 6236,10734,  518,  547,
    0, 1053,  295, 9954,    0,    0,    0,  298,    0,    0,
    0,    0,  566,    0, 6236,    0,    0,    5,    0,  152,
  311,    0,    0,   29,    0,    0,  181,  579,  564,   32,
   49,  998,  586,  584,    0,    0,  -61,    0,    0,    0,
    0,    0,    0, 6360,   49,    0,    0,    0,    0,    0,
    0,    0, 3324, 9999,    0,    0,    0, 6236,10817, 6236,
 6236, 6236, 6236, 5852, 3091, 5029, 3526, 3526, 3526, 3526,
  500,  500,  500,  500,  124,  124,  131,  131,  131,  145,
  145,  145,    0,   80, 2655, 2655, 2655, 2655, 2655, 2655,
 2655, 2655, 2655, 2655, 2655, 2655,  590,  591,  -32,   15,
  331,    0,  291, 5646,   13,10734,  552,10042,    0,  590,
    0, 5646,    0,   13,    0,  588,   49,    0, 1053,  606,
  604,10734,  611,10088,    0,    0,  329,  330,  603,  362,
    0,    0,  531,    0,10126,    0,  152,  152,  286,  625,
    0,    0,    0,  605,   49,  608,    0,    0,    0,    0,
  629,    0,  383,    0,    0,    0, 5760,    0, 5884,    0,
    0,  364,  580,10252,  548, 1278,  634,    0,    0,    0,
    0,    0, 5806, 2655,10297, 5921, 5578,   76,    0,    0,
    0,  -32,    0,    0,  321,  331,  555,  639,    0, 6236,
    0,    0,  -25,    0,    0,    0,  641,    0,    0, 4597,
    0,    0, 5998,    0,    0, 6236, 6236,    0,    0,  152,
  380, 3763,   34,  647,  353,    0,    0,    0,  385,  152,
  152,    0,    0,   49,    0,   32,  635,    0,   49,10734,
   49, 8259,  -73,    0, 6236,    0,    0,   99,    0,    0,
    0,    0,    0,    0,    0,    0,  655,  658,  660,  395,
    0,    0,    0,  106,  137,  370,  139,  136,    0,  663,
    0,    0, 5646, 5646,  331,  589,    0,  671,    0,    0,
10355,    0,  676, 6236, 6236,    0,    0,    0,    0,   49,
    0, 1053, 6236, 3848,  659,10734,   49,   48,    0,  656,
    0,    0,    0,  664,  666,    0, -241,  682,    0,  371,
  685,  684,    0,    0,   32,    0, 6236,    0,    0, 6122,
    0,    0,    0,  637,10382,    0,  670,  -33,    0,   72,
   49,  691,   49,  675,    0,  140,  -27,  427,  106,    0,
  437,  431,    0,    0,  680, 6236,  516,  699,  701,  671,
    0,  331,  595,    0,    0,    0,  651,10393,  390,    0,
    0,    0,10426,    0,    0,    0,    0,  391,   49,    0,
  391,  152,  424,    0,  -71,    0,  -69,    0,    0,  708,
  706,   -3,    0,  152,    0,  152,    0,  444, 2655,   49,
10734,    0,  646,  152,  106,  478,    0,    0,    0,    0,
  745,  750,  736,  757,  -11,  106,    0,  491,  739,  160,
   -7,  110,  740,    0,10828,    0,    0,    0,  665,    0,
  497,    0,    0,    0,  472, 5646,  453,    0,    0,   13,
    0,    0,  169,  752,  494, 6236,   48,  768,    0,  772,
    0,  755,  284,  756, 6236,  441,  -53,    0,  693, -241,
  509,  766,  331,    0,  482,    0,    0,    0,    0,    0,
  778,  783,  -11,  784,  -11,  106,  803,    0,  804,  805,
  809,  812,  818,  819,  820,  824,  825,  -11,   -9,    0,
   -6,  806,  152,  560,    0,  572,  826,    1,  152,    0,
  670,  437,  828,   13,    0,    0,  206,  832, 4597,    0,
    0,  829,  838,    0,    0,    0,    0,  830,    0, 9329,
    0,    0,    0,    0,    0,   10,  822,  152,    0,  152,
  152,  -11,  -49,  -11,    0,    0,  106,  106,  106,  571,
  136,  106,  106,  106,  106,  106,  170,  -11,  -11,    0,
  582,  152,    0,  833,  835, -241,  581,    0,  585,    0,
    0,  853,  839,  596, 6236,    0,    0,    0, 4180, 4180,
    0,    0,    0,  773,  592,  842,  152,    0,  597,    0,
    0,  -47,    0,  -34,  864,  451,  465,  865,  437,  136,
 -292,  -29,  -29,  870,  873,    0,  642,    0,  858,    0,
  152,  152,  880,  883,  826,  676, 6236,    0,  871,10462,
 4265,    0,    0,    0,    0,    0,    0,    0,  872,  152,
    0,  891,    0,  817,    0,   87,    0,    0,    0,  106,
    0,    0,  106,  106,  106,    0,    0,  152,    0,    0,
   -2, -241,    0,10506,    0,    0,    0,    0,    0,    0,
  612,    0,  152,    0,    0,  823,    0,  831,    0,    0,
  906,  -28,   93,   90,   96,    0,    0,    0,    0,  909,
  893, 4597,  633,  895,    0,  834,    0,  593,  918,  106,
   87,    0,    0,  837,   -2,    0,    0,  905,    0,    0,
    0,    0,   72,  924,    0,    0,    0,    0,  843,  929,
  932,    0,    0,   87,    0,  644,  942,  944,    0,  644,
    0,  945,  331,    0,    0,    0,  677,  946,    0,  867,
    0,  863,    0,
};
final static short yyrindex[] = {                         0,
    0, 1662,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 7939,    0,    0,    0,  788,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   25,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4388,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 7394, 6511,    0,
    0,    0,   84,  851,    0,  938, 1122,  179, 8550, 8560,
 8191,    0,  619,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 3971,    0,    0,    0, 7813,
 7560,    0,    0,    0,    0,    0,    0,  173,    0,    0,
    0,  936,    0,    0,    0,    0,    0,    0,    0,  694,
    0,    0,10767, 9279,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  180,    0,    0,    0,    0,    0,    0,
    0,    0,  958,    0,    0,    0, 3431,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -103,    0,    0,    0,    0,    0,  911,    0,
   68, 6635,    0,    0,    0,    0, 7993,    0, 7649,    0,
    0,    0,  971,    0,    0,    0,    0,   61,    0,  133,
 9072, 5204,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  477,
    0,  481,    0,  972,    0,    0,  125,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
    0,    0,    0, 2561, 2122,  559,  908, 1551, 1670, 2003,
 5238, 7689, 8987, 9101, 8899, 8936, 8648, 8757, 8811, 8292,
 8387, 8441,    0,    0,  599,  761, 1102, 1786, 1905, 2238,
 2465, 2904, 3343, 3774, 3779, 4490, 8082, 7141, 6764,    0,
    0,    0,  892,  971,    0,  921,    0,    0,    0,    0,
    0,  971,    0,    0,    0, 4682,    0, 9367, 9196,    0,
  976,  182,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3431,    0,    0,    0,    0,    0,   -5,    0,
    0,    0,    0,  211,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  977,    0,
    0,    0,10560,    0,    0,  689,    0,    0,    0,    0,
    0,    0,  618, 4699,    0, 3439, 3000,    0,    0,    0,
    0, 6888,    0,    0,  903,    0,    0,    0,    0,    0,
    0,    0, 7017,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  936,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  986,
    0,    0,    0,    0,    0,  477,    0,    0,    0,  485,
    0,  486,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  720,    0,    0,    0,  -16,    0,    0,
    0,    0,  971,  971,    0,    0,    0,  914,    0,    0,
    0,    0, 7270,  911,    0,    0,    0,    0,    0,    0,
 9402, 9236,    0,    0,    0,  135,    0,    0,    0,    0,
    0,    0,    0,  306,  122,    0,   42,    0,    0,  487,
    0,  972,    0,    0,  477,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -10,    0,    0,  -13,
  988,    0,  988,    0,    0,    0,    0,    0,    0,    0,
  111,    0,    0,    0,    0,    0, 7993,    0,    0,  915,
    0,    0,  689,    0,    0,    0,    0,    0, 7902, 2553,
    0,    0,    0,    0,    0,    0,    0,  993,    0,    0,
  993,    0, 3431,    0,    0,    0,    0,    0,    0,    0,
 1001,    0,    0,    0,    0,  977,    0,    0, 4907,    0,
  495,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1005,    0,    0,    0,    0,    0,    0,    0,  239,    0,
    0,    0,    0,    0,   37,    0,    0,    0,  689,    0,
    0,    0,    0,    0,    0,  971, 7523,    0,    0,    0,
    0,    0, 1543,    0, 3431, 1006,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   50,
    0,  507,    0,    0,  508,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  247,    0,    0,    0,    0,  -10,    0,    0,    0,
    0,  694,    0,    0,    0,    0,  746,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  520,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  356,    0,   42,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3431,    0,  546,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  111,   33,
    0,    0,    0,    0,    0,    0,  186,    0,  376,    0,
    0,    0,    0,    0,    0, 7270,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 2114,    0,  558,    0,
    0,    0,    0, 3431,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   42,    0,    0, 2992,    0,    0,    0,    0,    0,
 3431, 2446,    0,    0,    0, 3431,    0, 3431,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 3431,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 3431,    0,    0,    0,    0,    0,    0,
    0,    0,  999,    0,    0,    0,    0,    0, 3431,    0,
    0, 2885,    0,    0,    0, 1091,    0,    0,    0, 1210,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 3431,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,   -1,  751,  753,    0, -217,    0,    0,
    0,  563,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -414,    0,    0,    0,    0,
    0,    0,  -40,  627,    0,    0,    0,    0,  885,    0,
  378,    0,  446,  259,    0,    0,    0,    0,    0,    0,
    0,    0,  -14,    0,    0,    0,    0,    0,    0,  138,
    0,    0,  667,    0,    0, -328,    0,    0, -728,    0,
    0,    0,    0,  488,    0,    0,    0,    0,  648,  668,
    0,    0, -408, -461,  166,  213,  510,    0,  -82, -260,
 -271, -847,  159, -363,  570, -451,  339,    0,    0,    0,
    0,    0,  400, -307,    0,   79,  827,  933,    0,    0,
    0,  322, -490,    0,    0,  542,    0, -155,  511,    0,
    0,  600,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  379,    0,    0,    0, -215,    0,    0,
    0,  -18, -355,    0,    0,    0,    0,   95,    0,    0,
    0,    0,  553,    0,    0,    0,    0,  268,    0,    0,
    0,    0,    0,  -21,  -20,    0,  575,    0,    0,    0,
    0,  631,    0,    0,    0,    0,    0,    0,    0,
};
final static int YYTABLESIZE=11115;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                        115,
  115,   77,  131,  132,  153,  130,  348,  506,  448,  127,
  635,  229,  638,  638,  307,  229,  635,  584,  348,  144,
  361,  705,  158,  467,  468,  227,  140,  140,  718,  411,
  140,  138,  138,  138,  691,  360,  635,  635,  360,   72,
  161,  535,  577,  383,  635,  140,  438,  805,   72,  780,
  231,  333,  706,  360,  447,  688,  897,  833,  229,   72,
  422,  244,  861,  924,  618,  524,  285,   72,  298,  396,
  230,  754,  395,  813,  230,  853,  245,  312,  232,  198,
  312,  862,  189,   72,   72,  609,  937,  198,  855,  164,
  230,  544,  105,  617,  312,  312,  539,  525,  296,  312,
  297,  251,  251,  423,  251,  284,  550,  553,  284,  140,
  239,   72,   72,  638,  637,   72,  619,  651,  268,  251,
  898,   72,  284,  284,  464,  166,  265,  464,  889,  312,
  912,  638,  911,  269,  638,  440,  913,  638,  246,  441,
  566,  464,  464,  900,  271,  167,  115,  566,  441,  175,
  306,  566,   84,  115,  115,  115,  545,  284,  452,  272,
  206,  312,  683,  452,  687,  204,  201,  206,  202,  203,
  205,  134,  204,  248,  178,  250,  464,  205,  250,  222,
  579,  136,  582,  646,  721,  131,  132,  137,  130,  284,
  728,  248,  127,  250,  387,  580,  388,  583,  647,  223,
  349,  350,  368,  724,  141,  588,  589,  285,  464,  298,
  826,  142,  349,  350,  349,  350,  246,  452,  725,  327,
  452,  398,  327,  216,  397,  245,  105,  778,  779,  778,
  779,  246,  561,  143,  562,  563,  327,  327,  216,  296,
  245,  297,  778,  779,  105,  224,  169,  452,  681,  452,
  144,  145,  652,  168,  214,  684,  685,  686,  685,  686,
  694,  743,  695,  140,  140,  115,  115,  778,  779,  214,
  699,  327,  512,  169,  685,  686,  639,  639,  228,  229,
  115,  286,  241,  287,  288,  707,  289,  290,  291,  227,
  128,  227,  170,  412,  708,  138,  157,  241,  312,  312,
  312,  418,  171,  327,  692,  128,  816,  817,  105,  113,
  600,   32,  160,  368,  736,  230,  172,  806,  439,  115,
   32,  368,   32,  613,  709,  861,  284,  284,  432,  584,
  292,   32,  422,  349,  350,  710,  434,  113,  230,   32,
  636,  140,  349,  350,  862,  910,  648,  294,  295,  198,
  360,  711,  115,  113,  113,   32,   32,  198,  733,  783,
  140,  312,  819,  138,  392,  788,  726,  781,  712,  713,
  714,  715,  716,  717,  787,  423,  428,  639,  791,  173,
  115,  126,  347,   32,   32,  113,  675,   32,  401,  284,
  890,  360,  312,   32,  808,  639,  810,  811,  639,  239,
  227,  639,  462,  789,  567,  461,  131,  132,  464,  130,
  207,  575,  531,  127,  239,  727,   84,  207,  830,  126,
  284,  517,  286,  477,  287,  288,  476,  289,  290,  291,
  452,  207,  452,  452,  126,  452,  452,  452,  253,  464,
  327,  327,  327,  851,  234,  451,  778,  779,  529,  169,
  169,  179,  180,  181,  441,   28,   29,  389,  236,  115,
  542,  115,  105,  238,  115,   34,  115,  869,  870,  738,
  739,  292,  368,  368,  257,  489,  490,  491,  492,  493,
  494,  392,  392,  259,  696,  261,  884,  476,  294,  295,
  860,  857,  225,  226,  635,  452,  452,  452,  751,  752,
  517,  822,  823,  327,  896,  858,  792,  793,  635,  390,
   61,   62,   63,   64,   65,  115,  263,  429,  441,  905,
  429,  435,  115,  115,  435,  434,  433,  380,  434,  433,
  380,  264,  605,  279,  327,  432,  206,  804,  432,  270,
  115,  204,  201,  300,  202,  203,  205,  190,  378,  351,
  190,  378,  700,  302,  392,  362,  115,  558,  115,  559,
  191,  864,  865,  191,  392,  392,  103,  104,  373,  106,
  107,  108,  109,  110,  111,  112,  375,  660,  118,  119,
  120,  121,  122,  123,  124,  847,  194,  133,  892,  194,
  376,  893,  894,  895,  115,  854,  286,  138,  195,  286,
  379,  195,  286,  382,  147,  149,  384,  152,  602,  156,
  748,  685,  686,  116,  117,  115,  286,  286,  394,  399,
  875,  286,  400,  766,  881,  368,  408,  409,  882,  430,
  431,  176,  169,  169,  169,  886,  433,  888,  923,  254,
  114,  114,  254,  436,  445,  449,  452,  453,  349,  350,
  454,  286,  286,  458,  459,  465,  254,  254,  281,  469,
  903,  281,  115,  460,  470,  471,  473,  233,  475,  484,
  485,  154,  487,  510,  515,  281,  281,  519,  759,  520,
  914,  526,  286,  286,  815,  540,  547,  235,  548,  821,
  549,  254,  824,  825,  571,  557,  241,  572,  242,  573,
  574,  581,  929,  585,  248,  152,  392,  254,  697,  932,
  281,  591,  349,  350,  592,  595,  612,  607,  392,  662,
  392,  623,  614,  254,  616,  625,  624,  626,  392,  632,
  634,  643,  645,  952,  649,  282,  653,  796,  654,  657,
  304,  658,  281,  668,  670,  309,  677,  682,  689,  690,
  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  252,
  698,  335,  336,  337,  338,  339,  340,  341,  342,  343,
  344,  345,  346,  701,  199,  200,  207,  266,  395,  730,
  702,  356,  358,  703,  273,  276,  278,  704,  722,  723,
  729,  261,  731,  732,  261,  152,  372,  734,  745,  374,
  741,  742,  746,  747,  749,  755,  757,  392,  261,  261,
  286,  286,  286,  392,  366,  366,  758,  385,  366,  366,
  366,  366,  366,  366,  366,  286,  286,  760,  761,  879,
  762,  764,  767,  768,  769,  366,  366,  366,  770,  366,
  366,  771,  392,  261,  392,  392,  414,  772,  773,  774,
  254,  254,  254,  775,  776,  786,  782,  784,  790,  369,
  423,  795,  424,  425,  426,  427,  392,  785,  798,  281,
  366,  366,  807,  286,  818,  261,  834,  797,  801,  829,
  835,  465,  837,  831,  465,  832,  838,  848,  839,  849,
  917,  392,  850,  856,  852,  859,  402,  405,  465,  465,
  866,  366,  366,  867,  286,  763,  152,  765,  868,  779,
  871,  415,  872,  254,  152,  392,  392,  661,  946,  876,
  777,  885,  883,  904,  489,  490,  491,  492,  493,  494,
  495,  887,  281,  465,  392,  302,  909,  907,  302,  915,
  916,  302,  918,  919,  254,  908,  920,  921,  922,  496,
  429,  925,  392,  928,  931,  302,  302,  933,  934,  480,
  302,  482,  935,  281,  812,  465,  814,  392,  467,  938,
  369,  467,  942,  943,  948,  945,  949,  953,  369,  951,
  827,  828,  336,  405,  247,  467,  467,  661,  430,   84,
  302,  302,  521,  412,  489,  490,  491,  492,  493,  494,
  495,  202,  375,  413,  147,  152,  201,  376,  248,  536,
  229,  273,  261,  261,  261,  149,  373,  220,  103,  496,
  467,  302,  302,  153,  206,  190,  148,  150,  140,  204,
  201,  188,  202,  203,  205,  104,  247,  565,  186,  366,
  366,  366,  274,  419,  744,  420,  680,  195,  845,  197,
  185,  472,  467,  503,  366,  366,  366,  366,  366,  366,
  366,  366,  366,  366,  366,  152,  152,  944,  659,  532,
  926,  930,  644,  504,  590,  261,  356,  598,  802,  756,
   71,  189,  820,  267,  386,  603,  628,  656,  597,  260,
  554,  209,  402,  873,  627,  405,  556,  405,    0,    0,
    0,    0,  366,  209,    0,    0,  261,    0,    0,  629,
    0,  188,  631,   71,   71,    0,   71,    0,    0,   71,
   71,    0,    0,   71,    0,   71,    0,    0,    0,  369,
  369,    0,  262,  366,    0,  262,    0,    0,  655,   71,
    0,    0,    0,    0,   71,    0,  405,    0,    0,  262,
  262,  336,  468,  608,  610,  468,    0,    0,    0,  302,
  302,  302,    0,    0,    0,  465,    0,    0,    0,  468,
  468,  402,    0,    0,  302,  302,   71,    0,    0,    0,
    0,    0,    0,    0,  262,    0,    0,  273,    0,  273,
    0,    0,    0,    0,    0,    0,  465,    0,    0,   70,
    0,    0,    0,   71,  468,   71,   71,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  262,    0,  152,    0,
    0,    0,  302,    0,    0,  679,    0,    0,  248,    0,
    0,    0,   70,   70,    0,   70,  468,  750,   70,   70,
    0,    0,   70,    0,   70,    0,  405,    0,    0,  182,
  183,  184,  467,  302,    0,    0,    0,    0,   70,    0,
    0,    0,    0,   70,  186,  187,  191,  192,  193,  194,
  196,  198,  199,  200,  207,    0,    0,    0,    0,    0,
    0,    0,  369,  467,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  610,    0,   70,  210,  211,  212,  213,
  214,  215,  216,  217,  218,  219,  220,    0,  210,  211,
  212,  213,  214,  215,  216,  217,  218,  219,  220,    0,
    0,    0,   70,    0,   70,   70,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   71,   71,   71,
   71,   71,    0,  407,    0,   71,    0,  840,    0,    0,
    0,    0,    0,  262,  262,  262,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,   71,   71,   71,   71,  874,
   71,    0,  501,    0,   71,   71,   71,   71,   71,   71,
   71,   71,   71,   71,   71,    0,   71,   71,   71,   71,
   71,   71,   71,    0,   71,   71,  262,   71,   71,   71,
   71,   71,   71,    0,    0,    0,    0,   71,   71,   71,
   71,   71,   71,    0,    0,    0,  468,   71,   71,   71,
   71,   71,   71,   71,    0,   71,    0,  262,    0,    0,
   71,    0,  285,    0,  298,   71,   70,   70,   70,   70,
   70,    0,    0,    0,   70,    0,    0,  468,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  296,    0,  297,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,   70,   70,   70,   70,    0,   70,
    0,    0,    0,   70,   70,   70,   70,   70,   70,   70,
   70,   70,   70,   70,    0,   70,   70,   70,   70,   70,
   70,   70,  184,   70,   70,    0,   70,   70,   70,   70,
   70,   70,    0,    0,    0,    0,   70,   70,   70,   70,
   70,   70,    0,    0,    0,    0,   70,   70,   70,   70,
   70,   70,   70,    0,   70,  184,  184,    0,  184,   70,
    0,  184,  184,    0,   70,  184,    0,  184,  303,    0,
    0,  303,    0,    0,  303,    0,    0,    0,    0,    0,
    0,  184,    0,    0,    0,    0,  184,    0,  303,  303,
  488,    0,    0,  303,    0,    0,    0,  489,  490,  491,
  492,  493,  494,  495,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  184,    0,
    0,    0,  496,  303,  303,    0,    0,    0,    0,    0,
    0,    0,    0,  497,  498,  499,  500,    0,    0,    0,
    0,    1,    0,    0,    0,  184,    0,  184,  184,    0,
    0,    0,    0,    0,  303,  303,    0,  286,    0,  287,
  288,    0,  289,  290,  291,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    2,    2,    0,    2,    0,    0,
    2,    2,    0,    0,    2,    0,    2,  300,    0,    0,
  300,    0,    0,  300,    0,    0,    0,    0,    0,    0,
    2,    0,    0,    0,    0,    2,  292,  300,  300,    0,
    0,    0,  300,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  293,  294,  295,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    2,    0,    0,
    0,    0,  300,  300,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    2,    0,    0,    2,    0,    0,
    0,    0,    0,  300,  300,    0,    0,    0,    0,  184,
  184,  184,  184,  184,    0,    0,    0,  184,    0,    0,
    0,    0,  303,  303,  303,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  263,  303,  303,  263,
  184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  184,  263,  263,  184,  184,  184,  184,  184,
  184,    0,  184,    0,    0,    0,  184,  184,  184,  184,
  184,  184,  184,  184,  184,  184,  184,    0,  184,  184,
  184,  184,  184,  184,  184,  303,  184,  184,  263,  184,
  184,  184,  184,  184,  184,    0,    0,    0,    0,  184,
  184,  184,  184,  184,  184,    0,    0,    0,    0,  184,
  184,  184,  184,  184,  184,  184,  303,  184,    0,    0,
  263,    0,  184,    0,    0,    0,    0,  184,    2,    2,
    2,    2,    2,    0,    0,    0,    2,    0,    0,    0,
    0,  300,  300,  300,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  264,  300,  300,  264,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,  264,  264,    0,    2,    2,    2,    2,    2,
    0,    2,    0,    0,    0,    2,    2,    2,    2,    0,
    2,    0,    2,    0,    2,    0,    0,    2,    0,    0,
    0,    2,    2,    2,  300,    2,    2,  264,    2,    2,
    2,    2,    2,    2,    0,    0,    0,    0,    2,    2,
    2,    2,    2,    2,    0,    0,    0,    0,    2,    2,
    2,    2,    2,    2,    2,  300,    2,   12,   74,  264,
   72,    2,    0,   75,   69,    0,    2,   10,    0,   11,
  301,    0,    0,  301,    0,    0,  301,  263,  263,  263,
    0,    0,    0,   70,    0,    0,    0,    0,   23,    0,
  301,  301,    0,    0,    0,  301,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,    0,    0,    0,  301,  301,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  263,    0,    0,    0,    0,    0,    0,   71,    0,    0,
   13,    0,    0,    0,    0,    0,  301,  301,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  263,    0,    0,    0,    0,   11,   11,    0,   11,
    0,    0,   11,   11,    0,    0,   11,    0,   11,    0,
    0,    0,  287,    0,    0,  287,  264,  264,  264,    0,
    0,    0,   11,    0,    0,    0,    0,   11,    0,  287,
  287,    0,    0,    0,  287,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   11,
    0,    0,    0,    0,  287,  287,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  264,
    0,    0,    0,    0,    0,    0,   11,    0,  173,   11,
    0,    0,    0,    0,    0,  287,  287,    0,    0,    0,
    0,    4,    5,    6,    7,    8,    0,    0,    0,    9,
  264,    0,    0,    0,  301,  301,  301,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  265,  301,
  301,  265,   14,   15,   16,   17,   18,   19,   20,   21,
   22,   24,   25,   26,   27,  265,  265,    0,   28,   29,
   30,   31,   32,    0,   33,    0,    0,    0,   34,   35,
   36,   37,    0,   38,    0,   39,    0,   40,    0,    0,
   41,    0,    0,    0,   42,   43,   44,  301,   45,   46,
  265,   47,   48,   49,   50,   51,   52,    0,    0,    0,
    0,   53,   54,   55,   56,   57,   58,    0,    0,    0,
    0,   59,   60,   61,   62,   63,   64,   65,  301,   66,
    0,  285,  265,  298,   67,    0,  305,    0,    0,   68,
   11,   11,   11,   11,   11,    0,    0,    0,   11,    0,
    0,    0,    0,  287,  287,  287,    0,    0,    0,    0,
    0,    0,    0,  296,    0,  297,    0,    0,  287,  287,
    0,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,    0,    0,    0,   11,   11,   11,
   11,   11,    0,   11,    0,    0,    0,   11,   11,   11,
   11,    0,   11,    0,   11,    0,   11,    0,    0,   11,
  173,  173,  173,   11,   11,   11,  287,   11,   11,    0,
   11,   11,   11,   11,   11,   11,    0,    0,    0,    0,
   11,   11,   11,   11,   11,   11,    0,    0,    0,    0,
   11,   11,   11,   11,   11,   11,   11,  287,   11,   11,
    0,   11,    0,   11,   11,   11,    0,    0,   11,    0,
   11,    0,    0,    0,    0,    0,    0,    0,    0,  265,
  265,  265,    0,    0,   11,  266,    0,    0,  266,   11,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  266,  266,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   11,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  266,    0,    0,
    0,    0,  265,    0,    0,    0,    0,    0,   11,    0,
  171,   11,    0,    0,    0,    0,  286,    0,  287,  288,
    0,  289,  290,  291,    0,   11,   11,    0,   11,  266,
    0,   11,   11,  265,    0,   11,    0,   11,    0,    0,
    0,  285,    0,    0,  285,    0,    0,    0,    0,    0,
    0,   11,    0,    0,    0,    0,   11,    0,  285,  285,
    0,    0,    0,  285,    0,  292,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  294,  295,    0,    0,    0,    0,   11,    0,
    0,    0,    0,  285,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   11,    0,    0,   11,    0,
    0,    0,    0,    0,  285,  285,    0,    0,    0,    0,
    0,  206,  190,    0,    0,    0,  204,  201,    0,  202,
  203,  205,   11,   11,   11,   11,   11,    0,    0,    0,
   11,    0,    0,    0,  195,    0,  197,  185,    0,    0,
    0,    0,    0,    0,    0,    0,  266,  266,  266,    0,
    0,    0,    0,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,    0,    0,  189,   11,
   11,   11,   11,   11,    0,   11,    0,    0,    0,   11,
   11,   11,   11,    0,   11,    0,   11,    0,   11,    0,
    0,   11,  171,  171,  171,   11,   11,   11,  188,   11,
   11,    0,   11,   11,   11,   11,   11,   11,    0,  266,
    0,    0,   11,   11,   11,   11,   11,   11,    0,    0,
    0,    0,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,    0,   11,    0,   11,    0,    0,
  266,    0,  285,  285,  285,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  285,  285,    0,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   24,   24,   24,   11,   11,   11,   11,
   11,    0,   11,    0,    0,    0,   11,   11,   11,   11,
    0,   11,    0,   11,    0,   11,    0,    0,   11,    0,
    0,    0,   11,   11,   11,  285,   11,   11,    0,   11,
   11,   11,   11,   11,   11,    0,    0,    0,    0,   11,
   11,   11,   11,   11,   11,    0,    0,    0,    0,   11,
   11,   11,   11,   11,   11,   11,  285,   11,   11,    0,
   11,    0,   11,   11,   11,    0,    0,   11,    0,   11,
    0,  186,  187,  191,  192,  193,  194,  196,  198,  199,
  200,  207,    0,   11,  267,    0,    0,  267,   11,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  267,  267,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  267,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   11,   11,    0,   11,  267,    0,
   11,   11,    0,    0,   11,    0,   11,    0,    0,    0,
  279,    0,    0,  279,    0,    0,    0,    0,    0,    0,
   11,    0,    0,    0,    0,   11,    0,  279,  279,    0,
    0,    0,  279,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   11,    0,    0,
    0,    0,  279,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   11,    0,    0,   11,    0,    0,
    0,    0,    0,    0,  279,    0,    0,  206,  190,    0,
    0,    0,  204,  201,    0,  202,  203,  205,    0,    0,
    0,   11,   11,   11,   11,   11,    0,    0,    0,   11,
  195,    0,  197,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  267,  267,  267,    0,    0,
    0,    0,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,  183,  183,  183,   11,   11,
   11,   11,   11,    0,   11,    0,    0,    0,   11,   11,
   11,   11,    0,   11,    0,   11,    0,   11,    0,    0,
   11,    0,    0,    0,   11,   11,   11,    0,   11,   11,
    0,   11,   11,   11,   11,   11,   11,    0,  267,    0,
    0,   11,   11,   11,   11,   11,   11,    0,    0,    0,
    0,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,    0,   11,    0,   11,    0,    0,  267,
    0,  279,  279,  279,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  279,  279,    0,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,    0,    0,  187,   11,   11,   11,   11,   11,
    0,   11,    0,    0,    0,   11,   11,   11,   11,    0,
   11,    0,   11,    0,   11,    0,    0,   11,    0,    0,
    0,   11,   11,   11,  279,   11,   11,    0,   11,   11,
   11,   11,   11,   11,    0,    0,    0,    0,   11,   11,
   11,   11,   11,   11,    0,    0,    0,    0,   11,   11,
   11,   11,   11,   11,   11,  279,   12,   74,    0,   72,
    0,   11,   75,   69,    0,    0,   10,    0,   11,  191,
  192,  193,  194,  196,  198,  199,  200,  207,    0,    0,
    0,    0,   70,  268,    0,    0,  268,   23,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  268,  268,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  268,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   71,    0,    0,   13,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   11,   11,    0,   11,  268,    0,   11,
   11,    0,    0,   11,    0,   11,    0,    0,    0,  277,
    0,    0,  277,    0,    0,    0,    0,    0,    0,   11,
    0,    0,    0,    0,   11,    0,  277,  277,    0,    0,
    0,  277,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   11,    0,    0,    0,
    0,  277,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   11,    0,    0,   11,    0,    0,    0,
    0,    0,  206,  277,    0,    0,    0,  204,  201,    0,
  202,  203,  205,    0,    0,    0,    0,    0,    0,    0,
    4,    5,    6,    7,    8,  195,    0,  197,    9,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  268,  268,  268,    0,    0,    0,
    0,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   24,   25,   26,   27,    0,    0,    0,   28,   29,   30,
   31,   32,    0,   33,    0,    0,    0,   34,   35,   36,
   37,    0,   38,    0,   39,    0,   40,    0,    0,   41,
    0,    0,    0,   42,   43,   44,    0,   45,   46,    0,
   47,   48,   49,   50,   51,   52,    0,  268,    0,    0,
   53,   54,   55,  417,   57,   58,    0,    0,    0,    0,
   59,   60,   61,   62,   63,   64,   65,   11,   11,   11,
   11,   11,    0,   67,    0,   11,    0,    0,  268,    0,
  277,  277,  277,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  277,    0,    0,   11,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,    0,    0,    0,   11,   11,   11,   11,   11,    0,
   11,    0,    0,    0,   11,   11,   11,   11,    0,   11,
    0,   11,    0,   11,    0,    0,   11,    0,    0,    0,
   11,   11,   11,  277,   11,   11,    0,   11,   11,   11,
   11,   11,   11,    0,    0,    0,    0,   11,   11,   11,
   11,   11,   11,    0,    0,    0,    0,   11,   11,   11,
   11,   11,   11,   11,  277,   12,   74,    0,   72,    0,
   11,   75,   69,    0,    0,   10,    0,   11,  196,  198,
  199,  200,  207,    0,  269,    0,    0,  269,    0,  270,
  541,   70,  270,    0,    0,    0,   23,    0,    0,    0,
    0,  269,  269,    0,    0,    0,  270,  270,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
    0,    0,    0,    0,    0,    0,  269,    0,    0,    0,
    0,  270,    0,    0,    0,    0,    0,    0,    0,    0,
   12,   74,    0,   72,    0,   71,   75,   69,   13,    0,
   10,    0,   11,    0,    0,    0,    0,    0,  269,    0,
    0,    0,    0,  270,    0,  604,   70,    0,    0,    0,
    0,   23,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   71,    0,    0,   13,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  337,  337,    0,
  337,  337,  337,  337,  337,  337,  337,  337,    0,    4,
    5,    6,    7,    8,    0,    0,    0,    9,  337,  337,
  337,    0,  337,  337,    0,  269,  269,  269,    0,    0,
  270,  270,  270,    0,    0,    0,    0,    0,    0,    0,
   14,   15,   16,   17,   18,   19,   20,   21,   22,   24,
   25,   26,   27,  337,  337,    0,   28,   29,   30,   31,
   32,    0,   33,    0,    0,    0,   34,   35,   36,   37,
    0,   38,    0,   39,    0,   40,    0,    0,   41,    0,
    0,    0,   42,   43,  337,  337,   45,   46,  269,   47,
   48,   49,   50,  270,    4,    5,    6,    7,    8,   53,
   54,   55,    9,    0,    0,    0,    0,    0,    0,   59,
   60,   61,   62,   63,   64,   65,    0,    0,    0,  269,
    0,    0,   67,    0,  270,   14,   15,   16,   17,   18,
   19,   20,   21,   22,   24,   25,   26,   27,    0,    0,
    0,   28,   29,   30,   31,   32,    0,   33,    0,    0,
    0,   34,   35,   36,   37,    0,   38,    0,   39,    0,
   40,    0,    0,   41,    0,    0,    0,   42,   43,    0,
    0,   45,   46,    0,   47,   48,   49,   50,    0,    0,
    0,    0,    0,    0,   53,   54,   55,    0,    0,    0,
    0,    0,    0,    0,   59,   60,   61,   62,   63,   64,
   65,    0,   12,   74,    0,   72,    0,   67,   75,   69,
    0,    0,   10,    0,   11,    0,    0,    0,    0,    0,
    0,    0,  337,  337,  337,    0,    0,  842,   70,    0,
    0,    0,    0,   23,    0,    0,    0,  337,  337,  337,
  337,  337,  337,  337,  337,  337,  337,  337,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  337,    0,   12,   74,    0,
   72,    0,   71,   75,   69,   13,    0,   10,    0,   11,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  878,   70,    0,    0,  337,    0,   23,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  336,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   71,    0,    0,
   13,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  383,  383,    0,    0,  383,  383,
  383,  383,  383,  383,  383,    0,    4,    5,    6,    7,
    8,    0,    0,    0,    9,  383,  383,  383,    0,  383,
  383,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   15,   16,
   17,   18,   19,   20,   21,   22,   24,   25,   26,   27,
  383,  383,    0,   28,   29,   30,   31,   32,    0,   33,
    0,    0,    0,   34,   35,   36,   37,    0,   38,    0,
   39,    0,   40,    0,    0,   41,    0,    0,    0,   42,
   43,  383,  383,   45,   46,    0,   47,   48,   49,   50,
    0,    4,    5,    6,    7,    8,   53,   54,   55,    9,
  271,    0,    0,  271,    0,    0,   59,   60,   61,   62,
   63,   64,   65,    0,    0,    0,    0,  271,  271,   67,
    0,    0,   14,   15,   16,   17,   18,   19,   20,   21,
   22,   24,   25,   26,   27,    0,    0,    0,   28,   29,
   30,   31,   32,    0,   33,    0,    0,    0,   34,   35,
   36,   37,  271,   38,    0,   39,    0,   40,    0,    0,
   41,    0,    0,    0,   42,   43,    0,    0,   45,   46,
    0,   47,   48,   49,   50,    0,    0,    0,    0,    0,
    0,   53,   54,   55,  271,    0,    0,    0,    0,    0,
    0,   59,   60,   61,   62,   63,   64,   65,    0,   12,
   74,    0,   72,    0,   67,   75,   69,    0,    0,   10,
    0,   11,    0,    0,    0,    0,    0,    0,    0,  383,
  383,  383,    0,    0,    0,   70,    0,    0,    0,    0,
   23,    0,    0,    0,  383,  383,  383,  383,  383,  383,
  383,  383,  383,  383,  383,  386,  386,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  383,    0,   20,   20,    0,   20,    0,   71,
   20,   20,   13,    0,   20,    0,   20,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  283,
   20,    0,  283,  383,    0,   20,    0,    0,    0,    0,
    0,  271,  271,  271,    0,    0,  283,  283,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   20,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  283,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   20,    0,    0,   20,    0,    0,
    0,    0,    0,    0,  271,    0,    0,    0,    0,    0,
    0,    0,    0,  283,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   12,   74,    0,   72,
    0,    0,   75,   69,    0,  271,   10,    0,   11,    0,
    0,    0,    0,    4,    5,    6,    7,    8,    0,    0,
    0,    9,  146,    0,    0,    0,    0,   23,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   14,   15,   16,   17,   18,   19,
   20,   21,   22,   24,   25,   26,   27,    0,    0,   73,
   28,   29,   30,   31,   32,    0,   33,    0,    0,    0,
   34,   35,   36,   37,    0,   38,    0,   39,    0,   40,
    0,    0,   41,    0,    0,    0,   42,   43,    0,   13,
   45,   46,    0,   47,   48,   49,   50,    0,   20,   20,
   20,   20,   20,   53,   54,   55,   20,  253,    0,    0,
  253,    0,    0,   59,   60,   61,   62,   63,   64,   65,
  283,  283,  283,    0,  253,  253,   67,    0,    0,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,    0,    0,    0,   20,   20,   20,   20,   20,
    0,   20,    0,    0,    0,   20,   20,   20,   20,  253,
   20,    0,   20,    0,   20,    0,    0,   20,    0,    0,
    0,   20,   20,    0,    0,   20,   20,    0,   20,   20,
   20,   20,    0,  283,    0,    0,    0,    0,   20,   20,
   20,  253,    0,    0,    0,    0,    0,    0,   20,   20,
   20,   20,   20,   20,   20,    0,    0,    0,    0,    0,
    0,   20,    0,    0,  283,    0,    0,    0,    0,    0,
    4,    5,    6,    7,    8,  206,    0,    0,    9,    0,
  204,  201,    0,  202,  203,  205,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  195,    0,
  197,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   24,   25,   26,    0,    0,    0,    0,   28,   29,   30,
   31,   32,   12,   74,    0,   72,    0,   34,   75,   69,
    0,    0,   10,    0,   11,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  148,    0,
    0,    0,    0,   23,    0,    0,    0,    0,    0,    0,
    0,   54,   55,    0,    0,    0,    0,    0,    0,    0,
   59,   60,   61,   62,   63,   64,   65,    0,  253,  253,
  253,    0,    0,   67,    0,   73,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   12,   74,    0,
   72,    0,    0,   75,   69,   13,    0,   10,    0,   11,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  151,    0,    0,    0,    0,   23,    0,
    0,  253,    0,    0,    0,    0,    0,    0,    0,    0,
  383,  383,    0,    0,    0,  383,  383,    0,  383,  383,
  383,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   73,    0,  253,  383,    0,  383,  383,    0,    0,    0,
    0,    0,    0,    0,    0,  304,    0,    0,  304,    0,
    0,  304,    0,    0,    0,    0,    0,    0,    0,    0,
   13,    0,    0,    0,    0,  304,  304,  383,    0,    0,
  304,    0,    0,    0,    0,    0,    0,  191,  192,  193,
  194,  196,  198,  199,  200,  207,   12,   74,    0,   72,
    0,    0,   75,   69,  240,    0,   10,  383,   11,    0,
  304,  304,    0,    0,    0,    0,    4,    5,    6,    7,
    8,    0,    0,    0,    9,    0,    0,   23,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  304,  304,    0,    0,    0,    0,   14,   15,   16,
   17,   18,   19,   20,   21,   22,   24,   25,   26,   73,
    0,    0,    0,   28,   29,   30,   31,   32,    0,    0,
    0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
    0,   12,   74,    0,   72,    0,  281,   75,   69,   13,
    0,   10,    0,   11,    0,    0,    0,    0,    0,    0,
    0,    4,    5,    6,    7,    8,    0,   54,   55,    9,
    0,    0,   23,    0,    0,    0,   59,   60,   61,   62,
   63,   64,   65,    0,    0,    0,    0,    0,    0,   67,
    0,    0,   14,   15,   16,   17,   18,   19,   20,   21,
   22,   24,   25,   26,   73,  383,  383,  383,   28,   29,
   30,   31,   32,    0,    0,    0,    0,    0,   34,    0,
  383,  383,  383,  383,  383,  383,  383,  383,  383,  383,
  383,  386,  386,    0,   13,    0,    0,    0,    0,  304,
  304,  304,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   54,   55,  304,  304,  304,  304,  304,  304,
    0,   59,   60,   61,   62,   63,   64,   65,   52,    0,
    0,    0,    0,    0,   67,    0,    0,    0,    0,    0,
    4,    5,    6,    7,    8,    0,    0,    0,    9,    0,
    0,    0,    0,    0,   12,   74,    0,   72,    0,  334,
   75,   69,  304,    0,   10,    0,   11,    0,    0,    0,
    0,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   24,   25,   26,    0,    0,   23,    0,   28,   29,   30,
   31,   32,    0,  304,    0,    0,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  206,  190,    0,   73,    0,  204,
  201,    0,  202,  203,  205,    4,    5,    6,    7,    8,
    0,   54,   55,    9,    0,    0,    0,  195,    0,  197,
   59,   60,   61,   62,   63,   64,   65,   13,    0,    0,
    0,    0,    0,   67,    0,    0,   14,   15,   16,   17,
   18,   19,   20,   21,   22,   24,   25,   26,    0,    0,
    0,  189,   28,   29,   30,   31,   32,    0,   12,   74,
    0,   72,   34,  367,   75,   69,    0,    0,   10,    0,
   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  188,    0,    0,    0,    0,    0,    0,    0,   23,
    0,    0,    0,    0,    0,    0,   54,   55,    0,    0,
    0,    0,    0,    0,    0,   59,   60,   61,   62,   63,
   64,   65,    0,    0,    0,    0,    0,    0,   67,    0,
    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   13,    0,    0,    0,    0,    0,    0,    4,    5,
    6,    7,    8,    0,    0,    0,    9,    0,    0,    0,
    0,    0,   12,   74,    0,   72,    0,  479,   75,   69,
    0,    0,   10,    0,   11,    0,    0,    0,    0,   14,
   15,   16,   17,   18,   19,   20,   21,   22,   24,   25,
   26,    0,    0,   23,    0,   28,   29,   30,   31,   32,
    0,    0,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,  206,  190,    0,    0,    0,  204,  201,    0,
  202,  203,  205,    0,    0,   73,  191,  192,  193,  194,
  196,  198,  199,  200,  207,  195,    0,  197,  185,   54,
   55,    0,    0,    0,    0,    0,    0,    0,   59,   60,
   61,   62,   63,   64,   65,   13,    0,    0,  206,  190,
    0,   67,    0,  204,  201,    0,  202,  203,  205,  189,
    0,    0,    4,    5,    6,    7,    8,    0,    0,    0,
    9,  195,    0,  197,    0,    0,   12,   74,    0,   72,
    0,  481,   75,   69,    0,    0,   10,    0,   11,  188,
    0,    0,    0,   14,   15,   16,   17,   18,   19,   20,
   21,   22,   24,   25,   26,  189,    0,   23,    0,   28,
   29,   30,   31,   32,    0,    0,    0,  206,  190,   34,
    0,    0,  204,  201,    0,  202,  203,  205,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
  195,    0,  197,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   54,   55,    0,    0,    0,    0,    0,
    0,    0,   59,   60,   61,   62,   63,   64,   65,   13,
    0,    0,    0,    0,  189,   67,    4,    5,    6,    7,
    8,    0,    0,    0,    9,    0,    0,    0,    0,    0,
   12,   74,    0,   72,    0,  530,   75,   69,    0,    0,
   10,    0,   11,    0,  188,    0,    0,   14,   15,   16,
   17,   18,   19,   20,   21,   22,   24,   25,   26,    0,
    0,   23,    0,   28,   29,   30,   31,   32,  183,  184,
    0,    0,    0,   34,    0,    0,    0,    0,    0,    0,
    0,    0,  186,  187,  191,  192,  193,  194,  196,  198,
  199,  200,  207,   73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,   55,    0,
    0,    0,    0,    0,    0,    0,   59,   60,   61,   62,
   63,   64,   65,   13,    0,    0,    0,    0,    0,   67,
  191,  192,  193,  194,  196,  198,  199,  200,  207,    0,
    4,    5,    6,    7,    8,    0,    0,    0,    9,    0,
    0,    0,    0,    0,   12,   74,    0,   72,    0,  630,
   75,   69,    0,    0,   10,    0,   11,    0,    0,    0,
    0,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   24,   25,   26,    0,    0,   23,    0,   28,   29,   30,
   31,   32,    0,    0,    0,    0,    0,   34,  187,  191,
  192,  193,  194,  196,  198,  199,  200,  207,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   54,   55,    0,    0,    0,    0,    0,    0,    0,
   59,   60,   61,   62,   63,   64,   65,   13,    0,    0,
    0,    0,    0,   67,    4,    5,    6,    7,    8,    0,
    0,    0,    9,    0,    0,    0,    0,    0,   12,   74,
    0,   72,    0,    0,   75,   69,    0,    0,   10,    0,
   11,    0,    0,    0,    0,   14,   15,   16,   17,   18,
   19,   20,   21,   22,   24,   25,   26,    0,    0,   23,
    0,   28,   29,   30,   31,   32,    0,    0,    0,    0,
    0,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   54,   55,    0,    0,    0,
    0,    0,    0,    0,   59,   60,   61,   62,   63,   64,
   65,   13,    0,    0,    0,    0,    0,   67,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    4,    5,
    6,    7,    8,    0,    0,    0,    9,    0,    0,    0,
    0,    0,   12,   74,    0,   72,    0,    0,   75,   69,
    0,    0,   10,    0,   11,    0,    0,    0,    0,   14,
   15,   16,   17,   18,   19,   20,   21,   22,   24,   25,
   26,    0,    0,   23,    0,   28,   29,   30,   31,   32,
    0,    0,    0,    0,    0,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   54,
   55,    0,    0,    0,    0,    0,    0,    0,   59,   60,
   61,   62,   63,   64,   65,   13,    0,    0,    0,    0,
    0,   67,    4,    5,    6,    7,    8,    0,    0,    0,
    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   14,   15,   16,   17,   18,   19,   20,
   21,   22,   24,   25,   26,    0,    0,    0,    0,   28,
   29,   30,   31,   32,    0,    0,    0,  404,  404,   34,
  399,  404,  404,  404,  404,  404,  404,  404,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  404,  404,
  404,  404,  404,  404,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   54,   55,    0,    0,    0,    0,    0,
    0,    0,   59,   60,   61,   62,   63,   64,   65,    0,
    0,    0,    0,  404,  404,   67,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    4,    5,    6,    7,
    8,    0,    0,    0,    9,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  404,  404,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   15,   16,
   17,   18,   19,   20,   21,   22,   24,   25,   26,    0,
    0,    0,    0,   28,   29,   30,  413,   32,    0,    0,
    0,  405,  405,   34,  400,  405,  405,  405,  405,  405,
  405,  405,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  405,  405,  405,  405,  405,  405,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,   55,    0,
    0,    0,    0,    0,    0,    0,   59,   60,   61,   62,
   63,   64,   65,    0,    0,    0,    0,  405,  405,   67,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  405,  405,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  404,  404,  404,    0,  404,  404,  404,  404,
  404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
  404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
  399,  399,    0,  399,  399,  399,  399,  399,  399,  399,
  399,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  399,  399,  399,  399,  399,  399,    0,    0,    0,
    0,    0,    0,    0,    0,  404,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  399,  399,    0,    0,
    0,    0,    0,    0,    0,  404,  404,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  399,  399,    0,
    0,    0,    0,    0,    0,    0,  405,  405,  405,    0,
  405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
  405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
  405,  405,  405,  405,  400,  400,    0,  400,  400,  400,
  400,  400,  400,  400,  400,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  400,  400,  400,  400,  400,
  400,    0,    0,    0,    0,    0,    0,    0,    0,  405,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  400,  400,    0,    0,    0,    0,    0,    0,    0,  405,
  405,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  400,  400,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  399,  399,  399,    0,  399,
  399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
  399,  399,  399,  399,  399,  399,  399,  399,  399,  399,
  399,  399,  399,  414,  414,    0,  414,  414,  414,  414,
  414,  414,  414,  414,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  414,  414,  414,  414,  414,  414,
    0,    0,    0,    0,    0,    0,    0,    0,  399,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  414,
  414,    0,    0,    0,    0,    0,    0,    0,  399,  399,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  414,  414,    0,    0,    0,    0,    0,    0,    0,  400,
  400,  400,    0,  400,  400,  400,  400,  400,  400,  400,
  400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
  400,  400,  400,  400,  400,  400,  400,  401,  401,    0,
    0,  401,  401,  401,  401,  401,  401,  401,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  401,  401,
  401,  401,  401,  401,    0,    0,    0,    0,    0,    0,
    0,    0,  400,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  401,  401,    0,    0,    0,    0,    0,
    0,    0,  400,  400,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  401,  401,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  414,  414,
  414,    0,  414,  414,  414,  414,  414,  414,  414,  414,
  414,  414,  414,  414,  414,  414,  414,  414,  414,  414,
  414,  414,  414,  414,  414,  414,  398,  398,    0,    0,
  398,  398,  398,  398,  398,  398,  398,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  398,  398,  398,
  398,  398,  398,    0,    0,    0,    0,    0,    0,    0,
    0,  414,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  398,  398,    0,    0,    0,    0,    0,    0,
    0,  414,  414,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  398,  398,    0,    0,    0,    0,    0,
    0,    0,  401,  401,  401,    0,  401,  401,  401,  401,
  401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
  401,  401,  401,  401,  401,  401,  401,  401,  401,  401,
  391,  391,    0,    0,  391,  391,  391,  391,  391,  391,
  391,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  391,  391,  391,  391,  391,  391,    0,    0,    0,
    0,    0,    0,    0,    0,  401,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  391,  391,    0,    0,
    0,    0,    0,    0,    0,  401,  401,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  391,  391,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  398,  398,  398,    0,  398,  398,  398,  398,  398,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  398,
  398,  398,  398,  398,  398,  398,  398,  398,  398,  390,
  390,    0,    0,  390,  390,  390,  390,  390,  390,  390,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  390,  390,  390,  390,  390,  390,    0,    0,    0,    0,
    0,    0,    0,    0,  398,    0,  404,  404,    0,  404,
  404,  404,  404,  404,  404,  404,  404,    0,    0,    0,
    0,    0,    0,    0,    0,  390,  390,  404,  404,  404,
    0,  404,  404,    0,  398,  398,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  390,  390,    0,    0,
    0,    0,  404,  404,    0,  391,  391,  391,    0,  391,
  391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
  391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
  391,  391,  391,  404,  404,  405,  405,    0,  405,  405,
  405,  405,  405,  405,  405,  405,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  405,  405,  405,    0,
  405,  405,    0,    0,    0,    0,    0,    0,  391,    0,
    0,    0,    0,    0,    0,    0,  305,    0,    0,  305,
    0,    0,  305,    0,    0,    0,    0,    0,    0,    0,
    0,  405,  405,    0,    0,    0,  305,  305,    0,  391,
    0,  305,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  405,  405,    0,    0,    0,    0,    0,    0,
    0,  305,  305,    0,  390,  390,  390,    0,  390,  390,
  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
  390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
  390,  390,  305,  305,    0,    0,    0,    0,    0,    0,
    0,  404,  404,  404,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  404,  404,  404,  404,
  404,  404,  404,  404,  404,  404,  404,  390,    0,  342,
  342,    0,  342,  342,  342,  342,  342,  342,  342,  342,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  342,  342,  342,    0,  342,  342,    0,    0,  390,    0,
    0,    0,    0,    0,  404,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  342,  342,    0,    0,    0,
  405,  405,  405,    0,  404,  404,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  405,  405,  405,  405,  405,
  405,  405,  405,  405,  405,  405,  342,  342,  341,  341,
    0,  341,  341,  341,  341,  341,  341,  341,  341,    0,
  305,  305,  305,    0,    0,    0,    0,    0,    0,  341,
  341,  341,    0,  341,  341,  305,  305,  305,  305,  305,
  305,    0,    0,  405,    0,  346,  346,    0,    0,  346,
  346,  346,  346,  346,  346,  346,    0,    0,    0,    0,
    0,    0,    0,    0,  341,  341,  346,  346,  346,    0,
  346,  346,    0,  405,  405,    0,    0,    0,    0,    0,
    0,    0,    0,  305,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  341,  341,    0,    0,  349,
  349,  346,  346,  349,  349,  349,  349,  349,  349,  349,
    0,    0,    0,    0,  305,    0,    0,    0,    0,    0,
  349,  349,  349,    0,  349,  349,    0,    0,    0,    0,
    0,    0,  346,  346,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  342,  342,  342,    0,    0,    0,
    0,    0,    0,    0,    0,  349,  349,    0,    0,  342,
  342,  342,  342,  342,  342,  342,  342,  342,  342,  342,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  349,  349,  472,  472,
    0,    0,  472,  472,  472,  472,  472,  472,  472,    0,
    0,    0,    0,    0,    0,    0,    0,  342,    0,  472,
  472,  472,    0,  472,  472,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  341,  341,  341,    0,    0,  342,    0,
    0,    0,    0,    0,  472,  472,    0,    0,  341,  341,
  341,  341,  341,  341,  341,  341,  341,  341,  341,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  346,  346,  346,    0,    0,  472,  472,    0,    0,    0,
    0,    0,    0,    0,    0,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  346,  341,  298,  298,    0,
    0,  298,  298,  298,  298,  298,  298,  298,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  298,  298,
  298,    0,  298,  298,  349,  349,  349,  341,    0,    0,
    0,    0,    0,  346,    0,    0,    0,    0,    0,  349,
  349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
    0,    0,    0,  298,  298,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  346,  206,  190,    0,    0,    0,
  204,  201,    0,  202,  203,  205,    0,    0,    0,    0,
    0,    0,    0,    0,  298,  298,    0,  349,  195,    0,
  197,  185,    0,    0,    0,    0,    0,    0,  291,  291,
    0,    0,  291,  291,  291,  291,  291,  291,  291,    0,
    0,    0,    0,  472,  472,  472,    0,    0,  349,  291,
  291,  291,  189,  291,  291,    0,    0,    0,  472,  472,
  472,  472,  472,  472,  472,  472,  472,  472,  472,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  188,    0,  291,  291,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  472,    0,    0,    0,
    0,    0,    0,    0,    0,  291,  291,    0,    0,    0,
    0,    0,    0,  292,  292,    0,    0,  292,  292,  292,
  292,  292,  292,  292,    0,    0,    0,  472,    0,    0,
    0,    0,    0,    0,  292,  292,  292,    0,  292,  292,
    0,    0,  298,  298,  298,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  298,  298,  298,
  298,  298,  298,  298,  298,  298,  298,  293,  293,  292,
  292,  293,  293,  293,  293,  293,  293,  293,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  293,  293,
  293,    0,  293,  293,    0,    0,    0,    0,    0,    0,
  292,  292,    0,    0,    0,  298,    0,    0,    0,    0,
  182,  183,  184,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  293,  293,  186,  187,  191,  192,  193,
  194,  196,  198,  199,  200,  207,  298,    0,    0,    0,
    0,    0,    0,  291,  291,  291,    0,    0,    0,    0,
    0,    0,    0,    0,  293,  293,    0,    0,  291,  291,
  291,  291,  291,  291,  291,  291,  291,  291,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  296,    0,    0,
  296,    0,  296,  296,  296,  296,    0,  297,    0,    0,
  297,    0,  297,  297,  297,  297,    0,  296,  296,  296,
    0,  296,  296,    0,  560,    0,  291,  297,  297,  297,
    0,  297,  297,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  296,  296,    0,    0,    0,  291,  292,  292,
  292,    0,  297,  297,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  292,  292,  292,  292,  292,  292,  292,
  292,  292,  292,  296,  296,    0,    0,    0,    0,    0,
    0,    0,    0,  297,  297,  289,    0,    0,  289,    0,
  289,  289,  289,  289,    0,    0,    0,    0,    0,    0,
    0,    0,  293,  293,  293,  289,  289,  289,    0,  289,
  289,  292,    0,    0,    0,    0,    0,  293,  293,  293,
  293,  293,  293,  293,  293,  293,  293,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  289,  289,  292,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  293,    0,    0,    0,    0,
    0,  289,  289,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  290,    0,  293,  290,    0,  290,
  290,  290,  290,    0,    0,    0,    0,    0,    0,    0,
    0,  296,  296,  296,  290,  290,  290,    0,  290,  290,
    0,  297,  297,  297,    0,    0,  296,  296,  296,  296,
  296,  296,  296,  296,  296,  296,  297,  297,  297,  297,
  297,  297,  297,  297,  297,  297,    0,    0,  288,  290,
  290,  288,    0,  288,  288,  288,  288,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  288,  288,
  288,    0,  288,  288,  296,    0,    0,    0,    0,    0,
  290,  290,    0,    0,  297,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  288,  288,  296,    0,    0,    0,  289,
  289,  289,    0,    0,    0,  297,    0,    0,    0,    0,
    0,    0,    0,    0,  289,  289,  289,  289,  289,  289,
  289,  289,  289,  289,  288,  288,  294,    0,    0,  294,
    0,    0,  294,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  294,  294,  294,    0,
  294,  294,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  289,  295,    0,    0,  295,    0,    0,  295,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  294,  294,  295,  295,  295,    0,  295,  295,    0,
    0,    0,    0,  289,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  290,  290,
  290,    0,  294,  294,  306,    0,    0,  306,  295,  295,
  306,    0,    0,  290,  290,  290,  290,  290,  290,  290,
  290,  290,  290,    0,  306,  306,    0,    0,    0,  306,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  295,
  295,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  288,  288,  288,    0,    0,    0,    0,  306,
  306,  290,    0,    0,    0,    0,    0,  288,  288,  288,
  288,  288,  288,  288,  288,  288,  288,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  382,  382,
  306,  306,  290,  382,  382,    0,  382,  382,  382,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  382,    0,  382,  382,  288,    0,    0,  307,    0,
    0,  307,    0,    0,  307,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  307,  307,
  294,  294,  294,  307,    0,  382,  288,    0,    0,    0,
    0,    0,    0,    0,    0,  294,  294,  294,  294,  294,
  294,  294,  294,  294,  294,    0,    0,    0,    0,    0,
    0,    0,    0,  307,  307,  382,    0,  295,  295,  295,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  295,  295,  295,  295,  295,  295,  295,  295,
  295,  295,    0,  294,  307,  307,    0,    0,    0,    0,
    0,    0,  383,  383,    0,    0,  204,  383,  383,  204,
  383,  383,  383,    0,    0,    0,    0,    0,  306,  306,
  306,    0,    0,    0,  294,  383,    0,  383,  383,    0,
  295,    0,    0,  306,  306,  306,  306,  306,  306,    0,
    0,    0,  383,  383,    0,    0,  207,  383,  383,  207,
  383,  383,  383,    0,    0,    0,    0,    0,    0,  383,
    0,  295,    0,    0,    0,  383,    0,  383,  383,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  306,    0,    0,    0,  383,  383,    0,    0,  383,
  383,  383,    0,  383,  383,  383,    0,    0,    0,  383,
    0,    0,    0,  382,  382,  382,    0,    0,  383,    0,
  383,  383,  306,    0,    0,    0,    0,    0,  382,  382,
  382,  382,  382,  382,  382,  382,  382,  382,  382,  383,
    0,    0,  307,  307,  307,  206,  190,    0,    0,    0,
  204,  201,  383,  202,  203,  205,    0,  307,  307,  307,
  307,  307,  307,    0,    0,    0,  751,  752,  195,    0,
  197,  185,    0,    0,    0,    0,   56,    0,    0,    0,
    0,    0,  383,  382,  382,    0,    0,  203,  382,  382,
  203,  382,  382,  382,    0,    0,    0,    0,    0,    0,
    0,    0,  189,    0,    0,  307,  382,    0,  382,  382,
    0,    0,    0,    0,    0,    0,    0,    0,  382,  382,
    0,    0,  206,  382,  382,  206,  382,  382,  382,    0,
    0,    0,  188,    0,    0,    0,  307,  383,  383,  383,
  382,  382,    0,  382,  382,    0,    0,    0,    0,    0,
    0,    0,  383,  383,  383,  383,  383,  383,  383,  383,
  383,  383,  383,  386,  386,    0,    0,    0,    0,    0,
  382,    0,    0,    0,    0,  382,    0,  383,  383,  383,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  383,  383,  383,  383,  383,  383,  383,  383,
  383,  383,  383,  386,  386,  382,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  383,  383,  383,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  383,  383,  383,  383,  383,
  383,  383,  383,  383,  383,  383,  386,  386,    0,    0,
    0,    0,    0,    0,  206,  190,    0,    0,    0,  204,
  201,    0,  202,  203,  205,    0,    0,    0,    0,    0,
  182,  183,  184,    0,    0,    0,  208,  195,    0,  197,
  185,    0,    0,    0,    0,  186,  187,  191,  192,  193,
  194,  196,  198,  199,  200,  207,  206,  190,    0,    0,
    0,  204,  201,    0,  202,  203,  205,    0,  382,  382,
  382,  189,    0,    0,    0,    0,    0,    0,  255,  195,
    0,  197,  185,  382,  382,  382,  382,  382,  382,  382,
  382,  382,  382,  382,    0,    0,    0,    0,    0,    0,
    0,  188,    0,  382,  382,  382,    0,    0,    0,    0,
    0,    0,    0,  189,    0,    0,    0,    0,  382,  382,
  382,  382,  382,  382,  382,  382,  382,  382,  382,  206,
  190,    0,    0,    0,  204,  201,    0,  202,  203,  205,
  206,  190,    0,  188,    0,  204,  201,    0,  202,  203,
  205,  256,  195,    0,  197,  185,    0,    0,    0,    0,
    0,    0,  262,  195,    0,  197,  185,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  206,
  190,    0,    0,  301,  204,  201,  189,  202,  203,  205,
    0,    0,    0,    0,    0,    0,    0,  189,    0,    0,
    0,    0,  195,    0,  197,  185,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  188,    0,    0,    0,
  206,  190,    0,    0,  359,  204,  201,  188,  202,  203,
  205,    0,    0,    0,    0,    0,  189,    0,    0,  182,
  183,  184,    0,  195,    0,  197,  185,    0,    0,    0,
    0,    0,    0,    0,  186,  187,  191,  192,  193,  194,
  196,  198,  199,  200,  207,    0,  188,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  189,    0,    0,
    0,  182,  183,  184,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  186,  187,  191,  192,
  193,  194,  196,  198,  199,  200,  207,  188,    0,    0,
    0,  206,  190,    0,    0,  365,  204,  201,    0,  202,
  203,  205,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  195,    0,  197,  185,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  182,  183,  184,    0,    0,    0,
    0,    0,    0,    0,    0,  182,  183,  184,  189,  186,
  187,  191,  192,  193,  194,  196,  198,  199,  200,  207,
  186,  187,  191,  192,  193,  194,  196,  198,  199,  200,
  207,  206,  190,    0,    0,  366,  204,  201,  188,  202,
  203,  205,    0,    0,  182,  183,  184,    0,    0,    0,
    0,    0,    0,    0,  195,    0,  197,  185,    0,  186,
  187,  191,  192,  193,  194,  196,  198,  199,  200,  207,
  206,  190,    0,    0,  381,  204,  201,    0,  202,  203,
  205,    0,    0,    0,    0,  182,  183,  184,  189,    0,
    0,    0,    0,  195,    0,  197,  185,    0,    0,    0,
  186,  187,  191,  192,  193,  194,  196,  198,  199,  200,
  207,    0,    0,    0,    0,  206,  190,    0,  188,    0,
  204,  201,    0,  202,  203,  205,    0,  189,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  195,    0,
  197,  185,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  188,  206,  190,
    0,    0,    0,  204,  201,    0,  202,  203,  205,    0,
    0,    0,  189,    0,    0,    0,  182,  183,  184,    0,
    0,  195,    0,  197,  185,    0,    0,    0,    0,    0,
    0,  186,  187,  191,  192,  193,  194,  196,  198,  199,
  200,  207,  188,  422,  206,  190,    0,    0,  455,  204,
  201,    0,  202,  203,  205,  189,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  195,    0,  197,
  185,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  206,  190,    0,  188,  446,  204,  201,    0,
  202,  203,  205,    0,    0,    0,  182,  183,  184,    0,
    0,  189,    0,    0,    0,  195,    0,  197,  185,    0,
    0,  186,  187,  191,  192,  193,  194,  196,  198,  199,
  200,  207,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  188,    0,    0,    0,  182,  183,  184,    0,  189,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  186,  187,  191,  192,  193,  194,  196,  198,  199,  200,
  207,    0,    0,    0,    0,    0,    0,    0,    0,  188,
  466,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  182,  183,  184,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  186,  187,  191,  192,  193,
  194,  196,  198,  199,  200,  207,    0,    0,  206,  190,
    0,    0,    0,  204,  201,    0,  202,  203,  205,    0,
    0,    0,    0,  182,  183,  184,    0,    0,    0,    0,
    0,  195,    0,  197,  185,    0,    0,    0,  186,  187,
  191,  192,  193,  194,  196,  198,  199,  200,  207,    0,
    0,    0,    0,  206,  190,    0,    0,    0,  204,  201,
    0,  202,  203,  205,    0,  189,    0,    0,    0,  182,
  183,  184,    0,    0,  511,    0,  195,    0,  197,  185,
    0,    0,    0,    0,  186,  187,  191,  192,  193,  194,
  196,  198,  199,  200,  207,  188,  486,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  182,  183,  184,
  189,  206,  190,    0,    0,    0,  204,  201,    0,  202,
  203,  205,  186,  187,  191,  192,  193,  194,  196,  198,
  199,  200,  207,    0,  195,    0,  197,  185,  206,  190,
  188,    0,    0,  204,  201,    0,  202,  203,  205,  206,
  190,    0,    0,    0,  204,  201,    0,  202,  203,  205,
    0,  195,    0,  197,  185,    0,    0,    0,  189,    0,
    0,    0,  195,    0,  197,  185,    0,    0,    0,    0,
    0,    0,  206,  190,    0,    0,  674,  204,  201,    0,
  202,  203,  205,    0,  633,  189,    0,    0,  188,  594,
    0,    0,    0,    0,    0,  195,  189,  197,  185,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  206,  190,
    0,    0,  877,  204,  201,  188,  202,  203,  205,    0,
    0,    0,    0,  182,  183,  184,  188,  669,    0,  189,
    0,  195,    0,  197,  185,    0,    0,    0,  186,  187,
  191,  192,  193,  194,  196,  198,  199,  200,  207,    0,
    0,    0,  206,  190,    0,    0,  901,  204,  201,  188,
  202,  203,  205,    0,    0,  189,    0,    0,  182,  183,
  184,    0,    0,    0,    0,  195,    0,  197,  185,    0,
    0,    0,    0,  186,  187,  191,  192,  193,  194,  196,
  198,  199,  200,  207,    0,  188,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  367,  367,    0,  189,
    0,  367,  367,    0,  367,  367,  367,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  182,  183,  184,  367,
    0,  367,  367,    0,    0,    0,    0,    0,    0,  188,
    0,  186,  187,  191,  192,  193,  194,  196,  198,  199,
  200,  207,    0,  182,  183,  184,    0,    0,    0,    0,
    0,    0,    0,  367,  182,  183,  184,    0,  186,  187,
  191,  192,  193,  194,  196,  198,  199,  200,  207,  186,
  187,  191,  192,  193,  194,  196,  198,  199,  200,  207,
    0,    0,    0,  367,  367,    0,    0,  182,  183,  184,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  186,  187,  191,  192,  193,  194,  196,  198,
  199,  200,  207,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  182,  183,  184,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  186,  187,
  191,  192,  193,  194,  196,  198,  199,  200,  207,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  182,  183,  184,
  206,  190,    0,    0,    0,  204,  201,    0,  202,  203,
  205,    0,  186,  187,  191,  192,  193,  194,  196,  198,
  199,  200,  207,  195,    0,  197,  185,    0,    0,    0,
    0,    0,    0,  382,  382,    0,    0,    0,  382,  382,
    0,  382,  382,  382,    0,    0,    0,    0,    0,    0,
    0,  367,  367,  367,    0,    0,  382,  189,  382,  382,
    0,    0,    0,    0,    0,    0,  367,  367,  367,  367,
  367,  367,  367,  367,  367,  367,  367,    0,    0,    0,
    0,    0,    0,  206,  190,    0,    0,  188,  204,  201,
  382,  202,  203,  205,  206,  190,    0,    0,    0,  204,
  201,    0,  202,  203,  205,    0,  195,    0,  197,  185,
    0,    0,    0,    0,    0,    0,    0,  195,    0,  197,
  382,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  189,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  189,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  188,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  188,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  182,  183,  184,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  186,  187,  191,  192,  193,  194,  196,  198,  199,  200,
  207,    0,    0,    0,    0,    0,    0,    0,  382,  382,
  382,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  382,  382,  382,  382,  382,  382,  382,
  382,  382,  382,  382,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  184,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  186,  187,  191,  192,  193,  194,  196,
  198,  199,  200,  207,  186,  187,  191,  192,  193,  194,
  196,  198,  199,  200,  207,
};
}
static short yycheck[];
static {
	yycheck = new short[yycheck().length+PHPAspectParserYycheck2.yycheck2().length];
	System.arraycopy(yycheck(), 0, yycheck, 0, yycheck().length);
	System.arraycopy(PHPAspectParserYycheck2.yycheck2(), 0, yycheck, yycheck().length, PHPAspectParserYycheck2.yycheck2().length);
	}
static short[] yycheck() {return new short[] {
   14,   15,    3,   24,   24,   45,   24,  222,  416,  364,
   24,   44,   38,   42,   42,   39,   42,   44,  508,  234,
  123,  236,   33,   40,  387,  388,   42,   40,   41,   40,
   91,   44,   42,   43,   44,   38,   41,   44,   44,   44,
   36,   36,  456,  504,  261,   44,   59,  354,   38,   36,
   59,   36,  207,   64,   59,  362,  125,   59,  786,   91,
   36,   36,   44,  355,  911,  306,   91,   91,   36,   93,
   41,   38,  125,   44,  123,   42,  123,   59,   41,  100,
   38,   44,  374,   41,   36,   36,   38,  934,   38,  123,
  308,  123,   58,   40,  545,   58,   59,  460,  123,  123,
   63,  125,   41,  143,   36,   44,   41,  470,  471,   44,
  123,  132,   36,   36,   42,   43,   36,  358,  579,   44,
   59,  123,   36,   58,   59,   41,  351,  123,   44,   42,
   93,   41,   42,   40,   59,   42,  123,   41,   42,  140,
  355,   42,   58,   59,  872,   44,  351,  161,   42,  364,
  306,   34,   42,   42,  168,  169,  170,  123,   93,   34,
   59,   37,  125,  614,   39,  616,   42,   43,   37,   45,
   46,   47,   40,   42,   41,  123,   41,   93,   47,   44,
  374,   44,   40,   44,   44,  646,  207,  207,   40,  207,
  125,  652,   59,  207,   59,   43,   59,   45,   59,   59,
  306,  222,  222,  243,   44,   40,  513,  514,   91,  125,
   93,   41,   40,  234,  234,  236,  236,   44,   93,   59,
   41,   96,   41,   44,   44,   44,   44,   41,  277,  278,
  277,  278,   59,  306,   40,  308,  309,   58,   59,   59,
  123,   59,  125,  277,  278,   59,  306,  125,  123,  612,
  125,  354,   40,  581,   40,   44,  327,  328,  329,  328,
  329,  624,  676,  626,  277,  278,  280,  281,  277,  278,
   59,  634,   93,  428,   40,  328,  329,  306,  306,  355,
  306,  295,  306,   44,  308,  309,  297,  311,  312,  313,
  306,   44,  308,   40,  355,  306,  306,  314,   59,  262,
  263,  264,  303,   40,  125,  308,   59,  768,  769,  123,
  306,  528,  308,  308,  354,  670,  332,   40,  308,  306,
  334,  308,  362,  308,  541,  336,  355,  262,  263,  350,
  820,  355,  308,  308,  355,  355,  347,  351,  306,  306,
  308,  374,  355,  364,  364,  374,  374,  374,  372,  373,
  308,  356,  363,  367,  306,  306,  308,  308,  308,  666,
  723,  374,  325,  771,  374,  270,  729,  374,  374,  380,
  381,  382,  383,  384,  385,  374,  308,  297,  306,  734,
   40,  395,  306,  306,  308,  308,  306,  604,  308,  357,
  325,  304,  306,  356,  308,  758,  306,  760,  761,  306,
   44,   40,  306,   41,  732,  306,   44,  428,  428,  325,
  428,  287,  306,  453,  428,   59,  306,  306,  287,  782,
   44,  356,  436,  306,   41,  308,  309,   44,  311,  312,
  313,  306,  287,  308,  309,   59,  311,  312,  313,   40,
  356,  262,  263,  264,  807,  374,  367,  277,  278,  450,
  328,  329,   73,   74,   75,  670,  304,  305,  306,  374,
  474,  462,  476,  277,  355,  479,  314,  481,  831,  832,
  301,  302,  355,  513,  514,   38,  340,  341,  342,  343,
  344,  345,  387,  388,   59,   41,  123,  850,   44,  372,
  373,  819,   41,  288,  289,   44,  371,  372,  373,   58,
   59,  515,  773,  774,  325,  868,   41,  301,  302,   44,
  358,  359,  360,  361,  362,  363,  530,  314,   41,  734,
  883,   44,   41,  537,  538,   44,   41,   41,   41,   44,
   44,   44,   59,  534,   41,  356,   41,   37,  755,   44,
   61,  555,   42,   43,  123,   45,   46,   47,   41,   41,
  353,   44,   44,  635,  125,  460,   40,  571,  479,  573,
  481,   41,  822,  823,   44,  470,  471,    4,    5,  317,
    7,    8,    9,   10,   11,   12,   13,   59,  592,   16,
   17,   18,   19,   20,   21,   22,  803,   41,   25,  860,
   44,   44,  863,  864,  865,  609,  813,   38,   35,   41,
   41,  306,   44,   44,  306,   42,   43,   41,   45,  530,
   47,  327,  328,  329,   14,   15,  630,   58,   59,  308,
   41,  838,   63,   59,  706,  842,  666,   41,   44,  846,
   40,   40,   69,  327,  328,  329,  853,  306,  855,  910,
   41,   14,   15,   44,  353,   93,   58,   41,   44,  670,
  670,   40,   93,   94,  325,  325,  125,   58,   59,   41,
  374,  878,   44,  677,   61,   40,   61,   59,  105,   40,
  306,   91,   45,  125,   40,  354,   58,   59,  123,  693,
   41,  898,   41,  124,  125,  767,  306,   40,  125,  336,
  772,  306,   93,  775,  776,   40,   61,  134,   40,  136,
   40,  306,  332,  920,   41,  142,  143,  612,  145,  630,
  927,   93,  123,  734,  734,   44,   40,   61,   59,  624,
  125,  626,   40,   59,  125,   59,   41,  356,   44,  634,
   93,   61,   41,   58,  951,  308,  173,  306,  739,   59,
   41,  178,   41,  125,   93,  355,  183,  356,  324,   41,
   44,  188,  189,  190,  191,  192,  193,  194,  195,  196,
  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,
  143,  125,  209,  210,  211,  212,  213,  214,  215,  216,
  217,  218,  219,  220,  306,  285,  286,  287,  161,   44,
  125,   41,  229,  230,   58,  168,  169,  170,   41,  308,
   61,   61,   41,  306,  332,   44,  243,  244,  355,   41,
  247,   59,  318,   41,   59,   59,  123,  308,  723,   58,
   59,  262,  263,  264,  729,   37,   38,   61,  265,   41,
   42,   43,   44,   45,   46,   47,  277,  278,  356,   61,
  841,   58,   58,   40,   40,   40,   58,   59,   60,   40,
   62,   63,   40,  758,   93,  760,  761,  294,   40,   40,
   40,  262,  263,  264,   40,   40,   40,   61,  308,   41,
  243,  308,   40,  310,  311,  312,  313,  782,  306,   41,
  262,   93,   94,   61,  325,  314,  125,  306,   59,   59,
  308,  306,   41,   40,   61,   44,   61,   58,  125,  303,
  308,  902,  807,   61,   40,  308,   41,  280,  281,   58,
   59,   41,  124,  125,   41,  356,  703,  354,  705,   61,
  278,   41,  295,   40,  325,  362,  831,  832,  333,  943,
   59,  718,   41,   61,  322,  340,  341,  342,  343,  344,
  345,  346,  125,  325,   93,  850,   38,   41,  125,   41,
   41,   58,   44,  320,   59,  356,  125,  123,  365,   41,
  365,  334,  125,  868,   59,   41,   58,   59,  125,   40,
  407,   63,  409,   41,  356,  762,  125,  764,  883,   41,
  336,  354,   44,   41,   40,  308,   41,   41,  125,  362,
  123,  778,  779,  374,  367,   59,   58,   59,  333,   41,
  306,   93,   94,  440,   93,  340,  341,  342,  343,  344,
  345,  346,   41,   41,   93,  123,  453,   41,   41,  456,
  457,  332,  395,  262,  263,  264,  123,   41,  308,   41,
  365,   93,  124,  125,   41,   37,   38,  123,  123,   40,
   42,   43,   41,   45,   46,   47,   41,   41,  485,  303,
  262,  263,  264,  168,  303,  677,  303,  611,   60,  800,
   62,   63,  395,  125,  416,  277,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  513,  514,  940,  591,
  453,  915,  923,  573,  416,  515,  325,  524,  525,  750,
  690,    0,   94,  771,  161,  268,  533,  555,  587,  524,
   59,  474,   61,  476,  836,  552,  479,  476,  481,   -1,
   -1,   -1,   -1,  325,   61,   -1,   -1,  356,   -1,   -1,
  557,   -1,  124,  560,   33,   34,   -1,   36,   -1,   -1,
   39,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
  513,  514,   -1,   41,  356,   -1,   44,   -1,   -1,  586,
   59,   -1,   -1,   -1,   -1,   64,   -1,  530,   -1,   -1,
   58,   59,  374,   41,  537,  538,   44,   -1,   -1,   -1,
  262,  263,  264,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   58,   59,  555,   -1,   -1,  277,  278,   96,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,  571,   -1,
  573,   -1,   -1,   -1,   -1,   -1,   -1,  356,   -1,   -1,
    0,   -1,   -1,   -1,  123,   93,  125,  126,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  125,   -1,  666,
   -1,   -1,   -1,  325,   -1,   -1,  609,   -1,   -1,  676,
   -1,   -1,   -1,   33,   34,   -1,   36,  125,  685,   39,
   40,   -1,   -1,   43,   -1,   45,   -1,  630,   -1,   -1,
  262,  263,  264,  325,  356,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   64,  277,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  666,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  677,   -1,   96,  266,  267,  268,
  269,  270,  271,  272,  273,  274,  275,  276,   -1,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
   -1,   -1,   -1,  123,   -1,  125,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,  258,
  259,  260,  261,   -1,  356,   -1,  265,   -1,  795,   -1,
   -1,   -1,   -1,   -1,  262,  263,  264,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  837,  310,   -1,  125,   -1,  314,  315,  316,  317,  318,
  319,  320,  321,  322,  323,  324,   -1,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  325,  337,  338,
  339,  340,  341,  342,   -1,   -1,   -1,   -1,  347,  348,
  349,  350,  351,  352,   -1,   -1,   -1,  325,  357,  358,
  359,  360,  361,  362,  363,   -1,  365,   -1,  356,   -1,
   -1,  370,   -1,   91,   -1,   93,  375,  257,  258,  259,
  260,  261,   -1,   -1,   -1,  265,   -1,   -1,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,   -1,
  310,   -1,   -1,   -1,  314,  315,  316,  317,  318,  319,
  320,  321,  322,  323,  324,   -1,  326,  327,  328,  329,
  330,  331,  332,    0,  334,  335,   -1,  337,  338,  339,
  340,  341,  342,   -1,   -1,   -1,   -1,  347,  348,  349,
  350,  351,  352,   -1,   -1,   -1,   -1,  357,  358,  359,
  360,  361,  362,  363,   -1,  365,   33,   34,   -1,   36,
  370,   -1,   39,   40,   -1,  375,   43,   -1,   45,   38,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,   -1,   58,
   59,  333,   -1,   -1,   63,   -1,   -1,   -1,  340,  341,
  342,  343,  344,  345,  346,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   96,
   -1,   -1,   -1,  365,   93,   94,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  376,  377,  378,  379,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,  123,   -1,  125,  126,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,  306,   -1,
  308,  309,   -1,  311,  312,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   -1,
   -1,   39,   40,   -1,   -1,   43,   -1,   45,   38,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   64,  355,   58,   59,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,  372,  373,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   96,   -1,
   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,
  257,  258,  259,  260,  261,   -1,   -1,   -1,  265,   -1,
   -1,   -1,   -1,  262,  263,  264,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,  277,  278,
   44,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,   58,   59,  303,  304,  305,  306,
  307,  308,   -1,  310,   -1,   -1,   -1,  314,  315,  316,
  317,  318,  319,  320,  321,  322,  323,  324,   -1,  326,
  327,  328,  329,  330,  331,  332,  325,  334,  335,   93,
  337,  338,  339,  340,  341,  342,   -1,   -1,   -1,   -1,
  347,  348,  349,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  358,  359,  360,  361,  362,  363,  356,  365,   -1,
   -1,  125,   -1,  370,   -1,   -1,   -1,   -1,  375,  257,
  258,  259,  260,  261,   -1,   -1,   -1,  265,   -1,   -1,
   -1,   -1,  262,  263,  264,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,  277,  278,   44,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,   58,   59,   -1,  304,  305,  306,  307,
  308,   -1,  310,   -1,   -1,   -1,  314,  315,  316,  317,
   -1,  319,   -1,  321,   -1,  323,   -1,   -1,  326,   -1,
   -1,   -1,  330,  331,  332,  325,  334,  335,   93,  337,
  338,  339,  340,  341,  342,   -1,   -1,   -1,   -1,  347,
  348,  349,  350,  351,  352,   -1,   -1,   -1,   -1,  357,
  358,  359,  360,  361,  362,  363,  356,  365,   33,   34,
  125,   36,  370,   -1,   39,   40,   -1,  375,   43,   -1,
   45,   38,   -1,   -1,   41,   -1,   -1,   44,  262,  263,
  264,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   96,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  356,   -1,   -1,   -1,   -1,   33,   34,   -1,
   36,   -1,   -1,   39,   40,   -1,   -1,   43,   -1,   45,
   -1,   -1,   -1,   41,   -1,   -1,   44,  262,  263,  264,
   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,   -1,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   96,   -1,   -1,   -1,   -1,   93,   94,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  325,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
  126,   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,   -1,   -1,   -1,
  265,  356,   -1,   -1,   -1,  262,  263,  264,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,
  277,  278,   44,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,   58,   59,   -1,  304,
  305,  306,  307,  308,   -1,  310,   -1,   -1,   -1,  314,
  315,  316,  317,   -1,  319,   -1,  321,   -1,  323,   -1,
   -1,  326,   -1,   -1,   -1,  330,  331,  332,  325,  334,
  335,   93,  337,  338,  339,  340,  341,  342,   -1,   -1,
   -1,   -1,  347,  348,  349,  350,  351,  352,   -1,   -1,
   -1,   -1,  357,  358,  359,  360,  361,  362,  363,  356,
  365,   -1,   91,  125,   93,  370,   -1,   96,   -1,   -1,
  375,  257,  258,  259,  260,  261,   -1,   -1,   -1,  265,
   -1,   -1,   -1,   -1,  262,  263,  264,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,  277,
  278,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,   -1,   -1,   -1,  304,  305,
  306,  307,  308,   -1,  310,   -1,   -1,   -1,  314,  315,
  316,  317,   -1,  319,   -1,  321,   -1,  323,   -1,   -1,
  326,  327,  328,  329,  330,  331,  332,  325,  334,  335,
   -1,  337,  338,  339,  340,  341,  342,   -1,   -1,   -1,
   -1,  347,  348,  349,  350,  351,  352,   -1,   -1,   -1,
   -1,  357,  358,  359,  360,  361,  362,  363,  356,   33,
   34,   -1,   36,   -1,  370,   39,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,  263,  264,   -1,   -1,   59,   41,   -1,   -1,   44,
   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,  123,
   -1,  125,  126,   -1,   -1,   -1,   -1,  306,   -1,  308,
  309,   -1,  311,  312,  313,   -1,   33,   34,   -1,   36,
  125,   -1,   39,   40,  356,   -1,   43,   -1,   45,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,  355,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,  373,   -1,   -1,   -1,   -1,   96,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,
   -1,   -1,   -1,   -1,   -1,  124,  125,   -1,   -1,   -1,
   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,
   45,   46,   47,  257,  258,  259,  260,  261,   -1,   -1,
   -1,  265,   -1,   -1,   -1,   60,   -1,   62,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  262,  263,  264,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,  300,   -1,   -1,   94,
  304,  305,  306,  307,  308,   -1,  310,   -1,   -1,   -1,
  314,  315,  316,  317,   -1,  319,   -1,  321,   -1,  323,
   -1,   -1,  326,  327,  328,  329,  330,  331,  332,  124,
  334,  335,   -1,  337,  338,  339,  340,  341,  342,   -1,
  325,   -1,   -1,  347,  348,  349,  350,  351,  352,   -1,
   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,  363,
  257,  258,  259,  260,  261,   -1,  370,   -1,  265,   -1,
   -1,  356,   -1,  262,  263,  264,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,   -1,  310,   -1,   -1,   -1,  314,  315,  316,
  317,   -1,  319,   -1,  321,   -1,  323,   -1,   -1,  326,
   -1,   -1,   -1,  330,  331,  332,  325,  334,  335,   -1,
  337,  338,  339,  340,  341,  342,   -1,   -1,   -1,   -1,
  347,  348,  349,  350,  351,  352,   -1,   -1,   -1,   -1,
  357,  358,  359,  360,  361,  362,  363,  356,   33,   34,
   -1,   36,   -1,  370,   39,   40,   -1,   -1,   43,   -1,
   45,   -1,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,   -1,   59,   41,   -1,   -1,   44,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,  125,
   -1,   39,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   59,   -1,   -1,   -1,   -1,   64,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   96,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   -1,   -1,  125,   -1,   -1,   37,   38,
   -1,   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,  257,  258,  259,  260,  261,   -1,   -1,   -1,
  265,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  262,  263,  264,   -1,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,   -1,  310,   -1,   -1,   -1,  314,
  315,  316,  317,   -1,  319,   -1,  321,   -1,  323,   -1,
   -1,  326,   -1,   -1,   -1,  330,  331,  332,   -1,  334,
  335,   -1,  337,  338,  339,  340,  341,  342,   -1,  325,
   -1,   -1,  347,  348,  349,  350,  351,  352,   -1,   -1,
   -1,   -1,  357,  358,  359,  360,  361,  362,  363,  257,
  258,  259,  260,  261,   -1,  370,   -1,  265,   -1,   -1,
  356,   -1,  262,  263,  264,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,  278,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,   -1,   -1,  303,  304,  305,  306,  307,
  308,   -1,  310,   -1,   -1,   -1,  314,  315,  316,  317,
   -1,  319,   -1,  321,   -1,  323,   -1,   -1,  326,   -1,
   -1,   -1,  330,  331,  332,  325,  334,  335,   -1,  337,
  338,  339,  340,  341,  342,   -1,   -1,   -1,   -1,  347,
  348,  349,  350,  351,  352,   -1,   -1,   -1,   -1,  357,
  358,  359,  360,  361,  362,  363,  356,   33,   34,   -1,
   36,   -1,  370,   39,   40,   -1,   -1,   43,   -1,   45,
  279,  280,  281,  282,  283,  284,  285,  286,  287,   -1,
   -1,   -1,   -1,   59,   41,   -1,   -1,   44,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,
  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   33,   34,   -1,   36,  125,   -1,
   39,   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   59,   -1,   -1,   -1,   -1,   64,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   96,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,   -1,
   -1,   -1,   -1,   37,  125,   -1,   -1,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,   60,   -1,   62,  265,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  262,  263,  264,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,   -1,   -1,   -1,  304,  305,
  306,  307,  308,   -1,  310,   -1,   -1,   -1,  314,  315,
  316,  317,   -1,  319,   -1,  321,   -1,  323,   -1,   -1,
  326,   -1,   -1,   -1,  330,  331,  332,   -1,  334,  335,
   -1,  337,  338,  339,  340,  341,  342,   -1,  325,   -1,
   -1,  347,  348,  349,  350,  351,  352,   -1,   -1,   -1,
   -1,  357,  358,  359,  360,  361,  362,  363,  257,  258,
  259,  260,  261,   -1,  370,   -1,  265,   -1,   -1,  356,
   -1,  262,  263,  264,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  277,   -1,   -1,  288,
  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
  299,  300,   -1,   -1,   -1,  304,  305,  306,  307,  308,
   -1,  310,   -1,   -1,   -1,  314,  315,  316,  317,   -1,
  319,   -1,  321,   -1,  323,   -1,   -1,  326,   -1,   -1,
   -1,  330,  331,  332,  325,  334,  335,   -1,  337,  338,
  339,  340,  341,  342,   -1,   -1,   -1,   -1,  347,  348,
  349,  350,  351,  352,   -1,   -1,   -1,   -1,  357,  358,
  359,  360,  361,  362,  363,  356,   33,   34,   -1,   36,
   -1,  370,   39,   40,   -1,   -1,   43,   -1,   45,  283,
  284,  285,  286,  287,   -1,   41,   -1,   -1,   44,   -1,
   41,   58,   59,   44,   -1,   -1,   -1,   64,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   96,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   33,   34,   -1,   36,   -1,  123,   39,   40,  126,
   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,  125,
   -1,   -1,   -1,   -1,  125,   -1,   58,   59,   -1,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   96,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   37,   38,
   -1,   40,   41,   42,   43,   44,   45,   46,   47,   -1,
  257,  258,  259,  260,  261,   -1,   -1,   -1,  265,   58,
   59,   60,   -1,   62,   63,   -1,  262,  263,  264,   -1,
   -1,  262,  263,  264,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,  289,  290,  291,  292,  293,  294,  295,  296,
  297,  298,  299,  300,   93,   94,   -1,  304,  305,  306,
  307,  308,   -1,  310,   -1,   -1,   -1,  314,  315,  316,
  317,   -1,  319,   -1,  321,   -1,  323,   -1,   -1,  326,
   -1,   -1,   -1,  330,  331,  124,  125,  334,  335,  325,
  337,  338,  339,  340,  325,  257,  258,  259,  260,  261,
  347,  348,  349,  265,   -1,   -1,   -1,   -1,   -1,   -1,
  357,  358,  359,  360,  361,  362,  363,   -1,   -1,   -1,
  356,   -1,   -1,  370,   -1,  356,  288,  289,  290,  291,
  292,  293,  294,  295,  296,  297,  298,  299,  300,   -1,
   -1,   -1,  304,  305,  306,  307,  308,   -1,  310,   -1,
   -1,   -1,  314,  315,  316,  317,   -1,  319,   -1,  321,
   -1,  323,   -1,   -1,  326,   -1,   -1,   -1,  330,  331,
   -1,   -1,  334,  335,   -1,  337,  338,  339,  340,   -1,
   -1,   -1,   -1,   -1,   -1,  347,  348,  349,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  357,  358,  359,  360,  361,
  362,  363,   -1,   33,   34,   -1,   36,   -1,  370,   39,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  262,  263,  264,   -1,   -1,   58,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,  277,  278,
  279,  280,  281,  282,  283,  284,  285,  286,  287,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   96,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  325,   -1,   33,   34,
   -1,   36,   -1,  123,   39,   40,  126,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   -1,   -1,  356,   -1,   64,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  374,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   -1,   41,
   42,   43,   44,   45,   46,   47,   -1,  257,  258,  259,
  260,  261,   -1,   -1,   -1,  265,   58,   59,   60,   -1,
   62,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
  300,   93,   94,   -1,  304,  305,  306,  307,  308,   -1,
  310,   -1,   -1,   -1,  314,  315,  316,  317,   -1,  319,
   -1,  321,   -1,  323,   -1,   -1,  326,   -1,   -1,   -1,
  330,  331,  124,  125,  334,  335,   -1,  337,  338,  339,
  340,   -1,  257,  258,  259,  260,  261,  347,  348,  349,
  265,   41,   -1,   -1,   44,   -1,   -1,  357,  358,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   58,   59,
  370,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,   -1,   -1,   -1,  304,
  305,  306,  307,  308,   -1,  310,   -1,   -1,   -1,  314,
  315,  316,  317,   93,  319,   -1,  321,   -1,  323,   -1,
   -1,  326,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
  335,   -1,  337,  338,  339,  340,   -1,   -1,   -1,   -1,
   -1,   -1,  347,  348,  349,  125,   -1,   -1,   -1,   -1,
   -1,   -1,  357,  358,  359,  360,  361,  362,  363,   -1,
   33,   34,   -1,   36,   -1,  370,   39,   40,   -1,   -1,
   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  262,  263,  264,   -1,   -1,   -1,   59,   -1,   -1,   -1,
   -1,   64,   -1,   -1,   -1,  277,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,  289,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  325,   -1,   33,   34,   -1,   36,   -1,
  123,   39,   40,  126,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   59,   -1,   44,  356,   -1,   64,   -1,   -1,   -1,
   -1,   -1,  262,  263,  264,   -1,   -1,   58,   59,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   96,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,  126,   -1,
   -1,   -1,   -1,   -1,   -1,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,
   36,   -1,   -1,   39,   40,   -1,  356,   43,   -1,   45,
   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,   -1,
   -1,   -1,  265,   59,   -1,   -1,   -1,   -1,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,
  293,  294,  295,  296,  297,  298,  299,  300,   -1,   -1,
   96,  304,  305,  306,  307,  308,   -1,  310,   -1,   -1,
   -1,  314,  315,  316,  317,   -1,  319,   -1,  321,   -1,
  323,   -1,   -1,  326,   -1,   -1,   -1,  330,  331,   -1,
  126,  334,  335,   -1,  337,  338,  339,  340,   -1,  257,
  258,  259,  260,  261,  347,  348,  349,  265,   41,   -1,
   -1,   44,   -1,   -1,  357,  358,  359,  360,  361,  362,
  363,  262,  263,  264,   -1,   58,   59,  370,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,  300,   -1,   -1,   -1,  304,  305,  306,  307,
  308,   -1,  310,   -1,   -1,   -1,  314,  315,  316,  317,
   93,  319,   -1,  321,   -1,  323,   -1,   -1,  326,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,  335,   -1,  337,
  338,  339,  340,   -1,  325,   -1,   -1,   -1,   -1,  347,
  348,  349,  125,   -1,   -1,   -1,   -1,   -1,   -1,  357,
  358,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,  370,   -1,   -1,  356,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,   37,   -1,   -1,  265,
   -1,   42,   43,   -1,   45,   46,   47,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   60,
   -1,   62,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,   -1,   -1,   -1,   -1,  304,  305,
  306,  307,  308,   33,   34,   -1,   36,   -1,  314,   39,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  348,  349,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  357,  358,  359,  360,  361,  362,  363,   -1,  262,
  263,  264,   -1,   -1,  370,   -1,   96,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,   34,
   -1,   36,   -1,   -1,   39,   40,  126,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   59,   -1,   -1,   -1,   -1,   64,
   -1,   -1,  325,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   37,   38,   -1,   -1,   -1,   42,   43,   -1,   45,
   46,   47,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   96,   -1,  356,   60,   -1,   62,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   38,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  126,   -1,   -1,   -1,   -1,   58,   59,   94,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,  279,  280,
  281,  282,  283,  284,  285,  286,  287,   33,   34,   -1,
   36,   -1,   -1,   39,   40,   41,   -1,   43,  124,   45,
   -1,   93,   94,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,   -1,   -1,   -1,  265,   -1,   -1,   64,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,  125,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
   96,   -1,   -1,   -1,  304,  305,  306,  307,  308,   -1,
   -1,   -1,   -1,   -1,  314,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   33,   34,   -1,   36,   -1,   38,   39,   40,
  126,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  258,  259,  260,  261,   -1,  348,  349,
  265,   -1,   -1,   64,   -1,   -1,   -1,  357,  358,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
  370,   -1,   -1,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,   96,  262,  263,  264,  304,
  305,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,  314,
   -1,  277,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,  289,   -1,  126,   -1,   -1,   -1,   -1,
  262,  263,  264,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  348,  349,  277,  278,  279,  280,  281,
  282,   -1,  357,  358,  359,  360,  361,  362,  363,  325,
   -1,   -1,   -1,   -1,   -1,  370,   -1,   -1,   -1,   -1,
   -1,  257,  258,  259,  260,  261,   -1,   -1,   -1,  265,
   -1,   -1,   -1,   -1,   -1,   33,   34,   -1,   36,   -1,
   38,   39,   40,  325,   -1,   43,   -1,   45,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,   -1,   -1,   64,   -1,  304,  305,
  306,  307,  308,   -1,  356,   -1,   -1,   -1,  314,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   37,   38,   -1,   96,   -1,
   42,   43,   -1,   45,   46,   47,  257,  258,  259,  260,
  261,   -1,  348,  349,  265,   -1,   -1,   -1,   60,   -1,
   62,  357,  358,  359,  360,  361,  362,  363,  126,   -1,
   -1,   -1,   -1,   -1,  370,   -1,   -1,  288,  289,  290,
  291,  292,  293,  294,  295,  296,  297,  298,  299,   -1,
   -1,   -1,   94,  304,  305,  306,  307,  308,   -1,   33,
   34,   -1,   36,  314,   38,   39,   40,   -1,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  124,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   64,   -1,   -1,   -1,   -1,   -1,   -1,  348,  349,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  357,  358,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,  370,
   -1,   -1,   96,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  126,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,   -1,   -1,   -1,  265,   -1,   -1,
   -1,   -1,   -1,   33,   34,   -1,   36,   -1,   38,   39,
   40,   -1,   -1,   43,   -1,   45,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,
  298,  299,   -1,   -1,   64,   -1,  304,  305,  306,  307,
  308,   -1,   -1,   -1,   -1,   -1,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   37,   38,   -1,   -1,   -1,   42,   43,
   -1,   45,   46,   47,   -1,   -1,   96,  279,  280,  281,
  282,  283,  284,  285,  286,  287,   60,   -1,   62,   63,
  348,  349,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  357,
  358,  359,  360,  361,  362,  363,  126,   -1,   -1,   37,
   38,   -1,  370,   -1,   42,   43,   -1,   45,   46,   47,
   94,   -1,   -1,  257,  258,  259,  260,  261,   -1,   -1,
   -1,  265,   60,   -1,   62,   -1,   -1,   33,   34,   -1,
   36,   -1,   38,   39,   40,   -1,   -1,   43,   -1,   45,
  124,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
  294,  295,  296,  297,  298,  299,   94,   -1,   64,   -1,
  304,  305,  306,  307,  308,   -1,   -1,   -1,   37,   38,
  314,   -1,   -1,   42,   43,   -1,   45,   46,   47,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   96,   60,   -1,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  348,  349,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  357,  358,  359,  360,  361,  362,  363,
  126,   -1,   -1,   -1,   -1,   94,  370,  257,  258,  259,
  260,  261,   -1,   -1,   -1,  265,   -1,   -1,   -1,   -1,
   -1,   33,   34,   -1,   36,   -1,   38,   39,   40,   -1,
   -1,   43,   -1,   45,   -1,  124,   -1,   -1,  288,  289,
  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,
   -1,   -1,   64,   -1,  304,  305,  306,  307,  308,  263,
  264,   -1,   -1,   -1,  314,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  277,  278,  279,  280,  281,  282,  283,
  284,  285,  286,  287,   96,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  348,  349,
   -1,   -1,   -1,   -1,   -1,   -1,
};
}
final static short YYFINAL=1;
final static short YYMAXTOKEN=385;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'!'","'\"'",null,"'$'","'%'","'&'","'\\''","'('","')'","'*'",
"'+'","','","'-'","'.'","'/'",null,null,null,null,null,null,null,null,null,null,
"':'","';'","'<'","'='","'>'","'?'","'@'",null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"'['",null,"']'","'^'",null,"'`'",null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,"'{'","'|'","'}'","'~'",null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,"T_INCLUDE",
"T_INCLUDE_ONCE","T_EVAL","T_REQUIRE","T_REQUIRE_ONCE","T_LOGICAL_OR",
"T_LOGICAL_XOR","T_LOGICAL_AND","T_PRINT","T_PLUS_EQUAL","T_MINUS_EQUAL",
"T_MUL_EQUAL","T_DIV_EQUAL","T_CONCAT_EQUAL","T_MOD_EQUAL","T_AND_EQUAL",
"T_OR_EQUAL","T_XOR_EQUAL","T_SL_EQUAL","T_SR_EQUAL","T_BOOLEAN_OR",
"T_BOOLEAN_AND","T_IS_EQUAL","T_IS_NOT_EQUAL","T_IS_IDENTICAL",
"T_IS_NOT_IDENTICAL","T_IS_SMALLER_OR_EQUAL","T_IS_GREATER_OR_EQUAL","T_SL",
"T_SR","T_INSTANCEOF","T_INC","T_DEC","T_INT_CAST","T_DOUBLE_CAST",
"T_STRING_CAST","T_ARRAY_CAST","T_OBJECT_CAST","T_BOOL_CAST","T_UNSET_CAST",
"T_NEW","T_CLONE","T_EXIT","T_IF","T_ELSEIF","T_ELSE","T_ENDIF","T_LNUMBER",
"T_DNUMBER","T_STRING","T_STRING_VARNAME","T_VARIABLE","T_NUM_STRING",
"T_INLINE_HTML","T_CHARACTER","T_BAD_CHARACTER","T_ENCAPSED_AND_WHITESPACE",
"T_CONSTANT_ENCAPSED_STRING","T_ECHO","T_DO","T_WHILE","T_ENDWHILE","T_FOR",
"T_ENDFOR","T_FOREACH","T_ENDFOREACH","T_DECLARE","T_ENDDECLARE","T_AS",
"T_SWITCH","T_ENDSWITCH","T_CASE","T_DEFAULT","T_BREAK","T_CONTINUE",
"T_FUNCTION","T_CONST","T_RETURN","T_TRY","T_CATCH","T_THROW","T_USE",
"T_GLOBAL","T_STATIC","T_ABSTRACT","T_FINAL","T_PRIVATE","T_PROTECTED",
"T_PUBLIC","T_VAR","T_UNSET","T_ISSET","T_EMPTY","T_HALT_COMPILER","T_CLASS",
"T_INTERFACE","T_EXTENDS","T_IMPLEMENTS","T_OBJECT_OPERATOR","T_DOUBLE_ARROW",
"T_LIST","T_ARRAY","T_CLASS_C","T_METHOD_C","T_FUNC_C","T_LINE","T_FILE",
"T_COMMENT","T_DOC_COMMENT","T_OPEN_TAG","T_OPEN_TAG_WITH_ECHO","T_CLOSE_TAG",
"T_WHITESPACE","T_START_HEREDOC","T_END_HEREDOC","T_DOLLAR_OPEN_CURLY_BRACES",
"T_CURLY_OPEN","T_PAAMAYIM_NEKUDOTAYIM","T_ASPECT","T_BEFORE","T_AROUND",
"T_AFTER","T_POINTCUT","T_EXEC","T_CALL","T_SET","T_GET","T_THIS","T_WITHIN",
};
final static String yyrule[] = {
"$accept : start",
"start : top_statement_list",
"$$1 :",
"top_statement_list : top_statement_list $$1 top_statement",
"top_statement_list :",
"top_statement : statement",
"top_statement : function_declaration_statement",
"top_statement : class_declaration_statement",
"top_statement : T_HALT_COMPILER '(' ')' ';'",
"top_statement : T_ASPECT T_STRING '{' aspect_statement_list '}'",
"top_statement : T_DOC_COMMENT",
"$$2 :",
"inner_statement_list : inner_statement_list $$2 inner_statement",
"inner_statement_list :",
"inner_statement : statement",
"inner_statement : function_declaration_statement",
"inner_statement : class_declaration_statement",
"inner_statement : T_HALT_COMPILER '(' ')' ';'",
"statement : unticked_statement",
"unticked_statement : '{' inner_statement_list '}'",
"$$3 :",
"$$4 :",
"unticked_statement : T_IF '(' expr ')' $$3 statement $$4 elseif_list else_single",
"$$5 :",
"$$6 :",
"unticked_statement : T_IF '(' expr ')' ':' $$5 inner_statement_list $$6 new_elseif_list new_else_single T_ENDIF ';'",
"$$7 :",
"$$8 :",
"unticked_statement : T_WHILE '(' $$7 expr ')' $$8 while_statement",
"$$9 :",
"$$10 :",
"unticked_statement : T_DO $$9 statement T_WHILE '(' $$10 expr ')' ';'",
"$$11 :",
"$$12 :",
"$$13 :",
"unticked_statement : T_FOR '(' for_expr ';' $$11 for_expr ';' $$12 for_expr ')' $$13 for_statement",
"$$14 :",
"unticked_statement : T_SWITCH '(' expr ')' $$14 switch_case_list",
"unticked_statement : T_BREAK ';'",
"unticked_statement : T_BREAK expr ';'",
"unticked_statement : T_CONTINUE ';'",
"unticked_statement : T_CONTINUE expr ';'",
"unticked_statement : T_RETURN ';'",
"unticked_statement : T_RETURN expr_without_variable ';'",
"unticked_statement : T_RETURN variable ';'",
"unticked_statement : T_GLOBAL global_var_list ';'",
"unticked_statement : T_STATIC static_var_list ';'",
"unticked_statement : T_ECHO echo_expr_list ';'",
"unticked_statement : T_INLINE_HTML",
"unticked_statement : expr ';'",
"unticked_statement : T_USE use_filename ';'",
"unticked_statement : T_UNSET '(' unset_variables ')' ';'",
"$$15 :",
"$$16 :",
"$$17 :",
"unticked_statement : T_FOREACH '(' variable $$15 T_AS $$16 foreach_variable foreach_optional_arg ')' $$17 foreach_statement",
"$$18 :",
"$$19 :",
"$$20 :",
"unticked_statement : T_FOREACH '(' expr_without_variable $$18 T_AS $$19 variable foreach_optional_arg ')' $$20 foreach_statement",
"$$21 :",
"unticked_statement : T_DECLARE $$21 '(' declare_list ')' declare_statement",
"unticked_statement : ';'",
"$$22 :",
"$$23 :",
"$$24 :",
"$$25 :",
"$$26 :",
"unticked_statement : T_TRY $$22 '{' inner_statement_list '}' T_CATCH '(' $$23 fully_qualified_class_name $$24 T_VARIABLE ')' $$25 '{' inner_statement_list '}' $$26 additional_catches",
"unticked_statement : T_THROW expr ';'",
"additional_catches : non_empty_additional_catches",
"additional_catches :",
"non_empty_additional_catches : additional_catch",
"non_empty_additional_catches : non_empty_additional_catches additional_catch",
"$$27 :",
"$$28 :",
"additional_catch : T_CATCH '(' fully_qualified_class_name $$27 T_VARIABLE ')' $$28 '{' inner_statement_list '}'",
"unset_variables : unset_variable",
"unset_variables : unset_variables ',' unset_variable",
"unset_variable : variable",
"use_filename : T_CONSTANT_ENCAPSED_STRING",
"use_filename : '(' T_CONSTANT_ENCAPSED_STRING ')'",
"function_declaration_statement : unticked_function_declaration_statement",
"class_declaration_statement : unticked_class_declaration_statement",
"is_reference :",
"is_reference : '&'",
"$$29 :",
"$$30 :",
"unticked_function_declaration_statement : T_FUNCTION $$29 is_reference T_STRING $$30 '(' parameter_list ')' '{' inner_statement_list '}'",
"$$31 :",
"unticked_class_declaration_statement : class_entry_type T_STRING extends_from $$31 implements_list '{' class_statement_list '}'",
"$$32 :",
"unticked_class_declaration_statement : interface_entry T_STRING $$32 interface_extends_list '{' class_statement_list '}'",
"aspect_statement_list : aspect_statement_list aspect_statement",
"aspect_statement_list :",
"aspect_statement : class_statement",
"aspect_statement : variable_modifiers aspect_variable_introduction ';'",
"aspect_statement : aspect_constant_introduction ';'",
"aspect_statement : method_modifiers T_FUNCTION is_reference aspect_class_signature T_PAAMAYIM_NEKUDOTAYIM T_STRING '(' parameter_list ')' method_body",
"aspect_statement : T_POINTCUT T_STRING ':' aspect_pointcut ';'",
"aspect_statement : T_BEFORE '(' aspect_advices_variables ')' ':' aspect_pointcut '{' inner_statement_list '}'",
"aspect_statement : T_AROUND '(' ')' ':' aspect_pointcut '{' inner_statement_list '}'",
"aspect_statement : T_AFTER '(' aspect_advices_variables ')' ':' aspect_pointcut '{' inner_statement_list '}' T_DOC_COMMENT",
"aspect_advices_variables :",
"aspect_advices_variables : unset_variables",
"aspect_pointcut : aspect_pointcut T_BOOLEAN_OR aspect_pointcut",
"aspect_pointcut : aspect_pointcut T_BOOLEAN_AND aspect_pointcut",
"aspect_pointcut : '(' aspect_pointcut ')'",
"aspect_pointcut : '!' aspect_pointcut",
"aspect_pointcut : aspect_joinpoint",
"aspect_joinpoint : T_STRING",
"aspect_joinpoint : T_CALL '(' aspect_signature_r aspect_call aspect_signature '(' aspect_parameters ')' ')'",
"aspect_joinpoint : T_EXEC '(' method_modifiers is_reference aspect_signature T_PAAMAYIM_NEKUDOTAYIM aspect_signature aspect_subtype_or_not '(' aspect_parameters ')' ')'",
"aspect_joinpoint : T_NEW '(' aspect_signature_r '(' aspect_parameters ')' ')'",
"aspect_joinpoint : T_CATCH '(' aspect_class_signature ')'",
"aspect_joinpoint : T_UNSET '(' aspect_class_signature ')'",
"aspect_joinpoint : T_SET '(' aspect_signature aspect_call aspect_signature ')'",
"aspect_joinpoint : T_GET '(' aspect_signature aspect_call aspect_signature ')'",
"aspect_joinpoint : T_THIS '(' aspect_signature_r ')'",
"aspect_joinpoint : T_WITHIN '(' aspect_signature_r ')'",
"aspect_joinpoint : T_FILE '(' T_CONSTANT_ENCAPSED_STRING ')'",
"aspect_joinpoint : '@' aspect_signature_r",
"aspect_parameters : T_LNUMBER",
"aspect_parameters : '*'",
"aspect_call : T_OBJECT_OPERATOR",
"aspect_call : T_PAAMAYIM_NEKUDOTAYIM",
"aspect_variable_introduction : aspect_variable_introduction ',' aspect_class_signature T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE",
"aspect_variable_introduction : aspect_variable_introduction ',' aspect_class_signature T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE '=' static_scalar",
"aspect_variable_introduction : aspect_class_signature T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE",
"aspect_variable_introduction : aspect_class_signature T_PAAMAYIM_NEKUDOTAYIM T_VARIABLE '=' static_scalar",
"aspect_constant_introduction : aspect_constant_introduction ',' aspect_class_signature T_PAAMAYIM_NEKUDOTAYIM T_STRING '=' static_scalar",
"aspect_constant_introduction : T_CONST aspect_class_signature T_PAAMAYIM_NEKUDOTAYIM T_STRING '=' static_scalar",
"aspect_class_signature : aspect_class_signature ',' aspect_signature_r",
"aspect_class_signature : aspect_signature_r",
"aspect_signature_r : aspect_signature aspect_subtype_or_not",
"aspect_signature : aspect_signature '*'",
"aspect_signature : aspect_signature T_STRING",
"aspect_signature : '*'",
"aspect_signature : T_STRING",
"aspect_subtype_or_not : '+'",
"aspect_subtype_or_not :",
"class_entry_type : T_CLASS",
"class_entry_type : T_ABSTRACT T_CLASS",
"class_entry_type : T_FINAL T_CLASS",
"extends_from :",
"extends_from : T_EXTENDS fully_qualified_class_name",
"interface_entry : T_INTERFACE",
"interface_extends_list :",
"interface_extends_list : T_EXTENDS interface_list",
"implements_list :",
"implements_list : T_IMPLEMENTS interface_list",
"interface_list : fully_qualified_class_name",
"interface_list : interface_list ',' fully_qualified_class_name",
"foreach_optional_arg :",
"foreach_optional_arg : T_DOUBLE_ARROW foreach_variable",
"foreach_variable : variable",
"foreach_variable : '&' variable",
"for_statement : statement",
"for_statement : ':' inner_statement_list T_ENDFOR ';'",
"foreach_statement : statement",
"foreach_statement : ':' inner_statement_list T_ENDFOREACH ';'",
"declare_statement : statement",
"declare_statement : ':' inner_statement_list T_ENDDECLARE ';'",
"declare_list : T_STRING '=' static_scalar",
"declare_list : declare_list ',' T_STRING '=' static_scalar",
"switch_case_list : '{' case_list '}'",
"switch_case_list : '{' ';' case_list '}'",
"switch_case_list : ':' case_list T_ENDSWITCH ';'",
"switch_case_list : ':' ';' case_list T_ENDSWITCH ';'",
"case_list :",
"$$33 :",
"case_list : case_list T_CASE expr case_separator $$33 inner_statement_list",
"$$34 :",
"case_list : case_list T_DEFAULT case_separator $$34 inner_statement_list",
"case_separator : ':'",
"case_separator : ';'",
"while_statement : statement",
"while_statement : ':' inner_statement_list T_ENDWHILE ';'",
"elseif_list :",
"$$35 :",
"elseif_list : elseif_list T_ELSEIF '(' expr ')' $$35 statement",
"new_elseif_list :",
"$$36 :",
"new_elseif_list : new_elseif_list T_ELSEIF '(' expr ')' ':' $$36 inner_statement_list",
"else_single :",
"else_single : T_ELSE statement",
"new_else_single :",
"new_else_single : T_ELSE ':' inner_statement_list",
"parameter_list : non_empty_parameter_list",
"parameter_list :",
"non_empty_parameter_list : optional_class_type T_VARIABLE",
"non_empty_parameter_list : optional_class_type '&' T_VARIABLE",
"non_empty_parameter_list : optional_class_type '&' T_VARIABLE '=' static_scalar",
"non_empty_parameter_list : optional_class_type T_VARIABLE '=' static_scalar",
"non_empty_parameter_list : non_empty_parameter_list ',' optional_class_type T_VARIABLE",
"non_empty_parameter_list : non_empty_parameter_list ',' optional_class_type '&' T_VARIABLE",
"non_empty_parameter_list : non_empty_parameter_list ',' optional_class_type '&' T_VARIABLE '=' static_scalar",
"non_empty_parameter_list : non_empty_parameter_list ',' optional_class_type T_VARIABLE '=' static_scalar",
"optional_class_type :",
"optional_class_type : T_STRING",
"optional_class_type : T_ARRAY",
"function_call_parameter_list : non_empty_function_call_parameter_list",
"function_call_parameter_list :",
"non_empty_function_call_parameter_list : expr_without_variable",
"non_empty_function_call_parameter_list : variable",
"non_empty_function_call_parameter_list : '&' w_variable",
"non_empty_function_call_parameter_list : non_empty_function_call_parameter_list ',' expr_without_variable",
"non_empty_function_call_parameter_list : non_empty_function_call_parameter_list ',' variable",
"non_empty_function_call_parameter_list : non_empty_function_call_parameter_list ',' '&' w_variable",
"global_var_list : global_var_list ',' global_var",
"global_var_list : global_var",
"global_var : T_VARIABLE",
"global_var : '$' r_variable",
"global_var : '$' '{' expr '}'",
"static_var_list : static_var_list ',' T_VARIABLE",
"static_var_list : static_var_list ',' T_VARIABLE '=' static_scalar",
"static_var_list : T_VARIABLE",
"static_var_list : T_VARIABLE '=' static_scalar",
"class_statement_list : class_statement_list class_statement",
"class_statement_list :",
"$$37 :",
"class_statement : variable_modifiers $$37 class_variable_declaration ';'",
"class_statement : class_constant_declaration ';'",
"class_statement : method_modifiers T_FUNCTION is_reference T_STRING '(' parameter_list ')' method_body",
"class_statement : T_DOC_COMMENT",
"method_body : ';'",
"method_body : '{' inner_statement_list '}'",
"variable_modifiers : non_empty_member_modifiers",
"variable_modifiers : T_VAR",
"method_modifiers :",
"method_modifiers : non_empty_member_modifiers",
"non_empty_member_modifiers : member_modifier",
"non_empty_member_modifiers : non_empty_member_modifiers member_modifier",
"member_modifier : T_PUBLIC",
"member_modifier : T_PROTECTED",
"member_modifier : T_PRIVATE",
"member_modifier : T_STATIC",
"member_modifier : T_ABSTRACT",
"member_modifier : T_FINAL",
"class_variable_declaration : class_variable_declaration ',' T_VARIABLE",
"class_variable_declaration : class_variable_declaration ',' T_VARIABLE '=' static_scalar",
"class_variable_declaration : T_VARIABLE",
"class_variable_declaration : T_VARIABLE '=' static_scalar",
"class_constant_declaration : class_constant_declaration ',' T_STRING '=' static_scalar",
"class_constant_declaration : T_CONST T_STRING '=' static_scalar",
"echo_expr_list : echo_expr_list ',' expr",
"echo_expr_list : expr",
"for_expr :",
"for_expr : non_empty_for_expr",
"$$38 :",
"non_empty_for_expr : non_empty_for_expr ',' $$38 expr",
"non_empty_for_expr : expr",
"$$39 :",
"expr_without_variable : T_LIST '(' $$39 assignment_list ')' '=' expr",
"expr_without_variable : variable '=' expr",
"expr_without_variable : variable '=' '&' variable",
"$$40 :",
"expr_without_variable : variable '=' '&' T_NEW class_name_reference $$40 ctor_arguments",
"$$41 :",
"expr_without_variable : T_NEW class_name_reference $$41 ctor_arguments",
"expr_without_variable : T_CLONE expr",
"expr_without_variable : variable T_PLUS_EQUAL expr",
"expr_without_variable : variable T_MINUS_EQUAL expr",
"expr_without_variable : variable T_MUL_EQUAL expr",
"expr_without_variable : variable T_DIV_EQUAL expr",
"expr_without_variable : variable T_CONCAT_EQUAL expr",
"expr_without_variable : variable T_MOD_EQUAL expr",
"expr_without_variable : variable T_AND_EQUAL expr",
"expr_without_variable : variable T_OR_EQUAL expr",
"expr_without_variable : variable T_XOR_EQUAL expr",
"expr_without_variable : variable T_SL_EQUAL expr",
"expr_without_variable : variable T_SR_EQUAL expr",
"expr_without_variable : rw_variable T_INC",
"expr_without_variable : T_INC rw_variable",
"expr_without_variable : rw_variable T_DEC",
"expr_without_variable : T_DEC rw_variable",
"$$42 :",
"expr_without_variable : expr T_BOOLEAN_OR $$42 expr",
"$$43 :",
"expr_without_variable : expr T_BOOLEAN_AND $$43 expr",
"$$44 :",
"expr_without_variable : expr T_LOGICAL_OR $$44 expr",
"$$45 :",
"expr_without_variable : expr T_LOGICAL_AND $$45 expr",
"expr_without_variable : expr T_LOGICAL_XOR expr",
"expr_without_variable : expr '|' expr",
"expr_without_variable : expr '&' expr",
"expr_without_variable : expr '^' expr",
"expr_without_variable : expr '.' expr",
"expr_without_variable : expr '+' expr",
"expr_without_variable : expr '-' expr",
"expr_without_variable : expr '*' expr",
"expr_without_variable : expr '/' expr",
"expr_without_variable : expr '%' expr",
"expr_without_variable : expr T_SL expr",
"expr_without_variable : expr T_SR expr",
"expr_without_variable : '+' expr",
"expr_without_variable : '-' expr",
"expr_without_variable : '!' expr",
"expr_without_variable : '~' expr",
"expr_without_variable : expr T_IS_IDENTICAL expr",
"expr_without_variable : expr T_IS_NOT_IDENTICAL expr",
"expr_without_variable : expr T_IS_EQUAL expr",
"expr_without_variable : expr T_IS_NOT_EQUAL expr",
"expr_without_variable : expr '<' expr",
"expr_without_variable : expr T_IS_SMALLER_OR_EQUAL expr",
"expr_without_variable : expr '>' expr",
"expr_without_variable : expr T_IS_GREATER_OR_EQUAL expr",
"expr_without_variable : expr T_INSTANCEOF class_name_reference",
"expr_without_variable : '(' expr ')'",
"$$46 :",
"$$47 :",
"expr_without_variable : expr '?' $$46 expr ':' $$47 expr",
"expr_without_variable : internal_functions_in_yacc",
"expr_without_variable : T_INT_CAST expr",
"expr_without_variable : T_DOUBLE_CAST expr",
"expr_without_variable : T_STRING_CAST expr",
"expr_without_variable : T_ARRAY_CAST expr",
"expr_without_variable : T_OBJECT_CAST expr",
"expr_without_variable : T_BOOL_CAST expr",
"expr_without_variable : T_UNSET_CAST expr",
"expr_without_variable : T_EXIT exit_expr",
"$$48 :",
"expr_without_variable : '@' $$48 expr",
"expr_without_variable : scalar",
"expr_without_variable : T_ARRAY '(' array_pair_list ')'",
"expr_without_variable : '`' encaps_list '`'",
"expr_without_variable : T_PRINT expr",
"$$49 :",
"function_call : T_STRING '(' $$49 function_call_parameter_list ')'",
"$$50 :",
"function_call : fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING '(' $$50 function_call_parameter_list ')'",
"$$51 :",
"function_call : fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects '(' $$51 function_call_parameter_list ')'",
"$$52 :",
"function_call : variable_without_objects '(' $$52 function_call_parameter_list ')'",
"fully_qualified_class_name : T_STRING",
"class_name_reference : T_STRING",
"class_name_reference : dynamic_class_name_reference",
"$$53 :",
"$$54 :",
"dynamic_class_name_reference : base_variable T_OBJECT_OPERATOR $$53 object_property $$54 dynamic_class_name_variable_properties",
"dynamic_class_name_reference : base_variable",
"dynamic_class_name_variable_properties : dynamic_class_name_variable_properties dynamic_class_name_variable_property",
"dynamic_class_name_variable_properties :",
"dynamic_class_name_variable_property : T_OBJECT_OPERATOR object_property",
"exit_expr :",
"exit_expr : '(' ')'",
"exit_expr : '(' expr ')'",
"ctor_arguments :",
"ctor_arguments : '(' function_call_parameter_list ')'",
"common_scalar : T_LNUMBER",
"common_scalar : T_DNUMBER",
"common_scalar : T_CONSTANT_ENCAPSED_STRING",
"common_scalar : T_LINE",
"common_scalar : T_FILE",
"common_scalar : T_CLASS_C",
"common_scalar : T_METHOD_C",
"common_scalar : T_FUNC_C",
"static_scalar : common_scalar",
"static_scalar : T_STRING",
"static_scalar : '+' static_scalar",
"static_scalar : '-' static_scalar",
"static_scalar : T_ARRAY '(' static_array_pair_list ')'",
"static_scalar : static_class_constant",
"static_class_constant : T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING",
"scalar : T_STRING",
"scalar : T_STRING_VARNAME",
"scalar : class_constant",
"scalar : common_scalar",
"scalar : '\"' encaps_list '\"'",
"scalar : '\\'' encaps_list '\\''",
"scalar : T_START_HEREDOC encaps_list T_END_HEREDOC",
"static_array_pair_list :",
"static_array_pair_list : non_empty_static_array_pair_list possible_comma",
"possible_comma :",
"possible_comma : ','",
"non_empty_static_array_pair_list : non_empty_static_array_pair_list ',' static_scalar T_DOUBLE_ARROW static_scalar",
"non_empty_static_array_pair_list : non_empty_static_array_pair_list ',' static_scalar",
"non_empty_static_array_pair_list : static_scalar T_DOUBLE_ARROW static_scalar",
"non_empty_static_array_pair_list : static_scalar",
"expr : r_variable",
"expr : expr_without_variable",
"r_variable : variable",
"$$55 :",
"w_variable : variable $$55",
"$$56 :",
"rw_variable : variable $$56",
"$$57 :",
"$$58 :",
"variable : base_variable_with_function_calls T_OBJECT_OPERATOR $$57 object_property $$58 method_or_not variable_properties",
"variable : base_variable_with_function_calls",
"variable_properties : variable_properties variable_property",
"variable_properties :",
"$$59 :",
"variable_property : T_OBJECT_OPERATOR object_property $$59 method_or_not",
"$$60 :",
"method_or_not : '(' $$60 function_call_parameter_list ')'",
"method_or_not :",
"variable_without_objects : reference_variable",
"variable_without_objects : simple_indirect_reference reference_variable",
"static_member : fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects",
"base_variable_with_function_calls : base_variable",
"base_variable_with_function_calls : function_call",
"base_variable : reference_variable",
"base_variable : simple_indirect_reference reference_variable",
"base_variable : static_member",
"reference_variable : reference_variable '[' dim_offset ']'",
"reference_variable : reference_variable '{' expr '}'",
"reference_variable : compound_variable",
"compound_variable : T_VARIABLE",
"compound_variable : '$' '{' expr '}'",
"dim_offset :",
"dim_offset : expr",
"object_property : object_dim_list",
"$$61 :",
"object_property : variable_without_objects $$61",
"object_dim_list : object_dim_list '[' dim_offset ']'",
"object_dim_list : object_dim_list '{' expr '}'",
"object_dim_list : variable_name",
"variable_name : T_STRING",
"variable_name : '{' expr '}'",
"simple_indirect_reference : '$'",
"simple_indirect_reference : simple_indirect_reference '$'",
"assignment_list : assignment_list ',' assignment_list_element",
"assignment_list : assignment_list_element",
"assignment_list_element : variable",
"$$62 :",
"assignment_list_element : T_LIST '(' $$62 assignment_list ')'",
"assignment_list_element :",
"array_pair_list :",
"array_pair_list : non_empty_array_pair_list possible_comma",
"non_empty_array_pair_list : non_empty_array_pair_list ',' expr T_DOUBLE_ARROW expr",
"non_empty_array_pair_list : non_empty_array_pair_list ',' expr",
"non_empty_array_pair_list : expr T_DOUBLE_ARROW expr",
"non_empty_array_pair_list : expr",
"non_empty_array_pair_list : non_empty_array_pair_list ',' expr T_DOUBLE_ARROW '&' w_variable",
"non_empty_array_pair_list : non_empty_array_pair_list ',' '&' w_variable",
"non_empty_array_pair_list : expr T_DOUBLE_ARROW '&' w_variable",
"non_empty_array_pair_list : '&' w_variable",
"encaps_list : encaps_list encaps_var",
"encaps_list : encaps_list T_STRING",
"encaps_list : encaps_list T_NUM_STRING",
"encaps_list : encaps_list T_ENCAPSED_AND_WHITESPACE",
"encaps_list : encaps_list T_CHARACTER",
"encaps_list : encaps_list T_BAD_CHARACTER",
"encaps_list : encaps_list '['",
"encaps_list : encaps_list ']'",
"encaps_list : encaps_list '{'",
"encaps_list : encaps_list '}'",
"encaps_list : encaps_list T_OBJECT_OPERATOR",
"encaps_list :",
"encaps_var : T_VARIABLE",
"$$63 :",
"encaps_var : T_VARIABLE '[' $$63 encaps_var_offset ']'",
"encaps_var : T_VARIABLE T_OBJECT_OPERATOR T_STRING",
"encaps_var : T_DOLLAR_OPEN_CURLY_BRACES expr '}'",
"encaps_var : T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'",
"encaps_var : T_CURLY_OPEN variable '}'",
"encaps_var_offset : T_STRING",
"encaps_var_offset : T_NUM_STRING",
"encaps_var_offset : T_VARIABLE",
"internal_functions_in_yacc : T_ISSET '(' isset_variables ')'",
"internal_functions_in_yacc : T_EMPTY '(' variable ')'",
"internal_functions_in_yacc : T_INCLUDE expr",
"internal_functions_in_yacc : T_INCLUDE_ONCE expr",
"internal_functions_in_yacc : T_EVAL '(' expr ')'",
"internal_functions_in_yacc : T_REQUIRE expr",
"internal_functions_in_yacc : T_REQUIRE_ONCE expr",
"isset_variables : variable",
"$$64 :",
"isset_variables : isset_variables ',' $$64 variable",
"class_constant : fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING",
};

//#line 1029 "php_parser.y"


private static void yy_check() {
	try {
		FileReader fileReader = new FileReader("/home/wcandillon/apdt/workspace/org.phpaspect.parsetree/src/org/phpaspect/parsetree/PHPAspectParser.java");
		BufferedReader bufferedReader = new BufferedReader(fileReader);
		String line = bufferedReader.readLine();
		String table = "";
		while(line != null){
			if(line.equals("yy_check();/*yycheck = new short[] {")){
				line = bufferedReader.readLine();
				while(!line.equals("};")){
					table += line;
					line = bufferedReader.readLine();
				}
				String[] values = table.split(",");
				yycheck = new short[values.length];
				for(int i=0; i<values.length; i++){
					yycheck[i] = Short.parseShort(values[i].trim());
 				}
				return;
			}
			line = bufferedReader.readLine();
		}
	} catch (FileNotFoundException e) {
		System.err.println("File not found");
	} catch (IOException e) {
		System.err.println("I/O error");
	}
}

private void yyerror(String string) {
	System.out.println(string);
}

/* a reference to the lexer object */
private PHPAspectLexer lexer;

/* interface to the lexer */
private int yylex () {
  int yyl_return = -1;
  try {
    yyl_return = lexer.yylex();
  }
  catch (IOException e) {
    System.err.println("IO error :"+e);
  }
  return yyl_return;
}

/* lexer is created in the constructor */
public PHPAspectParser(Reader r) {
  lexer = new PHPAspectLexer(r);
}

public PHPAspectParser(Reader r, boolean debug) {
	lexer = new PHPAspectLexer(r);
	yydebug = debug;
}
//#line 3504 "PHPAspectParser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    /*switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 2:
//#line 154 "php_parser.y"
{ zend_do_extended_info(TSRMLS_C); }
break;
case 3:
//#line 154 "php_parser.y"
{ HANDLE_INTERACTIVE(); }
break;
case 6:
//#line 161 "php_parser.y"
{ zend_do_early_binding(TSRMLS_C); }
break;
case 7:
//#line 162 "php_parser.y"
{ zend_do_early_binding(TSRMLS_C); }
break;
case 8:
//#line 163 "php_parser.y"
{ REGISTER_MAIN_LONG_CONSTANT("__COMPILER_HALT_OFFSET__", zend_get_scanned_file_offset(TSRMLS_C), CONST_CS); YYACCEPT; }
break;
case 11:
//#line 172 "php_parser.y"
{ zend_do_extended_info(TSRMLS_C); }
break;
case 12:
//#line 172 "php_parser.y"
{ HANDLE_INTERACTIVE(); }
break;
case 17:
//#line 181 "php_parser.y"
{ zend_error(E_COMPILE_ERROR, "__HALT_COMPILER() can only be used from the outermost scope"); }
break;
case 18:
//#line 186 "php_parser.y"
{ zend_do_ticks(TSRMLS_C); }
break;
case 20:
//#line 191 "php_parser.y"
{ zend_do_if_cond(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 21:
//#line 191 "php_parser.y"
{ zend_do_if_after_statement(&val_peek(2), 1 TSRMLS_CC); }
break;
case 22:
//#line 191 "php_parser.y"
{ zend_do_if_end(TSRMLS_C); }
break;
case 23:
//#line 192 "php_parser.y"
{ zend_do_if_cond(&val_peek(2), &val_peek(1) TSRMLS_CC); }
break;
case 24:
//#line 192 "php_parser.y"
{ zend_do_if_after_statement(&val_peek(3), 1 TSRMLS_CC); }
break;
case 25:
//#line 192 "php_parser.y"
{ zend_do_if_end(TSRMLS_C); }
break;
case 26:
//#line 193 "php_parser.y"
{ val_peek(1).u.opline_num = get_next_op_number(CG(active_op_array));  }
break;
case 27:
//#line 193 "php_parser.y"
{ zend_do_while_cond(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 28:
//#line 193 "php_parser.y"
{ zend_do_while_end(&val_peek(6), &val_peek(2) TSRMLS_CC); }
break;
case 29:
//#line 194 "php_parser.y"
{ val_peek(0).u.opline_num = get_next_op_number(CG(active_op_array));  zend_do_do_while_begin(TSRMLS_C); }
break;
case 30:
//#line 194 "php_parser.y"
{ val_peek(0).u.opline_num = get_next_op_number(CG(active_op_array)); }
break;
case 31:
//#line 194 "php_parser.y"
{ zend_do_do_while_end(&val_peek(8), &val_peek(4), &val_peek(2) TSRMLS_CC); }
break;
case 32:
//#line 198 "php_parser.y"
{ zend_do_free(&val_peek(1) TSRMLS_CC); val_peek(0).u.opline_num = get_next_op_number(CG(active_op_array)); }
break;
case 33:
//#line 200 "php_parser.y"
{ zend_do_extended_info(TSRMLS_C); zend_do_for_cond(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 34:
//#line 202 "php_parser.y"
{ zend_do_free(&val_peek(1) TSRMLS_CC); zend_do_for_before_statement(&val_peek(6), &val_peek(3) TSRMLS_CC); }
break;
case 35:
//#line 203 "php_parser.y"
{ zend_do_for_end(&val_peek(5) TSRMLS_CC); }
break;
case 36:
//#line 204 "php_parser.y"
{ zend_do_switch_cond(&val_peek(1) TSRMLS_CC); }
break;
case 37:
//#line 204 "php_parser.y"
{ zend_do_switch_end(&val_peek(0) TSRMLS_CC); }
break;
case 38:
//#line 205 "php_parser.y"
{ zend_do_brk_cont(ZEND_BRK, NULL TSRMLS_CC); }
break;
case 39:
//#line 206 "php_parser.y"
{ zend_do_brk_cont(ZEND_BRK, &val_peek(1) TSRMLS_CC); }
break;
case 40:
//#line 207 "php_parser.y"
{ zend_do_brk_cont(ZEND_CONT, NULL TSRMLS_CC); }
break;
case 41:
//#line 208 "php_parser.y"
{ zend_do_brk_cont(ZEND_CONT, &val_peek(1) TSRMLS_CC); }
break;
case 42:
//#line 209 "php_parser.y"
{ zend_do_return(NULL, 0 TSRMLS_CC); }
break;
case 43:
//#line 210 "php_parser.y"
{ zend_do_return(&val_peek(1), 0 TSRMLS_CC); }
break;
case 44:
//#line 211 "php_parser.y"
{ zend_do_return(&val_peek(1), 1 TSRMLS_CC); }
break;
case 48:
//#line 215 "php_parser.y"
{ zend_do_echo(&val_peek(0) TSRMLS_CC); }
break;
case 49:
//#line 216 "php_parser.y"
{ zend_do_free(&val_peek(1) TSRMLS_CC); }
break;
case 50:
//#line 217 "php_parser.y"
{ zend_error(E_COMPILE_ERROR,"use: Not yet supported. Please use include_once() or require_once()");  zval_dtor(&val_peek(1).u.constant); }
break;
case 52:
//#line 219 "php_parser.y"
{ zend_do_foreach_begin(&val_peek(2), &val_peek(1), &val_peek(0), 1 TSRMLS_CC); }
break;
case 53:
//#line 220 "php_parser.y"
{ zend_do_foreach_fetch(&val_peek(4), &val_peek(3), &val_peek(0) TSRMLS_CC); }
break;
case 54:
//#line 221 "php_parser.y"
{ zend_do_foreach_cont(&val_peek(8), &val_peek(4), &val_peek(2), &val_peek(1) TSRMLS_CC); }
break;
case 55:
//#line 222 "php_parser.y"
{ zend_do_foreach_end(&val_peek(10), &val_peek(6) TSRMLS_CC); }
break;
case 56:
//#line 223 "php_parser.y"
{ zend_do_foreach_begin(&val_peek(2), &val_peek(1), &val_peek(0), 0 TSRMLS_CC); }
break;
case 57:
//#line 224 "php_parser.y"
{ zend_do_foreach_fetch(&val_peek(4), &val_peek(3), &val_peek(0) TSRMLS_CC); }
break;
case 58:
//#line 225 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_foreach_cont(&val_peek(8), &val_peek(4), &val_peek(2), &val_peek(1) TSRMLS_CC); }
break;
case 59:
//#line 226 "php_parser.y"
{ zend_do_foreach_end(&val_peek(10), &val_peek(6) TSRMLS_CC); }
break;
case 60:
//#line 227 "php_parser.y"
{ val_peek(0).u.opline_num = get_next_op_number(CG(active_op_array)); zend_do_declare_begin(TSRMLS_C); }
break;
case 61:
//#line 227 "php_parser.y"
{ zend_do_declare_end(&val_peek(5) TSRMLS_CC); }
break;
case 63:
//#line 229 "php_parser.y"
{ zend_do_try(&val_peek(0) TSRMLS_CC); }
break;
case 64:
//#line 230 "php_parser.y"
{ zend_initialize_try_catch_element(&val_peek(6) TSRMLS_CC); }
break;
case 65:
//#line 231 "php_parser.y"
{ zend_do_first_catch(&val_peek(2) TSRMLS_CC); }
break;
case 66:
//#line 232 "php_parser.y"
{ zend_do_begin_catch(&val_peek(11), &val_peek(3), &val_peek(1), 1 TSRMLS_CC); }
break;
case 67:
//#line 233 "php_parser.y"
{ zend_do_end_catch(&val_peek(15) TSRMLS_CC); }
break;
case 68:
//#line 234 "php_parser.y"
{ zend_do_mark_last_catch(&val_peek(11), &val_peek(0) TSRMLS_CC); }
break;
case 69:
//#line 235 "php_parser.y"
{ zend_do_throw(&val_peek(1) TSRMLS_CC); }
break;
case 70:
//#line 240 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 71:
//#line 241 "php_parser.y"
{ yyval.u.opline_num = -1; }
break;
case 72:
//#line 245 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 73:
//#line 246 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 74:
//#line 251 "php_parser.y"
{ yyval.u.opline_num = get_next_op_number(CG(active_op_array)); }
break;
case 75:
//#line 251 "php_parser.y"
{ zend_do_begin_catch(&val_peek(5), &val_peek(3), &val_peek(1), 0 TSRMLS_CC); }
break;
case 76:
//#line 251 "php_parser.y"
{ zend_do_end_catch(&val_peek(9) TSRMLS_CC); }
break;
case 79:
//#line 261 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_UNSET, 0 TSRMLS_CC); zend_do_unset(&val_peek(0) TSRMLS_CC); }
break;
case 80:
//#line 265 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 81:
//#line 266 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 82:
//#line 271 "php_parser.y"
{ zend_do_ticks(TSRMLS_C); }
break;
case 83:
//#line 275 "php_parser.y"
{ zend_do_ticks(TSRMLS_C); }
break;
case 84:
//#line 280 "php_parser.y"
{ yyval.op_type = ZEND_RETURN_VAL; }
break;
case 85:
//#line 281 "php_parser.y"
{ yyval.op_type = ZEND_RETURN_REF; }
break;
case 86:
//#line 286 "php_parser.y"
{ val_peek(0).u.opline_num = CG(zend_lineno); }
break;
case 87:
//#line 286 "php_parser.y"
{ zend_do_begin_function_declaration(&val_peek(3), &val_peek(0), 0, val_peek(1).op_type, NULL TSRMLS_CC); }
break;
case 88:
//#line 287 "php_parser.y"
{ zend_do_end_function_declaration(&val_peek(10) TSRMLS_CC); }
break;
case 89:
//#line 292 "php_parser.y"
{ zend_do_begin_class_declaration(&val_peek(2), &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 90:
//#line 296 "php_parser.y"
{ zend_do_end_class_declaration(&val_peek(7), &val_peek(6) TSRMLS_CC); }
break;
case 91:
//#line 298 "php_parser.y"
{ zend_do_begin_class_declaration(&val_peek(1), &val_peek(0), NULL TSRMLS_CC); }
break;
case 92:
//#line 302 "php_parser.y"
{ zend_do_end_class_declaration(&val_peek(6), &val_peek(5) TSRMLS_CC); }
break;
case 141:
//#line 408 "php_parser.y"
{ yyval.u.opline_num = CG(zend_lineno); yyval.u.EA.type = 0; }
break;
case 142:
//#line 409 "php_parser.y"
{ yyval.u.opline_num = CG(zend_lineno); yyval.u.EA.type = ZEND_ACC_EXPLICIT_ABSTRACT_CLASS; }
break;
case 143:
//#line 410 "php_parser.y"
{ yyval.u.opline_num = CG(zend_lineno); yyval.u.EA.type = ZEND_ACC_FINAL_CLASS; }
break;
case 144:
//#line 414 "php_parser.y"
{ yyval.op_type = IS_UNUSED; }
break;
case 145:
//#line 415 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 146:
//#line 419 "php_parser.y"
{ yyval.u.opline_num = CG(zend_lineno); yyval.u.EA.type = ZEND_ACC_INTERFACE; }
break;
case 151:
//#line 433 "php_parser.y"
{ zend_do_implements_interface(&val_peek(0) TSRMLS_CC); }
break;
case 152:
//#line 434 "php_parser.y"
{ zend_do_implements_interface(&val_peek(0) TSRMLS_CC); }
break;
case 153:
//#line 438 "php_parser.y"
{ yyval.op_type = IS_UNUSED; }
break;
case 154:
//#line 439 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 155:
//#line 444 "php_parser.y"
{ zend_check_writable_variable(&val_peek(0)); yyval = val_peek(0); }
break;
case 156:
//#line 445 "php_parser.y"
{ zend_check_writable_variable(&val_peek(0)); yyval = val_peek(0);  yyval.u.EA.type |= ZEND_PARSED_REFERENCE_VARIABLE; }
break;
case 163:
//#line 467 "php_parser.y"
{ zend_do_declare_stmt(&val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 164:
//#line 468 "php_parser.y"
{ zend_do_declare_stmt(&val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 165:
//#line 473 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 166:
//#line 474 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 167:
//#line 475 "php_parser.y"
{ yyval = val_peek(2); }
break;
case 168:
//#line 476 "php_parser.y"
{ yyval = val_peek(2); }
break;
case 169:
//#line 481 "php_parser.y"
{ yyval.op_type = IS_UNUSED; }
break;
case 170:
//#line 482 "php_parser.y"
{ zend_do_extended_info(TSRMLS_C);  zend_do_case_before_statement(&val_peek(3), &val_peek(2), &val_peek(1) TSRMLS_CC); }
break;
case 171:
//#line 482 "php_parser.y"
{ zend_do_case_after_statement(&yyval, &val_peek(4) TSRMLS_CC); yyval.op_type = IS_CONST; }
break;
case 172:
//#line 483 "php_parser.y"
{ zend_do_extended_info(TSRMLS_C);  zend_do_default_before_statement(&val_peek(2), &val_peek(1) TSRMLS_CC); }
break;
case 173:
//#line 483 "php_parser.y"
{ zend_do_case_after_statement(&yyval, &val_peek(3) TSRMLS_CC); yyval.op_type = IS_CONST; }
break;
case 179:
//#line 502 "php_parser.y"
{ zend_do_if_cond(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 180:
//#line 502 "php_parser.y"
{ zend_do_if_after_statement(&val_peek(2), 0 TSRMLS_CC); }
break;
case 182:
//#line 508 "php_parser.y"
{ zend_do_if_cond(&val_peek(2), &val_peek(1) TSRMLS_CC); }
break;
case 183:
//#line 508 "php_parser.y"
{ zend_do_if_after_statement(&val_peek(3), 0 TSRMLS_CC); }
break;
case 190:
//#line 531 "php_parser.y"
{ znode tmp;  fetch_simple_variable(&tmp, &val_peek(0), 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, &val_peek(1), &val_peek(0), 0 TSRMLS_CC); }
break;
case 191:
//#line 532 "php_parser.y"
{ znode tmp;  fetch_simple_variable(&tmp, &val_peek(0), 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, &val_peek(2), &val_peek(0), 1 TSRMLS_CC); }
break;
case 192:
//#line 533 "php_parser.y"
{ znode tmp;  fetch_simple_variable(&tmp, &val_peek(2), 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV_INIT, &tmp, &yyval, &val_peek(0), &val_peek(4), &val_peek(2), 1 TSRMLS_CC); }
break;
case 193:
//#line 534 "php_parser.y"
{ znode tmp;  fetch_simple_variable(&tmp, &val_peek(2), 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV_INIT, &tmp, &yyval, &val_peek(0), &val_peek(3), &val_peek(2), 0 TSRMLS_CC); }
break;
case 194:
//#line 535 "php_parser.y"
{ znode tmp;  fetch_simple_variable(&tmp, &val_peek(0), 0 TSRMLS_CC); yyval=val_peek(3); yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, &val_peek(1), &val_peek(0), 0 TSRMLS_CC); }
break;
case 195:
//#line 536 "php_parser.y"
{ znode tmp;  fetch_simple_variable(&tmp, &val_peek(0), 0 TSRMLS_CC); yyval=val_peek(4); yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, &val_peek(2), &val_peek(0), 1 TSRMLS_CC); }
break;
case 196:
//#line 537 "php_parser.y"
{ znode tmp;  fetch_simple_variable(&tmp, &val_peek(2), 0 TSRMLS_CC); yyval=val_peek(6); yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV_INIT, &tmp, &yyval, &val_peek(0), &val_peek(4), &val_peek(2), 1 TSRMLS_CC); }
break;
case 197:
//#line 538 "php_parser.y"
{ znode tmp;  fetch_simple_variable(&tmp, &val_peek(2), 0 TSRMLS_CC); yyval=val_peek(5); yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV_INIT, &tmp, &yyval, &val_peek(0), &val_peek(3), &val_peek(2), 0 TSRMLS_CC); }
break;
case 198:
//#line 543 "php_parser.y"
{ yyval.op_type = IS_UNUSED; }
break;
case 199:
//#line 544 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 200:
//#line 545 "php_parser.y"
{ yyval.op_type = IS_CONST; yyval.u.constant.type=IS_NULL;}
break;
case 201:
//#line 550 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 202:
//#line 551 "php_parser.y"
{ yyval.u.constant.value.lval = 0; }
break;
case 203:
//#line 556 "php_parser.y"
{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&val_peek(0), ZEND_SEND_VAL, yyval.u.constant.value.lval TSRMLS_CC); }
break;
case 204:
//#line 557 "php_parser.y"
{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&val_peek(0), ZEND_SEND_VAR, yyval.u.constant.value.lval TSRMLS_CC); }
break;
case 205:
//#line 558 "php_parser.y"
{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&val_peek(0), ZEND_SEND_REF, yyval.u.constant.value.lval TSRMLS_CC); }
break;
case 206:
//#line 559 "php_parser.y"
{ yyval.u.constant.value.lval=val_peek(2).u.constant.value.lval+1;  zend_do_pass_param(&val_peek(0), ZEND_SEND_VAL, yyval.u.constant.value.lval TSRMLS_CC); }
break;
case 207:
//#line 560 "php_parser.y"
{ yyval.u.constant.value.lval=val_peek(2).u.constant.value.lval+1;  zend_do_pass_param(&val_peek(0), ZEND_SEND_VAR, yyval.u.constant.value.lval TSRMLS_CC); }
break;
case 208:
//#line 561 "php_parser.y"
{ yyval.u.constant.value.lval=val_peek(3).u.constant.value.lval+1;  zend_do_pass_param(&val_peek(0), ZEND_SEND_REF, yyval.u.constant.value.lval TSRMLS_CC); }
break;
case 209:
//#line 565 "php_parser.y"
{ zend_do_fetch_global_variable(&val_peek(0), NULL, ZEND_FETCH_GLOBAL_LOCK TSRMLS_CC); }
break;
case 210:
//#line 566 "php_parser.y"
{ zend_do_fetch_global_variable(&val_peek(0), NULL, ZEND_FETCH_GLOBAL_LOCK TSRMLS_CC); }
break;
case 211:
//#line 571 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 212:
//#line 572 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 213:
//#line 573 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 214:
//#line 578 "php_parser.y"
{ zend_do_fetch_static_variable(&val_peek(0), NULL, ZEND_FETCH_STATIC TSRMLS_CC); }
break;
case 215:
//#line 579 "php_parser.y"
{ zend_do_fetch_static_variable(&val_peek(2), &val_peek(0), ZEND_FETCH_STATIC TSRMLS_CC); }
break;
case 216:
//#line 580 "php_parser.y"
{ zend_do_fetch_static_variable(&val_peek(0), NULL, ZEND_FETCH_STATIC TSRMLS_CC); }
break;
case 217:
//#line 581 "php_parser.y"
{ zend_do_fetch_static_variable(&val_peek(2), &val_peek(0), ZEND_FETCH_STATIC TSRMLS_CC); }
break;
case 220:
//#line 593 "php_parser.y"
{ CG(access_type) = val_peek(0).u.constant.value.lval; }
break;
case 225:
//#line 603 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_ABSTRACT; }
break;
case 226:
//#line 604 "php_parser.y"
{ yyval.u.constant.value.lval = 0;	}
break;
case 227:
//#line 608 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 228:
//#line 609 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_PUBLIC; }
break;
case 229:
//#line 613 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_PUBLIC; }
break;
case 230:
//#line 614 "php_parser.y"
{ yyval = val_peek(0);  if (!(yyval.u.constant.value.lval & ZEND_ACC_PPP_MASK)) { yyval.u.constant.value.lval |= ZEND_ACC_PUBLIC; } }
break;
case 231:
//#line 618 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 232:
//#line 619 "php_parser.y"
{ yyval.u.constant.value.lval = zend_do_verify_access_types(&val_peek(1), &val_peek(0)); }
break;
case 233:
//#line 623 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_PUBLIC; }
break;
case 234:
//#line 624 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_PROTECTED; }
break;
case 235:
//#line 625 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_PRIVATE; }
break;
case 236:
//#line 626 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_STATIC; }
break;
case 237:
//#line 627 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_ABSTRACT; }
break;
case 238:
//#line 628 "php_parser.y"
{ yyval.u.constant.value.lval = ZEND_ACC_FINAL; }
break;
case 239:
//#line 632 "php_parser.y"
{ zend_do_declare_property(&val_peek(0), NULL, CG(access_type) TSRMLS_CC); }
break;
case 240:
//#line 633 "php_parser.y"
{ zend_do_declare_property(&val_peek(2), &val_peek(0), CG(access_type) TSRMLS_CC); }
break;
case 241:
//#line 634 "php_parser.y"
{ zend_do_declare_property(&val_peek(0), NULL, CG(access_type) TSRMLS_CC); }
break;
case 242:
//#line 635 "php_parser.y"
{ zend_do_declare_property(&val_peek(2), &val_peek(0), CG(access_type) TSRMLS_CC); }
break;
case 243:
//#line 639 "php_parser.y"
{ zend_do_declare_class_constant(&val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 244:
//#line 640 "php_parser.y"
{ zend_do_declare_class_constant(&val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 245:
//#line 644 "php_parser.y"
{ zend_do_echo(&val_peek(0) TSRMLS_CC); }
break;
case 246:
//#line 645 "php_parser.y"
{ zend_do_echo(&val_peek(0) TSRMLS_CC); }
break;
case 247:
//#line 650 "php_parser.y"
{ yyval.op_type = IS_CONST;  yyval.u.constant.type = IS_BOOL;  yyval.u.constant.value.lval = 1; }
break;
case 248:
//#line 651 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 249:
//#line 655 "php_parser.y"
{ zend_do_free(&val_peek(1) TSRMLS_CC); }
break;
case 250:
//#line 655 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 251:
//#line 656 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 252:
//#line 660 "php_parser.y"
{ zend_do_list_init(TSRMLS_C); }
break;
case 253:
//#line 660 "php_parser.y"
{ zend_do_list_end(&yyval, &val_peek(0) TSRMLS_CC); }
break;
case 254:
//#line 661 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign(&yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 255:
//#line 662 "php_parser.y"
{ zend_check_writable_variable(&val_peek(3)); zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign_ref(&yyval, &val_peek(3), &val_peek(0) TSRMLS_CC); }
break;
case 256:
//#line 663 "php_parser.y"
{ zend_error(E_STRICT, "Assigning the return value of new by reference is deprecated");  zend_check_writable_variable(&val_peek(4)); zend_do_extended_fcall_begin(TSRMLS_C); zend_do_begin_new_object(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 257:
//#line 663 "php_parser.y"
{ zend_do_end_new_object(&val_peek(4), &val_peek(3), &val_peek(0) TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C); zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign_ref(&yyval, &val_peek(6), &val_peek(4) TSRMLS_CC); }
break;
case 258:
//#line 664 "php_parser.y"
{ zend_do_extended_fcall_begin(TSRMLS_C); zend_do_begin_new_object(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 259:
//#line 664 "php_parser.y"
{ zend_do_end_new_object(&yyval, &val_peek(3), &val_peek(0) TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);}
break;
case 260:
//#line 665 "php_parser.y"
{ zend_do_clone(&yyval, &val_peek(0) TSRMLS_CC); }
break;
case 261:
//#line 666 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_ADD, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 262:
//#line 667 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SUB, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 263:
//#line 668 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_MUL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 264:
//#line 669 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_DIV, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 265:
//#line 670 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_CONCAT, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 266:
//#line 671 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_MOD, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 267:
//#line 672 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_AND, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 268:
//#line 673 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_OR, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 269:
//#line 674 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_XOR, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 270:
//#line 675 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 271:
//#line 676 "php_parser.y"
{ zend_check_writable_variable(&val_peek(2)); zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SR, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 272:
//#line 677 "php_parser.y"
{ zend_do_post_incdec(&yyval, &val_peek(1), ZEND_POST_INC TSRMLS_CC); }
break;
case 273:
//#line 678 "php_parser.y"
{ zend_do_pre_incdec(&yyval, &val_peek(0), ZEND_PRE_INC TSRMLS_CC); }
break;
case 274:
//#line 679 "php_parser.y"
{ zend_do_post_incdec(&yyval, &val_peek(1), ZEND_POST_DEC TSRMLS_CC); }
break;
case 275:
//#line 680 "php_parser.y"
{ zend_do_pre_incdec(&yyval, &val_peek(0), ZEND_PRE_DEC TSRMLS_CC); }
break;
case 276:
//#line 681 "php_parser.y"
{ zend_do_boolean_or_begin(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 277:
//#line 681 "php_parser.y"
{ zend_do_boolean_or_end(&yyval, &val_peek(3), &val_peek(0), &val_peek(2) TSRMLS_CC); }
break;
case 278:
//#line 682 "php_parser.y"
{ zend_do_boolean_and_begin(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 279:
//#line 682 "php_parser.y"
{ zend_do_boolean_and_end(&yyval, &val_peek(3), &val_peek(0), &val_peek(2) TSRMLS_CC); }
break;
case 280:
//#line 683 "php_parser.y"
{ zend_do_boolean_or_begin(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 281:
//#line 683 "php_parser.y"
{ zend_do_boolean_or_end(&yyval, &val_peek(3), &val_peek(0), &val_peek(2) TSRMLS_CC); }
break;
case 282:
//#line 684 "php_parser.y"
{ zend_do_boolean_and_begin(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 283:
//#line 684 "php_parser.y"
{ zend_do_boolean_and_end(&yyval, &val_peek(3), &val_peek(0), &val_peek(2) TSRMLS_CC); }
break;
case 284:
//#line 685 "php_parser.y"
{ zend_do_binary_op(ZEND_BOOL_XOR, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 285:
//#line 686 "php_parser.y"
{ zend_do_binary_op(ZEND_BW_OR, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 286:
//#line 687 "php_parser.y"
{ zend_do_binary_op(ZEND_BW_AND, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 287:
//#line 688 "php_parser.y"
{ zend_do_binary_op(ZEND_BW_XOR, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 288:
//#line 689 "php_parser.y"
{ zend_do_binary_op(ZEND_CONCAT, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 289:
//#line 690 "php_parser.y"
{ zend_do_binary_op(ZEND_ADD, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 290:
//#line 691 "php_parser.y"
{ zend_do_binary_op(ZEND_SUB, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 291:
//#line 692 "php_parser.y"
{ zend_do_binary_op(ZEND_MUL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 292:
//#line 693 "php_parser.y"
{ zend_do_binary_op(ZEND_DIV, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 293:
//#line 694 "php_parser.y"
{ zend_do_binary_op(ZEND_MOD, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 294:
//#line 695 "php_parser.y"
{ zend_do_binary_op(ZEND_SL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 295:
//#line 696 "php_parser.y"
{ zend_do_binary_op(ZEND_SR, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 296:
//#line 697 "php_parser.y"
{ val_peek(1).u.constant.value.lval=0; val_peek(1).u.constant.type=IS_LONG; val_peek(1).op_type = IS_CONST; INIT_PZVAL(&val_peek(1).u.constant); zend_do_binary_op(ZEND_ADD, &yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 297:
//#line 698 "php_parser.y"
{ val_peek(1).u.constant.value.lval=0; val_peek(1).u.constant.type=IS_LONG; val_peek(1).op_type = IS_CONST; INIT_PZVAL(&val_peek(1).u.constant); zend_do_binary_op(ZEND_SUB, &yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 298:
//#line 699 "php_parser.y"
{ zend_do_unary_op(ZEND_BOOL_NOT, &yyval, &val_peek(0) TSRMLS_CC); }
break;
case 299:
//#line 700 "php_parser.y"
{ zend_do_unary_op(ZEND_BW_NOT, &yyval, &val_peek(0) TSRMLS_CC); }
break;
case 300:
//#line 701 "php_parser.y"
{ zend_do_binary_op(ZEND_IS_IDENTICAL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 301:
//#line 702 "php_parser.y"
{ zend_do_binary_op(ZEND_IS_NOT_IDENTICAL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 302:
//#line 703 "php_parser.y"
{ zend_do_binary_op(ZEND_IS_EQUAL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 303:
//#line 704 "php_parser.y"
{ zend_do_binary_op(ZEND_IS_NOT_EQUAL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 304:
//#line 705 "php_parser.y"
{ zend_do_binary_op(ZEND_IS_SMALLER, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 305:
//#line 706 "php_parser.y"
{ zend_do_binary_op(ZEND_IS_SMALLER_OR_EQUAL, &yyval, &val_peek(2), &val_peek(0) TSRMLS_CC); }
break;
case 306:
//#line 707 "php_parser.y"
{ zend_do_binary_op(ZEND_IS_SMALLER, &yyval, &val_peek(0), &val_peek(2) TSRMLS_CC); }
break;
case 307:
//#line 708 "php_parser.y"
{ zend_do_binary_op(ZEND_IS_SMALLER_OR_EQUAL, &yyval, &val_peek(0), &val_peek(2) TSRMLS_CC); }
break;
case 308:
//#line 709 "php_parser.y"
{ zend_do_instanceof(&yyval, &val_peek(2), &val_peek(0), 0 TSRMLS_CC); }
break;
case 309:
//#line 710 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 310:
//#line 711 "php_parser.y"
{ zend_do_begin_qm_op(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 311:
//#line 712 "php_parser.y"
{ zend_do_qm_true(&val_peek(1), &val_peek(3), &val_peek(0) TSRMLS_CC); }
break;
case 312:
//#line 713 "php_parser.y"
{ zend_do_qm_false(&yyval, &val_peek(0), &val_peek(5), &val_peek(2) TSRMLS_CC); }
break;
case 313:
//#line 714 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 314:
//#line 715 "php_parser.y"
{ zend_do_cast(&yyval, &val_peek(0), IS_LONG TSRMLS_CC); }
break;
case 315:
//#line 716 "php_parser.y"
{ zend_do_cast(&yyval, &val_peek(0), IS_DOUBLE TSRMLS_CC); }
break;
case 316:
//#line 717 "php_parser.y"
{ zend_do_cast(&yyval, &val_peek(0), IS_STRING TSRMLS_CC); }
break;
case 317:
//#line 718 "php_parser.y"
{ zend_do_cast(&yyval, &val_peek(0), IS_ARRAY TSRMLS_CC); }
break;
case 318:
//#line 719 "php_parser.y"
{ zend_do_cast(&yyval, &val_peek(0), IS_OBJECT TSRMLS_CC); }
break;
case 319:
//#line 720 "php_parser.y"
{ zend_do_cast(&yyval, &val_peek(0), IS_BOOL TSRMLS_CC); }
break;
case 320:
//#line 721 "php_parser.y"
{ zend_do_cast(&yyval, &val_peek(0), IS_NULL TSRMLS_CC); }
break;
case 321:
//#line 722 "php_parser.y"
{ zend_do_exit(&yyval, &val_peek(0) TSRMLS_CC); }
break;
case 322:
//#line 723 "php_parser.y"
{ zend_do_begin_silence(&val_peek(0) TSRMLS_CC); }
break;
case 323:
//#line 723 "php_parser.y"
{ zend_do_end_silence(&val_peek(2) TSRMLS_CC); yyval = val_peek(0); }
break;
case 324:
//#line 724 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 325:
//#line 725 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 326:
//#line 726 "php_parser.y"
{ zend_do_shell_exec(&yyval, &val_peek(1) TSRMLS_CC); }
break;
case 327:
//#line 727 "php_parser.y"
{ zend_do_print(&yyval, &val_peek(0) TSRMLS_CC); }
break;
case 328:
//#line 731 "php_parser.y"
{ val_peek(0).u.opline_num = zend_do_begin_function_call(&val_peek(1) TSRMLS_CC); }
break;
case 329:
//#line 733 "php_parser.y"
{ zend_do_end_function_call(&val_peek(4), &yyval, &val_peek(1), 0, val_peek(3).u.opline_num TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C); }
break;
case 330:
//#line 734 "php_parser.y"
{ zend_do_begin_class_member_function_call(&val_peek(3), &val_peek(1) TSRMLS_CC); }
break;
case 331:
//#line 736 "php_parser.y"
{ zend_do_end_function_call(NULL, &yyval, &val_peek(1), 1, 1 TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);}
break;
case 332:
//#line 737 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); zend_do_begin_class_member_function_call(&val_peek(3), &val_peek(1) TSRMLS_CC); }
break;
case 333:
//#line 739 "php_parser.y"
{ zend_do_end_function_call(NULL, &yyval, &val_peek(1), 1, 1 TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);}
break;
case 334:
//#line 740 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); zend_do_begin_dynamic_function_call(&val_peek(1) TSRMLS_CC); }
break;
case 335:
//#line 742 "php_parser.y"
{ zend_do_end_function_call(&val_peek(4), &yyval, &val_peek(1), 0, 1 TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);}
break;
case 336:
//#line 746 "php_parser.y"
{ zend_do_fetch_class(&yyval, &val_peek(0) TSRMLS_CC); }
break;
case 337:
//#line 750 "php_parser.y"
{ zend_do_fetch_class(&yyval, &val_peek(0) TSRMLS_CC); }
break;
case 338:
//#line 751 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); zend_do_fetch_class(&yyval, &val_peek(0) TSRMLS_CC); }
break;
case 339:
//#line 756 "php_parser.y"
{ zend_do_push_object(&val_peek(1) TSRMLS_CC); }
break;
case 340:
//#line 757 "php_parser.y"
{ zend_do_push_object(&val_peek(0) TSRMLS_CC); zend_do_declare_implicit_property(TSRMLS_C); }
break;
case 341:
//#line 758 "php_parser.y"
{ zend_do_pop_object(&yyval TSRMLS_CC); yyval.u.EA.type = ZEND_PARSED_MEMBER; }
break;
case 342:
//#line 759 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 345:
//#line 770 "php_parser.y"
{ zend_do_push_object(&val_peek(0) TSRMLS_CC); zend_do_declare_implicit_property(TSRMLS_C); }
break;
case 346:
//#line 774 "php_parser.y"
{ memset(&yyval, 0, sizeof(znode)); yyval.op_type = IS_UNUSED; }
break;
case 347:
//#line 775 "php_parser.y"
{ memset(&yyval, 0, sizeof(znode)); yyval.op_type = IS_UNUSED; }
break;
case 348:
//#line 776 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 349:
//#line 781 "php_parser.y"
{ yyval.u.constant.value.lval=0; }
break;
case 350:
//#line 782 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 351:
//#line 787 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 352:
//#line 788 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 353:
//#line 789 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 354:
//#line 790 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 355:
//#line 791 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 356:
//#line 792 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 357:
//#line 793 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 358:
//#line 794 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 359:
//#line 799 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 360:
//#line 800 "php_parser.y"
{ zend_do_fetch_constant(&yyval, NULL, &val_peek(0), ZEND_CT TSRMLS_CC); }
break;
case 361:
//#line 801 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 362:
//#line 802 "php_parser.y"
{ zval minus_one;  minus_one.type = IS_LONG; minus_one.value.lval = -1;  mul_function(&val_peek(0).u.constant, &val_peek(0).u.constant, &minus_one TSRMLS_CC);  yyval = val_peek(0); }
break;
case 363:
//#line 803 "php_parser.y"
{ yyval = val_peek(1); yyval.u.constant.type = IS_CONSTANT_ARRAY; }
break;
case 364:
//#line 804 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 365:
//#line 808 "php_parser.y"
{ zend_do_fetch_constant(&yyval, &val_peek(2), &val_peek(0), ZEND_CT TSRMLS_CC); }
break;
case 366:
//#line 812 "php_parser.y"
{ zend_do_fetch_constant(&yyval, NULL, &val_peek(0), ZEND_RT TSRMLS_CC); }
break;
case 367:
//#line 813 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 368:
//#line 814 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 369:
//#line 815 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 370:
//#line 816 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 371:
//#line 817 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 372:
//#line 818 "php_parser.y"
{ yyval = val_peek(1); zend_do_end_heredoc(TSRMLS_C); }
break;
case 373:
//#line 823 "php_parser.y"
{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); }
break;
case 374:
//#line 824 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 377:
//#line 833 "php_parser.y"
{ zend_do_add_static_array_element(&yyval, &val_peek(2), &val_peek(0)); }
break;
case 378:
//#line 834 "php_parser.y"
{ zend_do_add_static_array_element(&yyval, NULL, &val_peek(0)); }
break;
case 379:
//#line 835 "php_parser.y"
{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); zend_do_add_static_array_element(&yyval, &val_peek(2), &val_peek(0)); }
break;
case 380:
//#line 836 "php_parser.y"
{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); zend_do_add_static_array_element(&yyval, NULL, &val_peek(0)); }
break;
case 381:
//#line 840 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 382:
//#line 841 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 383:
//#line 846 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); yyval = val_peek(0); }
break;
case 384:
//#line 851 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); yyval = val_peek(0); }
break;
case 385:
//#line 852 "php_parser.y"
{ zend_check_writable_variable(&val_peek(1)); }
break;
case 386:
//#line 856 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); yyval = val_peek(0); }
break;
case 387:
//#line 857 "php_parser.y"
{ zend_check_writable_variable(&val_peek(1)); }
break;
case 388:
//#line 861 "php_parser.y"
{ zend_do_push_object(&val_peek(1) TSRMLS_CC); }
break;
case 389:
//#line 862 "php_parser.y"
{ zend_do_push_object(&val_peek(0) TSRMLS_CC); }
break;
case 390:
//#line 863 "php_parser.y"
{ zend_do_pop_object(&yyval TSRMLS_CC); yyval.u.EA.type = val_peek(6).u.EA.type | (val_peek(0).u.EA.type ? val_peek(0).u.EA.type : val_peek(1).u.EA.type); }
break;
case 391:
//#line 864 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 392:
//#line 868 "php_parser.y"
{ yyval.u.EA.type = val_peek(0).u.EA.type; }
break;
case 393:
//#line 869 "php_parser.y"
{ yyval.u.EA.type = 0; }
break;
case 394:
//#line 874 "php_parser.y"
{ zend_do_push_object(&val_peek(0) TSRMLS_CC); }
break;
case 395:
//#line 874 "php_parser.y"
{ yyval.u.EA.type = val_peek(0).u.EA.type; }
break;
case 396:
//#line 878 "php_parser.y"
{ zend_do_pop_object(&val_peek(0) TSRMLS_CC); zend_do_begin_method_call(&val_peek(0) TSRMLS_CC); }
break;
case 397:
//#line 880 "php_parser.y"
{ zend_do_end_function_call(&val_peek(3), &yyval, &val_peek(1), 1, 1 TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);
			  zend_do_push_object(&yyval TSRMLS_CC); yyval.u.EA.type = ZEND_PARSED_METHOD_CALL; }
break;
case 398:
//#line 882 "php_parser.y"
{ zend_do_declare_implicit_property(TSRMLS_C); yyval.u.EA.type = ZEND_PARSED_MEMBER; }
break;
case 399:
//#line 886 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 400:
//#line 887 "php_parser.y"
{ zend_do_indirect_references(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 401:
//#line 891 "php_parser.y"
{ yyval = val_peek(0); zend_do_fetch_static_member(&yyval, &val_peek(2) TSRMLS_CC); }
break;
case 402:
//#line 896 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 403:
//#line 897 "php_parser.y"
{ zend_do_begin_variable_parse(TSRMLS_C); yyval = val_peek(0); yyval.u.EA.type = ZEND_PARSED_FUNCTION_CALL; }
break;
case 404:
//#line 902 "php_parser.y"
{ yyval = val_peek(0); yyval.u.EA.type = ZEND_PARSED_VARIABLE; }
break;
case 405:
//#line 903 "php_parser.y"
{ zend_do_indirect_references(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); yyval.u.EA.type = ZEND_PARSED_VARIABLE; }
break;
case 406:
//#line 904 "php_parser.y"
{ yyval = val_peek(0); yyval.u.EA.type = ZEND_PARSED_STATIC_MEMBER; }
break;
case 407:
//#line 908 "php_parser.y"
{ fetch_array_dim(&yyval, &val_peek(3), &val_peek(1) TSRMLS_CC); }
break;
case 408:
//#line 909 "php_parser.y"
{ fetch_string_offset(&yyval, &val_peek(3), &val_peek(1) TSRMLS_CC); }
break;
case 409:
//#line 910 "php_parser.y"
{ zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&yyval, &val_peek(0), 1 TSRMLS_CC); }
break;
case 410:
//#line 915 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 411:
//#line 916 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 412:
//#line 920 "php_parser.y"
{ yyval.op_type = IS_UNUSED; }
break;
case 413:
//#line 921 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 414:
//#line 926 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 415:
//#line 927 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); }
break;
case 416:
//#line 927 "php_parser.y"
{ znode tmp_znode;  zend_do_pop_object(&tmp_znode TSRMLS_CC);  zend_do_fetch_property(&yyval, &tmp_znode, &val_peek(1) TSRMLS_CC);}
break;
case 417:
//#line 931 "php_parser.y"
{ fetch_array_dim(&yyval, &val_peek(3), &val_peek(1) TSRMLS_CC); }
break;
case 418:
//#line 932 "php_parser.y"
{ fetch_string_offset(&yyval, &val_peek(3), &val_peek(1) TSRMLS_CC); }
break;
case 419:
//#line 933 "php_parser.y"
{ znode tmp_znode;  zend_do_pop_object(&tmp_znode TSRMLS_CC);  zend_do_fetch_property(&yyval, &tmp_znode, &val_peek(0) TSRMLS_CC);}
break;
case 420:
//#line 937 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 421:
//#line 938 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 422:
//#line 942 "php_parser.y"
{ yyval.u.constant.value.lval = 1; }
break;
case 423:
//#line 943 "php_parser.y"
{ yyval.u.constant.value.lval++; }
break;
case 426:
//#line 953 "php_parser.y"
{ zend_do_add_list_element(&val_peek(0) TSRMLS_CC); }
break;
case 427:
//#line 954 "php_parser.y"
{ zend_do_new_list_begin(TSRMLS_C); }
break;
case 428:
//#line 954 "php_parser.y"
{ zend_do_new_list_end(TSRMLS_C); }
break;
case 429:
//#line 955 "php_parser.y"
{ zend_do_add_list_element(NULL TSRMLS_CC); }
break;
case 430:
//#line 960 "php_parser.y"
{ zend_do_init_array(&yyval, NULL, NULL, 0 TSRMLS_CC); }
break;
case 431:
//#line 961 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 432:
//#line 965 "php_parser.y"
{ zend_do_add_array_element(&yyval, &val_peek(0), &val_peek(2), 0 TSRMLS_CC); }
break;
case 433:
//#line 966 "php_parser.y"
{ zend_do_add_array_element(&yyval, &val_peek(0), NULL, 0 TSRMLS_CC); }
break;
case 434:
//#line 967 "php_parser.y"
{ zend_do_init_array(&yyval, &val_peek(0), &val_peek(2), 0 TSRMLS_CC); }
break;
case 435:
//#line 968 "php_parser.y"
{ zend_do_init_array(&yyval, &val_peek(0), NULL, 0 TSRMLS_CC); }
break;
case 436:
//#line 969 "php_parser.y"
{ zend_do_add_array_element(&yyval, &val_peek(0), &val_peek(3), 1 TSRMLS_CC); }
break;
case 437:
//#line 970 "php_parser.y"
{ zend_do_add_array_element(&yyval, &val_peek(0), NULL, 1 TSRMLS_CC); }
break;
case 438:
//#line 971 "php_parser.y"
{ zend_do_init_array(&yyval, &val_peek(0), &val_peek(3), 1 TSRMLS_CC); }
break;
case 439:
//#line 972 "php_parser.y"
{ zend_do_init_array(&yyval, &val_peek(0), NULL, 1 TSRMLS_CC); }
break;
case 440:
//#line 976 "php_parser.y"
{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC);  zend_do_add_variable(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 441:
//#line 977 "php_parser.y"
{ zend_do_add_string(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 442:
//#line 978 "php_parser.y"
{ zend_do_add_string(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 443:
//#line 979 "php_parser.y"
{ zend_do_add_string(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 444:
//#line 980 "php_parser.y"
{ zend_do_add_char(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 445:
//#line 981 "php_parser.y"
{ zend_do_add_string(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 446:
//#line 982 "php_parser.y"
{ val_peek(0).u.constant.value.lval = (long) '['; zend_do_add_char(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 447:
//#line 983 "php_parser.y"
{ val_peek(0).u.constant.value.lval = (long) ']'; zend_do_add_char(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 448:
//#line 984 "php_parser.y"
{ val_peek(0).u.constant.value.lval = (long) '{'; zend_do_add_char(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 449:
//#line 985 "php_parser.y"
{ val_peek(0).u.constant.value.lval = (long) '}'; zend_do_add_char(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 450:
//#line 986 "php_parser.y"
{ znode tmp;  val_peek(0).u.constant.value.lval = (long) '-';  zend_do_add_char(&tmp, &val_peek(1), &val_peek(0) TSRMLS_CC);  val_peek(0).u.constant.value.lval = (long) '>'; zend_do_add_char(&yyval, &tmp, &val_peek(0) TSRMLS_CC); }
break;
case 451:
//#line 987 "php_parser.y"
{ zend_do_init_string(&yyval TSRMLS_CC); }
break;
case 452:
//#line 994 "php_parser.y"
{ zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&yyval, &val_peek(0), 1 TSRMLS_CC); }
break;
case 453:
//#line 995 "php_parser.y"
{ zend_do_begin_variable_parse(TSRMLS_C); }
break;
case 454:
//#line 995 "php_parser.y"
{ fetch_array_begin(&yyval, &val_peek(4), &val_peek(1) TSRMLS_CC); }
break;
case 455:
//#line 996 "php_parser.y"
{ zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&val_peek(1), &val_peek(2), 1 TSRMLS_CC); zend_do_fetch_property(&yyval, &val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 456:
//#line 997 "php_parser.y"
{ zend_do_begin_variable_parse(TSRMLS_C);  fetch_simple_variable(&yyval, &val_peek(1), 1 TSRMLS_CC); }
break;
case 457:
//#line 998 "php_parser.y"
{ zend_do_begin_variable_parse(TSRMLS_C);  fetch_array_begin(&yyval, &val_peek(4), &val_peek(2) TSRMLS_CC); }
break;
case 458:
//#line 999 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 459:
//#line 1004 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 460:
//#line 1005 "php_parser.y"
{ yyval = val_peek(0); }
break;
case 461:
//#line 1006 "php_parser.y"
{ fetch_simple_variable(&yyval, &val_peek(0), 1 TSRMLS_CC); }
break;
case 462:
//#line 1011 "php_parser.y"
{ yyval = val_peek(1); }
break;
case 463:
//#line 1012 "php_parser.y"
{ zend_do_isset_or_isempty(ZEND_ISEMPTY, &yyval, &val_peek(1) TSRMLS_CC); }
break;
case 464:
//#line 1013 "php_parser.y"
{ zend_do_include_or_eval(ZEND_INCLUDE, &yyval, &val_peek(0) TSRMLS_CC); }
break;
case 465:
//#line 1014 "php_parser.y"
{ zend_do_include_or_eval(ZEND_INCLUDE_ONCE, &yyval, &val_peek(0) TSRMLS_CC); }
break;
case 466:
//#line 1015 "php_parser.y"
{ zend_do_include_or_eval(ZEND_EVAL, &yyval, &val_peek(1) TSRMLS_CC); }
break;
case 467:
//#line 1016 "php_parser.y"
{ zend_do_include_or_eval(ZEND_REQUIRE, &yyval, &val_peek(0) TSRMLS_CC); }
break;
case 468:
//#line 1017 "php_parser.y"
{ zend_do_include_or_eval(ZEND_REQUIRE_ONCE, &yyval, &val_peek(0) TSRMLS_CC); }
break;
case 469:
//#line 1021 "php_parser.y"
{ zend_do_isset_or_isempty(ZEND_ISSET, &yyval, &val_peek(0) TSRMLS_CC); }
break;
case 470:
//#line 1022 "php_parser.y"
{ zend_do_boolean_and_begin(&val_peek(1), &val_peek(0) TSRMLS_CC); }
break;
case 471:
//#line 1022 "php_parser.y"
{ znode tmp; zend_do_isset_or_isempty(ZEND_ISSET, &tmp, &val_peek(0) TSRMLS_CC); zend_do_boolean_and_end(&yyval, &val_peek(3), &tmp, &val_peek(2) TSRMLS_CC); }
break;
case 472:
//#line 1026 "php_parser.y"
{ zend_do_fetch_constant(&yyval, &val_peek(2), &val_peek(0), ZEND_RT TSRMLS_CC); }
break;
//#line 5145 "PHPAspectParser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }*/
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public PHPAspectParser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public PHPAspectParser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
