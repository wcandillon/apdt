
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Aug 25 01:06:28 CEST 2008
//----------------------------------------------------

package org.phpaspect.weaver.ast.parser;

import java.util.*;
import org.phpaspect.weaver.Pointcut;
import org.phpaspect.weaver.impl.*;
import org.phpaspect.weaver.ast.nodes.*;
import org.phpaspect.weaver.pointucts.AndPointcut;
import org.phpaspect.weaver.pointucts.MethodInvocationPredicate;
import org.phpaspect.weaver.pointucts.NotPointcut;
import org.phpaspect.weaver.pointucts.OrPointcut;
import org.phpaspect.weaver.pointucts.ParenthesisPointcut;
import org.phpaspect.weaver.ast.scanner.PHPAspectLexer;
import org.phpaspect.weaver.ast.parser.PHPAspectSymbolsUtils;

/** CUP v0.10k generated parser.
  * @version Mon Aug 25 01:06:28 CEST 2008
  */
public class PHPAspectParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PHPAspectParser() {super();}

  /** Constructor which sets the default scanner. */
  public PHPAspectParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\002\015\003\000\002\002\004\000\002\016" +
    "\003\000\002\003\003\000\002\004\012\000\002\007\004" +
    "\000\002\007\002\000\002\010\003\000\002\010\007\000" +
    "\002\010\006\000\002\010\014\000\002\010\011\000\002" +
    "\010\012\000\002\010\012\000\002\010\012\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\003\000\002\014\005\000\002\014\012\000" +
    "\002\006\003\000\002\006\002\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\011\003\000\002\011" +
    "\005\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\012\003\000\002\020\004\000\002\020\002\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\006\000\002\017\003\000\002\022\005\000\002\022" +
    "\011\000\002\022\014\000\002\022\007\000\002\022\011" +
    "\000\002\022\013\000\002\022\007\000\002\022\004\000" +
    "\002\022\005\000\002\022\004\000\002\022\005\000\002" +
    "\022\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\003" +
    "\000\002\022\004\000\002\022\005\000\002\022\007\000" +
    "\002\022\012\000\002\022\012\000\002\022\007\000\002" +
    "\022\003\000\002\022\017\000\002\022\005\000\002\022" +
    "\003\000\002\022\003\000\002\134\003\000\002\134\002" +
    "\000\002\135\003\000\002\135\004\000\002\136\012\000" +
    "\002\023\003\000\002\023\005\000\002\024\003\000\002" +
    "\025\003\000\002\025\005\000\002\131\003\000\002\132" +
    "\003\000\002\056\002\000\002\056\003\000\002\137\013" +
    "\000\002\140\011\000\002\140\010\000\002\141\003\000" +
    "\002\141\004\000\002\141\004\000\002\142\002\000\002" +
    "\142\004\000\002\115\003\000\002\116\002\000\002\116" +
    "\004\000\002\143\002\000\002\143\004\000\002\144\003" +
    "\000\002\144\005\000\002\026\002\000\002\026\004\000" +
    "\002\027\003\000\002\027\004\000\002\030\003\000\002" +
    "\030\006\000\002\031\003\000\002\031\006\000\002\032" +
    "\003\000\002\032\006\000\002\033\005\000\002\033\007" +
    "\000\002\034\005\000\002\034\006\000\002\034\006\000" +
    "\002\034\007\000\002\035\002\000\002\035\007\000\002" +
    "\035\006\000\002\036\003\000\002\036\003\000\002\037" +
    "\003\000\002\037\006\000\002\040\002\000\002\040\010" +
    "\000\002\041\002\000\002\041\011\000\002\042\002\000" +
    "\002\042\004\000\002\043\002\000\002\043\005\000\002" +
    "\044\003\000\002\044\002\000\002\045\003\000\002\045" +
    "\005\000\002\046\004\000\002\046\005\000\002\046\006" +
    "\000\002\046\007\000\002\145\002\000\002\145\003\000" +
    "\002\145\003\000\002\047\003\000\002\047\002\000\002" +
    "\050\003\000\002\050\003\000\002\050\004\000\002\050" +
    "\005\000\002\050\005\000\002\050\006\000\002\051\005" +
    "\000\002\051\003\000\002\052\003\000\002\052\004\000" +
    "\002\052\006\000\002\053\005\000\002\053\007\000\002" +
    "\053\003\000\002\053\005\000\002\054\004\000\002\054" +
    "\002\000\002\055\005\000\002\055\004\000\002\055\012" +
    "\000\002\055\003\000\002\124\003\000\002\124\005\000" +
    "\002\147\003\000\002\147\003\000\002\123\002\000\002" +
    "\123\003\000\002\125\003\000\002\125\004\000\002\126" +
    "\003\000\002\126\003\000\002\126\003\000\002\126\003" +
    "\000\002\126\003\000\002\126\003\000\002\121\005\000" +
    "\002\121\007\000\002\121\003\000\002\121\005\000\002" +
    "\122\007\000\002\122\006\000\002\057\005\000\002\057" +
    "\003\000\002\060\002\000\002\060\003\000\002\061\005" +
    "\000\002\061\003\000\002\062\010\000\002\062\005\000" +
    "\002\062\006\000\002\062\010\000\002\062\005\000\002" +
    "\062\004\000\002\062\005\000\002\062\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\062\005\000\002\062\004\000\002" +
    "\062\004\000\002\062\004\000\002\062\004\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
    "\000\002\062\005\000\002\062\005\000\002\062\005\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\062\004" +
    "\000\002\062\004\000\002\062\004\000\002\062\004\000" +
    "\002\062\005\000\002\062\005\000\002\062\005\000\002" +
    "\062\005\000\002\062\005\000\002\062\005\000\002\062" +
    "\005\000\002\062\005\000\002\062\005\000\002\062\005" +
    "\000\002\062\007\000\002\062\003\000\002\062\004\000" +
    "\002\062\004\000\002\062\004\000\002\062\004\000\002" +
    "\062\004\000\002\062\004\000\002\062\004\000\002\062" +
    "\004\000\002\062\004\000\002\062\003\000\002\062\006" +
    "\000\002\062\005\000\002\062\004\000\002\063\006\000" +
    "\002\063\010\000\002\063\010\000\002\063\006\000\002" +
    "\120\003\000\002\156\003\000\002\156\003\000\002\160" +
    "\006\000\002\160\003\000\002\162\004\000\002\162\002" +
    "\000\002\163\004\000\002\064\002\000\002\064\004\000" +
    "\002\064\005\000\002\065\002\000\002\065\005\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\067\003\000\002\067\003\000" +
    "\002\067\004\000\002\067\004\000\002\067\006\000\002" +
    "\067\003\000\002\164\005\000\002\070\003\000\002\070" +
    "\003\000\002\070\003\000\002\070\003\000\002\070\005" +
    "\000\002\070\005\000\002\071\002\000\002\071\004\000" +
    "\002\072\002\000\002\072\003\000\002\073\007\000\002" +
    "\073\005\000\002\073\005\000\002\073\003\000\002\074" +
    "\003\000\002\074\003\000\002\146\003\000\002\117\003" +
    "\000\002\150\003\000\002\133\007\000\002\133\003\000" +
    "\002\130\004\000\002\130\002\000\002\152\005\000\002" +
    "\127\005\000\002\127\002\000\002\151\003\000\002\151" +
    "\004\000\002\153\005\000\002\165\003\000\002\165\003" +
    "\000\002\161\003\000\002\161\004\000\002\161\003\000" +
    "\002\075\006\000\002\075\006\000\002\075\003\000\002" +
    "\076\003\000\002\076\006\000\002\077\002\000\002\077" +
    "\003\000\002\100\003\000\002\100\003\000\002\101\006" +
    "\000\002\101\006\000\002\101\003\000\002\102\003\000" +
    "\002\102\005\000\002\103\003\000\002\103\004\000\002" +
    "\104\005\000\002\104\003\000\002\105\003\000\002\105" +
    "\006\000\002\105\002\000\002\106\002\000\002\106\004" +
    "\000\002\107\007\000\002\107\005\000\002\107\005\000" +
    "\002\107\003\000\002\107\010\000\002\107\006\000\002" +
    "\107\006\000\002\107\004\000\002\110\004\000\002\110" +
    "\004\000\002\110\002\000\002\111\003\000\002\111\006" +
    "\000\002\111\005\000\002\111\005\000\002\111\010\000" +
    "\002\111\005\000\002\112\003\000\002\112\003\000\002" +
    "\112\003\000\002\113\006\000\002\113\006\000\002\113" +
    "\004\000\002\113\004\000\002\113\006\000\002\113\004" +
    "\000\002\113\004\000\002\154\003\000\002\154\005\000" +
    "\002\157\005\000\002\155\003\000\002\114\003\000\002" +
    "\114\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0321\000\010\060\007\215\012\216\013\001\002\000" +
    "\002\001\ufffe\000\002\001\uffff\000\004\010\017\001\002" +
    "\000\002\001\uffe9\000\004\002\016\001\002\000\002\001" +
    "\001\000\004\060\015\001\002\000\004\060\014\001\002" +
    "\000\002\001\uffe7\000\002\001\uffe8\000\002\001\000\000" +
    "\004\071\020\001\uffa8\000\004\010\026\001\002\000\004" +
    "\072\023\001\uffa3\000\004\061\032\001\uffea\000\004\010" +
    "\026\001\002\000\004\122\027\001\uffa2\000\002\001\uffa1" +
    "\000\002\001\ufefe\000\004\010\026\001\002\000\002\001" +
    "\uffa0\000\004\110\033\001\002\000\002\001\uffeb\000\002" +
    "\001\ufffb\000\044\010\063\043\042\052\065\064\041\065" +
    "\052\066\044\067\050\111\056\113\053\160\037\166\057" +
    "\214\062\215\040\216\043\217\047\220\036\221\061\001" +
    "\uff5a\000\004\042\u0319\001\002\000\002\001\uff55\000\004" +
    "\010\u0317\001\002\000\002\001\uff52\000\004\222\u0310\001" +
    "\002\000\004\010\u030d\001\002\000\002\001\uff51\000\004" +
    "\222\u0306\001\002\000\002\001\ufffa\000\020\042\uff59\214" +
    "\062\215\040\216\043\217\047\220\036\221\061\001\uff5c" +
    "\000\002\001\uff54\000\004\010\u02ff\001\002\000\002\001" +
    "\uff58\000\004\222\156\001\002\000\002\001\uff5f\000\004" +
    "\112\153\001\002\000\006\010\152\166\151\001\uffe6\000" +
    "\002\001\ufffd\000\002\001\uffe2\000\002\001\ufffc\000\002" +
    "\001\uff56\000\002\001\uff53\000\002\001\uffe1\000\012\010" +
    "\063\012\135\160\037\166\057\001\002\000\002\001\uff5b" +
    "\000\006\122\067\144\070\001\002\000\004\010\071\001" +
    "\002\000\002\001\uff61\000\004\127\072\001\002\000\034" +
    "\006\103\007\101\010\111\016\110\076\075\077\106\100" +
    "\113\101\107\102\102\103\104\114\105\164\073\165\112" +
    "\001\002\000\034\006\103\007\101\010\111\016\110\076" +
    "\075\077\106\100\113\101\107\102\102\103\104\114\105" +
    "\164\073\165\112\001\002\000\002\001\ufee8\000\004\222" +
    "\117\001\002\000\002\001\uff4c\000\002\001\ufee9\000\002" +
    "\001\ufee4\000\002\001\ufef0\000\002\001\ufeee\000\002\001" +
    "\ufef1\000\002\001\ufeed\000\002\001\ufe89\000\002\001\ufeec" +
    "\000\002\001\ufeea\000\002\001\ufeef\000\004\112\115\001" +
    "\ufe8a\000\034\006\103\007\101\010\111\016\110\076\075" +
    "\077\106\100\113\101\107\102\102\103\104\114\105\164" +
    "\073\165\112\001\002\000\002\001\ufeeb\000\002\001\ufee6" +
    "\000\004\010\116\001\002\000\002\001\ufee3\000\034\006" +
    "\103\007\101\010\111\016\110\076\075\077\106\100\113" +
    "\101\107\102\102\103\104\114\105\164\073\165\112\001" +
    "\ufedc\000\004\223\132\001\002\000\004\122\125\001\ufeda" +
    "\000\004\074\123\001\ufed5\000\034\006\103\007\101\010" +
    "\111\016\110\076\075\077\106\100\113\101\107\102\102" +
    "\103\104\114\105\164\073\165\112\001\002\000\002\001" +
    "\ufed6\000\034\006\103\007\101\010\111\016\110\076\075" +
    "\077\106\100\113\101\107\102\102\103\104\114\105\164" +
    "\073\165\112\001\ufed9\000\002\001\ufedb\000\004\074\130" +
    "\001\ufed7\000\034\006\103\007\101\010\111\016\110\076" +
    "\075\077\106\100\113\101\107\102\102\103\104\114\105" +
    "\164\073\165\112\001\002\000\002\001\ufed8\000\002\001" +
    "\ufee5\000\002\001\ufee7\000\004\112\146\001\002\000\004" +
    "\127\144\001\uff4e\000\006\122\137\144\140\001\002\000" +
    "\004\012\141\001\002\000\002\001\uff62\000\004\127\142" +
    "\001\uff50\000\034\006\103\007\101\010\111\016\110\076" +
    "\075\077\106\100\113\101\107\102\102\103\104\114\105" +
    "\164\073\165\112\001\002\000\002\001\uff4f\000\034\006" +
    "\103\007\101\010\111\016\110\076\075\077\106\100\113" +
    "\101\107\102\102\103\104\114\105\164\073\165\112\001" +
    "\002\000\002\001\uff4d\000\004\012\135\001\002\000\006" +
    "\122\137\144\150\001\002\000\002\001\ufff9\000\002\001" +
    "\uffe4\000\002\001\uffe3\000\004\043\042\001\002\000\006" +
    "\122\067\144\155\001\002\000\002\001\ufff8\000\004\223" +
    "\157\001\002\000\004\224\160\001\002\000\012\010\165" +
    "\063\162\171\161\222\164\001\002\000\012\010\165\063" +
    "\162\171\161\222\164\001\002\000\004\222\u02f7\001\002" +
    "\000\002\001\uffee\000\012\010\165\063\162\171\161\222" +
    "\164\001\002\000\004\222\u02f3\001\002\000\010\110\170" +
    "\145\171\146\167\001\002\000\012\010\165\063\162\171" +
    "\161\222\164\001\002\000\002\001\uffdf\000\012\010\165" +
    "\063\162\171\161\222\164\001\002\000\004\146\167\001" +
    "\ufff2\000\224\003\276\004\317\005\327\006\103\007\101" +
    "\010\220\011\235\012\242\014\255\016\110\017\302\020" +
    "\300\021\230\023\217\025\262\027\330\032\264\034\307" +
    "\040\237\041\301\042\267\044\313\045\225\047\326\050" +
    "\211\051\176\053\257\054\322\055\214\056\240\057\216" +
    "\070\316\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\110\245\111\275\113\206\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\144" +
    "\175\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\214\226\215\243\216\204\222\323" +
    "\225\261\226\272\227\241\001\002\000\004\222\u02ef\001" +
    "\002\000\002\001\uffc1\000\006\012\u02e4\225\u02e5\001\002" +
    "\000\004\222\u02cf\001\002\000\132\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\222\323\225" +
    "\261\226\272\227\241\001\002\000\002\001\uffe0\000\002" +
    "\001\uff06\000\070\031\376\123\365\124\u0105\125\357\143" +
    "\361\144\u02cd\145\356\146\377\147\360\150\367\151\u0100" +
    "\152\u0104\153\371\154\354\155\366\156\u0103\157\u0101\160" +
    "\363\161\u0102\162\375\163\370\164\u0106\165\364\166\374" +
    "\167\372\170\355\173\362\001\002\000\004\057\u02cc\001" +
    "\002\000\002\001\ufec1\000\002\001\uffbd\000\002\001\uffb1" +
    "\000\036\127\u017a\130\u017e\131\u017b\132\u0184\133\u017d\134" +
    "\u0183\135\u0180\136\u0182\137\u017c\140\u0179\141\u017f\142\u0181" +
    "\174\ufed0\175\ufed0\001\ufed2\000\006\016\u02c8\222\u02c6\001" +
    "\002\000\132\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\002\000\132\004\317\006\103\007\101\010\220\011" +
    "\235\012\242\016\110\032\264\054\322\055\214\075\324" +
    "\076\177\077\106\100\113\101\107\102\102\103\104\104" +
    "\221\114\105\115\213\116\250\117\233\120\304\121\266" +
    "\126\244\164\265\165\247\171\320\172\200\174\234\175" +
    "\325\176\212\177\310\200\224\201\306\202\253\203\312" +
    "\204\252\205\222\210\256\222\323\225\261\226\272\227" +
    "\241\001\002\000\004\222\u02c1\001\002\000\004\112\u02bf" +
    "\001\002\000\002\001\uffab\000\004\222\u02ae\001\002\000" +
    "\004\112\ufefe\001\ufe8a\000\002\001\ufe9f\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\002\001" +
    "\ufec5\000\132\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\002\000\004\110\u0293\001\002\000\004\012\u028a\001" +
    "\002\000\002\001\ufec4\000\004\222\u0281\001\002\000\004" +
    "\010\u027b\001\002\000\004\073\u0270\001\ufece\000\004\222" +
    "\u026d\001\002\000\012\010\220\012\242\114\105\225\261" +
    "\001\002\000\002\001\ufee1\000\010\110\u0116\206\u0117\222" +
    "\ufec8\001\ufec3\000\134\004\317\006\103\007\101\010\220" +
    "\011\235\012\242\016\110\032\264\054\322\055\214\075" +
    "\324\076\177\077\106\100\113\101\107\102\102\103\104" +
    "\104\221\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\144\u0269\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\002\000\004\222\u0266\001\002\000" +
    "\002\001\ufe9f\000\002\001\ufe8b\000\004\057\u0263\001\002" +
    "\000\132\004\317\006\103\007\101\010\220\011\235\012" +
    "\242\016\110\032\264\054\322\055\214\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\114" +
    "\105\115\213\116\250\117\233\120\304\121\266\126\244" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\222\323\225\261\226\272\227\241\001" +
    "\002\000\002\001\uffdf\000\002\001\uff10\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\132\004" +
    "\317\006\103\007\101\010\220\011\235\012\242\016\110" +
    "\032\264\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\222\323\225\261\226\272\227\241\001\002\000\006" +
    "\012\242\225\u0122\001\002\000\132\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\222\323\225" +
    "\261\226\272\227\241\001\002\000\132\004\317\006\103" +
    "\007\101\010\220\011\235\012\242\016\110\032\264\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\164\265\165\247\171\320" +
    "\172\200\174\234\175\325\176\212\177\310\200\224\201" +
    "\306\202\253\203\312\204\252\205\222\210\256\222\323" +
    "\225\261\226\272\227\241\001\002\000\002\001\ufee0\000" +
    "\002\001\uffc8\000\010\010\u0114\012\242\225\261\001\002" +
    "\000\004\222\u0251\001\002\000\006\174\u024f\175\u0250\001" +
    "\002\000\004\110\u0123\001\ufeb2\000\004\222\u0238\001\002" +
    "\000\002\001\uffdd\000\132\004\317\006\103\007\101\010" +
    "\220\011\235\012\242\016\110\032\264\054\322\055\214" +
    "\075\324\076\177\077\106\100\113\101\107\102\102\103" +
    "\104\104\221\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\164\265\165\247\171\320\172\200\174" +
    "\234\175\325\176\212\177\310\200\224\201\306\202\253" +
    "\203\312\204\252\205\222\210\256\222\323\225\261\226" +
    "\272\227\241\001\002\000\132\004\317\006\103\007\101" +
    "\010\220\011\235\012\242\016\110\032\264\054\322\055" +
    "\214\075\324\076\177\077\106\100\113\101\107\102\102" +
    "\103\104\104\221\114\105\115\213\116\250\117\233\120" +
    "\304\121\266\126\244\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\002\000\132\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\222\323\225" +
    "\261\226\272\227\241\001\002\000\004\151\u01fd\001\uffb0" +
    "\000\002\001\ufedf\000\002\001\uffda\000\002\001\ufe9f\000" +
    "\002\001\ufebd\000\004\010\u01f1\001\002\000\002\001\ufff4" +
    "\000\002\001\uffbe\000\002\001\ufebe\000\206\003\276\004" +
    "\317\005\327\006\103\007\101\010\220\011\235\012\242" +
    "\014\255\016\110\017\302\020\300\021\230\023\217\025" +
    "\262\027\330\032\264\034\307\040\237\041\301\044\313" +
    "\045\225\047\326\050\211\051\176\053\257\054\322\055" +
    "\214\075\324\076\177\077\106\100\113\101\107\102\102" +
    "\103\104\104\221\110\245\113\206\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\144\175\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\214\226\222\323\225\261\226\272\227\241\001" +
    "\002\000\134\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\144\u01e8\164\265\165\247\171\320\172\200\174\234" +
    "\175\325\176\212\177\310\200\224\201\306\202\253\203" +
    "\312\204\252\205\222\210\256\222\323\225\261\226\272" +
    "\227\241\001\002\000\132\004\317\006\103\007\101\010" +
    "\220\011\235\012\242\016\110\032\264\054\322\055\214" +
    "\075\324\076\177\077\106\100\113\101\107\102\102\103" +
    "\104\104\221\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\164\265\165\247\171\320\172\200\174" +
    "\234\175\325\176\212\177\310\200\224\201\306\202\253" +
    "\203\312\204\252\205\222\210\256\222\323\225\261\226" +
    "\272\227\241\001\002\000\002\001\uffdc\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\004\222" +
    "\u01a1\001\ufee2\000\132\004\317\006\103\007\101\010\220" +
    "\011\235\012\242\016\110\032\264\054\322\055\214\075" +
    "\324\076\177\077\106\100\113\101\107\102\102\103\104" +
    "\104\221\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\164\265\165\247\171\320\172\200\174\234" +
    "\175\325\176\212\177\310\200\224\201\306\202\253\203" +
    "\312\204\252\205\222\210\256\222\323\225\261\226\272" +
    "\227\241\001\002\000\004\222\u01c6\001\002\000\132\004" +
    "\317\006\103\007\101\010\220\011\235\012\242\016\110" +
    "\032\264\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\222\323\225\261\226\272\227\241\001\002\000\002" +
    "\001\uffb2\000\132\004\317\006\103\007\101\010\220\011" +
    "\235\012\242\016\110\032\264\054\322\055\214\075\324" +
    "\076\177\077\106\100\113\101\107\102\102\103\104\104" +
    "\221\114\105\115\213\116\250\117\233\120\304\121\266" +
    "\126\244\164\265\165\247\171\320\172\200\174\234\175" +
    "\325\176\212\177\310\200\224\201\306\202\253\203\312" +
    "\204\252\205\222\210\256\222\323\225\261\226\272\227" +
    "\241\001\002\000\134\004\317\006\103\007\101\010\220" +
    "\011\235\012\242\016\110\032\264\054\322\055\214\075" +
    "\324\076\177\077\106\100\113\101\107\102\102\103\104" +
    "\104\221\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\144\u01bf\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\002\000\002\001\ufed3\000\002\001" +
    "\ufed4\000\002\001\uffa6\000\004\222\u01ba\001\ufef6\000\132" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\222\323\225\261\226\272\227\241\001\002\000" +
    "\002\001\uffde\000\004\222\u01b3\001\002\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\004\222" +
    "\u01a4\001\002\000\012\010\220\012\242\114\105\225\261" +
    "\001\002\000\132\004\317\006\103\007\101\010\220\011" +
    "\235\012\242\016\110\032\264\054\322\055\214\075\324" +
    "\076\177\077\106\100\113\101\107\102\102\103\104\104" +
    "\221\114\105\115\213\116\250\117\233\120\304\121\266" +
    "\126\244\164\265\165\247\171\320\172\200\174\234\175" +
    "\325\176\212\177\310\200\224\201\306\202\253\203\312" +
    "\204\252\205\222\210\256\222\323\225\261\226\272\227" +
    "\241\001\002\000\004\222\352\001\002\000\004\222\331" +
    "\001\002\000\006\010\334\114\105\001\002\000\006\122" +
    "\340\223\337\001\002\000\004\127\335\001\002\000\002" +
    "\001\ufe8a\000\034\006\103\007\101\010\111\016\110\076" +
    "\075\077\106\100\113\101\107\102\102\103\104\114\105" +
    "\164\073\165\112\001\002\000\002\001\uff95\000\210\003" +
    "\276\004\317\005\327\006\103\007\101\010\220\011\235" +
    "\012\242\014\255\016\110\017\302\020\300\021\230\023" +
    "\217\025\262\027\330\032\264\034\307\040\237\041\301" +
    "\044\313\045\225\047\326\050\211\051\176\053\257\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\110\245\113\206\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\144\175" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\214\226\222\323\224\345\225\261\226" +
    "\272\227\241\001\002\000\006\010\334\114\105\001\002" +
    "\000\004\127\342\001\002\000\034\006\103\007\101\010" +
    "\111\016\110\076\075\077\106\100\113\101\107\102\102" +
    "\103\104\114\105\164\073\165\112\001\002\000\002\001" +
    "\uff94\000\002\001\uffc2\000\002\001\uffdf\000\002\001\uff97" +
    "\000\224\003\276\004\317\005\327\006\103\007\101\010" +
    "\220\011\235\012\242\014\255\016\110\017\302\020\300" +
    "\021\230\023\217\025\262\027\330\030\350\032\264\034" +
    "\307\040\237\041\301\042\267\044\313\045\225\047\326" +
    "\050\211\051\176\053\257\054\322\055\214\056\240\057" +
    "\216\070\316\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\110\245\113\206\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\144\175" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\214\226\215\243\216\204\222\323\225" +
    "\261\226\272\227\241\001\002\000\004\144\351\001\002" +
    "\000\002\001\uff96\000\132\004\317\006\103\007\101\010" +
    "\220\011\235\012\242\016\110\032\264\054\322\055\214" +
    "\075\324\076\177\077\106\100\113\101\107\102\102\103" +
    "\104\104\221\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\164\265\165\247\171\320\172\200\174" +
    "\234\175\325\176\212\177\310\200\224\201\306\202\253" +
    "\203\312\204\252\205\222\210\256\222\323\225\261\226" +
    "\272\227\241\001\002\000\070\031\376\123\365\124\u0105" +
    "\125\357\143\361\145\356\146\377\147\360\150\367\151" +
    "\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157\u0101" +
    "\160\363\161\u0102\162\375\163\370\164\u0106\165\364\166" +
    "\374\167\372\170\355\173\362\223\373\001\002\000\132" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\222\323\225\261\226\272\227\241\001\002\000" +
    "\132\004\317\006\103\007\101\010\220\011\235\012\242" +
    "\016\110\032\264\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\164" +
    "\265\165\247\171\320\172\200\174\234\175\325\176\212" +
    "\177\310\200\224\201\306\202\253\203\312\204\252\205" +
    "\222\210\256\222\323\225\261\226\272\227\241\001\002" +
    "\000\132\004\317\006\103\007\101\010\220\011\235\012" +
    "\242\016\110\032\264\054\322\055\214\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\114" +
    "\105\115\213\116\250\117\233\120\304\121\266\126\244" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\222\323\225\261\226\272\227\241\001" +
    "\002\000\132\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\002\000\132\004\317\006\103\007\101\010\220\011" +
    "\235\012\242\016\110\032\264\054\322\055\214\075\324" +
    "\076\177\077\106\100\113\101\107\102\102\103\104\104" +
    "\221\114\105\115\213\116\250\117\233\120\304\121\266" +
    "\126\244\164\265\165\247\171\320\172\200\174\234\175" +
    "\325\176\212\177\310\200\224\201\306\202\253\203\312" +
    "\204\252\205\222\210\256\222\323\225\261\226\272\227" +
    "\241\001\002\000\132\004\317\006\103\007\101\010\220" +
    "\011\235\012\242\016\110\032\264\054\322\055\214\075" +
    "\324\076\177\077\106\100\113\101\107\102\102\103\104" +
    "\104\221\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\164\265\165\247\171\320\172\200\174\234" +
    "\175\325\176\212\177\310\200\224\201\306\202\253\203" +
    "\312\204\252\205\222\210\256\222\323\225\261\226\272" +
    "\227\241\001\002\000\132\004\317\006\103\007\101\010" +
    "\220\011\235\012\242\016\110\032\264\054\322\055\214" +
    "\075\324\076\177\077\106\100\113\101\107\102\102\103" +
    "\104\104\221\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\164\265\165\247\171\320\172\200\174" +
    "\234\175\325\176\212\177\310\200\224\201\306\202\253" +
    "\203\312\204\252\205\222\210\256\222\323\225\261\226" +
    "\272\227\241\001\002\000\132\004\317\006\103\007\101" +
    "\010\220\011\235\012\242\016\110\032\264\054\322\055" +
    "\214\075\324\076\177\077\106\100\113\101\107\102\102" +
    "\103\104\104\221\114\105\115\213\116\250\117\233\120" +
    "\304\121\266\126\244\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\002\000\132\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\222\323\225" +
    "\261\226\272\227\241\001\002\000\132\004\317\006\103" +
    "\007\101\010\220\011\235\012\242\016\110\032\264\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\164\265\165\247\171\320" +
    "\172\200\174\234\175\325\176\212\177\310\200\224\201" +
    "\306\202\253\203\312\204\252\205\222\210\256\222\323" +
    "\225\261\226\272\227\241\001\002\000\132\004\317\006" +
    "\103\007\101\010\220\011\235\012\242\016\110\032\264" +
    "\054\322\055\214\075\324\076\177\077\106\100\113\101" +
    "\107\102\102\103\104\104\221\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\132\004" +
    "\317\006\103\007\101\010\220\011\235\012\242\016\110" +
    "\032\264\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\222\323\225\261\226\272\227\241\001\002\000\132" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\222\323\225\261\226\272\227\241\001\002\000" +
    "\132\004\317\006\103\007\101\010\220\011\235\012\242" +
    "\016\110\032\264\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\164" +
    "\265\165\247\171\320\172\200\174\234\175\325\176\212" +
    "\177\310\200\224\201\306\202\253\203\312\204\252\205" +
    "\222\210\256\222\323\225\261\226\272\227\241\001\002" +
    "\000\210\003\276\004\317\005\327\006\103\007\101\010" +
    "\220\011\235\012\242\014\255\016\110\017\302\020\300" +
    "\021\230\023\217\025\262\027\330\032\264\034\307\040" +
    "\237\041\301\044\313\045\225\047\326\050\211\051\176" +
    "\053\257\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\110\245\113\206" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\144\175\164\265\165\247\171\320\172\200\174\234" +
    "\175\325\176\212\177\310\200\224\201\306\202\253\203" +
    "\312\204\252\205\222\210\256\214\226\222\323\224\u013c" +
    "\225\261\226\272\227\241\001\002\000\132\004\317\006" +
    "\103\007\101\010\220\011\235\012\242\016\110\032\264" +
    "\054\322\055\214\075\324\076\177\077\106\100\113\101" +
    "\107\102\102\103\104\104\221\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\010\010" +
    "\u0114\012\242\225\261\001\002\000\132\004\317\006\103" +
    "\007\101\010\220\011\235\012\242\016\110\032\264\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\164\265\165\247\171\320" +
    "\172\200\174\234\175\325\176\212\177\310\200\224\201" +
    "\306\202\253\203\312\204\252\205\222\210\256\222\323" +
    "\225\261\226\272\227\241\001\002\000\132\004\317\006" +
    "\103\007\101\010\220\011\235\012\242\016\110\032\264" +
    "\054\322\055\214\075\324\076\177\077\106\100\113\101" +
    "\107\102\102\103\104\104\221\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\132\004" +
    "\317\006\103\007\101\010\220\011\235\012\242\016\110" +
    "\032\264\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\222\323\225\261\226\272\227\241\001\002\000\132" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\222\323\225\261\226\272\227\241\001\002\000" +
    "\132\004\317\006\103\007\101\010\220\011\235\012\242" +
    "\016\110\032\264\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\164" +
    "\265\165\247\171\320\172\200\174\234\175\325\176\212" +
    "\177\310\200\224\201\306\202\253\203\312\204\252\205" +
    "\222\210\256\222\323\225\261\226\272\227\241\001\002" +
    "\000\132\004\317\006\103\007\101\010\220\011\235\012" +
    "\242\016\110\032\264\054\322\055\214\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\114" +
    "\105\115\213\116\250\117\233\120\304\121\266\126\244" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\222\323\225\261\226\272\227\241\001" +
    "\002\000\132\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\002\000\012\031\376\166\374\167\372\170\355\001" +
    "\uff26\000\062\031\376\125\357\143\361\145\356\146\377" +
    "\147\360\150\367\151\u0100\152\u0104\153\371\154\354\155" +
    "\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\001" +
    "\uff2b\000\034\031\376\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\uff19\000\024\031\376\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\001" +
    "\uff16\000\024\031\376\162\375\163\370\164\u0106\165\364" +
    "\166\374\167\372\170\355\173\362\001\uff15\000\024\031" +
    "\376\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\uff14\000\044\031\376\152\u0104\153" +
    "\371\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\uff29\000\052\031\376\147\360\150\367" +
    "\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157" +
    "\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165\364" +
    "\166\374\167\372\170\355\173\362\001\uff2e\000\002\001" +
    "\uff13\000\004\073\u0127\001\ufefa\000\002\001\ufefc\000\006" +
    "\012\242\225\u0122\001\002\000\004\112\u011d\001\002\000" +
    "\004\112\ufefe\001\ufefd\000\006\110\u0116\206\u0117\001\ufec3" +
    "\000\132\004\317\006\103\007\101\010\220\011\235\012" +
    "\242\016\110\032\264\054\322\055\214\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\114" +
    "\105\115\213\116\250\117\233\120\304\121\266\126\244" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\222\323\225\261\226\272\227\241\001" +
    "\002\000\132\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\ufebb\000\004\207\u011a\001\002\000\066\031\376\123" +
    "\365\124\u0105\125\357\143\361\145\356\146\377\147\360" +
    "\150\367\151\u0100\152\u0104\153\371\154\354\155\366\156" +
    "\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106" +
    "\165\364\166\374\167\372\170\355\173\362\001\ufeba\000" +
    "\002\001\ufec0\000\070\031\376\111\u011c\123\365\124\u0105" +
    "\125\357\143\361\145\356\146\377\147\360\150\367\151" +
    "\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157\u0101" +
    "\160\363\161\u0102\162\375\163\370\164\u0106\165\364\166" +
    "\374\167\372\170\355\173\362\001\002\000\002\001\ufebf" +
    "\000\006\012\242\225\261\001\002\000\002\001\ufec6\000" +
    "\006\012\242\225\u0122\001\002\000\006\110\u0116\206\u0117" +
    "\001\ufec8\000\006\110\u0116\206\u0117\001\ufec7\000\004\110" +
    "\u0123\001\ufeb1\000\132\004\317\006\103\007\101\010\220" +
    "\011\235\012\242\016\110\032\264\054\322\055\214\075" +
    "\324\076\177\077\106\100\113\101\107\102\102\103\104" +
    "\104\221\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\164\265\165\247\171\320\172\200\174\234" +
    "\175\325\176\212\177\310\200\224\201\306\202\253\203" +
    "\312\204\252\205\222\210\256\222\323\225\261\226\272" +
    "\227\241\001\002\000\070\031\376\111\u0125\123\365\124" +
    "\u0105\125\357\143\361\145\356\146\377\147\360\150\367" +
    "\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157" +
    "\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165\364" +
    "\166\374\167\372\170\355\173\362\001\002\000\002\001" +
    "\ufebc\000\006\110\u0116\206\u0117\001\ufec2\000\014\010\334" +
    "\012\242\110\u012d\114\105\225\261\001\002\000\002\001" +
    "\ufeb4\000\002\001\ufeb5\000\002\001\ufeb8\000\002\001\ufef8" +
    "\000\006\110\u0130\206\u0131\001\ufeb9\000\132\004\317\006" +
    "\103\007\101\010\220\011\235\012\242\016\110\032\264" +
    "\054\322\055\214\075\324\076\177\077\106\100\113\101" +
    "\107\102\102\103\104\104\221\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\070\031\376" +
    "\111\u012f\123\365\124\u0105\125\357\143\361\145\356\146" +
    "\377\147\360\150\367\151\u0100\152\u0104\153\371\154\354" +
    "\155\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163" +
    "\370\164\u0106\165\364\166\374\167\372\170\355\173\362" +
    "\001\002\000\002\001\ufeb3\000\132\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\222\323\225" +
    "\261\226\272\227\241\001\002\000\132\004\317\006\103" +
    "\007\101\010\220\011\235\012\242\016\110\032\264\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\164\265\165\247\171\320" +
    "\172\200\174\234\175\325\176\212\177\310\200\224\201" +
    "\306\202\253\203\312\204\252\205\222\210\256\222\323" +
    "\225\261\226\272\227\241\001\ufebb\000\004\207\u0133\001" +
    "\002\000\002\001\ufeb7\000\070\031\376\111\u0135\123\365" +
    "\124\u0105\125\357\143\361\145\356\146\377\147\360\150" +
    "\367\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103" +
    "\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165" +
    "\364\166\374\167\372\170\355\173\362\001\002\000\002" +
    "\001\ufeb6\000\004\073\u0138\001\ufefb\000\002\001\ufef9\000" +
    "\014\010\334\012\242\110\u012d\114\105\225\261\001\002" +
    "\000\002\001\ufef7\000\020\031\376\164\u0106\165\364\166" +
    "\374\167\372\170\355\173\362\001\uff21\000\004\031\376" +
    "\001\uff24\000\002\001\uffdf\000\002\001\uff88\000\006\212" +
    "\u0141\213\u0140\001\uff84\000\002\001\uffd8\000\206\003\276" +
    "\004\317\005\327\006\103\007\101\010\220\011\235\012" +
    "\242\014\255\016\110\017\302\020\300\021\230\023\217" +
    "\025\262\027\330\032\264\034\307\040\237\041\301\044" +
    "\313\045\225\047\326\050\211\051\176\053\257\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\110\245\113\206\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\144\175\164" +
    "\265\165\247\171\320\172\200\174\234\175\325\176\212" +
    "\177\310\200\224\201\306\202\253\203\312\204\252\205" +
    "\222\210\256\214\226\222\323\225\261\226\272\227\241" +
    "\001\002\000\004\222\u0142\001\002\000\132\004\317\006" +
    "\103\007\101\010\220\011\235\012\242\016\110\032\264" +
    "\054\322\055\214\075\324\076\177\077\106\100\113\101" +
    "\107\102\102\103\104\104\221\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\070\031\376" +
    "\123\365\124\u0105\125\357\143\361\145\356\146\377\147" +
    "\360\150\367\151\u0100\152\u0104\153\371\154\354\155\366" +
    "\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164" +
    "\u0106\165\364\166\374\167\372\170\355\173\362\223\u0144" +
    "\001\002\000\206\003\276\004\317\005\327\006\103\007" +
    "\101\010\220\011\235\012\242\014\255\016\110\017\302" +
    "\020\300\021\230\023\217\025\262\027\330\032\264\034" +
    "\307\040\237\041\301\044\313\045\225\047\326\050\211" +
    "\051\176\053\257\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\110\245" +
    "\113\206\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\144\175\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\214\226\222\323" +
    "\225\261\226\272\227\241\001\002\000\002\001\uff87\000" +
    "\002\001\uff83\000\222\003\276\004\317\005\327\006\103" +
    "\007\101\010\220\011\235\012\242\014\255\016\110\017" +
    "\302\020\300\021\230\023\217\025\262\027\330\032\264" +
    "\034\307\040\237\041\301\042\267\044\313\045\225\047" +
    "\326\050\211\051\176\053\257\054\322\055\214\056\240" +
    "\057\216\070\316\075\324\076\177\077\106\100\113\101" +
    "\107\102\102\103\104\104\221\110\245\113\206\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\144" +
    "\175\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\214\226\215\243\216\204\222\323" +
    "\225\261\226\272\227\241\001\uff86\000\006\212\u014b\213" +
    "\u014a\001\uff82\000\004\211\u0153\001\002\000\004\224\u0151" +
    "\001\002\000\004\222\u014c\001\002\000\132\004\317\006" +
    "\103\007\101\010\220\011\235\012\242\016\110\032\264" +
    "\054\322\055\214\075\324\076\177\077\106\100\113\101" +
    "\107\102\102\103\104\104\221\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\070\031\376" +
    "\123\365\124\u0105\125\357\143\361\145\356\146\377\147" +
    "\360\150\367\151\u0100\152\u0104\153\371\154\354\155\366" +
    "\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164" +
    "\u0106\165\364\166\374\167\372\170\355\173\362\223\u014e" +
    "\001\002\000\004\224\u014f\001\002\000\002\001\uffdf\000" +
    "\222\003\276\004\317\005\327\006\103\007\101\010\220" +
    "\011\235\012\242\014\255\016\110\017\302\020\300\021" +
    "\230\023\217\025\262\027\330\032\264\034\307\040\237" +
    "\041\301\042\267\044\313\045\225\047\326\050\211\051" +
    "\176\053\257\054\322\055\214\056\240\057\216\070\316" +
    "\075\324\076\177\077\106\100\113\101\107\102\102\103" +
    "\104\104\221\110\245\113\206\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\144\175\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\214\226\215\243\216\204\222\323\225\261\226\272" +
    "\227\241\001\uff85\000\002\001\uffdf\000\222\003\276\004" +
    "\317\005\327\006\103\007\101\010\220\011\235\012\242" +
    "\014\255\016\110\017\302\020\300\021\230\023\217\025" +
    "\262\027\330\032\264\034\307\040\237\041\301\042\267" +
    "\044\313\045\225\047\326\050\211\051\176\053\257\054" +
    "\322\055\214\056\240\057\216\070\316\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\110" +
    "\245\113\206\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\144\175\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\214\226\215" +
    "\243\216\204\222\323\225\261\226\272\227\241\001\uff81" +
    "\000\004\144\u0154\001\002\000\002\001\uffd7\000\004\031" +
    "\376\001\uff23\000\034\031\376\156\u0103\157\u0101\160\363" +
    "\161\u0102\162\375\163\370\164\u0106\165\364\166\374\167" +
    "\372\170\355\173\362\001\uff18\000\020\031\376\164\u0106" +
    "\165\364\166\374\167\372\170\355\173\362\001\uff20\000" +
    "\046\031\376\151\u0100\152\u0104\153\371\154\354\155\366" +
    "\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164" +
    "\u0106\165\364\166\374\167\372\170\355\173\362\001\uff28" +
    "\000\034\031\376\156\u0103\157\u0101\160\363\161\u0102\162" +
    "\375\163\370\164\u0106\165\364\166\374\167\372\170\355" +
    "\173\362\001\uff1a\000\064\031\376\124\u0105\125\357\143" +
    "\361\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\uff2d\000\012\031\376\166\374\167" +
    "\372\170\355\001\uff25\000\024\031\376\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\001" +
    "\uff17\000\012\031\376\166\374\167\372\170\355\001\uff27" +
    "\000\070\031\376\123\365\124\u0105\125\357\143\361\145" +
    "\356\146\377\147\360\150\367\151\u0100\152\u0104\153\371" +
    "\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102\162" +
    "\375\163\370\164\u0106\165\364\166\374\167\372\170\355" +
    "\173\362\224\u015f\001\002\000\132\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\222\323\225" +
    "\261\226\272\227\241\001\002\000\066\031\376\123\365" +
    "\124\u0105\125\357\143\361\145\356\146\377\147\360\150" +
    "\367\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103" +
    "\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165" +
    "\364\166\374\167\372\170\355\173\362\001\uff11\000\050" +
    "\031\376\150\367\151\u0100\152\u0104\153\371\154\354\155" +
    "\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\001" +
    "\uff2a\000\060\031\376\143\361\145\356\146\377\147\360" +
    "\150\367\151\u0100\152\u0104\153\371\154\354\155\366\156" +
    "\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106" +
    "\165\364\166\374\167\372\170\355\173\362\001\uff2c\000" +
    "\054\031\376\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\uff2f\000\004\031\376\001\uff22\000" +
    "\034\031\376\156\u0103\157\u0101\160\363\161\u0102\162\375" +
    "\163\370\164\u0106\165\364\166\374\167\372\170\355\173" +
    "\362\001\uff1b\000\070\031\376\123\365\124\u0105\125\357" +
    "\143\361\144\u0167\145\356\146\377\147\360\150\367\151" +
    "\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157\u0101" +
    "\160\363\161\u0102\162\375\163\370\164\u0106\165\364\166" +
    "\374\167\372\170\355\173\362\001\002\000\002\001\uffbf" +
    "\000\004\222\u01a1\001\002\000\002\001\ufed0\000\002\001" +
    "\uff30\000\004\112\u016c\001\002\000\010\010\u016e\012\242" +
    "\225\261\001\002\000\004\222\u019e\001\ufec6\000\004\222" +
    "\u016f\001\002\000\134\004\317\006\103\007\101\010\220" +
    "\011\235\012\242\016\110\032\264\054\322\055\214\075" +
    "\324\076\177\077\106\100\113\101\107\102\102\103\104" +
    "\104\221\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\151\u0173\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\uff74\000\004\122\u0199\001\uff75\000" +
    "\042\122\uff72\127\u017a\130\u017e\131\u017b\132\u0184\133\u017d" +
    "\134\u0183\135\u0180\136\u0182\137\u017c\140\u0179\141\u017f\142" +
    "\u0181\174\ufed0\175\ufed0\223\uff72\001\ufed2\000\004\223\u0178" +
    "\001\002\000\012\010\220\012\242\114\105\225\261\001" +
    "\002\000\066\031\376\123\365\124\u0105\125\357\143\361" +
    "\145\356\146\377\147\360\150\367\151\u0100\152\u0104\153" +
    "\371\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\002\000\006\122\uff73\223\uff73\001\ufed3" +
    "\000\002\001\uff71\000\002\001\ufed1\000\002\001\uff01\000" +
    "\132\004\317\006\103\007\101\010\220\011\235\012\242" +
    "\016\110\032\264\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\164" +
    "\265\165\247\171\320\172\200\174\234\175\325\176\212" +
    "\177\310\200\224\201\306\202\253\203\312\204\252\205" +
    "\222\210\256\222\323\225\261\226\272\227\241\001\002" +
    "\000\134\004\317\006\103\007\101\010\220\011\235\012" +
    "\242\016\110\032\264\054\322\055\214\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\114" +
    "\105\115\213\116\250\117\233\120\304\121\266\126\244" +
    "\151\u018f\164\265\165\247\171\320\172\200\174\234\175" +
    "\325\176\212\177\310\200\224\201\306\202\253\203\312" +
    "\204\252\205\222\210\256\222\323\225\261\226\272\227" +
    "\241\001\002\000\132\004\317\006\103\007\101\010\220" +
    "\011\235\012\242\016\110\032\264\054\322\055\214\075" +
    "\324\076\177\077\106\100\113\101\107\102\102\103\104" +
    "\104\221\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\164\265\165\247\171\320\172\200\174\234" +
    "\175\325\176\212\177\310\200\224\201\306\202\253\203" +
    "\312\204\252\205\222\210\256\222\323\225\261\226\272" +
    "\227\241\001\002\000\132\004\317\006\103\007\101\010" +
    "\220\011\235\012\242\016\110\032\264\054\322\055\214" +
    "\075\324\076\177\077\106\100\113\101\107\102\102\103" +
    "\104\104\221\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\164\265\165\247\171\320\172\200\174" +
    "\234\175\325\176\212\177\310\200\224\201\306\202\253" +
    "\203\312\204\252\205\222\210\256\222\323\225\261\226" +
    "\272\227\241\001\002\000\132\004\317\006\103\007\101" +
    "\010\220\011\235\012\242\016\110\032\264\054\322\055" +
    "\214\075\324\076\177\077\106\100\113\101\107\102\102" +
    "\103\104\104\221\114\105\115\213\116\250\117\233\120" +
    "\304\121\266\126\244\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\002\000\132\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\222\323\225" +
    "\261\226\272\227\241\001\002\000\132\004\317\006\103" +
    "\007\101\010\220\011\235\012\242\016\110\032\264\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\164\265\165\247\171\320" +
    "\172\200\174\234\175\325\176\212\177\310\200\224\201" +
    "\306\202\253\203\312\204\252\205\222\210\256\222\323" +
    "\225\261\226\272\227\241\001\002\000\132\004\317\006" +
    "\103\007\101\010\220\011\235\012\242\016\110\032\264" +
    "\054\322\055\214\075\324\076\177\077\106\100\113\101" +
    "\107\102\102\103\104\104\221\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\132\004" +
    "\317\006\103\007\101\010\220\011\235\012\242\016\110" +
    "\032\264\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\222\323\225\261\226\272\227\241\001\002\000\132" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\222\323\225\261\226\272\227\241\001\002\000" +
    "\132\004\317\006\103\007\101\010\220\011\235\012\242" +
    "\016\110\032\264\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\164" +
    "\265\165\247\171\320\172\200\174\234\175\325\176\212" +
    "\177\310\200\224\201\306\202\253\203\312\204\252\205" +
    "\222\210\256\222\323\225\261\226\272\227\241\001\002" +
    "\000\060\031\376\143\361\145\356\146\377\147\360\150" +
    "\367\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103" +
    "\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165" +
    "\364\166\374\167\372\170\355\173\362\001\uff3c\000\060" +
    "\031\376\143\361\145\356\146\377\147\360\150\367\151" +
    "\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157\u0101" +
    "\160\363\161\u0102\162\375\163\370\164\u0106\165\364\166" +
    "\374\167\372\170\355\173\362\001\uff3a\000\060\031\376" +
    "\143\361\145\356\146\377\147\360\150\367\151\u0100\152" +
    "\u0104\153\371\154\354\155\366\156\u0103\157\u0101\160\363" +
    "\161\u0102\162\375\163\370\164\u0106\165\364\166\374\167" +
    "\372\170\355\173\362\001\uff38\000\060\031\376\143\361" +
    "\145\356\146\377\147\360\150\367\151\u0100\152\u0104\153" +
    "\371\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\uff34\000\060\031\376\143\361\145\356" +
    "\146\377\147\360\150\367\151\u0100\152\u0104\153\371\154" +
    "\354\155\366\156\u0103\157\u0101\160\363\161\u0102\162\375" +
    "\163\370\164\u0106\165\364\166\374\167\372\170\355\173" +
    "\362\001\uff39\000\060\031\376\143\361\145\356\146\377" +
    "\147\360\150\367\151\u0100\152\u0104\153\371\154\354\155" +
    "\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\001" +
    "\uff35\000\060\031\376\143\361\145\356\146\377\147\360" +
    "\150\367\151\u0100\152\u0104\153\371\154\354\155\366\156" +
    "\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106" +
    "\165\364\166\374\167\372\170\355\173\362\001\uff3e\000" +
    "\060\031\376\143\361\145\356\146\377\147\360\150\367" +
    "\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157" +
    "\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165\364" +
    "\166\374\167\372\170\355\173\362\001\uff3b\000\060\031" +
    "\376\143\361\145\356\146\377\147\360\150\367\151\u0100" +
    "\152\u0104\153\371\154\354\155\366\156\u0103\157\u0101\160" +
    "\363\161\u0102\162\375\163\370\164\u0106\165\364\166\374" +
    "\167\372\170\355\173\362\001\uff37\000\060\031\376\143" +
    "\361\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\uff3d\000\014\010\220\012\242\114" +
    "\105\210\u0191\225\261\001\002\000\060\031\376\143\361" +
    "\145\356\146\377\147\360\150\367\151\u0100\152\u0104\153" +
    "\371\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\uff43\000\010\010\u0114\012\242\225\261" +
    "\001\002\000\002\001\uff42\000\004\222\u0195\001\ufef3\000" +
    "\002\001\uff41\000\134\004\317\006\103\007\101\010\220" +
    "\011\235\012\242\016\110\032\264\054\322\055\214\075" +
    "\324\076\177\077\106\100\113\101\107\102\102\103\104" +
    "\104\221\114\105\115\213\116\250\117\233\120\304\121" +
    "\266\126\244\151\u0173\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\uff74\000\004\223\u0197\001\002\000" +
    "\002\001\ufef2\000\060\031\376\143\361\145\356\146\377" +
    "\147\360\150\367\151\u0100\152\u0104\153\371\154\354\155" +
    "\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\001" +
    "\uff36\000\134\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\151\u019b\164\265\165\247\171\320\172\200\174\234" +
    "\175\325\176\212\177\310\200\224\201\306\202\253\203" +
    "\312\204\252\205\222\210\256\222\323\225\261\226\272" +
    "\227\241\001\002\000\042\122\uff6f\127\u017a\130\u017e\131" +
    "\u017b\132\u0184\133\u017d\134\u0183\135\u0180\136\u0182\137\u017c" +
    "\140\u0179\141\u017f\142\u0181\174\ufed0\175\ufed0\223\uff6f\001" +
    "\ufed2\000\012\010\220\012\242\114\105\225\261\001\002" +
    "\000\006\122\uff70\223\uff70\001\ufed3\000\002\001\uff6e\000" +
    "\134\004\317\006\103\007\101\010\220\011\235\012\242" +
    "\016\110\032\264\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\151" +
    "\u0173\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\uff74\000\004\223\u01a0\001\002\000\002\001\uff00\000" +
    "\134\004\317\006\103\007\101\010\220\011\235\012\242" +
    "\016\110\032\264\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\151" +
    "\u0173\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\uff74\000\004\223\u01a3\001\002\000\002\001\uff02\000" +
    "\014\010\220\012\242\075\u01a8\114\105\225\261\001\ufeac" +
    "\000\006\122\u01ac\223\u01ae\001\002\000\002\001\ufeaf\000" +
    "\002\001\ufeae\000\004\222\u01a9\001\002\000\014\010\220" +
    "\012\242\075\u01a8\114\105\225\261\001\ufeac\000\006\122" +
    "\u01ac\223\u01ab\001\002\000\002\001\ufead\000\014\010\220" +
    "\012\242\075\u01a8\114\105\225\261\001\ufeac\000\002\001" +
    "\ufeb0\000\004\127\u01af\001\002\000\132\004\317\006\103" +
    "\007\101\010\220\011\235\012\242\016\110\032\264\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\164\265\165\247\171\320" +
    "\172\200\174\234\175\325\176\212\177\310\200\224\201" +
    "\306\202\253\203\312\204\252\205\222\210\256\222\323" +
    "\225\261\226\272\227\241\001\002\000\060\031\376\143" +
    "\361\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\uff44\000\070\031\376\123\365\124" +
    "\u0105\125\357\143\361\145\356\146\377\147\360\150\367" +
    "\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157" +
    "\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165\364" +
    "\166\374\167\372\170\355\173\362\223\u01b2\001\002\000" +
    "\002\001\uff12\000\012\010\220\012\242\114\105\225\261" +
    "\001\002\000\002\001\ufe8e\000\006\122\u01b7\223\u01b6\001" +
    "\002\000\002\001\ufe95\000\012\010\220\012\242\114\105" +
    "\225\261\001\002\000\002\001\ufe8d\000\004\031\376\001" +
    "\uff1d\000\134\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\223\u01bd\225\261\226\272" +
    "\227\241\001\002\000\002\001\uff08\000\070\031\376\123" +
    "\365\124\u0105\125\357\143\361\145\356\146\377\147\360" +
    "\150\367\151\u0100\152\u0104\153\371\154\354\155\366\156" +
    "\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106" +
    "\165\364\166\374\167\372\170\355\173\362\223\u01be\001" +
    "\002\000\002\001\ufef5\000\002\001\ufef4\000\002\001\uffce" +
    "\000\040\127\u017a\130\u017e\131\u017b\132\u0184\133\u017d\134" +
    "\u0183\135\u0180\136\u0182\137\u017c\140\u0179\141\u017f\142\u0181" +
    "\144\u01c3\174\ufed0\175\ufed0\001\ufed2\000\004\144\u01c2\001" +
    "\ufed3\000\002\001\uffcd\000\002\001\uffcc\000\002\001\uff0a" +
    "\000\002\001\uff0e\000\132\004\317\006\103\007\101\010" +
    "\220\011\235\012\242\016\110\032\264\054\322\055\214" +
    "\075\324\076\177\077\106\100\113\101\107\102\102\103" +
    "\104\104\221\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\164\265\165\247\171\320\172\200\174" +
    "\234\175\325\176\212\177\310\200\224\201\306\202\253" +
    "\203\312\204\252\205\222\210\256\222\323\225\261\226" +
    "\272\227\241\001\002\000\070\031\376\123\365\124\u0105" +
    "\125\357\143\361\145\356\146\377\147\360\150\367\151" +
    "\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157\u0101" +
    "\160\363\161\u0102\162\375\163\370\164\u0106\165\364\166" +
    "\374\167\372\170\355\173\362\223\u01c8\001\002\000\006" +
    "\110\u01ca\224\u01cb\001\002\000\002\001\uffd3\000\004\144" +
    "\u01dd\001\uff8f\000\004\144\u01cd\001\uff8f\000\010\035\u01da" +
    "\036\u01d0\037\u01d1\001\002\000\002\001\uff8f\000\010\035" +
    "\u01cf\036\u01d0\037\u01d1\001\002\000\004\144\u01d9\001\002" +
    "\000\132\004\317\006\103\007\101\010\220\011\235\012" +
    "\242\016\110\032\264\054\322\055\214\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\114" +
    "\105\115\213\116\250\117\233\120\304\121\266\126\244" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\222\323\225\261\226\272\227\241\001" +
    "\002\000\006\144\u01d4\224\u01d3\001\002\000\002\001\uffdf" +
    "\000\002\001\uff8c\000\002\001\uff8b\000\222\003\276\004" +
    "\317\005\327\006\103\007\101\010\220\011\235\012\242" +
    "\014\255\016\110\017\302\020\300\021\230\023\217\025" +
    "\262\027\330\032\264\034\307\040\237\041\301\042\267" +
    "\044\313\045\225\047\326\050\211\051\176\053\257\054" +
    "\322\055\214\056\240\057\216\070\316\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\110" +
    "\245\113\206\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\144\175\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\214\226\215" +
    "\243\216\204\222\323\225\261\226\272\227\241\001\uff8d" +
    "\000\072\031\376\123\365\124\u0105\125\357\143\361\144" +
    "\u01d4\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\224\u01d3\001\002\000\002\001\uffdf\000" +
    "\222\003\276\004\317\005\327\006\103\007\101\010\220" +
    "\011\235\012\242\014\255\016\110\017\302\020\300\021" +
    "\230\023\217\025\262\027\330\032\264\034\307\040\237" +
    "\041\301\042\267\044\313\045\225\047\326\050\211\051" +
    "\176\053\257\054\322\055\214\056\240\057\216\070\316" +
    "\075\324\076\177\077\106\100\113\101\107\102\102\103" +
    "\104\104\221\110\245\113\206\114\105\115\213\116\250" +
    "\117\233\120\304\121\266\126\244\144\175\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\214\226\215\243\216\204\222\323\225\261\226\272" +
    "\227\241\001\uff8e\000\002\001\uff90\000\004\144\u01db\001" +
    "\002\000\002\001\uff91\000\010\036\u01d0\037\u01d1\111\u01e0" +
    "\001\002\000\002\001\uff8f\000\010\036\u01d0\037\u01d1\111" +
    "\u01df\001\002\000\002\001\uff92\000\002\001\uff93\000\002" +
    "\001\uff0c\000\066\031\376\123\365\124\u0105\125\357\143" +
    "\361\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\ufe90\000\006\122\u01e5\144\u01e6\001" +
    "\002\000\066\031\376\123\365\124\u0105\125\357\143\361" +
    "\145\356\146\377\147\360\150\367\151\u0100\152\u0104\153" +
    "\371\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\uff49\000\132\004\317\006\103\007\101" +
    "\010\220\011\235\012\242\016\110\032\264\054\322\055" +
    "\214\075\324\076\177\077\106\100\113\101\107\102\102" +
    "\103\104\104\221\114\105\115\213\116\250\117\233\120" +
    "\304\121\266\126\244\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\002\000\002\001\uffc9\000\066\031" +
    "\376\123\365\124\u0105\125\357\143\361\145\356\146\377" +
    "\147\360\150\367\151\u0100\152\u0104\153\371\154\354\155" +
    "\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\001" +
    "\uff4a\000\002\001\uffd0\000\070\031\376\123\365\124\u0105" +
    "\125\357\143\361\144\u01ea\145\356\146\377\147\360\150" +
    "\367\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103" +
    "\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165" +
    "\364\166\374\167\372\170\355\173\362\001\002\000\002" +
    "\001\uffcf\000\004\021\u01ec\001\002\000\004\222\u01ed\001" +
    "\002\000\132\004\317\006\103\007\101\010\220\011\235" +
    "\012\242\016\110\032\264\054\322\055\214\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\114\105\115\213\116\250\117\233\120\304\121\266\126" +
    "\244\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\002\000\070\031\376\123\365\124\u0105\125\357\143" +
    "\361\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\223\u01ef\001\002\000\004\144\u01f0\001" +
    "\002\000\002\001\uffd5\000\004\071\u01f3\001\uffa5\000\004" +
    "\110\u01f5\001\002\000\004\010\026\001\002\000\004\122" +
    "\027\001\uffa4\000\002\001\uff63\000\026\043\042\052\065" +
    "\111\u01f8\113\053\214\062\215\040\216\043\217\047\220" +
    "\036\221\061\001\uff5a\000\002\001\uff64\000\002\001\uffac" +
    "\000\004\012\135\001\002\000\004\042\u01fb\001\002\000" +
    "\004\151\u01fd\001\uffb0\000\006\010\334\114\105\001\002" +
    "\000\002\001\uffaf\000\004\222\u01ff\001\002\000\010\010" +
    "\u0202\076\u0200\223\uff7f\001\uff78\000\002\001\uff76\000\006" +
    "\012\u020f\151\u020e\001\002\000\002\001\uff77\000\004\223" +
    "\u0208\001\002\000\004\122\u0206\001\uff80\000\002\001\uff7e" +
    "\000\006\010\u0202\076\u0200\001\uff78\000\002\001\uff7d\000" +
    "\006\110\u020a\144\u020b\001\002\000\002\001\uff60\000\002" +
    "\001\uffdf\000\002\001\uff5e\000\224\003\276\004\317\005" +
    "\327\006\103\007\101\010\220\011\235\012\242\014\255" +
    "\016\110\017\302\020\300\021\230\023\217\025\262\027" +
    "\330\032\264\034\307\040\237\041\301\042\267\044\313" +
    "\045\225\047\326\050\211\051\176\053\257\054\322\055" +
    "\214\056\240\057\216\070\316\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\110\245\111" +
    "\u020d\113\206\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\144\175\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\214\226\215" +
    "\243\216\204\222\323\225\261\226\272\227\241\001\002" +
    "\000\002\001\uff5d\000\004\012\u0212\001\002\000\004\127" +
    "\u0210\001\uff7c\000\034\006\103\007\101\010\111\016\110" +
    "\076\075\077\106\100\113\101\107\102\102\103\104\114" +
    "\105\164\073\165\112\001\002\000\002\001\uff7a\000\004" +
    "\127\u0213\001\uff7b\000\034\006\103\007\101\010\111\016" +
    "\110\076\075\077\106\100\113\101\107\102\102\103\104" +
    "\114\105\164\073\165\112\001\002\000\002\001\uff79\000" +
    "\014\012\242\015\u021b\106\u021a\107\u0218\226\u0219\001\002" +
    "\000\006\073\u0226\206\u0225\001\ufe9e\000\002\001\ufea1\000" +
    "\012\010\220\012\242\114\105\225\261\001\002\000\002" +
    "\001\ufede\000\132\004\317\006\103\007\101\010\220\011" +
    "\u021c\012\242\016\110\032\264\054\322\055\214\075\324" +
    "\076\177\077\106\100\113\101\107\102\102\103\104\104" +
    "\221\114\105\115\213\116\250\117\233\120\304\121\266" +
    "\126\244\164\265\165\247\171\320\172\200\174\234\175" +
    "\325\176\212\177\310\200\224\201\306\202\253\203\312" +
    "\204\252\205\222\210\256\222\323\225\261\226\272\227" +
    "\241\001\002\000\002\001\ufea0\000\004\206\u021f\001\ufee1" +
    "\000\070\031\376\111\u021e\123\365\124\u0105\125\357\143" +
    "\361\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\002\000\002\001\ufe9b\000\132\004" +
    "\317\006\103\007\101\010\220\011\235\012\242\016\110" +
    "\032\264\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\222\323\225\261\226\272\227\241\001\002\000\070" +
    "\031\376\123\365\124\u0105\125\357\143\361\145\356\146" +
    "\377\147\360\150\367\151\u0100\152\u0104\153\371\154\354" +
    "\155\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163" +
    "\370\164\u0106\165\364\166\374\167\372\170\355\173\362" +
    "\207\u0221\001\002\000\004\111\u0222\001\002\000\002\001" +
    "\ufe9a\000\004\111\u0224\001\002\000\002\001\ufe99\000\012" +
    "\010\334\012\242\013\u022b\114\105\001\002\000\006\010" +
    "\334\114\105\001\002\000\002\001\ufe9c\000\002\001\ufe96" +
    "\000\004\207\u022c\001\002\000\002\001\ufe98\000\002\001" +
    "\ufe97\000\002\001\ufe9d\000\006\010\334\114\105\001\002" +
    "\000\004\222\u022f\001\002\000\010\010\u0202\076\u0200\223" +
    "\uff7f\001\uff78\000\004\223\u0231\001\002\000\004\110\u0232" +
    "\001\002\000\002\001\uffdf\000\224\003\276\004\317\005" +
    "\327\006\103\007\101\010\220\011\235\012\242\014\255" +
    "\016\110\017\302\020\300\021\230\023\217\025\262\027" +
    "\330\032\264\034\307\040\237\041\301\042\267\044\313" +
    "\045\225\047\326\050\211\051\176\053\257\054\322\055" +
    "\214\056\240\057\216\070\316\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\110\245\111" +
    "\u0234\113\206\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\144\175\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\214\226\215" +
    "\243\216\204\222\323\225\261\226\272\227\241\001\002" +
    "\000\002\001\uffae\000\066\031\376\123\365\124\u0105\125" +
    "\357\143\361\145\356\146\377\147\360\150\367\151\u0100" +
    "\152\u0104\153\371\154\354\155\366\156\u0103\157\u0101\160" +
    "\363\161\u0102\162\375\163\370\164\u0106\165\364\166\374" +
    "\167\372\170\355\173\362\001\ufe8f\000\012\031\376\166" +
    "\374\167\372\170\355\001\uff1f\000\002\001\uff3f\000\132" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\222\323\225\261\226\272\227\241\001\002\000" +
    "\040\033\u024a\127\u017a\130\u017e\131\u017b\132\u0184\133\u017d" +
    "\134\u0183\135\u0180\136\u0182\137\u017c\140\u0179\141\u017f\142" +
    "\u0181\174\ufed0\175\ufed0\001\ufed2\000\004\033\u023b\001\ufed3" +
    "\000\012\010\220\012\242\114\105\225\261\001\002\000" +
    "\004\074\u023e\001\uff9f\000\004\223\u0243\001\002\000\014" +
    "\010\220\012\242\114\105\151\u0241\225\261\001\002\000" +
    "\002\001\uff9e\000\002\001\uff9d\000\012\010\220\012\242" +
    "\114\105\225\261\001\002\000\002\001\uff9c\000\210\003" +
    "\276\004\317\005\327\006\103\007\101\010\220\011\235" +
    "\012\242\014\255\016\110\017\302\020\300\021\230\023" +
    "\217\025\262\027\330\032\264\034\307\040\237\041\301" +
    "\044\313\045\225\047\326\050\211\051\176\053\257\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\110\245\113\206\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\144\175" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\214\226\222\323\224\u0244\225\261\226" +
    "\272\227\241\001\002\000\002\001\uffdf\000\002\001\uff99" +
    "\000\002\001\uffc3\000\224\003\276\004\317\005\327\006" +
    "\103\007\101\010\220\011\235\012\242\014\255\016\110" +
    "\017\302\020\300\021\230\023\217\025\262\026\u0248\027" +
    "\330\032\264\034\307\040\237\041\301\042\267\044\313" +
    "\045\225\047\326\050\211\051\176\053\257\054\322\055" +
    "\214\056\240\057\216\070\316\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\110\245\113" +
    "\206\114\105\115\213\116\250\117\233\120\304\121\266" +
    "\126\244\144\175\164\265\165\247\171\320\172\200\174" +
    "\234\175\325\176\212\177\310\200\224\201\306\202\253" +
    "\203\312\204\252\205\222\210\256\214\226\215\243\216" +
    "\204\222\323\225\261\226\272\227\241\001\002\000\004" +
    "\144\u0249\001\002\000\002\001\uff98\000\014\010\220\012" +
    "\242\114\105\151\u0241\225\261\001\002\000\004\074\u023e" +
    "\001\uff9f\000\004\223\u024d\001\002\000\210\003\276\004" +
    "\317\005\327\006\103\007\101\010\220\011\235\012\242" +
    "\014\255\016\110\017\302\020\300\021\230\023\217\025" +
    "\262\027\330\032\264\034\307\040\237\041\301\044\313" +
    "\045\225\047\326\050\211\051\176\053\257\054\322\055" +
    "\214\075\324\076\177\077\106\100\113\101\107\102\102" +
    "\103\104\104\221\110\245\113\206\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\144\175\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\214\226\222\323\224\u0244\225\261\226\272\227" +
    "\241\001\002\000\002\001\uffc4\000\002\001\uff33\000\002" +
    "\001\uff31\000\012\010\220\012\242\114\105\225\261\001" +
    "\002\000\002\001\uffb7\000\002\001\uffb5\000\006\122\u0256" +
    "\223\u0255\001\002\000\004\144\u0258\001\002\000\012\010" +
    "\220\012\242\114\105\225\261\001\002\000\002\001\uffb6" +
    "\000\002\001\uffc5\000\004\222\u0195\001\ufef3\000\002\001" +
    "\uff40\000\002\001\uff0b\000\002\001\uff09\000\010\110\u0116" +
    "\206\u0117\222\ufec7\001\ufec2\000\066\031\376\123\365\124" +
    "\u0105\125\357\143\361\145\356\146\377\147\360\150\367" +
    "\151\u0100\152\u0104\153\371\154\354\155\366\156\u0103\157" +
    "\u0101\160\363\161\u0102\162\375\163\370\164\u0106\165\364" +
    "\166\374\167\372\170\355\173\362\001\ufe92\000\012\031" +
    "\376\166\374\167\372\170\355\001\uff1e\000\224\003\276" +
    "\004\317\005\327\006\103\007\101\010\220\011\235\012" +
    "\242\014\255\016\110\017\302\020\300\021\230\023\217" +
    "\025\262\027\330\032\264\034\307\040\237\041\301\042" +
    "\267\044\313\045\225\047\326\050\211\051\176\053\257" +
    "\054\322\055\214\056\240\057\216\070\316\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\110\245\111\u0261\113\206\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\144\175\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\214\226\215\243\216\204\222\323\225\261\226\272\227" +
    "\241\001\002\000\002\001\uffd9\000\060\031\376\143\361" +
    "\145\356\146\377\147\360\150\367\151\u0100\152\u0104\153" +
    "\371\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\uff03\000\002\001\uffaa\000\014\012\242" +
    "\015\u021b\106\u021a\107\u0218\227\u0265\001\002\000\002\001" +
    "\uff04\000\004\223\u0267\001\002\000\004\144\u0268\001\002" +
    "\000\002\001\uffdb\000\002\001\uffd2\000\070\031\376\123" +
    "\365\124\u0105\125\357\143\361\144\u026b\145\356\146\377" +
    "\147\360\150\367\151\u0100\152\u0104\153\371\154\354\155" +
    "\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\001" +
    "\002\000\002\001\uffd1\000\002\001\uff32\000\132\004\317" +
    "\006\103\007\101\010\220\011\235\012\242\016\110\032" +
    "\264\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\114\105\115\213\116" +
    "\250\117\233\120\304\121\266\126\244\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\002\000\070\031" +
    "\376\123\365\124\u0105\125\357\143\361\145\356\146\377" +
    "\147\360\150\367\151\u0100\152\u0104\153\371\154\354\155" +
    "\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163\370" +
    "\164\u0106\165\364\166\374\167\372\170\355\173\362\223" +
    "\u026f\001\002\000\002\001\ufe91\000\014\010\334\012\242" +
    "\110\u012d\114\105\225\261\001\002\000\004\222\u0273\001" +
    "\ufec9\000\002\001\ufecc\000\134\004\317\006\103\007\101" +
    "\010\220\011\235\012\242\016\110\032\264\054\322\055" +
    "\214\075\324\076\177\077\106\100\113\101\107\102\102" +
    "\103\104\104\221\114\105\115\213\116\250\117\233\120" +
    "\304\121\266\126\244\151\u0173\164\265\165\247\171\320" +
    "\172\200\174\234\175\325\176\212\177\310\200\224\201" +
    "\306\202\253\203\312\204\252\205\222\210\256\222\323" +
    "\225\261\226\272\227\241\001\uff74\000\004\223\u0275\001" +
    "\002\000\002\001\ufeca\000\004\073\u0278\001\ufecf\000\002" +
    "\001\ufecd\000\014\010\334\012\242\110\u012d\114\105\225" +
    "\261\001\002\000\004\222\u0273\001\ufec9\000\002\001\ufecb" +
    "\000\004\071\020\001\uffa8\000\004\072\023\001\uffa3\000" +
    "\004\110\u027e\001\002\000\002\001\uff63\000\026\043\042" +
    "\052\065\111\u0280\113\053\214\062\215\040\216\043\217" +
    "\047\220\036\221\061\001\uff5a\000\002\001\uffad\000\132" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\222\323\225\261\226\272\227\241\001\002\000" +
    "\070\031\376\123\365\124\u0105\125\357\143\361\145\356" +
    "\146\377\147\360\150\367\151\u0100\152\u0104\153\371\154" +
    "\354\155\366\156\u0103\157\u0101\160\363\161\u0102\162\375" +
    "\163\370\164\u0106\165\364\166\374\167\372\170\355\173" +
    "\362\223\u0283\001\002\000\210\003\276\004\317\005\327" +
    "\006\103\007\101\010\220\011\235\012\242\014\255\016" +
    "\110\017\302\020\300\021\230\023\217\025\262\027\330" +
    "\032\264\034\307\040\237\041\301\044\313\045\225\047" +
    "\326\050\211\051\176\053\257\054\322\055\214\075\324" +
    "\076\177\077\106\100\113\101\107\102\102\103\104\104" +
    "\221\110\245\113\206\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\144\175\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\214" +
    "\226\222\323\224\u0284\225\261\226\272\227\241\001\002" +
    "\000\002\001\uffdf\000\002\001\uffd6\000\002\001\uff8a\000" +
    "\224\003\276\004\317\005\327\006\103\007\101\010\220" +
    "\011\235\012\242\014\255\016\110\017\302\020\300\021" +
    "\230\022\u0288\023\217\025\262\027\330\032\264\034\307" +
    "\040\237\041\301\042\267\044\313\045\225\047\326\050" +
    "\211\051\176\053\257\054\322\055\214\056\240\057\216" +
    "\070\316\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\110\245\113\206\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\144\175\164" +
    "\265\165\247\171\320\172\200\174\234\175\325\176\212" +
    "\177\310\200\224\201\306\202\253\203\312\204\252\205" +
    "\222\210\256\214\226\215\243\216\204\222\323\225\261" +
    "\226\272\227\241\001\002\000\004\144\u0289\001\002\000" +
    "\002\001\uff89\000\004\127\u0291\001\uff66\000\006\122\u028c" +
    "\144\u028d\001\002\000\004\012\u028e\001\002\000\002\001" +
    "\uffca\000\004\127\u028f\001\uff68\000\034\006\103\007\101" +
    "\010\111\016\110\076\075\077\106\100\113\101\107\102" +
    "\102\103\104\114\105\164\073\165\112\001\002\000\002" +
    "\001\uff67\000\034\006\103\007\101\010\111\016\110\076" +
    "\075\077\106\100\113\101\107\102\102\103\104\114\105" +
    "\164\073\165\112\001\002\000\002\001\uff65\000\002\001" +
    "\uffdf\000\224\003\276\004\317\005\327\006\103\007\101" +
    "\010\220\011\235\012\242\014\255\016\110\017\302\020" +
    "\300\021\230\023\217\025\262\027\330\032\264\034\307" +
    "\040\237\041\301\042\267\044\313\045\225\047\326\050" +
    "\211\051\176\053\257\054\322\055\214\056\240\057\216" +
    "\070\316\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\110\245\111\u0295\113\206\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\144" +
    "\175\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\214\226\215\243\216\204\222\323" +
    "\225\261\226\272\227\241\001\002\000\004\046\u0296\001" +
    "\002\000\004\222\u0297\001\002\000\004\010\026\001\002" +
    "\000\004\012\242\001\002\000\004\223\u029a\001\002\000" +
    "\004\110\u029b\001\002\000\002\001\uffdf\000\224\003\276" +
    "\004\317\005\327\006\103\007\101\010\220\011\235\012" +
    "\242\014\255\016\110\017\302\020\300\021\230\023\217" +
    "\025\262\027\330\032\264\034\307\040\237\041\301\042" +
    "\267\044\313\045\225\047\326\050\211\051\176\053\257" +
    "\054\322\055\214\056\240\057\216\070\316\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\110\245\111\u029d\113\206\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\144\175\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\214\226\215\243\216\204\222\323\225\261\226\272\227" +
    "\241\001\002\000\004\046\u029e\001\uffbb\000\004\222\u02a3" +
    "\001\002\000\002\001\uffc0\000\002\001\uffba\000\004\046" +
    "\u029e\001\uffbc\000\002\001\uffb9\000\004\010\026\001\002" +
    "\000\004\012\u02a5\001\002\000\004\223\u02a6\001\002\000" +
    "\004\110\u02a7\001\002\000\002\001\uffdf\000\224\003\276" +
    "\004\317\005\327\006\103\007\101\010\220\011\235\012" +
    "\242\014\255\016\110\017\302\020\300\021\230\023\217" +
    "\025\262\027\330\032\264\034\307\040\237\041\301\042" +
    "\267\044\313\045\225\047\326\050\211\051\176\053\257" +
    "\054\322\055\214\056\240\057\216\070\316\075\324\076" +
    "\177\077\106\100\113\101\107\102\102\103\104\104\221" +
    "\110\245\111\u02a9\113\206\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\144\175\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\214\226\215\243\216\204\222\323\225\261\226\272\227" +
    "\241\001\002\000\002\001\uffb8\000\002\001\uff0d\000\002" +
    "\001\uff07\000\014\012\242\015\u021b\105\u02ad\106\u021a\107" +
    "\u0218\001\002\000\002\001\ufedd\000\132\004\317\006\103" +
    "\007\101\010\220\011\235\012\242\016\110\032\264\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\164\265\165\247\171\320" +
    "\172\200\174\234\175\325\176\212\177\310\200\224\201" +
    "\306\202\253\203\312\204\252\205\222\210\256\222\323" +
    "\225\261\226\272\227\241\001\uff48\000\004\122\u02bd\001" +
    "\uff47\000\066\031\376\123\365\124\u0105\125\357\143\361" +
    "\145\356\146\377\147\360\150\367\151\u0100\152\u0104\153" +
    "\371\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\uff45\000\004\144\u02b2\001\002\000\132" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\164\265" +
    "\165\247\171\320\172\200\174\234\175\325\176\212\177" +
    "\310\200\224\201\306\202\253\203\312\204\252\205\222" +
    "\210\256\222\323\225\261\226\272\227\241\001\uff48\000" +
    "\004\144\u02b4\001\002\000\132\004\317\006\103\007\101" +
    "\010\220\011\235\012\242\016\110\032\264\054\322\055" +
    "\214\075\324\076\177\077\106\100\113\101\107\102\102" +
    "\103\104\104\221\114\105\115\213\116\250\117\233\120" +
    "\304\121\266\126\244\164\265\165\247\171\320\172\200" +
    "\174\234\175\325\176\212\177\310\200\224\201\306\202" +
    "\253\203\312\204\252\205\222\210\256\222\323\225\261" +
    "\226\272\227\241\001\uff48\000\004\223\u02b6\001\002\000" +
    "\210\003\276\004\317\005\327\006\103\007\101\010\220" +
    "\011\235\012\242\014\255\016\110\017\302\020\300\021" +
    "\230\023\217\025\262\027\330\032\264\034\307\040\237" +
    "\041\301\044\313\045\225\047\326\050\211\051\176\053" +
    "\257\054\322\055\214\075\324\076\177\077\106\100\113" +
    "\101\107\102\102\103\104\104\221\110\245\113\206\114" +
    "\105\115\213\116\250\117\233\120\304\121\266\126\244" +
    "\144\175\164\265\165\247\171\320\172\200\174\234\175" +
    "\325\176\212\177\310\200\224\201\306\202\253\203\312" +
    "\204\252\205\222\210\256\214\226\222\323\224\u02b8\225" +
    "\261\226\272\227\241\001\002\000\002\001\uffd4\000\002" +
    "\001\uffdf\000\002\001\uff9b\000\224\003\276\004\317\005" +
    "\327\006\103\007\101\010\220\011\235\012\242\014\255" +
    "\016\110\017\302\020\300\021\230\023\217\024\u02bb\025" +
    "\262\027\330\032\264\034\307\040\237\041\301\042\267" +
    "\044\313\045\225\047\326\050\211\051\176\053\257\054" +
    "\322\055\214\056\240\057\216\070\316\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\110" +
    "\245\113\206\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\144\175\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\214\226\215" +
    "\243\216\204\222\323\225\261\226\272\227\241\001\002" +
    "\000\004\144\u02bc\001\002\000\002\001\uff9a\000\132\004" +
    "\317\006\103\007\101\010\220\011\235\012\242\016\110" +
    "\032\264\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\222\323\225\261\226\272\227\241\001\002\000\066" +
    "\031\376\123\365\124\u0105\125\357\143\361\145\356\146" +
    "\377\147\360\150\367\151\u0100\152\u0104\153\371\154\354" +
    "\155\366\156\u0103\157\u0101\160\363\161\u0102\162\375\163" +
    "\370\164\u0106\165\364\166\374\167\372\170\355\173\362" +
    "\001\uff46\000\010\010\u02c0\012\242\225\261\001\002\000" +
    "\004\222\u016f\001\ufe8c\000\012\010\220\012\242\114\105" +
    "\225\261\001\002\000\004\223\u02c3\001\002\000\002\001" +
    "\ufe94\000\066\031\376\123\365\124\u0105\125\357\143\361" +
    "\145\356\146\377\147\360\150\367\151\u0100\152\u0104\153" +
    "\371\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102" +
    "\162\375\163\370\164\u0106\165\364\166\374\167\372\170" +
    "\355\173\362\001\ufe93\000\002\001\uff0f\000\004\016\u02ca" +
    "\001\002\000\004\144\u02c9\001\002\000\002\001\uffb4\000" +
    "\002\001\uffc6\000\004\223\u02cb\001\002\000\002\001\uffb3" +
    "\000\002\001\uffa9\000\002\001\uffc7\000\002\001\uff1c\000" +
    "\134\004\317\006\103\007\101\010\220\011\235\012\242" +
    "\016\110\032\264\054\322\055\214\075\324\076\177\077" +
    "\106\100\113\101\107\102\102\103\104\104\221\114\105" +
    "\115\213\116\250\117\233\120\304\121\266\126\244\151" +
    "\u02d2\164\265\165\247\171\320\172\200\174\234\175\325" +
    "\176\212\177\310\200\224\201\306\202\253\203\312\204" +
    "\252\205\222\210\256\222\323\225\261\226\272\227\241" +
    "\001\ufeab\000\004\223\u02e2\001\002\000\004\122\u02d9\001" +
    "\ufeda\000\012\010\220\012\242\114\105\225\261\001\002" +
    "\000\070\031\376\074\u02d4\123\365\124\u0105\125\357\143" +
    "\361\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\ufea6\000\134\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\151\u02d5\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\012\010\220" +
    "\012\242\114\105\225\261\001\002\000\066\031\376\123" +
    "\365\124\u0105\125\357\143\361\145\356\146\377\147\360" +
    "\150\367\151\u0100\152\u0104\153\371\154\354\155\366\156" +
    "\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106" +
    "\165\364\166\374\167\372\170\355\173\362\001\ufea7\000" +
    "\002\001\ufea3\000\002\001\ufea2\000\134\004\317\006\103" +
    "\007\101\010\220\011\235\012\242\016\110\032\264\054" +
    "\322\055\214\075\324\076\177\077\106\100\113\101\107" +
    "\102\102\103\104\104\221\114\105\115\213\116\250\117" +
    "\233\120\304\121\266\126\244\151\u02db\164\265\165\247" +
    "\171\320\172\200\174\234\175\325\176\212\177\310\200" +
    "\224\201\306\202\253\203\312\204\252\205\222\210\256" +
    "\222\323\225\261\226\272\227\241\001\ufed9\000\002\001" +
    "\ufeaa\000\012\010\220\012\242\114\105\225\261\001\002" +
    "\000\070\031\376\074\u02dd\123\365\124\u0105\125\357\143" +
    "\361\145\356\146\377\147\360\150\367\151\u0100\152\u0104" +
    "\153\371\154\354\155\366\156\u0103\157\u0101\160\363\161" +
    "\u0102\162\375\163\370\164\u0106\165\364\166\374\167\372" +
    "\170\355\173\362\001\ufea8\000\134\004\317\006\103\007" +
    "\101\010\220\011\235\012\242\016\110\032\264\054\322" +
    "\055\214\075\324\076\177\077\106\100\113\101\107\102" +
    "\102\103\104\104\221\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\151\u02de\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\222" +
    "\323\225\261\226\272\227\241\001\002\000\012\010\220" +
    "\012\242\114\105\225\261\001\002\000\066\031\376\123" +
    "\365\124\u0105\125\357\143\361\145\356\146\377\147\360" +
    "\150\367\151\u0100\152\u0104\153\371\154\354\155\366\156" +
    "\u0103\157\u0101\160\363\161\u0102\162\375\163\370\164\u0106" +
    "\165\364\166\374\167\372\170\355\173\362\001\ufea9\000" +
    "\002\001\ufea5\000\002\001\ufea4\000\002\001\uff05\000\006" +
    "\122\u02ec\144\u02ed\001\002\000\002\001\uff6b\000\014\010" +
    "\220\012\242\110\u02e9\114\105\225\261\001\002\000\002" +
    "\001\uff6c\000\002\001\uff6a\000\002\001\ufed2\000\132\004" +
    "\317\006\103\007\101\010\220\011\235\012\242\016\110" +
    "\032\264\054\322\055\214\075\324\076\177\077\106\100" +
    "\113\101\107\102\102\103\104\104\221\114\105\115\213" +
    "\116\250\117\233\120\304\121\266\126\244\164\265\165" +
    "\247\171\320\172\200\174\234\175\325\176\212\177\310" +
    "\200\224\201\306\202\253\203\312\204\252\205\222\210" +
    "\256\222\323\225\261\226\272\227\241\001\002\000\070" +
    "\031\376\111\u02eb\123\365\124\u0105\125\357\143\361\145" +
    "\356\146\377\147\360\150\367\151\u0100\152\u0104\153\371" +
    "\154\354\155\366\156\u0103\157\u0101\160\363\161\u0102\162" +
    "\375\163\370\164\u0106\165\364\166\374\167\372\170\355" +
    "\173\362\001\002\000\002\001\uff69\000\006\012\u02e4\225" +
    "\u02e5\001\002\000\002\001\uffcb\000\002\001\uff6d\000\134" +
    "\004\317\006\103\007\101\010\220\011\235\012\242\016" +
    "\110\032\264\054\322\055\214\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\114\105\115" +
    "\213\116\250\117\233\120\304\121\266\126\244\151\u0173" +
    "\164\265\165\247\171\320\172\200\174\234\175\325\176" +
    "\212\177\310\200\224\201\306\202\253\203\312\204\252" +
    "\205\222\210\256\222\323\225\261\226\272\227\241\001" +
    "\uff74\000\004\223\u02f1\001\002\000\002\001\ufeff\000\002" +
    "\001\ufff1\000\004\223\u02f4\001\002\000\002\001\uffed\000" +
    "\010\145\171\146\167\223\u02f6\001\002\000\002\001\ufff0" +
    "\000\010\010\063\160\037\166\057\001\002\000\004\073" +
    "\u02f9\001\002\000\010\010\063\160\037\166\057\001\002" +
    "\000\004\222\u02fb\001\002\000\004\223\u02fc\001\002\000" +
    "\004\223\u02fd\001\002\000\002\001\uffec\000\002\001\uffef" +
    "\000\004\222\u0300\001\002\000\004\223\u0301\001\002\000" +
    "\004\224\u0302\001\002\000\012\010\165\063\162\171\161" +
    "\222\164\001\002\000\010\144\u0304\145\171\146\167\001" +
    "\002\000\002\001\ufff6\000\002\001\uff57\000\004\223\u0307" +
    "\001\002\000\004\224\u0308\001\002\000\012\010\165\063" +
    "\162\171\161\222\164\001\002\000\010\110\u030a\145\171" +
    "\146\167\001\002\000\002\001\uffdf\000\224\003\276\004" +
    "\317\005\327\006\103\007\101\010\220\011\235\012\242" +
    "\014\255\016\110\017\302\020\300\021\230\023\217\025" +
    "\262\027\330\032\264\034\307\040\237\041\301\042\267" +
    "\044\313\045\225\047\326\050\211\051\176\053\257\054" +
    "\322\055\214\056\240\057\216\070\316\075\324\076\177" +
    "\077\106\100\113\101\107\102\102\103\104\104\221\110" +
    "\245\111\u030c\113\206\114\105\115\213\116\250\117\233" +
    "\120\304\121\266\126\244\144\175\164\265\165\247\171" +
    "\320\172\200\174\234\175\325\176\212\177\310\200\224" +
    "\201\306\202\253\203\312\204\252\205\222\210\256\214" +
    "\226\215\243\216\204\222\323\225\261\226\272\227\241" +
    "\001\002\000\002\001\ufff3\000\004\127\u030e\001\002\000" +
    "\034\006\103\007\101\010\111\016\110\076\075\077\106" +
    "\100\113\101\107\102\102\103\104\114\105\164\073\165" +
    "\112\001\002\000\002\001\uff4b\000\004\223\u0311\001\002" +
    "\000\004\224\u0312\001\002\000\012\010\165\063\162\171" +
    "\161\222\164\001\002\000\010\110\u0314\145\171\146\167" +
    "\001\002\000\002\001\uffdf\000\224\003\276\004\317\005" +
    "\327\006\103\007\101\010\220\011\235\012\242\014\255" +
    "\016\110\017\302\020\300\021\230\023\217\025\262\027" +
    "\330\032\264\034\307\040\237\041\301\042\267\044\313" +
    "\045\225\047\326\050\211\051\176\053\257\054\322\055" +
    "\214\056\240\057\216\070\316\075\324\076\177\077\106" +
    "\100\113\101\107\102\102\103\104\104\221\110\245\111" +
    "\u0316\113\206\114\105\115\213\116\250\117\233\120\304" +
    "\121\266\126\244\144\175\164\265\165\247\171\320\172" +
    "\200\174\234\175\325\176\212\177\310\200\224\201\306" +
    "\202\253\203\312\204\252\205\222\210\256\214\226\215" +
    "\243\216\204\222\323\225\261\226\272\227\241\001\002" +
    "\000\002\001\ufff5\000\004\161\u0318\001\002\000\002\001" +
    "\uffe5\000\004\151\u01fd\001\uffb0\000\012\010\u031c\114\105" +
    "\160\037\166\057\001\002\000\004\112\u031d\001\002\000" +
    "\004\222\ufe8a\001\uffe1\000\006\010\334\114\105\001\002" +
    "\000\004\222\u031f\001\002\000\010\010\u0202\076\u0200\223" +
    "\uff7f\001\uff78\000\004\223\u0321\001\002\000\006\110\u020a" +
    "\144\u020b\001\002\000\002\001\ufff7\000\002\001\uffa7" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0321\000\014\003\004\004\003\005\005\015\007\016" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\142\020\001" +
    "\001\000\004\120\u0322\001\001\000\004\143\021\001\001" +
    "\000\004\006\030\001\001\000\006\120\024\144\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\120\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\033\001\001\000\024" +
    "\010\057\011\053\012\054\055\044\122\065\123\034\125" +
    "\045\126\050\147\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\126\u0304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\133\012\054\121\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\066\076\067\075\114\073\164\077\001\001" +
    "\000\012\066\076\067\132\114\073\164\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\066\076\067\113\114\073\164\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\066\076\067\121\071\117" +
    "\073\120\114\073\164\077\001\001\000\002\001\001\000" +
    "\004\072\125\001\001\000\002\001\001\000\012\066\076" +
    "\067\123\114\073\164\077\001\001\000\002\001\001\000" +
    "\012\066\076\067\126\114\073\164\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\066\076\067\130\114" +
    "\073\164\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\066\076\067\142\114\073\164\077\001" +
    "\001\000\002\001\001\000\012\066\076\067\144\114\073" +
    "\164\077\001\001\000\002\001\001\000\004\121\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\122\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\165\014\162\001\001\000\006\013\u02fd\014" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\u02f4\014\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\u02f1\014\162\001\001\000\004\020\172" +
    "\001\001\000\006\013\171\014\162\001\001\000\002\001" +
    "\001\000\074\017\320\021\200\022\270\062\313\063\226" +
    "\066\267\070\201\074\202\075\235\076\276\103\250\113" +
    "\245\114\304\115\273\120\214\131\262\132\302\133\207" +
    "\137\310\140\206\141\230\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\u02e2\052\u02e5\001" +
    "\001\000\002\001\001\000\052\062\313\063\226\066\267" +
    "\070\201\074\u02cd\075\235\076\276\103\250\113\245\114" +
    "\304\120\214\133\207\146\314\150\257\151\173\153\204" +
    "\155\272\157\253\161\222\165\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\u02c6\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u02c4\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\052\062\313\063\226\066\267\070\201\074\u02c3" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\110\u02ab\001\001\000\052\062\313\063\226\066" +
    "\267\070\201\074\u02aa\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\207\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\002" +
    "\001\001\000\052\062\313\063\226\066\267\070\201\074" +
    "\u02a9\075\235\076\276\103\250\113\245\114\304\120\214" +
    "\133\207\146\314\150\257\151\173\153\204\155\272\157" +
    "\253\161\222\165\231\001\001\000\002\001\001\000\004" +
    "\053\u028a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\063\226\075\235\076\276\103\250\114\u0167\120\u016a\133" +
    "\u0168\150\u026b\151\173\153\204\155\272\161\222\165\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\062" +
    "\313\063\226\066\267\070\201\074\u0269\075\235\076\276" +
    "\103\250\113\245\114\304\120\214\133\207\146\314\150" +
    "\257\151\173\153\204\155\272\157\253\161\222\165\231" +
    "\001\001\000\002\001\001\000\004\110\u0263\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\062\313\063\226" +
    "\066\267\070\201\074\u0261\075\235\076\276\103\250\113" +
    "\245\114\304\120\214\133\207\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\004\020\u025f\001\001\000\002\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u025e\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\052\062\313\063\226\066\267\070\201\074\u025d" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\010\075\u025c\076\276\155" +
    "\272\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u025b\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\052\062\313\063" +
    "\226\066\267\070\201\074\u025a\075\235\076\276\103\250" +
    "\113\245\114\304\120\214\133\207\146\314\150\257\151" +
    "\173\153\204\155\272\157\253\161\222\165\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\075\u0114\076" +
    "\276\103\u0111\120\u0112\153\204\155\272\156\u0258\160\u0110" +
    "\161\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\062\313\063\226\066\267\070\201\074\u0236\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u0235\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\052\062\313\063" +
    "\226\066\267\070\201\074\u0234\075\235\076\276\103\250" +
    "\113\245\114\304\120\214\133\207\146\314\150\257\151" +
    "\173\153\204\155\272\157\253\161\222\165\231\001\001" +
    "\000\004\056\u022c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\110\u0214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\017\u01ea\022\270\062\313\063\226\066\267" +
    "\070\201\074\202\075\235\076\276\103\250\113\245\114" +
    "\304\120\214\133\207\146\314\150\257\151\173\153\204" +
    "\155\272\157\253\161\222\165\231\001\001\000\052\062" +
    "\313\063\226\066\267\070\201\074\u01e8\075\235\076\276" +
    "\103\250\113\245\114\304\120\214\133\207\146\314\150" +
    "\257\151\173\153\204\155\272\157\253\161\222\165\231" +
    "\001\001\000\054\057\u01e2\062\313\063\226\066\267\070" +
    "\201\074\u01e3\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\002\001\001" +
    "\000\052\062\313\063\226\066\267\070\201\074\u01e1\075" +
    "\235\076\276\103\250\113\245\114\304\120\214\133\207" +
    "\146\314\150\257\151\173\153\204\155\272\157\253\161" +
    "\222\165\231\001\001\000\002\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u01e0\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\052\062\313\063\226\066\267" +
    "\070\201\074\u01c4\075\235\076\276\103\250\113\245\114" +
    "\304\120\214\133\207\146\314\150\257\151\173\153\204" +
    "\155\272\157\253\161\222\165\231\001\001\000\002\001" +
    "\001\000\052\062\313\063\226\066\267\070\201\074\u01c3" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\052\062\u01c0\063\226\066" +
    "\267\070\201\074\u0173\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\u01bf\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\u01ba\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u01b8\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u01b0\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\002\001\001\000" +
    "\034\063\226\075\235\076\276\103\250\114\u0167\120\u016a" +
    "\133\u0168\150\u0169\151\173\153\204\155\272\161\222\165" +
    "\231\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u0165\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\331\114\332\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\066" +
    "\076\067\335\114\073\164\077\001\001\000\002\001\001" +
    "\000\060\017\345\022\270\032\343\062\313\063\226\066" +
    "\267\070\201\074\202\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\207\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\004" +
    "\114\340\001\001\000\002\001\001\000\012\066\076\067" +
    "\342\114\073\164\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\346\001\001\000\002\001\001\000" +
    "\074\017\320\021\200\022\270\062\313\063\226\066\267" +
    "\070\201\074\202\075\235\076\276\103\250\113\245\114" +
    "\304\115\273\120\214\131\262\132\302\133\207\137\310" +
    "\140\206\141\230\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\062\313\063\226\066\267\070" +
    "\201\074\352\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\002\001\001" +
    "\000\052\062\313\063\226\066\267\070\201\074\u0164\075" +
    "\235\076\276\103\250\113\245\114\304\120\214\133\207" +
    "\146\314\150\257\151\173\153\204\155\272\157\253\161" +
    "\222\165\231\001\001\000\052\062\313\063\226\066\267" +
    "\070\201\074\u0163\075\235\076\276\103\250\113\245\114" +
    "\304\120\214\133\207\146\314\150\257\151\173\153\204" +
    "\155\272\157\253\161\222\165\231\001\001\000\052\062" +
    "\313\063\226\066\267\070\201\074\u0162\075\235\076\276" +
    "\103\250\113\245\114\304\120\214\133\207\146\314\150" +
    "\257\151\173\153\204\155\272\157\253\161\222\165\231" +
    "\001\001\000\052\062\313\063\226\066\267\070\201\074" +
    "\u0161\075\235\076\276\103\250\113\245\114\304\120\214" +
    "\133\207\146\314\150\257\151\173\153\204\155\272\157" +
    "\253\161\222\165\231\001\001\000\052\062\313\063\226" +
    "\066\267\070\201\074\u0160\075\235\076\276\103\250\113" +
    "\245\114\304\120\214\133\207\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\052\062\313\063\226\066\267\070\201\074\u015d\075\235" +
    "\076\276\103\250\113\245\114\304\120\214\133\207\146" +
    "\314\150\257\151\173\153\204\155\272\157\253\161\222" +
    "\165\231\001\001\000\052\062\313\063\226\066\267\070" +
    "\201\074\u015c\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u015b\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\052\062\313\063\226\066\267\070\201\074\u015a" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\052\062\313\063\226\066" +
    "\267\070\201\074\u0159\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\207\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\052" +
    "\062\313\063\226\066\267\070\201\074\u0158\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u0157\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\052\062\313\063" +
    "\226\066\267\070\201\074\u0156\075\235\076\276\103\250" +
    "\113\245\114\304\120\214\133\207\146\314\150\257\151" +
    "\173\153\204\155\272\157\253\161\222\165\231\001\001" +
    "\000\052\062\313\063\226\066\267\070\201\074\u0155\075" +
    "\235\076\276\103\250\113\245\114\304\120\214\133\207" +
    "\146\314\150\257\151\173\153\204\155\272\157\253\161" +
    "\222\165\231\001\001\000\052\062\313\063\226\066\267" +
    "\070\201\074\u0154\075\235\076\276\103\250\113\245\114" +
    "\304\120\214\133\207\146\314\150\257\151\173\153\204" +
    "\155\272\157\253\161\222\165\231\001\001\000\056\017" +
    "\u013c\022\270\062\313\063\226\066\267\070\201\074\202" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\052\062\313\063\226\066" +
    "\267\070\201\074\u013a\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\207\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\052" +
    "\062\313\063\226\066\267\070\201\074\u0139\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\024\075\u0114\076\276\103\u0111\120\u0112" +
    "\153\204\155\272\156\u010e\160\u0110\161\u010f\001\001\000" +
    "\052\062\313\063\226\066\267\070\201\074\u010d\075\235" +
    "\076\276\103\250\113\245\114\304\120\214\133\207\146" +
    "\314\150\257\151\173\153\204\155\272\157\253\161\222" +
    "\165\231\001\001\000\052\062\313\063\226\066\267\070" +
    "\201\074\u010c\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u010b\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\052\062\313\063\226\066\267\070\201\074\u010a" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\052\062\313\063\226\066" +
    "\267\070\201\074\u0109\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\207\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\052" +
    "\062\313\063\226\066\267\070\201\074\u0108\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u0107\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\052\062\313\063" +
    "\226\066\267\070\201\074\u0106\075\235\076\276\103\250" +
    "\113\245\114\304\120\214\133\207\146\314\150\257\151" +
    "\173\153\204\155\272\157\253\161\222\165\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\075\u0125\076\276\155\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\062\313\063\226\066\267\070\201\074\u011a" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\054\062\313\063\226\066" +
    "\267\070\201\074\u0118\075\235\076\276\077\u0117\103\250" +
    "\113\245\114\304\120\214\133\207\146\314\150\257\151" +
    "\173\153\204\155\272\157\253\161\222\165\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\075\u011f\076\276" +
    "\103\u011e\151\u011d\155\272\001\001\000\002\001\001\000" +
    "\010\075\u0120\076\276\155\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\062\313\063" +
    "\226\066\267\070\201\074\u0123\075\235\076\276\103\250" +
    "\113\245\114\304\120\214\133\207\146\314\150\257\151" +
    "\173\153\204\155\272\157\253\161\222\165\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\075\u011f\076\276\100\u012a\101\u012b\102\u0128\103\u011e" +
    "\114\u0127\151\u0129\155\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\162\u0135\001\001" +
    "\000\002\001\001\000\052\062\313\063\226\066\267\070" +
    "\201\074\u012d\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\062\313\063\226\066\267\070" +
    "\201\074\u0133\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\054\062\313" +
    "\063\226\066\267\070\201\074\u0118\075\235\076\276\077" +
    "\u0131\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\163\u0136\001\001\000" +
    "\002\001\001\000\024\075\u011f\076\276\100\u0138\101\u012b" +
    "\102\u0128\103\u011e\114\u0127\151\u0129\155\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0146\001\001\000\004\040\u013d\001\001\000\004\042" +
    "\u013e\001\001\000\002\001\001\000\056\017\u0145\022\270" +
    "\062\313\063\226\066\267\070\201\074\202\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\002\001\001\000\052\062\313\063\226" +
    "\066\267\070\201\074\u0142\075\235\076\276\103\250\113" +
    "\245\114\304\120\214\133\207\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\002\001\001\000\056\017\u0144\022\270\062\313\063\226" +
    "\066\267\070\201\074\202\075\235\076\276\103\250\113" +
    "\245\114\304\120\214\133\207\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\017\320\021\200" +
    "\022\270\041\u0147\062\313\063\226\066\267\070\201\074" +
    "\202\075\235\076\276\103\250\113\245\114\304\115\273" +
    "\120\214\131\262\132\302\133\207\137\310\140\206\141" +
    "\230\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\004\043\u0148\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\062\313\063\226\066\267\070\201\074\u014c\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u014f\001\001\000\074\017\320\021\200\022\270\062" +
    "\313\063\226\066\267\070\201\074\202\075\235\076\276" +
    "\103\250\113\245\114\304\115\273\120\214\131\262\132" +
    "\302\133\207\137\310\140\206\141\230\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\004\020\u0151\001\001\000\074\017\320\021\200" +
    "\022\270\062\313\063\226\066\267\070\201\074\202\075" +
    "\235\076\276\103\250\113\245\114\304\115\273\120\214" +
    "\131\262\132\302\133\207\137\310\140\206\141\230\146" +
    "\314\150\257\151\173\153\204\155\272\157\253\161\222" +
    "\165\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\062\313\063\226\066\267\070\201\074\u015f\075" +
    "\235\076\276\103\250\113\245\114\304\120\214\133\207" +
    "\146\314\150\257\151\173\153\204\155\272\157\253\161" +
    "\222\165\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\075\u011f\076\276\103\u011e\151\u016c\155\272" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\047" +
    "\u0171\050\u016f\062\u0174\063\226\066\267\070\201\074\u0173" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\u0170\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\063\226\075\235\076\276" +
    "\103\250\114\u0167\117\u0175\120\u016a\133\u0176\151\173\153" +
    "\204\155\272\161\222\165\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u0197\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\052\062\313\063" +
    "\226\066\267\070\201\074\u018f\075\235\076\276\103\250" +
    "\113\245\114\304\120\214\133\207\146\314\150\257\151" +
    "\173\153\204\155\272\157\253\161\222\165\231\001\001" +
    "\000\052\062\313\063\226\066\267\070\201\074\u018d\075" +
    "\235\076\276\103\250\113\245\114\304\120\214\133\207" +
    "\146\314\150\257\151\173\153\204\155\272\157\253\161" +
    "\222\165\231\001\001\000\052\062\313\063\226\066\267" +
    "\070\201\074\u018c\075\235\076\276\103\250\113\245\114" +
    "\304\120\214\133\207\146\314\150\257\151\173\153\204" +
    "\155\272\157\253\161\222\165\231\001\001\000\052\062" +
    "\313\063\226\066\267\070\201\074\u018b\075\235\076\276" +
    "\103\250\113\245\114\304\120\214\133\207\146\314\150" +
    "\257\151\173\153\204\155\272\157\253\161\222\165\231" +
    "\001\001\000\052\062\313\063\226\066\267\070\201\074" +
    "\u018a\075\235\076\276\103\250\113\245\114\304\120\214" +
    "\133\207\146\314\150\257\151\173\153\204\155\272\157" +
    "\253\161\222\165\231\001\001\000\052\062\313\063\226" +
    "\066\267\070\201\074\u0189\075\235\076\276\103\250\113" +
    "\245\114\304\120\214\133\207\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\052\062\313\063\226\066\267\070\201\074\u0188\075\235" +
    "\076\276\103\250\113\245\114\304\120\214\133\207\146" +
    "\314\150\257\151\173\153\204\155\272\157\253\161\222" +
    "\165\231\001\001\000\052\062\313\063\226\066\267\070" +
    "\201\074\u0187\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u0186\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\052\062\313\063\226\066\267\070\201\074\u0185" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\052\062\313\063\226\066" +
    "\267\070\201\074\u0184\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\207\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\063\226\075\235\076\276\103\250\114\u0167\120\u016a" +
    "\133\u0191\151\173\153\204\155\272\161\222\165\231\001" +
    "\001\000\002\001\001\000\024\075\u0114\076\276\103\u0111" +
    "\120\u0112\153\204\155\272\156\u0192\160\u0110\161\u010f\001" +
    "\001\000\002\001\001\000\004\065\u0193\001\001\000\002" +
    "\001\001\000\056\047\u0195\050\u016f\062\u0174\063\226\066" +
    "\267\070\201\074\u0173\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\u0170\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\062" +
    "\u019b\063\226\066\267\070\201\074\u0173\075\235\076\276" +
    "\103\250\113\245\114\304\120\214\133\u0199\146\314\150" +
    "\257\151\173\153\204\155\272\157\253\161\222\165\231" +
    "\001\001\000\002\001\001\000\034\063\226\075\235\076" +
    "\276\103\250\114\u0167\117\u019c\120\u016a\133\u0176\151\173" +
    "\153\204\155\272\161\222\165\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\047\u019e\050\u016f\062\u0174" +
    "\063\226\066\267\070\201\074\u0173\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\u0170\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\047\u01a1" +
    "\050\u016f\062\u0174\063\226\066\267\070\201\074\u0173\075" +
    "\235\076\276\103\250\113\245\114\304\120\214\133\u0170" +
    "\146\314\150\257\151\173\153\204\155\272\157\253\161" +
    "\222\165\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\063\226\075\235\076\276\103\250\104\u01a4\105" +
    "\u01a5\114\u0167\120\u016a\133\u01a6\151\173\153\204\155\272" +
    "\161\222\165\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\063\226" +
    "\075\235\076\276\103\250\104\u01a9\105\u01a5\114\u0167\120" +
    "\u016a\133\u01a6\151\173\153\204\155\272\161\222\165\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\063" +
    "\226\075\235\076\276\103\250\105\u01ac\114\u0167\120\u016a" +
    "\133\u01a6\151\173\153\204\155\272\161\222\165\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u01af\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\063\226\075\235\076\276\103\250\114\u0167\120" +
    "\u016a\133\u01b3\151\173\153\204\154\u01b4\155\272\161\222" +
    "\165\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\063\226\075\235\076\276\103\250" +
    "\114\u0167\120\u016a\133\u01b7\151\173\153\204\155\272\161" +
    "\222\165\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\062\313\063\226\066\267\070\201\074\u01bb\075" +
    "\235\076\276\103\250\113\245\114\304\120\214\133\207" +
    "\146\314\150\257\151\173\153\204\155\272\157\253\161" +
    "\222\165\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\062" +
    "\313\063\226\066\267\070\201\074\u01c6\075\235\076\276" +
    "\103\250\113\245\114\304\120\214\133\207\146\314\150" +
    "\257\151\173\153\204\155\272\157\253\161\222\165\231" +
    "\001\001\000\002\001\001\000\004\034\u01c8\001\001\000" +
    "\002\001\001\000\004\035\u01db\001\001\000\004\035\u01cb" +
    "\001\001\000\002\001\001\000\004\035\u01cd\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\062\313\063\226" +
    "\066\267\070\201\074\u01d5\075\235\076\276\103\250\113" +
    "\245\114\304\120\214\133\207\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\004\036\u01d1\001\001\000\004\020\u01d4\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\017\320\021\200\022" +
    "\270\062\313\063\226\066\267\070\201\074\202\075\235" +
    "\076\276\103\250\113\245\114\304\115\273\120\214\131" +
    "\262\132\302\133\207\137\310\140\206\141\230\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\004\036\u01d6\001\001\000\004\020\u01d7" +
    "\001\001\000\074\017\320\021\200\022\270\062\313\063" +
    "\226\066\267\070\201\074\202\075\235\076\276\103\250" +
    "\113\245\114\304\115\273\120\214\131\262\132\302\133" +
    "\207\137\310\140\206\141\230\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\u01dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\062" +
    "\313\063\226\066\267\070\201\074\u01e6\075\235\076\276" +
    "\103\250\113\245\114\304\120\214\133\207\146\314\150" +
    "\257\151\173\153\204\155\272\157\253\161\222\165\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\062\313\063\226\066\267\070" +
    "\201\074\u01ed\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\u01f1\001" +
    "\001\000\002\001\001\000\006\120\024\144\u01f3\001\001" +
    "\000\002\001\001\000\004\054\u01f5\001\001\000\016\055" +
    "\u01f6\122\065\123\u01f9\125\045\126\050\147\u01f8\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\121\135\001" +
    "\001\000\002\001\001\000\004\056\u01fb\001\001\000\004" +
    "\114\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\044\u0202\045\u0203\046\u0204\145\u0200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\u0206" +
    "\145\u0200\001\001\000\002\001\001\000\004\124\u0208\001" +
    "\001\000\002\001\001\000\004\020\u020b\001\001\000\002" +
    "\001\001\000\074\017\320\021\200\022\270\062\313\063" +
    "\226\066\267\070\201\074\202\075\235\076\276\103\250" +
    "\113\245\114\304\115\273\120\214\131\262\132\302\133" +
    "\207\137\310\140\206\141\230\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\066\076\067\u0210\114\073\164\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\066\076\067\u0213\114\073" +
    "\164\077\001\001\000\002\001\001\000\006\111\u0216\155" +
    "\u0215\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\063\226\075\235\076\276\103\250\114\u0167\120\u016a\133" +
    "\u0222\151\173\153\204\155\272\161\222\165\231\001\001" +
    "\000\002\001\001\000\052\062\313\063\226\066\267\070" +
    "\201\074\u021c\075\235\076\276\103\250\113\245\114\304" +
    "\120\214\133\207\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\062\313\063\226\066\267\070\201\074\u021f\075\235" +
    "\076\276\103\250\113\245\114\304\120\214\133\207\146" +
    "\314\150\257\151\173\153\204\155\272\157\253\161\222" +
    "\165\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\112\u0228\114\u0229\155\u0227\001\001\000\004\114\u0226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\u022d\001\001\000\002\001\001\000\012\044\u022f" +
    "\045\u0203\046\u0204\145\u0200\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0232\001\001\000\074\017\320" +
    "\021\200\022\270\062\313\063\226\066\267\070\201\074" +
    "\202\075\235\076\276\103\250\113\245\114\304\115\273" +
    "\120\214\131\262\132\302\133\207\137\310\140\206\141" +
    "\230\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\062\u0239" +
    "\063\226\066\267\070\201\074\u0173\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\u0238\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\063\226" +
    "\075\235\076\276\103\250\114\u0167\120\u016a\133\u023b\151" +
    "\173\153\204\155\272\161\222\165\231\001\001\000\004" +
    "\026\u023c\001\001\000\002\001\001\000\034\027\u023e\063" +
    "\226\075\235\076\276\103\250\114\u0167\120\u016a\133\u023f" +
    "\151\173\153\204\155\272\161\222\165\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\063\226\075\235" +
    "\076\276\103\250\114\u0167\120\u016a\133\u0241\151\173\153" +
    "\204\155\272\161\222\165\231\001\001\000\002\001\001" +
    "\000\060\017\u0244\022\270\031\u0245\062\313\063\226\066" +
    "\267\070\201\074\202\075\235\076\276\103\250\113\245" +
    "\114\304\120\214\133\207\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\004" +
    "\020\u0246\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\017\320\021\200\022\270\062\313\063\226\066\267" +
    "\070\201\074\202\075\235\076\276\103\250\113\245\114" +
    "\304\115\273\120\214\131\262\132\302\133\207\137\310" +
    "\140\206\141\230\146\314\150\257\151\173\153\204\155" +
    "\272\157\253\161\222\165\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\027\u024a\063\226\075\235\076" +
    "\276\103\250\114\u0167\120\u016a\133\u023f\151\173\153\204" +
    "\155\272\161\222\165\231\001\001\000\004\026\u024b\001" +
    "\001\000\002\001\001\000\060\017\u0244\022\270\031\u024d" +
    "\062\313\063\226\066\267\070\201\074\202\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\023\u0253\024\u0251\063\226\075\235\076" +
    "\276\103\250\114\u0167\120\u016a\133\u0252\151\173\153\204" +
    "\155\272\161\222\165\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\024\u0256\063\226\075\235\076\276\103\250\114\u0167\120" +
    "\u016a\133\u0252\151\173\153\204\155\272\161\222\165\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u0259\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\017\320\021\200\022\270\062\313\063\226" +
    "\066\267\070\201\074\202\075\235\076\276\103\250\113" +
    "\245\114\304\115\273\120\214\131\262\132\302\133\207" +
    "\137\310\140\206\141\230\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\111" +
    "\u0216\155\u0215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\062\313\063\226\066\267\070\201\074\u026d\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\075\u011f\076\276\100\u0270\101\u012b\102\u0128\103\u011e\114" +
    "\u0127\151\u0129\155\272\001\001\000\004\127\u0271\001\001" +
    "\000\004\130\u0275\001\001\000\056\047\u0273\050\u016f\062" +
    "\u0174\063\226\066\267\070\201\074\u0173\075\235\076\276" +
    "\103\250\113\245\114\304\120\214\133\u0170\146\314\150" +
    "\257\151\173\153\204\155\272\157\253\161\222\165\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\152" +
    "\u0276\001\001\000\002\001\001\000\024\075\u011f\076\276" +
    "\100\u0278\101\u012b\102\u0128\103\u011e\114\u0127\151\u0129\155" +
    "\272\001\001\000\004\127\u0279\001\001\000\002\001\001" +
    "\000\004\142\u027b\001\001\000\004\143\u027c\001\001\000" +
    "\002\001\001\000\004\054\u027e\001\001\000\016\055\u01f6" +
    "\122\065\123\u01f9\125\045\126\050\147\u01f8\001\001\000" +
    "\002\001\001\000\052\062\313\063\226\066\267\070\201" +
    "\074\u0281\075\235\076\276\103\250\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\002\001\001\000" +
    "\060\017\u0285\022\270\037\u0284\062\313\063\226\066\267" +
    "\070\201\074\202\075\235\076\276\103\250\113\245\114" +
    "\304\120\214\133\207\146\314\150\257\151\173\153\204" +
    "\155\272\157\253\161\222\165\231\001\001\000\004\020" +
    "\u0286\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\017\320\021\200\022\270\062\313\063\226\066\267\070" +
    "\201\074\202\075\235\076\276\103\250\113\245\114\304" +
    "\115\273\120\214\131\262\132\302\133\207\137\310\140" +
    "\206\141\230\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\066" +
    "\076\067\u028f\114\073\164\077\001\001\000\002\001\001" +
    "\000\012\066\076\067\u0291\114\073\164\077\001\001\000" +
    "\002\001\001\000\004\020\u0293\001\001\000\074\017\320" +
    "\021\200\022\270\062\313\063\226\066\267\070\201\074" +
    "\202\075\235\076\276\103\250\113\245\114\304\115\273" +
    "\120\214\131\262\132\302\133\207\137\310\140\206\141" +
    "\230\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\u0297\001\001\000\004\155\u0298\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u029b\001" +
    "\001\000\074\017\320\021\200\022\270\062\313\063\226" +
    "\066\267\070\201\074\202\075\235\076\276\103\250\113" +
    "\245\114\304\115\273\120\214\131\262\132\302\133\207" +
    "\137\310\140\206\141\230\146\314\150\257\151\173\153" +
    "\204\155\272\157\253\161\222\165\231\001\001\000\010" +
    "\134\u029e\135\u02a0\136\u029f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\136\u02a1\001\001" +
    "\000\002\001\001\000\004\120\u02a3\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u02a7" +
    "\001\001\000\074\017\320\021\200\022\270\062\313\063" +
    "\226\066\267\070\201\074\202\075\235\076\276\103\250" +
    "\113\245\114\304\115\273\120\214\131\262\132\302\133" +
    "\207\137\310\140\206\141\230\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\111\u0216\155\u0215\001\001\000\002\001\001\000\056\060" +
    "\u02b0\061\u02ae\062\313\063\226\066\267\070\201\074\u02af" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\207\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\060\u02b2\061\u02ae\062\313" +
    "\063\226\066\267\070\201\074\u02af\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\056\060\u02b4\061\u02ae\062\313" +
    "\063\226\066\267\070\201\074\u02af\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\060\017\u02b8\022\270\030\u02b6" +
    "\062\313\063\226\066\267\070\201\074\202\075\235\076" +
    "\276\103\250\113\245\114\304\120\214\133\207\146\314" +
    "\150\257\151\173\153\204\155\272\157\253\161\222\165" +
    "\231\001\001\000\002\001\001\000\004\020\u02b9\001\001" +
    "\000\002\001\001\000\074\017\320\021\200\022\270\062" +
    "\313\063\226\066\267\070\201\074\202\075\235\076\276" +
    "\103\250\113\245\114\304\115\273\120\214\131\262\132" +
    "\302\133\207\137\310\140\206\141\230\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u02bd\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\014\075\u011f\076\276\103\u011e" +
    "\151\u016c\155\272\001\001\000\002\001\001\000\032\063" +
    "\226\075\235\076\276\103\250\114\u0167\120\u016a\133\u02c1" +
    "\151\173\153\204\155\272\161\222\165\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\062\313\063\226\066\267\070\201\074\u02d2\075\235" +
    "\076\276\103\250\106\u02cf\107\u02d0\113\245\114\304\120" +
    "\214\133\207\146\314\150\257\151\173\153\204\155\272" +
    "\157\253\161\222\165\231\001\001\000\002\001\001\000" +
    "\004\072\u02d9\001\001\000\034\063\226\075\235\076\276" +
    "\103\250\114\u0167\117\u02d7\120\u016a\133\u0176\151\173\153" +
    "\204\155\272\161\222\165\231\001\001\000\002\001\001" +
    "\000\052\062\313\063\226\066\267\070\201\074\u02d5\075" +
    "\235\076\276\103\250\113\245\114\304\120\214\133\207" +
    "\146\314\150\257\151\173\153\204\155\272\157\253\161" +
    "\222\165\231\001\001\000\034\063\226\075\235\076\276" +
    "\103\250\114\u0167\117\u02d6\120\u016a\133\u0176\151\173\153" +
    "\204\155\272\161\222\165\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\062\313\063" +
    "\226\066\267\070\201\074\u02db\075\235\076\276\103\250" +
    "\113\245\114\304\120\214\133\207\146\314\150\257\151" +
    "\173\153\204\155\272\157\253\161\222\165\231\001\001" +
    "\000\002\001\001\000\034\063\226\075\235\076\276\103" +
    "\250\114\u0167\117\u02e0\120\u016a\133\u0176\151\173\153\204" +
    "\155\272\161\222\165\231\001\001\000\002\001\001\000" +
    "\052\062\313\063\226\066\267\070\201\074\u02de\075\235" +
    "\076\276\103\250\113\245\114\304\120\214\133\207\146" +
    "\314\150\257\151\173\153\204\155\272\157\253\161\222" +
    "\165\231\001\001\000\034\063\226\075\235\076\276\103" +
    "\250\114\u0167\117\u02df\120\u016a\133\u0176\151\173\153\204" +
    "\155\272\161\222\165\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\063\226\075\235\076" +
    "\276\103\250\114\u0167\120\u016a\133\u02e7\146\u02e6\151\173" +
    "\153\204\155\272\161\222\165\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\062\313" +
    "\063\226\066\267\070\201\074\u02e9\075\235\076\276\103" +
    "\250\113\245\114\304\120\214\133\207\146\314\150\257" +
    "\151\173\153\204\155\272\157\253\161\222\165\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\u02ed" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\047" +
    "\u02ef\050\u016f\062\u0174\063\226\066\267\070\201\074\u0173" +
    "\075\235\076\276\103\250\113\245\114\304\120\214\133" +
    "\u0170\146\314\150\257\151\173\153\204\155\272\157\253" +
    "\161\222\165\231\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u02f7\012" +
    "\054\001\001\000\002\001\001\000\006\011\u02f9\012\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\u0302\014" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\u0308\014\162\001\001\000\002\001\001\000\004\020\u030a" +
    "\001\001\000\074\017\320\021\200\022\270\062\313\063" +
    "\226\066\267\070\201\074\202\075\235\076\276\103\250" +
    "\113\245\114\304\115\273\120\214\131\262\132\302\133" +
    "\207\137\310\140\206\141\230\146\314\150\257\151\173" +
    "\153\204\155\272\157\253\161\222\165\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\066\076\067\u030e" +
    "\114\073\164\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\u0312\014\162\001\001" +
    "\000\002\001\001\000\004\020\u0314\001\001\000\074\017" +
    "\320\021\200\022\270\062\313\063\226\066\267\070\201" +
    "\074\202\075\235\076\276\103\250\113\245\114\304\115" +
    "\273\120\214\131\262\132\302\133\207\137\310\140\206" +
    "\141\230\146\314\150\257\151\173\153\204\155\272\157" +
    "\253\161\222\165\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u0319\001\001\000" +
    "\010\011\u031a\012\054\114\u01fd\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\114\u031d\001\001\000\002\001" +
    "\001\000\012\044\u031f\045\u0203\046\u0204\145\u0200\001\001" +
    "\000\002\001\001\000\004\124\u0321\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PHPAspectParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PHPAspectParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PHPAspectParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = new Integer(BodyDeclaration.Modifier.PUBLIC);
	protected final static Integer PRIVATE = new Integer(BodyDeclaration.Modifier.PRIVATE);
	protected final static Integer PROTECTED = new Integer(BodyDeclaration.Modifier.PROTECTED);
	protected final static Integer ABSTRACT = new Integer(BodyDeclaration.Modifier.ABSTRACT);
	protected final static Integer FINAL = new Integer(BodyDeclaration.Modifier.FINAL);
	protected final static Integer STATIC = new Integer(BodyDeclaration.Modifier.STATIC);
	
	AST ast;
	
	protected Map<String, Pointcut> pointcuts = new HashMap<String, Pointcut>();
  
	public final void setAST (AST ast) {
		this.ast = ast;
	}	

	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable)property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast ,dispatcher, (FunctionInvocation)property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		// System.err.print(message);
  		// if (info instanceof Symbol)
		//	if (((Symbol)info).left != -1)
		//		System.err.println(" at character " + ((Symbol)info).left + " of input");
		//	else System.err.println("");
	    // else 
	   	//	System.err.println("");
    }	
	
	
	public void report_fatal_error(
    String   message, 
    Object   info)
    throws java.lang.Exception
    {
      /* stop parsing (not really necessary since we throw an exception, but) */
      done_parsing();

      /* use the normal error message reporting to put out the message */
      report_error(message, info);

      /* throw an exception */
      //throw new Exception("Can't recover from previous error(s)");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PHPAspectParser$actions {
  private final PHPAspectParser parser;

  /** Constructor */
  CUP$PHPAspectParser$actions(PHPAspectParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PHPAspectParser$do_action(
    int                        CUP$PHPAspectParser$act_num,
    java_cup.runtime.lr_parser CUP$PHPAspectParser$parser,
    java.util.Stack            CUP$PHPAspectParser$stack,
    int                        CUP$PHPAspectParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PHPAspectParser$result;

      /* select the action based on the action number */
      switch (CUP$PHPAspectParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // string_st ::= T_DEFINE 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*string_st*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = value; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(74/*string_st*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(107/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier name = new Identifier(varNameleft, varNameright, parser.ast, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, name); 
	RESULT = constant;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(109/*class_constant*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(106/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // isset_variables ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(106/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "eval");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, exprList);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Include result = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "empty");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	LinkedList varList = new LinkedList();
	varList.add(var);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "isset");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, parser.ast, name, varList);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(73/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar scalar = new Scalar(numleft,numright, parser.ast, num, Scalar.TYPE_REAL);
	RESULT = scalar;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // encaps_var_offset ::= string_st 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier id = new Identifier(stringleft, stringright, parser.ast, string);
	RESULT = id;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(72/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, endright, parser.ast, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable var = new Variable(varNameleft, varNameright, parser.ast, varName);
	Variable indexedVar = new ArrayAccess(startleft, endright, parser.ast, var, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, expr);
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable property = new Variable(stringleft, stringright, parser.ast, string);
	Dispatch dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(71/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // encaps_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(70/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	Reference ref = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(startleft, varright, parser.ast, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	Reference value = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(keyleft, varright, parser.ast, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Reference ref = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(startleft, varright, parser.ast, ref);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Reference value = new Reference(startleft, varright, parser.ast, var);
	ArrayElement element = new ArrayElement(keyleft, varright, parser.ast, key, value);	
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, parser.ast, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, parser.ast, expr);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(69/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(68/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(68/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // assignment_list_element ::= 
            {
              VariableBase RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(67/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, endright, parser.ast, varList);
	RESULT = vars;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(67/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // assignment_list_element ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(67/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;
	;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(66/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}	
	RESULT = listElements;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(66/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(65/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(65/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new ReflectionVariable(startleft, endright, parser.ast, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(64/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // variable_name ::= string_st 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(64/*variable_name*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // object_dim_list ::= variable_name 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(63/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, parser.ast, var, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = varArray;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(63/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, parser.ast, var, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = varArray;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(63/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // object_property ::= variable_without_objects 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(62/*object_property*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // object_property ::= object_dim_list 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(62/*object_property*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = expr; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(61/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // dim_offset ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(61/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, expr);
	RESULT = var;	 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(60/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // compound_variable ::= tracked_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(60/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // reference_variable ::= compound_variable 
            {
              Variable RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(59/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(59/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(59/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // base_variable ::= static_member 
            {
              VariableBase RESULT = null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase staticFieldAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(111/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(111/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // base_variable ::= reference_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(111/*base_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(115/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(115/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);
	RESULT = staticFieldAccess;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(105/*static_member*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);				
	}
	RESULT = finalVar;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(103/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(103/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // method_or_not ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(85/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(85/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              VariableBase RESULT = null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	VariableBase result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty);
		result = new FunctionInvocation(memberPropertyleft, paramsListright, parser.ast, functionName, paramsList);
	}
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(104/*variable_property*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(86/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase variableProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(86/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(89/*variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// get the last property 
	VariableBase firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty);
		firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, parser.ast, functionName, paramsList);
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	RESULT = dispatch;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(89/*variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // rw_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(102/*rw_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // w_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(77/*w_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // r_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(100/*r_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = ewv; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(58/*expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // expr ::= r_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 RESULT = var; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(58/*expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, parser.ast, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(57/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(57/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, parser.ast, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(57/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, parser.ast, key, value);
	list.add(element);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(57/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(56/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(56/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(55/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(55/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Quote hereDoc = new Quote(startleft, endright, parser.ast, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Quote quote = new Quote(startleft, endright, parser.ast, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // scalar ::= class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // scalar ::= string_st 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(54/*scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier vname = new Identifier(varNameleft, varNameright, parser.ast, varName);
	Identifier cname = new Identifier(classNameleft, classNameright, parser.ast, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, parser.ast, cname, vname); 
	RESULT = constant;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(114/*static_class_constant*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // static_scalar ::= static_class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, parser.ast, list);
	RESULT = array;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);
	RESULT = op;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // static_scalar ::= string_st 
            {
              Expression RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(strleft, strright, parser.ast, str, Scalar.TYPE_STRING);
	RESULT = s;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = scalar;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(53/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // common_scalar ::= T_FILE 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // common_scalar ::= T_LINE 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(52/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(51/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ctor_arguments ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(51/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = expr;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(50/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(50/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(50/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(113/*dynamic_class_name_variable_property*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(112/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(112/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // dynamic_class_name_reference ::= base_variable 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	 ClassName name = new ClassName(varleft, varright, parser.ast, var);
	 RESULT = name;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(110/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	
	// create class name from the dispatch
	ClassName name = new ClassName(varleft, propertyListright, parser.ast, dispatch);
	RESULT = name;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(110/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(108/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // class_name_reference ::= T_STRING 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, name);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(108/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // fully_qualified_class_name ::= T_STRING 
            {
              Identifier RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = name;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(78/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName); 
	RESULT = new FunctionInvocation(reflectionNameleft, endright, parser.ast, functionName, parameters); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*function_call*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName);
	FunctionInvocation functionInvocation = new FunctionInvocation(reflectionNameleft, endright, parser.ast, functionName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, parser.ast, className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*function_call*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, parser.ast, name);
	FunctionInvocation functionInvocation = new FunctionInvocation(functionNameleft, endright, parser.ast, fName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, parser.ast, className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*function_call*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, parser.ast, name);
	RESULT = new FunctionInvocation(functionNameleft, endright, parser.ast, fName, parameters); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(49/*function_call*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, parser.ast, "print");
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, parser.ast, name, expList);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, parser.ast, list);
	RESULT = backTickExpression;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression expr = new ArrayCreation(startleft, endright, parser.ast, list);
	RESULT = expr;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = scalar; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, parser.ast, expr);
	RESULT = ignoreError;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, parser.ast, start);
	FunctionName name = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, parser.ast, name, expList);
	RESULT = result;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_UNSET); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_BOOL); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_OBJECT); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_ARRAY); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_STRING); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_REAL); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_INT); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = expr;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, parser.ast, condition , ifTrue, ifFalse); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, parser.ast, expr);
	RESULT = parenthesisExpression; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr , className); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_TILDA); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_NOT); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_MINUS); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_PLUS); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_DEC); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_INC); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_INC); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 	
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, parser.ast, expr);
	RESULT = clone;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, parser.ast, className, ctor);
	RESULT = classInstanceCreation;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, parser.ast, className, ctor);
	Reference reference = new Reference(reftokenleft, ctorright, parser.ast, classInstanceCreation);
	Assignment assignment = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL, reference);
	RESULT = assignment;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar)); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, parser.ast, varList);
	Assignment list = new Assignment(startleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);
	RESULT = list; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(48/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(47/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(47/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(46/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(46/*for_expr*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(45/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(45/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(80/*class_constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(80/*class_constant_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(79/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(79/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(79/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(79/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // member_modifier ::= T_FINAL 
            {
              Integer RESULT = null;
		
	RESULT = PHPAspectParser.FINAL;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT = null;
		
	RESULT = PHPAspectParser.ABSTRACT;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // member_modifier ::= T_STATIC 
            {
              Integer RESULT = null;
		
	RESULT = PHPAspectParser.STATIC;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT = null;
		
	RESULT = PHPAspectParser.PRIVATE;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT = null;
		
	RESULT = PHPAspectParser.PROTECTED;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT = null;
		
	RESULT = PHPAspectParser.PUBLIC;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(84/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(83/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(83/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(81/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // method_modifiers ::= 
            {
              Integer RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(81/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT = null;
		
	RESULT = PHPAspectParser.PUBLIC;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(101/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(101/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(82/*method_body*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // method_body ::= T_SEMICOLON 
            {
              Block RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(82/*method_body*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // class_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		


              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(43/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? PHPAspectParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(43/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ClassConstantDeclaration classConstantDeclaration = new ClassConstantDeclaration(listleft, endright, parser.ast, list);
	RESULT = classConstantDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(43/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, parser.ast, modifier.intValue(), decList);
	RESULT = fieldsDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(43/*class_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // class_statement_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(42/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(42/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(41/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // static_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(41/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(41/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	list.add(v);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(41/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, parser.ast, varName);
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(40/*global_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, varright, parser.ast, var);
	RESULT = ref;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(40/*global_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Variable variable = new Variable(varleft, varright, parser.ast, var);
	RESULT = variable;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(40/*global_var*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(39/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(39/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression var_ref = new Reference(startleft, varright, parser.ast, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(38/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(38/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(38/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(startleft, varright, parser.ast, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(38/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(38/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(38/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // function_call_parameter_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(37/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(37/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // optional_class_type ::= T_ARRAY 
            {
              Identifier RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier classId = new Identifier(arrayleft, arrayright, parser.ast, "array");
	RESULT = classId;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(99/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // optional_class_type ::= T_STRING 
            {
              Identifier RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	RESULT = classId;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(99/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // optional_class_type ::= 
            {
              Identifier RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(99/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	FormalParameter parameter = new FormalParameter(start, scalarright, parser.ast, classType, ref_var, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(36/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	FormalParameter parameter = new FormalParameter(start, scalarright, parser.ast, classType, v, scalar);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(36/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	FormalParameter parameter = new FormalParameter(start, varright, parser.ast, classType, ref_var);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(36/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	FormalParameter parameter = new FormalParameter(start, varright, parser.ast, classType, v);
	RESULT = parameter;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(36/*parameter*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(35/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(35/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parameter_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(34/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(34/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(colonleft, statementListright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(33/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(33/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(32/*else_single*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(32/*else_single*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
			
	Block block = new Block(colonleft, statementListright, parser.ast, statementList, false);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(31/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(31/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(30/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(30/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(29/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(29/*while_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(28/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(28/*case_separator*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(27/*case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(27/*case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(27/*case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);	
	RESULT = block; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(26/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);	
	RESULT = block; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(26/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(26/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList);	
	RESULT = block; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(26/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier id = new Identifier(keyleft, keyright, parser.ast, key);
	lists[0].add(id);
	lists[1].add(value);
	RESULT = lists;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(25/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	Identifier id = new Identifier(keyleft, keyright, parser.ast, key);
	listKeys.add(id);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(25/*declare_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(24/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(24/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(23/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(23/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, parser.ast, statementList, false);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(22/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(22/*for_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	Reference reference = new Reference (startleft, varright, parser.ast, var);
	RESULT = reference;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(21/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // foreach_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(21/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(20/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // foreach_optional_arg ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(20/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(98/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(98/*interface_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(97/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // implements_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(97/*implements_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(76/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // interface_extends_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(76/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(75/*interface_entry*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Identifier RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = className;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(96/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // extends_from ::= 
            {
              Identifier RESULT = null;
		
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(96/*extends_from*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_FINAL);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(95/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(95/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_NONE);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(95/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, parser.ast, classId, interfaces, block);
	RESULT = interfaceDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(94/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, parser.ast, className);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, parser.ast, modifier.intValue(), classId, superClass, interfaces, block);
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(94/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier functionId = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, blockEndright, parser.ast, functionId, paramList, block, isReference.booleanValue());
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(93/*unticked_function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(44/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(44/*is_reference*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT = null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = classDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(88/*class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT = null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = functionDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(87/*function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(startleft, endright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(19/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(19/*use_filename*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unset_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = var;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(18/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unset_variables ::= unset_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(17/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT = null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList);
	Variable variable = new Variable(varleft, varright, parser.ast, var);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(92/*additional_catch*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(91/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT = null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(91/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additional_catches ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(90/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(90/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// TODO: var comment should be added as parser.ast node

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, parser.ast, tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, parser.ast, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier id = new Identifier(startleft, startright, parser.ast, "unset");
	FunctionName functionName = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, closeParright, parser.ast, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, parser.ast, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(expr);
	Identifier id = new Identifier(startleft, startright, parser.ast, "use");
	FunctionName functionName = new FunctionName(startleft, startright, parser.ast, id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, exprright, parser.ast, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, parser.ast, functionInvocation);
	RESULT = expressionStatement;	

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, parser.ast, expr);
	RESULT = expressionStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	InLineHtml inLineHtml = new InLineHtml(htmlleft, htmlright, parser.ast);
	RESULT = inLineHtml;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new EchoStatement(startleft, endright, parser.ast, exprList); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, parser.ast, list);
	RESULT = s;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, parser.ast, list);
	RESULT = global;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, parser.ast); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, parser.ast); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, parser.ast, expr); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, parser.ast); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);
	RESULT = switchStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, parser.ast, initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, parser.ast, expr, statement);			
	RESULT = doStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);			
	RESULT = whileStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	IfStatement ifStatement = new IfStatement(tokenleft, endright, parser.ast, condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, parser.ast, condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(tokenleft, endright, parser.ast, statementList);
	RESULT = block;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(16/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(13/*statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(15/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(15/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(15/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(15/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inner_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(14/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(14/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aspect_signature ::= T_STRING 
            {
              String RESULT = null;
		int strleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = str.toString();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(8/*aspect_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aspect_signature ::= T_TIMES 
            {
              String RESULT = null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = times.toString();

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(8/*aspect_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aspect_signature ::= aspect_signature T_STRING 
            {
              String RESULT = null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(8/*aspect_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aspect_signature ::= aspect_signature T_TIMES 
            {
              String RESULT = null;
		int beginleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String begin = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = begin + end;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(8/*aspect_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // aspect_inter_type_signature ::= T_RGREATER T_STRING T_LGREATER 
            {
              String RESULT = null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(7/*aspect_inter_type_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aspect_inter_type_signature ::= aspect_signature 
            {
              String RESULT = null;
		int signleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int signright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		String sign = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = sign;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(7/*aspect_inter_type_signature*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aspect_entry_type ::= T_FINAL T_ASPECT 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_FINAL);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(3/*aspect_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aspect_entry_type ::= T_ABSTRACT T_ASPECT 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(3/*aspect_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aspect_entry_type ::= T_ASPECT 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_NONE);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(3/*aspect_entry_type*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aspect_is_persistent ::= 
            {
              Boolean RESULT = null;
		 RESULT = false; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(4/*aspect_is_persistent*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // aspect_is_persistent ::= T_PERSESSION 
            {
              Boolean RESULT = null;
		 RESULT = true; 
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(4/*aspect_is_persistent*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // aspect_joinpoint ::= T_CALL T_OPEN_PARENTHESE aspect_inter_type_signature T_OBJECT_OPERATOR aspect_inter_type_signature T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Pointcut RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new MethodInvocationPredicate(interType, methodName);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(10/*aspect_joinpoint*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // aspect_joinpoint ::= T_STRING T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Pointcut RESULT = null;
		int ptNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int ptNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		String ptName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		
	RESULT = parser.pointcuts.get(ptName);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(10/*aspect_joinpoint*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // aspect_pointcut ::= aspect_joinpoint 
            {
              Pointcut RESULT = null;
		int jpleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int jpright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Pointcut jp = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = jp;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aspect_pointcut ::= T_NOT aspect_pointcut 
            {
              Pointcut RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Pointcut pt = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new NotPointcut(pt); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // aspect_pointcut ::= T_OPEN_PARENTHESE aspect_pointcut T_CLOSE_PARENTHESE 
            {
              Pointcut RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Pointcut pt = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new ParenthesisPointcut(pt);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_AND aspect_pointcut 
            {
              Pointcut RESULT = null;
		int pt1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Pointcut pt1 = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Pointcut pt2 = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new AndPointcut(pt1, pt2);

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // aspect_pointcut ::= aspect_pointcut T_BOOLEAN_OR aspect_pointcut 
            {
              Pointcut RESULT = null;
		int pt1left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int pt1right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Pointcut pt1 = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int pt2left = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int pt2right = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Pointcut pt2 = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = new OrPointcut(pt1, pt2); 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(9/*aspect_pointcut*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // aspect_statement ::= T_AFTER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Pointcut pt = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(blockStartleft, endright, parser.ast, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, parser.ast, AdviceType.After, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // aspect_statement ::= T_AROUND T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Pointcut pt = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(blockStartleft, endright, parser.ast, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, parser.ast, AdviceType.Around, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // aspect_statement ::= T_BEFORE T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Pointcut pt = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Block block = new Block(blockStartleft, endright, parser.ast, statementList);
	AspectCodeAdviceDeclaration aspectCodeAdviceDeclaration = new AspectCodeAdviceDeclaration(startleft, endright, parser.ast, AdviceType.Before, pt, block);
	RESULT = aspectCodeAdviceDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // aspect_statement ::= T_POINTCUT T_STRING T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_NEKUDOTAIM aspect_pointcut T_SEMICOLON 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int ptNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int ptNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		String ptName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Pointcut pt = (Pointcut)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
    parser.pointcuts.put(ptName, pt);
	RESULT = null;
	//AspectPointcutDeclaration aspectPointcutDeclaration = new AspectPointcutDeclaration(startleft, endright, parser.ast, ptName, expr);
	//RESULT = aspectPointcutDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // aspect_statement ::= method_modifiers T_FUNCTION is_reference aspect_inter_type_signature T_PAAMAYIM_NEKUDOTAYIM string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? PHPAspectParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, parser.ast, functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	InterTypeMethodDeclaration methodDeclaration = new InterTypeMethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), interType, functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // aspect_statement ::= aspect_inter_type_signature T_PAAMAYIM_NEKUDOTAYIM class_constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	InterTypeClassConstantDeclaration classConstantDeclaration = new InterTypeClassConstantDeclaration(listleft, endright, parser.ast, interType, list);
	RESULT = classConstantDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // aspect_statement ::= variable_modifiers aspect_inter_type_signature T_PAAMAYIM_NEKUDOTAYIM class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int interTypeleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int interTyperight = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		String interType = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	InterTypeFieldsDeclaration fieldsDeclaration = new InterTypeFieldsDeclaration(modifierleft, endright, parser.ast, modifier.intValue(), interType, decList);
	RESULT = fieldsDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // aspect_statement ::= class_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = statement;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(6/*aspect_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // aspect_statement_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(5/*aspect_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // aspect_statement_list ::= aspect_statement_list aspect_statement 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int aspectStatementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int aspectStatementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement aspectStatement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	list.add(aspectStatement);
	RESULT = list;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(5/*aspect_statement_list*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unticked_aspect_declaration_statement ::= aspect_entry_type T_STRING extends_from implements_list aspect_is_persistent T_CURLY_OPEN aspect_statement_list T_CURLY_CLOSE 
            {
              AspectDeclaration RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).value;
		int aspectNameleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).left;
		int aspectNameright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).right;
		String aspectName = (String)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-6)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-4)).value;
		int persistentleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).left;
		int persistentright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).right;
		Boolean persistent = (Boolean)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	Identifier aspectId = new Identifier(aspectNameleft, aspectNameright, parser.ast, aspectName);
	Block block = new Block(blockStartleft, blockEndright, parser.ast, statementList);
	AspectDeclaration aspectDeclaration = new AspectDeclaration(modifierleft ,blockEndright, parser.ast, modifier.intValue(), aspectId, persistent, superClass, interfaces, block);
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(2/*unticked_aspect_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // aspect_declaration_statement ::= unticked_aspect_declaration_statement 
            {
              AspectDeclaration RESULT = null;
		int aspectDeclarationleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int aspectDeclarationright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		AspectDeclaration aspectDeclaration = (AspectDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	RESULT = aspectDeclaration;

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(1/*aspect_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement ::= aspect_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		AspectDeclaration statement = (AspectDeclaration)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(12/*top_statement*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).value;
		RESULT = start_val;
              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PHPAspectParser$parser.done_parsing();
          return CUP$PHPAspectParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement 
            {
              Program RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).value;
		
	PHPAspectLexer PHPAspectLexer = (PHPAspectLexer) parser.getScanner();
	List commentList = PHPAspectLexer.getCommentList();
	List<Statement> statementList = new LinkedList<Statement>();
	statementList.add(statement);
	Program program = new Program(statementleft, statementright, parser.ast, statementList, commentList);
	RESULT = program; 

              CUP$PHPAspectParser$result = new java_cup.runtime.Symbol(11/*thestart*/, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PHPAspectParser$stack.elementAt(CUP$PHPAspectParser$top-0)).right, RESULT);
            }
          return CUP$PHPAspectParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

