/* The following code was generated by JFlex 1.3.5 on 8/11/07 6:44 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.phpaspect.apdt.internal.core.parser;

import org.eclipse.php.internal.core.phpModel.javacup.runtime.Symbol;
import org.eclipse.php.internal.core.phpModel.javacup.sym;
import org.eclipse.php.internal.core.phpModel.parser.StateStack;
import org.eclipse.php.internal.core.ast.nodes.Comment;
import java.io.IOException;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 8/11/07 6:44 PM from the specification file
 * <tt>file:/home/wcandill/Desktop/workspace/org.phpaspect.apdt.core/Ressources/phpaspect_scanner.flex</tt>
 */
public class PHPAspectLexer implements org.eclipse.php.internal.core.ast.parser.AstLexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int ST_DOCBLOCK = 18;
  final public static int ST_IN_SCRIPTING = 2;
  final public static int ST_LOOKING_FOR_PROPERTY = 12;
  final public static int ST_SINGLE_QUOTE = 6;
  final public static int ST_ONE_LINE_COMMENT = 20;
  final public static int ST_COMMENT = 16;
  final public static int ST_BACKQUOTE = 8;
  final public static int ST_DOUBLE_QUOTES = 4;
  final public static int YYINITIAL = 0;
  final public static int ST_HEREDOC = 10;
  final public static int ST_LOOKING_FOR_VARNAME = 14;

  /**
   * YY_LEXSTATE[l] is the state in the DFA for the lexical state l
   * YY_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private final static int YY_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\12\1\14\2\0\1\11\22\0\1\12\1\52\1\75\1\13"+
    "\1\67\1\56\1\57\1\76\1\43\1\45\1\54\1\4\1\63\1\37"+
    "\1\2\1\55\1\5\7\101\2\1\1\41\1\62\1\53\1\51\1\40"+
    "\1\70\1\71\1\30\1\7\1\23\1\17\1\3\1\20\1\44\1\31"+
    "\1\15\1\46\1\34\1\33\1\36\1\22\1\24\1\35\1\50\1\26"+
    "\1\25\1\16\1\21\1\42\1\32\1\6\1\27\1\10\1\64\1\77"+
    "\1\65\1\61\1\47\1\100\1\30\1\7\1\23\1\17\1\3\1\20"+
    "\1\44\1\31\1\15\1\46\1\34\1\33\1\36\1\22\1\24\1\35"+
    "\1\50\1\26\1\74\1\16\1\21\1\42\1\32\1\6\1\27\1\10"+
    "\1\72\1\60\1\73\1\66\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    66,   132,   198,   264,   330,   396,   462,   528,   594, 
      660,   726,   792,   858,   924,   990,  1056,  1122,  1188,  1254, 
     1320,  1386,  1452,  1518,   924,  1584,  1650,  1716,  1782,  1848, 
     1914,  1980,  2046,  2112,  2178,  2244,  2310,  2376,  2442,  2508, 
     2574,  2640,  2706,  2772,  2838,   924,  2904,  2970,  3036,  3102, 
     3168,  3234,  3300,  3366,  3432,  3498,   924,   924,   924,   924, 
      924,  3564,  3630,   924,   924,   924,  3696,  3762,   924,  3828, 
     3894,  3960,  4026,  4092,  4158,   924,   924,  4224,  4290,  4356, 
      924,  4422,  4488,  4554,   924,  4620,  4686,  4752,  4818,   924, 
     4884,   924,  4950,  5016,  5082,   924,  5148,  5214,  5280,  5346, 
      924,   924,  5412,  5478,  5544,  5610,  5676,  5742,  5808,   924, 
     5874,  5940,  6006,  6072,  6138,  6204,   924,   924,  6270,  6336, 
     6402,  1452,  6468,  6534,  6600,  6666,  6732,  6798,  6864,  1452, 
     6930,  6996,  7062,  7128,  7194,  7260,  7326,  7392,  7458,  7524, 
     7590,  1452,  7656,  7722,  7788,  7854,  7920,  7986,  8052,  8118, 
     8184,  8250,  8316,  8382,   924,   924,   924,  8448,   924,   924, 
     8514,  8580,  2772,  8646,  8712,  8778,  8844,  8910,  8976,  9042, 
     9108,  9174,  9240,   924,  9306,  9372,   924,   924,  9438,  9504, 
      924,   924,  9570,  9636,   924,   924,   924,   924,   924,   924, 
     9702,  9768,  3696,   924,  9834,  3762,  9900,  9966,  3894,   924, 
      924,   924,   924, 10032, 10098,   924,   924, 10164, 10230,   924, 
    10296,   924,   924,   924,   924,   924, 10362, 10428, 10494, 10494, 
    10560, 10626, 10692, 10758, 10824, 10890, 10956,  6270,  1452, 11022, 
    11088, 11154, 11220, 11286, 11352,  1452, 11418, 11484, 11550,  1452, 
    11616, 11682, 11748, 11814, 11880,  1452,  1452, 11946, 12012, 12078, 
    12144, 12210, 12276, 12342, 12408, 12474, 12540,  1452, 12606, 12672, 
    12738, 12804, 12870, 12936, 13002, 13068,   924,  1452, 13134, 13200, 
    13266, 13332, 13398, 13464, 13530, 13596, 13662, 13728, 13794, 13860, 
    13926, 13992, 14058,   924,   924,   924, 14124, 14190, 14256, 14322, 
    14388, 14454,   924, 14520,   924,  9966, 14586, 14652, 14718, 14784, 
    14850, 14916, 14982, 15048, 15114, 15180,  1452, 15246, 15312,  1452, 
    15378, 15444, 15510, 15576, 15642, 15708, 15774, 15840, 15906, 15972, 
    16038, 16104, 16170,  1452, 16236, 16302, 16368, 16434,  1452, 16500, 
    16566, 16632, 16698, 16764, 16830, 16896, 16962, 17028, 17094,  1452, 
    17160, 17226, 17292, 17358, 17424, 17490, 17556, 17622, 17688, 17754, 
    17820, 17886, 17952, 18018, 18084, 18150, 18216, 18282, 18348, 18414, 
    18480, 18546, 18612,   924, 18678, 18744, 18810, 18876,  1452, 18942, 
    19008, 19074, 19140, 19206,  1452,  1452, 19272, 19338, 19404,  1452, 
    19470,  1452, 19536, 19602, 19668,  1452, 19734, 19800,  1452, 19866, 
     1452,  1452,  1452,  1452, 19932, 19998, 20064, 20130, 20196, 20262, 
     1452,  1452, 20328, 20394,  1452, 20460, 20526, 20592, 20658, 20724, 
      924, 20790, 20856, 20922, 20988, 21054, 21120, 21186, 21252, 21318, 
    21384, 21450, 21516, 21582, 21648, 21714,   924, 21780, 21846, 21912, 
      924, 21978, 22044, 22110, 22176, 22242, 22308,  1452, 22374, 22440, 
    22506, 22572,  1452, 22638, 22704, 22770, 22836, 22902,  1452,  1452, 
     1452, 22968, 23034,  1452, 23100,  1452, 23166, 23232, 23298, 23364, 
      924, 23430, 23496, 23562, 23628, 23694,   924, 23760,  1452, 23826, 
    23892, 23958, 24024, 24090, 24156, 24222, 24288, 24354,  1452, 24420, 
    24486, 24552, 24618, 24684, 24750, 24816, 24882,  1452,  1452, 24948, 
     1452, 25014, 25080, 25146, 25212,  1452, 25278, 25344, 25410,   924, 
    25476, 25542,   924, 25608, 25674, 25740, 25806, 25872, 25938, 26004, 
    26070, 26136, 26202, 26268, 26334,  1452, 26400, 26466, 26532, 26598, 
     1452,  1452, 26664,  1452, 26730, 26796,   924,   924,  1452, 26862, 
    26928, 26994,  1452, 27060, 27126, 27192, 27258, 27324, 27390, 27456, 
     1452,  1452, 27522, 27588, 27654, 27720, 27786,  1452, 27852,  1452, 
    27918, 27984, 28050, 28116,  1452,  1452, 28182,  1452,  1452, 28248, 
     1452, 28314, 28380,  1452, 28446, 28512, 28578, 28644, 28710, 28776, 
    28842, 28908, 28974,  1452,  1452,  1452, 29040,   924, 29106, 29172, 
    29238, 29304, 29370,  1452, 29436, 29502, 29568, 29634, 29700, 29766, 
    29832, 29898, 29964, 30030, 30096,   924, 30162, 30228
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\53\15\1\16\26\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\2\30\1\31\1\30\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\27\1\44\1\27\1\45\1\46\1\27\1\47"+
    "\1\27\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\27\1\57\1\27\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\42\1\103"+
    "\1\104\1\17\1\105\1\20\1\17\1\106\1\107\1\27"+
    "\1\107\1\110\3\27\4\107\22\27\1\111\2\107\1\27"+
    "\1\107\1\27\1\107\3\27\13\107\1\73\1\74\1\107"+
    "\1\112\2\107\1\113\1\114\1\27\1\115\1\107\1\116"+
    "\1\117\1\106\76\120\1\121\1\122\2\120\1\17\1\106"+
    "\1\107\1\27\1\107\1\110\3\27\4\107\22\27\1\111"+
    "\2\107\1\27\1\107\1\27\1\107\3\27\13\107\1\73"+
    "\1\74\1\107\1\112\2\107\1\113\1\114\1\27\1\123"+
    "\1\107\1\124\1\125\1\106\1\17\1\106\1\107\1\27"+
    "\1\107\1\110\3\27\4\107\22\27\1\111\2\107\1\27"+
    "\1\107\1\27\1\107\3\27\13\107\1\73\1\74\1\107"+
    "\1\112\2\107\1\113\1\114\1\27\1\126\1\127\1\130"+
    "\1\126\1\106\1\17\1\106\1\107\1\131\1\107\1\110"+
    "\3\131\4\107\22\131\1\111\2\107\1\131\1\107\1\131"+
    "\1\107\3\131\13\107\1\73\1\74\1\107\1\112\2\107"+
    "\1\113\1\114\1\131\1\126\1\127\1\130\1\126\1\106"+
    "\3\132\1\133\2\132\3\133\4\132\22\133\3\132\1\133"+
    "\1\132\1\133\1\132\3\133\23\132\1\133\5\132\3\134"+
    "\1\135\2\134\3\135\4\134\22\135\3\134\1\135\1\134"+
    "\1\135\1\134\3\135\23\134\1\135\5\134\54\136\1\137"+
    "\25\136\11\140\1\141\42\140\1\142\25\140\11\143\1\144"+
    "\2\143\1\145\23\143\1\146\15\143\1\147\11\143\1\147"+
    "\11\143\53\15\1\150\101\15\1\0\2\15\1\151\11\15"+
    "\1\152\3\15\1\153\5\15\103\0\1\20\1\154\1\155"+
    "\1\0\1\20\73\0\1\20\1\0\1\154\3\0\1\154"+
    "\43\0\1\156\27\0\1\154\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\157\2\27\4\0\5\27\1\160\1\161"+
    "\7\27\1\162\2\27\1\163\3\0\1\164\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\4\0\1\165"+
    "\44\0\1\166\31\0\1\20\1\154\1\155\1\0\1\20"+
    "\1\167\72\0\1\20\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\170\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\11\27\1\171"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\11\0\2\30\1\0"+
    "\1\30\66\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\3\27\1\172\1\27\1\173\2\27\1\174\10\27\1\175"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\174"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\176\2\27\1\177\5\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\200\1\0\4\27\4\0\1\201"+
    "\6\27\1\202\12\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\203\3\27\1\204\2\27"+
    "\1\205\1\27\1\206\10\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\5\27\1\207\2\27"+
    "\1\210\11\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\210\4\0\1\27\1\0\1\27\1\0\1\211"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\3\27\1\212\3\27"+
    "\1\213\3\27\1\214\2\27\1\215\3\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\11\27"+
    "\1\216\10\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\217\13\27\1\220\4\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\221\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\2\27\1\222\1\27\4\0\5\27\1\223\2\27"+
    "\1\224\1\225\10\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\224\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\14\27\1\226\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\227\21\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\230"+
    "\1\0\4\27\4\0\4\27\1\231\4\27\1\232\10\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\37\0\1\233\1\234\10\0\1\235\70\0"+
    "\1\236\10\0\1\237\71\0\1\240\41\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\13\27\1\241\6\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\7\0\1\242\2\0\1\243\2\0\1\244\1\0"+
    "\1\245\1\246\1\247\2\0\1\250\1\251\1\252\1\0"+
    "\1\253\43\0\1\251\6\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\16\27\1\254\3\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\255\1\27\23\0"+
    "\1\27\4\0\1\27\40\0\1\256\10\0\1\257\101\0"+
    "\1\260\70\0\1\261\10\0\1\262\1\0\1\263\1\0"+
    "\1\264\75\0\1\265\101\0\1\266\2\0\1\267\1\31"+
    "\64\0\1\270\10\0\1\271\101\0\1\272\5\0\1\273"+
    "\73\0\1\274\6\0\1\275\72\0\1\276\33\0\1\277"+
    "\2\0\3\277\4\0\22\277\3\0\1\277\1\0\1\277"+
    "\1\0\3\277\23\0\1\277\45\0\1\300\41\0\67\301"+
    "\1\0\5\301\1\302\1\301\1\303\2\301\76\304\1\302"+
    "\1\305\2\304\1\0\1\106\3\0\1\106\73\0\1\106"+
    "\2\0\1\107\1\0\1\107\4\0\4\107\22\0\3\107"+
    "\1\0\1\107\1\0\1\107\3\0\13\107\2\0\1\107"+
    "\1\0\2\107\4\0\1\107\4\0\1\106\3\0\1\106"+
    "\1\306\72\0\1\106\2\0\1\107\1\0\1\107\4\0"+
    "\4\107\22\0\1\107\1\307\1\107\1\0\1\107\1\0"+
    "\1\107\3\0\13\107\2\0\1\107\1\0\2\107\4\0"+
    "\1\107\3\0\3\310\1\277\2\310\3\277\4\310\22\277"+
    "\3\310\1\277\1\310\1\277\1\310\3\277\21\310\1\311"+
    "\1\310\1\277\5\310\67\0\1\312\12\0\5\313\1\314"+
    "\1\315\63\313\1\316\2\313\1\317\3\313\1\314\100\0"+
    "\1\117\1\0\76\120\1\0\1\320\100\120\2\317\2\120"+
    "\75\0\1\123\4\0\5\313\1\314\1\315\63\313\1\316"+
    "\5\313\1\317\1\314\75\0\2\126\1\0\1\126\3\0"+
    "\1\107\1\0\1\107\4\0\4\107\22\0\3\107\1\0"+
    "\1\107\1\0\1\107\3\0\13\107\2\0\1\107\1\0"+
    "\2\107\3\0\1\126\1\127\1\0\1\126\1\0\5\313"+
    "\1\314\1\315\63\313\1\316\6\313\1\314\1\0\1\131"+
    "\1\0\1\131\1\0\4\131\1\321\2\0\1\322\22\131"+
    "\3\0\1\131\1\0\1\131\1\0\3\131\11\0\1\323"+
    "\11\0\1\131\4\0\1\131\1\0\1\133\1\0\1\133"+
    "\1\0\4\133\4\0\22\133\3\0\1\133\1\0\1\133"+
    "\1\0\3\133\23\0\1\133\4\0\1\133\1\0\1\135"+
    "\1\0\1\135\1\0\4\135\4\0\22\135\3\0\1\135"+
    "\1\0\1\135\1\0\3\135\23\0\1\135\4\0\1\135"+
    "\54\136\1\0\25\136\55\0\1\324\40\0\1\140\142\0"+
    "\1\325\24\0\11\143\1\145\2\143\1\145\23\143\1\145"+
    "\15\143\1\145\11\143\1\145\11\143\14\0\1\326\125\0"+
    "\1\327\41\0\53\15\1\0\2\15\1\0\11\15\1\0"+
    "\3\15\1\0\5\15\51\0\1\330\65\0\1\331\13\0"+
    "\1\330\53\0\1\332\57\0\1\154\1\0\1\155\1\0"+
    "\1\154\73\0\1\154\1\0\1\333\2\0\1\334\1\333"+
    "\31\0\1\334\41\0\1\333\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\335\1\336\20\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\2\27"+
    "\1\337\17\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\14\27\1\340\5\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\10\27"+
    "\1\341\11\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\341\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\20\27\1\342\1\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\343\6\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\344\1\0\1\344"+
    "\1\0\1\344\1\0\1\344\7\0\2\344\2\0\1\344"+
    "\4\0\1\344\50\0\1\344\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\11\27\1\345\10\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\346\1\0\4\27\4\0\22\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\1\27\1\347\4\27\1\350\1\27\1\351\11\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\351"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\10\27\1\352\11\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\352\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\20\27\1\353\1\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\12\27\1\354\7\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\11\27\1\355\10\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\3\27\1\356\2\27\1\357\13\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\360\1\0\4\27\4\0\22\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\5\27\1\361\14\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\5\27\1\362\14\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\363\10\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\7\27\1\364\12\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\10\27\1\365\11\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\365\4\0\1\27\1\0\1\27"+
    "\1\0\1\366\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\15\27"+
    "\1\367\4\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\4\27\1\204\15\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\5\27"+
    "\1\370\14\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\27\1\371\6\27\1\372\11\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\372"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\7\27\1\373\3\27\1\374\6\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\375\6\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\376\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\377"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\2\27\1\u0100"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\10\27\1\u0101\11\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\u0101\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\2\27"+
    "\1\u0102\17\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\20\27\1\u0103\1\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\11\27"+
    "\1\u0104\10\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\u0105\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u0106"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\u0106\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\11\27\1\u0107\10\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\2\27\1\u0108\1\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u0109\6\27\1\u010a\12\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\51\0\1\u010b\31\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\u010c\10\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\24\0\1\u010d"+
    "\77\0\1\u010e\103\0\1\u010f\110\0\1\u0110\70\0\1\u0111"+
    "\66\0\1\u0112\110\0\1\u0113\66\0\1\u0114\124\0\1\u0115"+
    "\54\0\1\27\1\0\1\27\1\0\4\27\4\0\7\27"+
    "\1\u0116\12\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\3\27\1\u0117\2\27\1\u0118\5\27"+
    "\1\u0119\1\27\1\u011a\2\27\1\u011b\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\51\0"+
    "\1\u011c\101\0\1\u011d\101\0\1\u011e\1\0\1\u011f\53\0"+
    "\1\u0120\46\0\1\u0120\16\0\2\u0121\1\0\1\u0121\37\0"+
    "\1\u0122\14\0\1\u0123\21\0\1\u0124\2\0\1\u0125\66\0"+
    "\1\277\1\0\1\277\1\0\4\277\4\0\22\277\3\0"+
    "\1\277\1\0\1\277\1\0\3\277\23\0\1\277\4\0"+
    "\1\277\11\0\1\u0126\2\0\1\u0127\65\0\14\301\1\0"+
    "\65\301\14\304\1\0\65\304\1\0\1\u0128\1\0\1\u0128"+
    "\1\0\1\u0128\1\0\1\u0128\7\0\2\u0128\2\0\1\u0128"+
    "\4\0\1\u0128\50\0\1\u0128\5\0\1\u0129\73\0\1\u0129"+
    "\1\0\1\u012a\1\0\1\u012a\1\0\1\u012a\1\0\1\u012a"+
    "\7\0\2\u012a\2\0\1\u012a\4\0\1\u012a\50\0\1\u012a"+
    "\76\120\2\0\2\120\14\0\1\322\76\0\1\321\2\0"+
    "\1\322\116\0\1\u012b\76\0\1\u012c\54\0\1\333\3\0"+
    "\1\333\73\0\1\333\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\360\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u012d\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u012e\1\27\1\u012f\1\u0130\4\27\1\u0131\4\27\1\u0132"+
    "\4\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\u0131\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u0133\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0134\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u0135\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\16\27\1\u0136\3\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\13\27\1\u0137\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u0138\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u0139"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u013a\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u013b\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\16\27\1\u013c\3\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\7\27\1\u013d\12\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\u013e\12\27\1\u013f\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\16\27\1\u0140\3\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\13\27\1\u0141\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\6\27\1\u0142\13\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\u0143\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\21\27\1\u0144\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0145\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u0146\6\27\1\u0147\11\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\u0147\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u0148"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u0149\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\u014a\14\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\10\27\1\u014b\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\u014b\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u014c\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\1\27\1\u014d\20\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\4\27\1\u014e\15\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\4\27\1\u014f\15\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u0150\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u0151\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\13\27\1\u0152\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u0153"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u0154\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u0155"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\u0155\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\16\27\1\u0156\3\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u0157"+
    "\14\27\3\0\1\u0158\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u0159\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\24\0"+
    "\1\u015a\73\0\1\u015b\104\0\1\u015c\104\0\1\u015d\102\0"+
    "\1\u015e\46\0\1\u015e\53\0\1\u015f\61\0\1\u0160\103\0"+
    "\1\u0161\77\0\1\u0162\54\0\1\27\1\0\1\27\1\0"+
    "\2\27\1\u0163\1\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\u0164\3\27"+
    "\1\u0165\15\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\16\27\1\u0166\3\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\u0167\6\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\u0168\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0169\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\3\0\1\u016a\2\0\3\u016a\1\0\1\u011f\2\0"+
    "\22\u016a\3\0\1\u016a\1\0\1\u016a\1\0\3\u016a\23\0"+
    "\1\u016a\30\0\1\u016b\67\0\2\u0121\1\0\1\u0121\54\0"+
    "\1\u0123\65\0\1\u016c\66\0\1\u016d\53\0\1\u0125\101\0"+
    "\1\u0127\72\0\1\317\73\0\1\317\1\0\1\317\1\0"+
    "\1\317\1\0\1\317\1\0\1\317\7\0\2\317\2\0"+
    "\1\317\4\0\1\317\50\0\1\317\35\0\1\u016e\61\0"+
    "\1\u016f\65\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\u0170\14\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\3\27\1\u0171\16\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u0172\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u0173\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\15\27\1\u0174"+
    "\4\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\14\27\1\u0175\5\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\u0176\21\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\12\27\1\u0177\7\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\17\27\1\u0178\2\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\11\27\1\u0179\10\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\4\27\1\u017a\15\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\13\27\1\u017b\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\27\1\u017c\20\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\u017d\1\0\4\27"+
    "\4\0\22\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\15\27\1\u017e\4\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\5\27"+
    "\1\u017f\14\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\4\27\1\u0180\15\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\13\27"+
    "\1\u0181\6\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\16\27\1\u0182\3\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\27"+
    "\1\u0183\20\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\13\27\1\u0184\6\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\27"+
    "\1\u0185\20\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\u0186\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u0187"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\14\27\1\u0188\5\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0189\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\10\27\1\u018a\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\u018a\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\u018b\21\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\6\27"+
    "\1\u018c\13\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\11\27\1\u018d\10\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\u018e"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\11\27\1\u018f\10\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u0190"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\12\27\1\u0191\7\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0192\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u0193\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u0194\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\27\1\u0195\20\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\13\27\1\u0196\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\u0197\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\33\0\1\u0198\51\0\1\u0199\6\0\1\u019a\32\0\1\u019b"+
    "\43\0\1\u019c\122\0\1\u019d\54\0\1\u019e\101\0\1\u019f"+
    "\113\0\1\u01a0\117\0\1\u01a1\76\0\1\u01a2\52\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\13\27\1\u01a3\6\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\16\27\1\u01a4\3\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\5\27\1\u01a5\14\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\13\27\1\u01a6\6\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\16\27\1\u01a7\3\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\4\0\5\27\1\u01a8\14\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\1\27\1\u01a9\20\27"+
    "\3\0\1\27\1\0\1\27\1\0\3\27\23\0\1\27"+
    "\4\0\1\27\1\0\1\u016a\1\0\1\u016a\1\0\4\u016a"+
    "\1\u01aa\2\0\1\u01ab\22\u016a\3\0\1\u016a\1\0\1\u016a"+
    "\1\0\3\u016a\23\0\1\u016a\4\0\1\u016a\26\0\1\u01ac"+
    "\103\0\1\u01ad\62\0\1\u01ae\1\u01af\1\0\1\u01af\122\0"+
    "\1\u01b0\45\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\2\27\1\u01b1\17\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\6\27\1\u01b2\13\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\11\27\1\u01b3\10\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\u01b4\21\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\u01b5"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\3\27\1\u01b6\16\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\3\27\1\u01b7"+
    "\16\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\2\27\1\u01b8\17\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u01b9"+
    "\14\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\21\27\1\u01ba\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\u01bb\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\16\27"+
    "\1\u01bc\3\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\11\27\1\u01bd\10\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\u01be"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u01bf\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u01c0"+
    "\14\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u01c1\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\14\27\1\u01c2"+
    "\5\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\u01c3\14\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\11\27\1\u01c4"+
    "\10\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\13\27\1\u01c5\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u01c6"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\10\27\1\u01c7\11\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\u01c7\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u01c8"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u01c9\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u01ca"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\3\0\1\u01cb\6\0\1\u01cc\32\0"+
    "\1\u01cd\100\0\1\u01ce\47\0\1\u019a\32\0\1\u019b\67\0"+
    "\1\u01cf\64\0\1\u01a1\101\0\1\u01d0\106\0\1\u01d1\100\0"+
    "\1\u01d2\71\0\1\u01a1\32\0\1\u01d3\63\0\1\u01d4\53\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u01d5"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u01d6\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\6\27\1\u01d7\13\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\10\27\1\u01d8\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\u01d8\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u01d9\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u01da\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\14\27\1\u01db\5\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\14\0"+
    "\1\u01ab\102\0\1\u01dc\112\0\1\u01dd\67\0\1\u01af\103\0"+
    "\1\u01de\64\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\10\27\1\u01df\11\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\u01df\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\16\27\1\u01e0\3\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u01e1\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u01e2\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\16\27\1\u01e3"+
    "\3\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\13\27\1\u01e4\6\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u01e5\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u01e6\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u01e7\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u01e8"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\u01e9\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\7\27\1\u01ea\12\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\14\27\1\u01eb\5\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\4\27\1\u01ec\15\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u01ed\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\6\27\1\u01ee\13\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u01ef"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\u01ef\4\0\1\27\1\0\1\27\1\0\1\u01f0\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\1\27\1\u01f1\20\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\30\0\1\u01f2\63\0\1\u01cc\32\0\1\u01cd\37\0"+
    "\1\u01f3\101\0\1\u01a1\110\0\1\u01d0\32\0\1\u01f4\52\0"+
    "\1\u01f5\127\0\1\u01f6\47\0\1\u01d4\32\0\1\u01f7\35\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\u01f8\1\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u01f9\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\10\27\1\u01fa"+
    "\11\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\u01fa\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u01fb\1\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\u01fc\1\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u01fd\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\35\0"+
    "\1\u01fe\55\0\2\u01ff\1\0\1\u01ff\76\0\2\u0200\1\0"+
    "\1\u0200\66\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\13\27\1\u0201\6\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\13\27\1\u0202\6\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u0203\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\u0204\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u0205"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u0206\1\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\u0207\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\5\27\1\u0208\14\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\5\27\1\u0209\14\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u020a\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u020b\1\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\1\27\1\u020c"+
    "\20\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\u020d\21\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\u020e\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\22\0\1\u01cc\105\0\1\u019a\65\0\1\u01f5\32\0\1\u020f"+
    "\46\0\1\u01f6\32\0\1\u0210\35\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u0211\1\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\1\u0212"+
    "\21\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u0213\1\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\6\27\1\u0214"+
    "\13\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\22\27\3\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\u0215\1\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\2\27\1\u0216"+
    "\17\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\16\0\1\u0217\66\0\1\u0218\2\0"+
    "\3\u0218\2\u01ff\1\0\1\u01ff\22\u0218\3\0\1\u0218\1\0"+
    "\1\u0218\1\0\3\u0218\16\0\1\u0219\4\0\1\u0218\16\0"+
    "\2\u0200\1\0\1\u0200\16\0\1\u021a\47\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\11\27\1\u021b\10\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\6\27\1\u021c\13\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\4\0\14\27\1\u021d\5\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\1\0\1\27\1\0\1\u021e\1\0\4\27\4\0"+
    "\22\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u021f\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\7\27\1\u0220"+
    "\12\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\1\27\1\u0221\20\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\7\27\1\u0222"+
    "\12\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u0223\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\2\27\1\u0224"+
    "\17\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u0225\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\u0226\1\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\7\27\1\u0227\12\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\u0228\1\27\23\0"+
    "\1\27\4\0\1\27\11\0\2\u0217\1\0\1\u0217\23\0"+
    "\1\300\42\0\1\u0218\1\0\1\u0218\1\0\4\u0218\2\u0229"+
    "\1\0\1\u0229\22\u0218\3\0\1\u0218\1\0\1\u0218\1\0"+
    "\3\u0218\23\0\1\u0218\4\0\1\u0218\3\0\1\u0218\2\0"+
    "\3\u0218\4\0\22\u0218\3\0\1\u0218\1\0\1\u0218\1\0"+
    "\3\u0218\23\0\1\u0218\35\0\1\u022a\52\0\1\27\1\0"+
    "\1\u022b\1\0\4\27\4\0\22\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\14\27\1\u022c"+
    "\5\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\u022d\14\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\3\27\1\u022e"+
    "\16\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\10\27\1\u022f\11\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\u022f\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u0230"+
    "\14\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\5\27\1\u0231\14\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\4\0\5\27\1\u0232"+
    "\14\27\3\0\1\27\1\0\1\27\1\0\3\27\23\0"+
    "\1\27\4\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\21\27\1\u0233\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\u0234\1\27\23\0\1\27"+
    "\4\0\1\27\3\0\1\u0235\2\0\3\u0235\2\u0229\1\0"+
    "\1\u0229\22\u0235\3\0\1\u0235\1\0\1\u0235\1\0\3\u0235"+
    "\23\0\1\u0235\27\0\1\u0236\60\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\6\27\1\u0237\13\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\6\27"+
    "\1\u0238\13\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\u0239\1\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\20\27"+
    "\1\u023a\1\27\3\0\1\27\1\0\1\27\1\0\3\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\u0235\1\0\1\u0235"+
    "\1\0\4\u0235\2\u023b\1\0\1\u023b\22\u0235\3\0\1\u0235"+
    "\1\0\1\u0235\1\0\3\u0235\3\0\1\u023c\17\0\1\u0235"+
    "\4\0\1\u0235\44\0\1\u023d\36\0\1\27\1\0\1\u023e"+
    "\1\0\4\27\4\0\22\27\3\0\1\27\1\0\1\27"+
    "\1\0\3\27\23\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\u023f\1\0\4\27\4\0\22\27\3\0\1\27"+
    "\1\0\1\27\1\0\3\27\23\0\1\27\4\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\4\0\22\27"+
    "\3\0\1\27\1\0\1\27\1\0\1\27\1\u0240\1\27"+
    "\23\0\1\27\4\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\4\27\4\0\1\u0241\21\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\11\0"+
    "\2\u023b\1\0\1\u023b\37\0\1\u023c\102\0\1\u0242\45\0"+
    "\1\u0243\61\0\1\27\1\0\1\27\1\0\4\27\4\0"+
    "\16\27\1\u0244\3\27\3\0\1\27\1\0\1\27\1\0"+
    "\3\27\23\0\1\27\4\0\1\27\30\0\1\u0245\52\0"+
    "\1\27\1\0\1\u0246\1\0\4\27\4\0\22\27\3\0"+
    "\1\27\1\0\1\27\1\0\3\27\23\0\1\27\4\0"+
    "\1\27\44\0\1\u0247\36\0\1\27\1\0\1\27\1\0"+
    "\4\27\4\0\11\27\1\u0248\10\27\3\0\1\27\1\0"+
    "\1\27\1\0\3\27\23\0\1\27\4\0\1\27\3\0"+
    "\1\u0249\107\0\2\u0249\1\0\1\u0249\34\0\1\u024a\41\0"+
    "\2\u024a\1\0\1\u024a\20\0\1\u024b\37\0\1\u024c\1\u024d"+
    "\34\0\1\u024e\105\0\1\u024f\101\0\1\u0250\101\0\1\u0251"+
    "\75\0\1\u0252\101\0\1\u0253\61\0\2\u0251\1\0\1\u0251"+
    "\23\0\1\u0254\76\0\1\u0255\101\0\1\u0256\141\0\1\u0251"+
    "\102\0\1\u0251\3\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9,  9,  1,  1,  9, 
     9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  9,  1,  1,  1, 
     9,  1,  1,  1,  9,  1,  1,  1,  1,  9,  1,  9,  1,  1,  1,  9, 
     1,  1,  1,  1,  9,  9,  1,  0,  1,  1,  1,  1,  0,  9,  1,  1, 
     1,  1,  1,  1,  9,  9,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  1,  9,  9, 
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  9,  1,  1, 
     9,  9,  1,  0,  9,  9,  1,  1,  9,  9,  9,  9,  9,  9,  1,  1, 
     0,  9,  0,  0,  0,  0,  1,  9,  9,  9,  9,  1,  1,  9,  9,  0, 
     1,  9,  0,  9,  9,  9,  9,  9,  0,  0,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  9,  9,  9,  0,  0, 
     0,  1,  0,  1,  9,  1,  9,  1,  1,  1,  0,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0,  9,  0,  0,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  0,  1,  9,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  9,  0,  0,  0, 
     0,  0,  9,  0,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  0,  9,  0,  0,  9,  1,  1,  1,  1,  1,  1,  0,  0,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9, 
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  0,  1,  1,  1,  1,  0,  0,  0,  1,  1,  1, 
     1,  9,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  9,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private final List commentList = new LinkedList();
	private String heredoc = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[YY_BUFFERSIZE];
    private int yy_old_pushbackPos;
    private int commentStartPosition;
	
	public void resetCommentList() {
		commentList.clear();
	}
	
	public List getCommentList() {
		return commentList;
	}	
	
	private void addComment(int type) {
		int leftPosition = getTokenStartPosition();
		Comment comment = new Comment(commentStartPosition, leftPosition + getTokenLength(), type);
		commentList.add(comment);
	}	
	
	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
    private void pushState(int state) {
        stack.pushStack(yy_lexical_state);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    private int getTokenStartPosition() {
        return yy_startRead - yy_pushbackPos;
    }

    private int getTokenLength() {
        return yy_markedPos - yy_startRead;
    }

    public int getLength() {
        return yy_endRead - yy_pushbackPos;
    }
    
    private void handleCommentStart() {
		commentStartPosition = getTokenStartPosition();
	}
	
	private void handleLineCommentEnd() {
         addComment(Comment.TYPE_SINGLE_LINE);
    }
    
    private void handleMultilineCommentEnd() {
    	addComment(Comment.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
		addComment(Comment.TYPE_PHPDOC);
    }
    
    private void handleVarComment() {
    	commentStartPosition = yy_startRead;
    	addComment(Comment.TYPE_MULTILINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHPAspectLexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHPAspectLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[30294];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public org.eclipse.php.internal.core.phpModel.javacup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      if (yy_markedPos_l > yy_startRead) {
        switch (yy_buffer_l[yy_markedPos_l-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yy_atBOL = true;
          break;
        case '\r': 
          if (yy_markedPos_l < yy_endRead_l)
            yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          else if (yy_atEOF)
            yy_atBOL = false;
          else {
            boolean eof = yy_refill();
            yy_markedPos_l = yy_markedPos;
            yy_buffer_l = yy_buffer;
            if (eof) 
              yy_atBOL = false;
            else 
              yy_atBOL = yy_buffer_l[yy_markedPos_l] != '\n';
          }
          break;
        default:
          yy_atBOL = false;
        }
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      if (yy_atBOL)
        yy_state = YY_LEXSTATE[yy_lexical_state+1];
      else
        yy_state = YY_LEXSTATE[yy_lexical_state];


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 45: 
          { return createSymbol(PHPAspectSymbols.T_CLOSE_PARENTHESE); }
        case 599: break;
        case 43: 
          { return createSymbol(PHPAspectSymbols.T_OPEN_PARENTHESE); }
        case 600: break;
        case 49: 
          { return createSymbol(PHPAspectSymbols.T_RGREATER); }
        case 601: break;
        case 40: 
          { return createSymbol(PHPAspectSymbols.T_LGREATER); }
        case 602: break;
        case 52: 
          { return createSymbol(PHPAspectSymbols.T_PRECENT); }
        case 603: break;
        case 41: 
          { return createSymbol(PHPAspectSymbols.T_NEKUDOTAIM); }
        case 604: break;
        case 53: 
          { return createSymbol(PHPAspectSymbols.T_REFERENCE); }
        case 605: break;
        case 56: 
          { return createSymbol(PHPAspectSymbols.T_SEMICOLON); }
        case 606: break;
        case 58: 
          { return createSymbol(PHPAspectSymbols.T_OPEN_RECT); }
        case 607: break;
        case 59: 
          { return createSymbol(PHPAspectSymbols.T_CLOSE_RECT); }
        case 608: break;
        case 75: 
          { return createSymbol(PHPAspectSymbols.T_CURLY_CLOSE);  }
        case 609: break;
        case 74: 
          { return createSymbol(PHPAspectSymbols.T_CURLY_OPEN);  }
        case 610: break;
        case 62: 
          { return createSymbol(PHPAspectSymbols.T_QUESTION_MARK); }
        case 611: break;
        case 48: 
          { return createSymbol(PHPAspectSymbols.T_NOT); }
        case 612: break;
        case 18: 
          { return createSymbol(PHPAspectSymbols.T_PLUS); }
        case 613: break;
        case 51: 
          { return createSymbol(PHPAspectSymbols.T_DIV); }
        case 614: break;
        case 55: 
          { return createSymbol(PHPAspectSymbols.T_KOVA); }
        case 615: break;
        case 54: 
          { return createSymbol(PHPAspectSymbols.T_OR); }
        case 616: break;
        case 63: 
          { return createSymbol(PHPAspectSymbols.T_AT); }
        case 617: break;
        case 73: 
          { return createSymbol(PHPAspectSymbols.T_DOLLAR); }
        case 618: break;
        case 50: 
          { return createSymbol(PHPAspectSymbols.T_TIMES); }
        case 619: break;
        case 47: 
          { return createSymbol(PHPAspectSymbols.T_EQUAL); }
        case 620: break;
        case 39: 
          { return createSymbol(PHPAspectSymbols.T_MINUS); }
        case 621: break;
        case 16: 
          { return createSymbol(PHPAspectSymbols.T_NEKUDA); }
        case 622: break;
        case 57: 
          { return createSymbol(PHPAspectSymbols.T_COMMA); }
        case 623: break;
        case 60: 
          { return createSymbol(PHPAspectSymbols.T_TILDA); }
        case 624: break;
        case 61: 
          { return createSymbol(PHPAspectSymbols.T_DOLLAR); }
        case 625: break;
        case 69: 
        case 71: 
        case 295: 
          {  /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(PHPAspectSymbols.T_NUM_STRING);
 }
        case 626: break;
        case 85: 
          { 
    return createSymbol(PHPAspectSymbols.T_ENCAPSED_AND_WHITESPACE);
 }
        case 627: break;
        case 82: 
          { 
    return createSymbol(PHPAspectSymbols.T_ENCAPSED_AND_WHITESPACE);
 }
        case 628: break;
        case 79: 
          { 
    return createSymbol(PHPAspectSymbols.T_ENCAPSED_AND_WHITESPACE);
 }
        case 629: break;
        case 78: 
          { 
    return createSymbol(PHPAspectSymbols.T_ENCAPSED_AND_WHITESPACE);
 }
        case 630: break;
        case 70: 
        case 72: 
        case 86: 
          { 
    return createSymbol(PHPAspectSymbols.T_ENCAPSED_AND_WHITESPACE);
 }
        case 631: break;
        case 159: 
          { 
	return createSymbol(PHPAspectSymbols.T_PAAMAYIM_NEKUDOTAYIM);
 }
        case 632: break;
        case 577: 
          { 
    handleVarComment();
    return createFullSymbol(PHPAspectSymbols.T_VAR_COMMENT);
 }
        case 633: break;
        case 92: 
          { 
    popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(PHPAspectSymbols.T_STRING_VARNAME);
 }
        case 634: break;
        case 89: 
          { 
    yypushback(yylength());
    popState();
 }
        case 635: break;
        case 191: 
        case 293: 
        case 294: 
          { 
    yybegin(YYINITIAL);
    return createSymbol(PHPAspectSymbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
 }
        case 636: break;
        case 193: 
          { 
    return createFullSymbol(PHPAspectSymbols.T_CONSTANT_ENCAPSED_STRING);
 }
        case 637: break;
        case 200: 
          { 
    pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(PHPAspectSymbols.T_DOLLAR_OPEN_CURLY_BRACES);
 }
        case 638: break;
        case 284: 
          { 
	return createSymbol(PHPAspectSymbols.T_IS_NOT_IDENTICAL);
 }
        case 639: break;
        case 547: 
          { 
	return createSymbol(PHPAspectSymbols.T_PROTECTED);
 }
        case 640: break;
        case 541: 
          { 
	return createSymbol(PHPAspectSymbols.T_INTERFACE);
 }
        case 641: break;
        case 540: 
          { 
	return createSymbol(PHPAspectSymbols.T_ENDSWITCH);
 }
        case 642: break;
        case 523: 
          { 
	return createSymbol(PHPAspectSymbols.T_ABSTRACT);
 }
        case 643: break;
        case 521: 
          { 
	return createSymbol(PHPAspectSymbols.T_CONTINUE);
 }
        case 644: break;
        case 520: 
          { 
	return createSymbol(PHPAspectSymbols.T_FUNCTION);
 }
        case 645: break;
        case 515: 
          { 
	return createSymbol(PHPAspectSymbols.T_ENDWHILE);
 }
        case 646: break;
        case 460: 
          { 
	return createSymbol(PHPAspectSymbols.T_BOOL_CAST);
 }
        case 647: break;
        case 12: 
        case 13: 
        case 106: 
          { 
    return createSymbol(PHPAspectSymbols.T_INLINE_HTML);
 }
        case 648: break;
        case 174: 
          { 
	return createSymbol(PHPAspectSymbols.T_IS_EQUAL);
 }
        case 649: break;
        case 180: 
          { 
	return createSymbol(PHPAspectSymbols.T_MUL_EQUAL);
 }
        case 650: break;
        case 181: 
          { 
	return createSymbol(PHPAspectSymbols.T_DIV_EQUAL);
 }
        case 651: break;
        case 184: 
          { 
	return createSymbol(PHPAspectSymbols.T_MOD_EQUAL);
 }
        case 652: break;
        case 185: 
          { 
	return createSymbol(PHPAspectSymbols.T_AND_EQUAL);
 }
        case 653: break;
        case 187: 
          { 
	return createSymbol(PHPAspectSymbols.T_OR_EQUAL);
 }
        case 654: break;
        case 189: 
          { 
	return createSymbol(PHPAspectSymbols.T_XOR_EQUAL);
 }
        case 655: break;
        case 266: 
          { 
	return createSymbol(PHPAspectSymbols.T_SR_EQUAL);
 }
        case 656: break;
        case 285: 
          { 
	return createSymbol(PHPAspectSymbols.T_SL_EQUAL);
 }
        case 657: break;
        case 410: 
          { 
	return createSymbol(PHPAspectSymbols.T_INT_CAST);
 }
        case 658: break;
        case 84: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(PHPAspectSymbols.T_BACKQUATE);
 }
        case 659: break;
        case 64: 
          { 
    pushState(ST_IN_SCRIPTING);
    return createSymbol(PHPAspectSymbols.T_CURLY_OPEN);

 }
        case 660: break;
        case 560: 
          { 
	return createSymbol(PHPAspectSymbols.T_PERSESSION);
 }
        case 661: break;
        case 558: 
          { 
	return createSymbol(PHPAspectSymbols.T_IMPLEMENTS);
 }
        case 662: break;
        case 557: 
          { 
	return createSymbol(PHPAspectSymbols.T_INSTANCEOF);
 }
        case 663: break;
        case 555: 
          { 
	return createSymbol(PHPAspectSymbols.T_ENDFOREACH);
 }
        case 664: break;
        case 554: 
          { 
	return createSymbol(PHPAspectSymbols.T_ENDDECLARE);
 }
        case 665: break;
        case 527: 
          { 
	return createSymbol(PHPAspectSymbols.T_STRING_CAST);
 }
        case 666: break;
        case 526: 
          { 
	return createSymbol(PHPAspectSymbols.T_OBJECT_CAST);
 }
        case 667: break;
        case 502: 
          { 
	return createSymbol(PHPAspectSymbols.T_ARRAY_CAST);
 }
        case 668: break;
        case 499: 
          { 
	return createSymbol(PHPAspectSymbols.T_UNSET_CAST);
 }
        case 669: break;
        case 466: 
          { 
	return createSymbol(PHPAspectSymbols.T_DOUBLE_CAST);
 }
        case 670: break;
        case 156: 
          { 
	return createSymbol(PHPAspectSymbols.T_MINUS_EQUAL);
 }
        case 671: break;
        case 141: 
          { 
	return createSymbol(PHPAspectSymbols.T_LOGICAL_OR);
 }
        case 672: break;
        case 117: 
          { 
	return createSymbol(PHPAspectSymbols.T_PLUS_EQUAL);
 }
        case 673: break;
        case 186: 
          { 
	return createSymbol(PHPAspectSymbols.T_BOOLEAN_AND);
 }
        case 674: break;
        case 188: 
          { 
	return createSymbol(PHPAspectSymbols.T_BOOLEAN_OR);
 }
        case 675: break;
        case 228: 
          { 
	return createSymbol(PHPAspectSymbols.T_LOGICAL_XOR);
 }
        case 676: break;
        case 257: 
          { 
	return createSymbol(PHPAspectSymbols.T_LOGICAL_AND);
 }
        case 677: break;
        case 94: 
          { 
//	yymore();
 }
        case 678: break;
        case 14: 
        case 77: 
        case 81: 
        case 83: 
        case 87: 
          { 
	// do nothing
 }
        case 679: break;
        case 66: 
          { 
    yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(PHPAspectSymbols.T_QUATE);
 }
        case 680: break;
        case 101: 
        case 102: 
          { 
	//	yymore();
 }
        case 681: break;
        case 90: 
          { 
    popState();
    return createFullSymbol(PHPAspectSymbols.T_STRING);
 }
        case 682: break;
        case 215: 
          { 
    String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG_WITH_ECHO;
    } else {
        return createSymbol(PHPAspectSymbols.T_INLINE_HTML);
    }
 }
        case 683: break;
        case 583: 
          { 
	return createSymbol(PHPAspectSymbols.T_HALT_COMPILER);
 }
        case 684: break;
        case 574: 
          { 
	return createSymbol(PHPAspectSymbols.T_REQUIRE_ONCE);
 }
        case 685: break;
        case 573: 
          { 
	return createSymbol(PHPAspectSymbols.T_INCLUDE_ONCE);
 }
        case 686: break;
        case 109: 
          { 
	return createSymbol(PHPAspectSymbols.T_CONCAT_EQUAL);
 }
        case 687: break;
        case 80: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(PHPAspectSymbols.T_SINGLE_QUATE);
 }
        case 688: break;
        case 67: 
          { 
    yybegin(ST_SINGLE_QUOTE);
    return createSymbol(PHPAspectSymbols.T_SINGLE_QUATE);
 }
        case 689: break;
        case 68: 
          { 
    yybegin(ST_BACKQUOTE);
    return createSymbol(PHPAspectSymbols.T_BACKQUATE);
 }
        case 690: break;
        case 173: 
          { 
	return createSymbol(PHPAspectSymbols.T_DOUBLE_ARROW);
 }
        case 691: break;
        case 175: 
        case 176: 
          { 
	return createSymbol(PHPAspectSymbols.T_IS_NOT_EQUAL);
 }
        case 692: break;
        case 283: 
          { 
	return createSymbol(PHPAspectSymbols.T_IS_IDENTICAL);
 }
        case 693: break;
        case 363: 
          { 
	handleCommentStart();
 }
        case 694: break;
        case 214: 
          { 
    if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	} 
 }
        case 695: break;
        case 91: 
          { 
    yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
 }
        case 696: break;
        case 213: 
          { 
	handleLineCommentEnd();
	yybegin(ST_IN_SCRIPTING);
	//return T_COMMENT;
 }
        case 697: break;
        case 24: 
          { 
	handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
 }
        case 698: break;
        case 158: 
          { 
	return createSymbol(PHPAspectSymbols.T_IS_GREATER_OR_EQUAL);
 }
        case 699: break;
        case 177: 
          { 
	return createSymbol(PHPAspectSymbols.T_IS_SMALLER_OR_EQUAL);
 }
        case 700: break;
        case 563: 
          { 
    return createSymbol(PHPAspectSymbols.T_METHOD_C);
 }
        case 701: break;
        case 549: 
          { 
    return createSymbol(PHPAspectSymbols.T_CLASS_C);
 }
        case 702: break;
        case 532: 
          { 
    return createSymbol(PHPAspectSymbols.T_LINE);
 }
        case 703: break;
        case 528: 
          { 
    return createSymbol(PHPAspectSymbols.T_FILE);
 }
        case 704: break;
        case 107: 
        case 218: 
          { 
    return createFullSymbol(PHPAspectSymbols.T_DNUMBER);
 }
        case 705: break;
        case 15: 
        case 19: 
          { 
    return createFullSymbol(PHPAspectSymbols.T_LNUMBER);
 }
        case 706: break;
        case 190: 
          { 
    return createFullSymbol(PHPAspectSymbols.T_VARIABLE);
 }
        case 707: break;
        case 227: 
          { 
    return createFullSymbol(PHPAspectSymbols.T_DNUMBER);
 }
        case 708: break;
        case 239: 
          { 
	return createFullSymbol(PHPAspectSymbols.T_EXIT);
 }
        case 709: break;
        case 306: 
          { 
	return createSymbol(PHPAspectSymbols.T_ECHO);
 }
        case 710: break;
        case 307: 
          { 
	return createSymbol(PHPAspectSymbols.T_ELSE);
 }
        case 711: break;
        case 309: 
          { 
	return createSymbol(PHPAspectSymbols.T_EVAL);
 }
        case 712: break;
        case 323: 
          { 
	return createSymbol(PHPAspectSymbols.T_FROM);
 }
        case 713: break;
        case 328: 
          { 
	return createSymbol(PHPAspectSymbols.T_CASE);
 }
        case 714: break;
        case 339: 
          { 
	return createSymbol(PHPAspectSymbols.T_LIST);
 }
        case 715: break;
        case 368: 
          { 
	return createSymbol(PHPAspectSymbols.T_ENDIF);
 }
        case 716: break;
        case 374: 
          { 
	return createSymbol(PHPAspectSymbols.T_EMPTY);
 }
        case 717: break;
        case 375: 
          { 
	return createSymbol(PHPAspectSymbols.T_BREAK);
 }
        case 718: break;
        case 379: 
          { 
	return createSymbol(PHPAspectSymbols.T_ISSET);
 }
        case 719: break;
        case 381: 
          { 
	return createSymbol(PHPAspectSymbols.T_THROW);
 }
        case 720: break;
        case 385: 
          { 
	return createSymbol(PHPAspectSymbols.T_FINAL);
 }
        case 721: break;
        case 388: 
          { 
	return createSymbol(PHPAspectSymbols.T_UNSET);
 }
        case 722: break;
        case 390: 
          { 
	return createSymbol(PHPAspectSymbols.T_CONST);
 }
        case 723: break;
        case 391: 
          { 
	return createSymbol(PHPAspectSymbols.T_CATCH);
 }
        case 724: break;
        case 392: 
          { 
	return createSymbol(PHPAspectSymbols.T_CLONE);
 }
        case 725: break;
        case 393: 
          { 
	return createSymbol(PHPAspectSymbols.T_CLASS);
 }
        case 726: break;
        case 400: 
          { 
	return createSymbol(PHPAspectSymbols.T_ARRAY);
 }
        case 727: break;
        case 401: 
          { 
	return createSymbol(PHPAspectSymbols.T_WHILE);
 }
        case 728: break;
        case 404: 
          { 
	return createSymbol(PHPAspectSymbols.T_PRINT);
 }
        case 729: break;
        case 429: 
        case 430: 
          { 
    yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
 }
        case 730: break;
        case 105: 
        case 595: 
          { 
    if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
    } else {
        return createSymbol(PHPAspectSymbols.T_INLINE_HTML);
    }
 }
        case 731: break;
        case 575: 
          { 
    return createSymbol(PHPAspectSymbols.T_FUNC_C);
 }
        case 732: break;
        case 154: 
          { 
	return createSymbol(PHPAspectSymbols.T_DEC);
 }
        case 733: break;
        case 147: 
          { 
	return createSymbol(PHPAspectSymbols.T_AS);
 }
        case 734: break;
        case 129: 
          { 
	return createSymbol(PHPAspectSymbols.T_DO);
 }
        case 735: break;
        case 121: 
          { 
	return createSymbol(PHPAspectSymbols.T_IF);
 }
        case 736: break;
        case 116: 
          { 
	return createSymbol(PHPAspectSymbols.T_INC);
 }
        case 737: break;
        case 157: 
          { 
	return createSymbol(PHPAspectSymbols.T_SR);
 }
        case 738: break;
        case 178: 
          { 
	return createSymbol(PHPAspectSymbols.T_SL);
 }
        case 739: break;
        case 235: 
          { 
	return createSymbol(PHPAspectSymbols.T_TRY);
 }
        case 740: break;
        case 242: 
          { 
	return createSymbol(PHPAspectSymbols.T_FOR);
 }
        case 741: break;
        case 245: 
          { 
	return createSymbol(PHPAspectSymbols.T_USE);
 }
        case 742: break;
        case 246: 
          { 
	return createSymbol(PHPAspectSymbols.T_NEW);
 }
        case 743: break;
        case 267: 
          { 
	return createSymbol(PHPAspectSymbols.T_VAR);
 }
        case 744: break;
        case 495: 
          { 
	return createSymbol(PHPAspectSymbols.T_PRIVATE);
 }
        case 745: break;
        case 492: 
          { 
	return createSymbol(PHPAspectSymbols.T_REQUIRE);
 }
        case 746: break;
        case 490: 
          { 
	return createSymbol(PHPAspectSymbols.T_FOREACH);
 }
        case 747: break;
        case 488: 
          { 
	return createSymbol(PHPAspectSymbols.T_DECLARE);
 }
        case 748: break;
        case 487: 
          { 
	return createSymbol(PHPAspectSymbols.T_DEFAULT);
 }
        case 749: break;
        case 484: 
          { 
	return createSymbol(PHPAspectSymbols.T_INCLUDE);
 }
        case 750: break;
        case 478: 
          { 
	return createSymbol(PHPAspectSymbols.T_EXTENDS);
 }
        case 751: break;
        case 468: 
          { 
	return createSymbol(PHPAspectSymbols.T_GLOBAL);
 }
        case 752: break;
        case 455: 
          { 
	return createSymbol(PHPAspectSymbols.T_PUBLIC);
 }
        case 753: break;
        case 453: 
          { 
	return createSymbol(PHPAspectSymbols.T_ASPECT);
 }
        case 754: break;
        case 450: 
          { 
	return createSymbol(PHPAspectSymbols.T_RETURN);
 }
        case 755: break;
        case 449: 
          { 
	return createSymbol(PHPAspectSymbols.T_SWITCH);
 }
        case 756: break;
        case 448: 
          { 
	return createSymbol(PHPAspectSymbols.T_STATIC);
 }
        case 757: break;
        case 437: 
          { 
	return createSymbol(PHPAspectSymbols.T_ELSEIF);
 }
        case 758: break;
        case 434: 
          { 
	return createSymbol(PHPAspectSymbols.T_ENDFOR);
 }
        case 759: break;
        case 203: 
        case 296: 
          { 
    return createSymbol(PHPAspectSymbols.T_CHARACTER);
 }
        case 760: break;
        case 205: 
          { 
	return createSymbol(PHPAspectSymbols.T_STRING);
 }
        case 761: break;
        case 206: 
          { 
    return createSymbol(PHPAspectSymbols.T_CHARACTER);
 }
        case 762: break;
        case 297: 
          { 
    return createSymbol(PHPAspectSymbols.T_CHARACTER);
 }
        case 763: break;
        case 65: 
          { 
	/* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(PHPAspectSymbols.T_CURLY_CLOSE);
 }
        case 764: break;
        case 88: 
          { 
    return createFullSymbol(PHPAspectSymbols.T_STRING);
 }
        case 765: break;
        case 17: 
        case 20: 
        case 21: 
        case 22: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 42: 
        case 44: 
        case 46: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 119: 
        case 120: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 126: 
        case 127: 
        case 128: 
        case 130: 
        case 131: 
        case 132: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 146: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 160: 
        case 171: 
        case 172: 
        case 220: 
        case 221: 
        case 222: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 229: 
        case 230: 
        case 231: 
        case 232: 
        case 233: 
        case 234: 
        case 236: 
        case 237: 
        case 238: 
        case 240: 
        case 241: 
        case 243: 
        case 244: 
        case 247: 
        case 248: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 253: 
        case 254: 
        case 255: 
        case 256: 
        case 258: 
        case 259: 
        case 260: 
        case 261: 
        case 262: 
        case 263: 
        case 264: 
        case 265: 
        case 277: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 300: 
        case 301: 
        case 302: 
        case 303: 
        case 304: 
        case 305: 
        case 308: 
        case 310: 
        case 311: 
        case 312: 
        case 313: 
        case 314: 
        case 315: 
        case 316: 
        case 317: 
        case 318: 
        case 319: 
        case 320: 
        case 321: 
        case 322: 
        case 324: 
        case 325: 
        case 326: 
        case 327: 
        case 329: 
        case 330: 
        case 331: 
        case 332: 
        case 333: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 340: 
        case 341: 
        case 342: 
        case 343: 
        case 344: 
        case 354: 
        case 355: 
        case 356: 
        case 357: 
        case 358: 
        case 359: 
        case 360: 
        case 367: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 376: 
        case 377: 
        case 378: 
        case 380: 
        case 382: 
        case 383: 
        case 384: 
        case 386: 
        case 387: 
        case 389: 
        case 394: 
        case 395: 
        case 396: 
        case 397: 
        case 398: 
        case 399: 
        case 402: 
        case 403: 
        case 405: 
        case 406: 
        case 418: 
        case 419: 
        case 420: 
        case 421: 
        case 422: 
        case 423: 
        case 424: 
        case 432: 
        case 433: 
        case 435: 
        case 436: 
        case 438: 
        case 439: 
        case 440: 
        case 441: 
        case 443: 
        case 444: 
        case 445: 
        case 446: 
        case 447: 
        case 451: 
        case 452: 
        case 454: 
        case 456: 
        case 457: 
        case 469: 
        case 470: 
        case 471: 
        case 472: 
        case 473: 
        case 474: 
        case 479: 
        case 480: 
        case 481: 
        case 482: 
        case 483: 
        case 485: 
        case 486: 
        case 489: 
        case 491: 
        case 493: 
        case 494: 
        case 496: 
        case 503: 
        case 504: 
        case 505: 
        case 506: 
        case 507: 
        case 508: 
        case 512: 
        case 513: 
        case 514: 
        case 516: 
        case 517: 
        case 518: 
        case 519: 
        case 522: 
        case 524: 
        case 525: 
        case 529: 
        case 530: 
        case 531: 
        case 533: 
        case 538: 
        case 539: 
        case 542: 
        case 543: 
        case 544: 
        case 545: 
        case 546: 
        case 548: 
        case 550: 
        case 551: 
        case 556: 
        case 559: 
        case 561: 
        case 562: 
        case 566: 
        case 567: 
        case 568: 
        case 569: 
        case 576: 
        case 579: 
        case 581: 
          { 
    return createFullSymbol(PHPAspectSymbols.T_STRING);
 }
        case 766: break;
        case 425: 
        case 426: 
          { 
    heredoc = yytext().substring(3).trim();    // for '<<<'
    yybegin(ST_HEREDOC);
    return createSymbol(PHPAspectSymbols.T_START_HEREDOC);
 }
        case 767: break;
        case 442: 
          { 
    /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(PHPAspectSymbols.T_DEFINE);
 }
        case 768: break;
        case 155: 
        case 198: 
          { 
    pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(PHPAspectSymbols.T_OBJECT_OPERATOR);
 }
        case 769: break;
        case 104: 
          { 
    if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
		//return T_OPEN_TAG;
    } else {
        return createSymbol(PHPAspectSymbols.T_INLINE_HTML);
    }
 }
        case 770: break;
        case 76: 
          { 
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(PHPAspectSymbols.T_QUATE);
 }
        case 771: break;
        case 182: 
          { 
	handleCommentStart();
    yybegin(ST_COMMENT);
 }
        case 772: break;
        case 183: 
        case 291: 
        case 292: 
          { 
    if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(PHPAspectSymbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(PHPAspectSymbols.T_INLINE_HTML);
    }
 }
        case 773: break;
        case 201: 
          { 
    pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(PHPAspectSymbols.T_CURLY_OPEN_WITH_DOLAR);
 }
        case 774: break;
        case 208: 
        case 209: 
          { 
    String text = yytext();
    int length = text.length();
    text = text.trim();
    boolean foundNP = false;
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        foundNP = true;
    }
    if (text.equals(heredoc)) {
        if (foundNP) {
            yypushback(length - text.length());
        }
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(PHPAspectSymbols.T_END_HEREDOC);
    } else {
        return createFullSymbol(PHPAspectSymbols.T_STRING);
    }
 }
        case 775: break;
        case 212: 
          { 
     handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
 }
        case 776: break;
        case 96: 
          { 
 }
        case 777: break;
        case 95: 
        case 97: 
          { 
 }
        case 778: break;
        case 93: 
          { 
 }
        case 779: break;
        case 23: 
          { 
 }
        case 780: break;
        case 199: 
          { 
    if (yylength() == 2) {
        yypushback(1);
    }
    return createSymbol(PHPAspectSymbols.T_CHARACTER);
 }
        case 781: break;
        case 202: 
        case 204: 
          { 
    switch (yytext().charAt(1)) {
        case 'n':
            break;
        case 't':
            break;
        case 'r':
            break;
        case '\\':
            break;
        case '$':
            break;
        default:
            return createSymbol(PHPAspectSymbols.T_BAD_CHARACTER);
    }
    return createSymbol(PHPAspectSymbols.T_CHARACTER);
 }
        case 782: break;
        case 211: 
          { 
	handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
 }
        case 783: break;
        case 289: 
          { 
handleCommentStart();
yybegin(ST_DOCBLOCK);
 }
        case 784: break;
        case 98: 
        case 99: 
        case 100: 
          { 
	String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
 }
        case 785: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, i.e. it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PHPAspectLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        PHPAspectLexer scanner = null;
        try {
          scanner = new PHPAspectLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.yy_atEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
